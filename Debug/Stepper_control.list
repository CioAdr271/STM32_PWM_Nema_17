
Stepper_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b220  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800b4c0  0800b4c0  0000c4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b574  0800b574  0000c574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b57c  0800b57c  0000c57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b580  0800b580  0000c580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800b584  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800b5e8  0000d064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800b648  0000d0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052c4  24000124  0800b6a8  0000d124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240053e8  0800b6a8  0000d3e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a632  00000000  00000000  0000d152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048dd  00000000  00000000  00037784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da0  00000000  00000000  0003c068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001714  00000000  00000000  0003de08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005482  00000000  00000000  0003f51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025b1f  00000000  00000000  0004499e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017761a  00000000  00000000  0006a4bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e1ad7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008258  00000000  00000000  001e1b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001e9d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b4a8 	.word	0x0800b4a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800b4a8 	.word	0x0800b4a8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f001 f92a 	bl	800182c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f834 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 fa4a 	bl	8000a74 <MX_GPIO_Init>
  MX_ETH_Init();
 80005e0:	f000 f8ac 	bl	800073c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005e4:	f000 f9c8 	bl	8000978 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e8:	f000 fa12 	bl	8000a10 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80005ec:	f000 f94c 	bl	8000888 <MX_TIM3_Init>
  MX_TIM1_Init();
 80005f0:	f000 f8f0 	bl	80007d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80005f4:	213c      	movs	r1, #60	@ 0x3c
 80005f6:	480c      	ldr	r0, [pc, #48]	@ (8000628 <main+0x58>)
 80005f8:	f005 fbe0 	bl	8005dbc <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005fc:	f008 f8bc 	bl	8008778 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000600:	4a0a      	ldr	r2, [pc, #40]	@ (800062c <main+0x5c>)
 8000602:	2100      	movs	r1, #0
 8000604:	480a      	ldr	r0, [pc, #40]	@ (8000630 <main+0x60>)
 8000606:	f008 f901 	bl	800880c <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a09      	ldr	r2, [pc, #36]	@ (8000634 <main+0x64>)
 800060e:	6013      	str	r3, [r2, #0]

  /* creation of motor_control */
  motor_controlHandle = osThreadNew(StartTask02, NULL, &motor_control_attributes);
 8000610:	4a09      	ldr	r2, [pc, #36]	@ (8000638 <main+0x68>)
 8000612:	2100      	movs	r1, #0
 8000614:	4809      	ldr	r0, [pc, #36]	@ (800063c <main+0x6c>)
 8000616:	f008 f8f9 	bl	800880c <osThreadNew>
 800061a:	4603      	mov	r3, r0
 800061c:	4a08      	ldr	r2, [pc, #32]	@ (8000640 <main+0x70>)
 800061e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000620:	f008 f8ce 	bl	80087c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <main+0x54>
 8000628:	24000228 	.word	0x24000228
 800062c:	0800b4f4 	.word	0x0800b4f4
 8000630:	08000c55 	.word	0x08000c55
 8000634:	24000838 	.word	0x24000838
 8000638:	0800b518 	.word	0x0800b518
 800063c:	08000cad 	.word	0x08000cad
 8000640:	2400083c 	.word	0x2400083c

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b09c      	sub	sp, #112	@ 0x70
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800064e:	224c      	movs	r2, #76	@ 0x4c
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f00a fe40 	bl	800b2d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2220      	movs	r2, #32
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f00a fe3a 	bl	800b2d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000664:	2002      	movs	r0, #2
 8000666:	f002 f98f 	bl	8002988 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800066a:	2300      	movs	r3, #0
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	4b31      	ldr	r3, [pc, #196]	@ (8000734 <SystemClock_Config+0xf0>)
 8000670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000672:	4a30      	ldr	r2, [pc, #192]	@ (8000734 <SystemClock_Config+0xf0>)
 8000674:	f023 0301 	bic.w	r3, r3, #1
 8000678:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800067a:	4b2e      	ldr	r3, [pc, #184]	@ (8000734 <SystemClock_Config+0xf0>)
 800067c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <SystemClock_Config+0xf4>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800068c:	4a2a      	ldr	r2, [pc, #168]	@ (8000738 <SystemClock_Config+0xf4>)
 800068e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <SystemClock_Config+0xf4>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a0:	bf00      	nop
 80006a2:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <SystemClock_Config+0xf4>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006ae:	d1f8      	bne.n	80006a2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	2302      	movs	r3, #2
 80006c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 75;
 80006c6:	234b      	movs	r3, #75	@ 0x4b
 80006c8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 80006ce:	230a      	movs	r3, #10
 80006d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006d6:	230c      	movs	r3, #12
 80006d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006da:	2300      	movs	r3, #0
 80006dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 f998 	bl	8002a1c <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006f2:	f000 fb13 	bl	8000d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	233f      	movs	r3, #63	@ 0x3f
 80006f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2303      	movs	r3, #3
 80006fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000702:	2308      	movs	r3, #8
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000706:	2340      	movs	r3, #64	@ 0x40
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800070a:	2340      	movs	r3, #64	@ 0x40
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800070e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000714:	2340      	movs	r3, #64	@ 0x40
 8000716:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2102      	movs	r1, #2
 800071c:	4618      	mov	r0, r3
 800071e:	f002 fdd7 	bl	80032d0 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000728:	f000 faf8 	bl	8000d1c <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3770      	adds	r7, #112	@ 0x70
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	58000400 	.word	0x58000400
 8000738:	58024800 	.word	0x58024800

0800073c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000740:	4b1e      	ldr	r3, [pc, #120]	@ (80007bc <MX_ETH_Init+0x80>)
 8000742:	4a1f      	ldr	r2, [pc, #124]	@ (80007c0 <MX_ETH_Init+0x84>)
 8000744:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000746:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <MX_ETH_Init+0x88>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800074c:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <MX_ETH_Init+0x88>)
 800074e:	2280      	movs	r2, #128	@ 0x80
 8000750:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000752:	4b1c      	ldr	r3, [pc, #112]	@ (80007c4 <MX_ETH_Init+0x88>)
 8000754:	22e1      	movs	r2, #225	@ 0xe1
 8000756:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000758:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <MX_ETH_Init+0x88>)
 800075a:	2200      	movs	r2, #0
 800075c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800075e:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <MX_ETH_Init+0x88>)
 8000760:	2200      	movs	r2, #0
 8000762:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000764:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <MX_ETH_Init+0x88>)
 8000766:	2200      	movs	r2, #0
 8000768:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800076a:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_ETH_Init+0x80>)
 800076c:	4a15      	ldr	r2, [pc, #84]	@ (80007c4 <MX_ETH_Init+0x88>)
 800076e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_ETH_Init+0x80>)
 8000772:	2201      	movs	r2, #1
 8000774:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_ETH_Init+0x80>)
 8000778:	4a13      	ldr	r2, [pc, #76]	@ (80007c8 <MX_ETH_Init+0x8c>)
 800077a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_ETH_Init+0x80>)
 800077e:	4a13      	ldr	r2, [pc, #76]	@ (80007cc <MX_ETH_Init+0x90>)
 8000780:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_ETH_Init+0x80>)
 8000784:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000788:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800078a:	480c      	ldr	r0, [pc, #48]	@ (80007bc <MX_ETH_Init+0x80>)
 800078c:	f001 f9ce 	bl	8001b2c <HAL_ETH_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000796:	f000 fac1 	bl	8000d1c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800079a:	2238      	movs	r2, #56	@ 0x38
 800079c:	2100      	movs	r1, #0
 800079e:	480c      	ldr	r0, [pc, #48]	@ (80007d0 <MX_ETH_Init+0x94>)
 80007a0:	f00a fd9a 	bl	800b2d8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <MX_ETH_Init+0x94>)
 80007a6:	2221      	movs	r2, #33	@ 0x21
 80007a8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_ETH_Init+0x94>)
 80007ac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007b0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007b2:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <MX_ETH_Init+0x94>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	24000178 	.word	0x24000178
 80007c0:	40028000 	.word	0x40028000
 80007c4:	24000860 	.word	0x24000860
 80007c8:	240000c4 	.word	0x240000c4
 80007cc:	24000064 	.word	0x24000064
 80007d0:	24000140 	.word	0x24000140

080007d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	@ 0x30
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2224      	movs	r2, #36	@ 0x24
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f00a fd78 	bl	800b2d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007f2:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <MX_TIM1_Init+0xac>)
 80007f4:	4a23      	ldr	r2, [pc, #140]	@ (8000884 <MX_TIM1_Init+0xb0>)
 80007f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007f8:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_TIM1_Init+0xac>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fe:	4b20      	ldr	r3, [pc, #128]	@ (8000880 <MX_TIM1_Init+0xac>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000804:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_TIM1_Init+0xac>)
 8000806:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800080a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080c:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_TIM1_Init+0xac>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_TIM1_Init+0xac>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000818:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_TIM1_Init+0xac>)
 800081a:	2280      	movs	r2, #128	@ 0x80
 800081c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800081e:	2303      	movs	r3, #3
 8000820:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000826:	2301      	movs	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 800082e:	2305      	movs	r3, #5
 8000830:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000836:	2301      	movs	r3, #1
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 800083e:	2305      	movs	r3, #5
 8000840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	480d      	ldr	r0, [pc, #52]	@ (8000880 <MX_TIM1_Init+0xac>)
 800084a:	f005 fa11 	bl	8005c70 <HAL_TIM_Encoder_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000854:	f000 fa62 	bl	8000d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_TIM1_Init+0xac>)
 800086a:	f006 fab1 	bl	8006dd0 <HAL_TIMEx_MasterConfigSynchronization>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000874:	f000 fa52 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	3730      	adds	r7, #48	@ 0x30
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	24000228 	.word	0x24000228
 8000884:	40010000 	.word	0x40010000

08000888 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08e      	sub	sp, #56	@ 0x38
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a8:	463b      	mov	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
 80008b6:	615a      	str	r2, [r3, #20]
 80008b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000970 <MX_TIM3_Init+0xe8>)
 80008bc:	4a2d      	ldr	r2, [pc, #180]	@ (8000974 <MX_TIM3_Init+0xec>)
 80008be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 150-1;
 80008c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000970 <MX_TIM3_Init+0xe8>)
 80008c2:	2295      	movs	r2, #149	@ 0x95
 80008c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000970 <MX_TIM3_Init+0xe8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 80008cc:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <MX_TIM3_Init+0xe8>)
 80008ce:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80008d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d4:	4b26      	ldr	r3, [pc, #152]	@ (8000970 <MX_TIM3_Init+0xe8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008da:	4b25      	ldr	r3, [pc, #148]	@ (8000970 <MX_TIM3_Init+0xe8>)
 80008dc:	2280      	movs	r2, #128	@ 0x80
 80008de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008e0:	4823      	ldr	r0, [pc, #140]	@ (8000970 <MX_TIM3_Init+0xe8>)
 80008e2:	f004 feef 	bl	80056c4 <HAL_TIM_Base_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80008ec:	f000 fa16 	bl	8000d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008fa:	4619      	mov	r1, r3
 80008fc:	481c      	ldr	r0, [pc, #112]	@ (8000970 <MX_TIM3_Init+0xe8>)
 80008fe:	f005 fd07 	bl	8006310 <HAL_TIM_ConfigClockSource>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000908:	f000 fa08 	bl	8000d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800090c:	4818      	ldr	r0, [pc, #96]	@ (8000970 <MX_TIM3_Init+0xe8>)
 800090e:	f004 ffa9 	bl	8005864 <HAL_TIM_PWM_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000918:	f000 fa00 	bl	8000d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4811      	ldr	r0, [pc, #68]	@ (8000970 <MX_TIM3_Init+0xe8>)
 800092c:	f006 fa50 	bl	8006dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000936:	f000 f9f1 	bl	8000d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093a:	2360      	movs	r3, #96	@ 0x60
 800093c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 200;
 800093e:	23c8      	movs	r3, #200	@ 0xc8
 8000940:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	4619      	mov	r1, r3
 8000950:	4807      	ldr	r0, [pc, #28]	@ (8000970 <MX_TIM3_Init+0xe8>)
 8000952:	f005 fbc9 	bl	80060e8 <HAL_TIM_PWM_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800095c:	f000 f9de 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000960:	4803      	ldr	r0, [pc, #12]	@ (8000970 <MX_TIM3_Init+0xe8>)
 8000962:	f000 fcd9 	bl	8001318 <HAL_TIM_MspPostInit>

}
 8000966:	bf00      	nop
 8000968:	3738      	adds	r7, #56	@ 0x38
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	24000274 	.word	0x24000274
 8000974:	40000400 	.word	0x40000400

08000978 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800097c:	4b22      	ldr	r3, [pc, #136]	@ (8000a08 <MX_USART3_UART_Init+0x90>)
 800097e:	4a23      	ldr	r2, [pc, #140]	@ (8000a0c <MX_USART3_UART_Init+0x94>)
 8000980:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000982:	4b21      	ldr	r3, [pc, #132]	@ (8000a08 <MX_USART3_UART_Init+0x90>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <MX_USART3_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b1d      	ldr	r3, [pc, #116]	@ (8000a08 <MX_USART3_UART_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000996:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <MX_USART3_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <MX_USART3_UART_Init+0x90>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <MX_USART3_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <MX_USART3_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <MX_USART3_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b4:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <MX_USART3_UART_Init+0x90>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ba:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <MX_USART3_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c0:	4811      	ldr	r0, [pc, #68]	@ (8000a08 <MX_USART3_UART_Init+0x90>)
 80009c2:	f006 fab1 	bl	8006f28 <HAL_UART_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009cc:	f000 f9a6 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d0:	2100      	movs	r1, #0
 80009d2:	480d      	ldr	r0, [pc, #52]	@ (8000a08 <MX_USART3_UART_Init+0x90>)
 80009d4:	f007 fab9 	bl	8007f4a <HAL_UARTEx_SetTxFifoThreshold>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009de:	f000 f99d 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4808      	ldr	r0, [pc, #32]	@ (8000a08 <MX_USART3_UART_Init+0x90>)
 80009e6:	f007 faee 	bl	8007fc6 <HAL_UARTEx_SetRxFifoThreshold>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009f0:	f000 f994 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	@ (8000a08 <MX_USART3_UART_Init+0x90>)
 80009f6:	f007 fa6f 	bl	8007ed8 <HAL_UARTEx_DisableFifoMode>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a00:	f000 f98c 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	240002c0 	.word	0x240002c0
 8000a0c:	40004800 	.word	0x40004800

08000a10 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a14:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a16:	4a16      	ldr	r2, [pc, #88]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a18:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a1c:	2209      	movs	r2, #9
 8000a1e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2e:	2202      	movs	r2, #2
 8000a30:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a58:	f001 fe65 	bl	8002726 <HAL_PCD_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a62:	f000 f95b 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	24000354 	.word	0x24000354
 8000a70:	40080000 	.word	0x40080000

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	@ 0x30
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	4b6b      	ldr	r3, [pc, #428]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a90:	4a69      	ldr	r2, [pc, #420]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a9a:	4b67      	ldr	r3, [pc, #412]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	61bb      	str	r3, [r7, #24]
 8000aa6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa8:	4b63      	ldr	r3, [pc, #396]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aae:	4a62      	ldr	r2, [pc, #392]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab8:	4b5f      	ldr	r3, [pc, #380]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b5c      	ldr	r3, [pc, #368]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000acc:	4a5a      	ldr	r2, [pc, #360]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad6:	4b58      	ldr	r3, [pc, #352]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae4:	4b54      	ldr	r3, [pc, #336]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aea:	4a53      	ldr	r2, [pc, #332]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af4:	4b50      	ldr	r3, [pc, #320]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b02:	4b4d      	ldr	r3, [pc, #308]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b08:	4a4b      	ldr	r2, [pc, #300]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b12:	4b49      	ldr	r3, [pc, #292]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b18:	f003 0310 	and.w	r3, r3, #16
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b20:	4b45      	ldr	r3, [pc, #276]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b26:	4a44      	ldr	r2, [pc, #272]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b30:	4b41      	ldr	r3, [pc, #260]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b36:	f003 0308 	and.w	r3, r3, #8
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b44:	4a3c      	ldr	r2, [pc, #240]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c38 <MX_GPIO_Init+0x1c4>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2120      	movs	r1, #32
 8000b60:	4836      	ldr	r0, [pc, #216]	@ (8000c3c <MX_GPIO_Init+0x1c8>)
 8000b62:	f001 fdc7 	bl	80026f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b6c:	4834      	ldr	r0, [pc, #208]	@ (8000c40 <MX_GPIO_Init+0x1cc>)
 8000b6e:	f001 fdc1 	bl	80026f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b78:	4832      	ldr	r0, [pc, #200]	@ (8000c44 <MX_GPIO_Init+0x1d0>)
 8000b7a:	f001 fdbb 	bl	80026f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2102      	movs	r1, #2
 8000b82:	4831      	ldr	r0, [pc, #196]	@ (8000c48 <MX_GPIO_Init+0x1d4>)
 8000b84:	f001 fdb6 	bl	80026f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	482b      	ldr	r0, [pc, #172]	@ (8000c4c <MX_GPIO_Init+0x1d8>)
 8000b9e:	f001 fbf9 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ba2:	2320      	movs	r3, #32
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4820      	ldr	r0, [pc, #128]	@ (8000c3c <MX_GPIO_Init+0x1c8>)
 8000bba:	f001 fbeb 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bbe:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	481a      	ldr	r0, [pc, #104]	@ (8000c40 <MX_GPIO_Init+0x1cc>)
 8000bd8:	f001 fbdc 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000bdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4813      	ldr	r0, [pc, #76]	@ (8000c44 <MX_GPIO_Init+0x1d0>)
 8000bf6:	f001 fbcd 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000bfa:	2380      	movs	r3, #128	@ 0x80
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4810      	ldr	r0, [pc, #64]	@ (8000c50 <MX_GPIO_Init+0x1dc>)
 8000c10:	f001 fbc0 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4807      	ldr	r0, [pc, #28]	@ (8000c48 <MX_GPIO_Init+0x1d4>)
 8000c2c:	f001 fbb2 	bl	8002394 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c30:	bf00      	nop
 8000c32:	3730      	adds	r7, #48	@ 0x30
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	58024400 	.word	0x58024400
 8000c3c:	58020000 	.word	0x58020000
 8000c40:	58020400 	.word	0x58020400
 8000c44:	58020c00 	.word	0x58020c00
 8000c48:	58021000 	.word	0x58021000
 8000c4c:	58020800 	.word	0x58020800
 8000c50:	58021800 	.word	0x58021800

08000c54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	timer_counter = __HAL_TIM_GET_COUNTER(&htim1);
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <StartDefaultTask+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c62:	461a      	mov	r2, r3
 8000c64:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <StartDefaultTask+0x44>)
 8000c66:	601a      	str	r2, [r3, #0]
	update_encoder(&enc_instance, &htim1);
 8000c68:	490a      	ldr	r1, [pc, #40]	@ (8000c94 <StartDefaultTask+0x40>)
 8000c6a:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <StartDefaultTask+0x48>)
 8000c6c:	f000 f940 	bl	8000ef0 <update_encoder>
	encoder_position = enc_instance.position;
 8000c70:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <StartDefaultTask+0x48>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <StartDefaultTask+0x4c>)
 8000c76:	6013      	str	r3, [r2, #0]
	encoder_velocity = enc_instance.velocity;
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <StartDefaultTask+0x48>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a09      	ldr	r2, [pc, #36]	@ (8000ca4 <StartDefaultTask+0x50>)
 8000c7e:	6013      	str	r3, [r2, #0]
	rpm = enc_instance.rpm;
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <StartDefaultTask+0x48>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	4a08      	ldr	r2, [pc, #32]	@ (8000ca8 <StartDefaultTask+0x54>)
 8000c86:	6013      	str	r3, [r2, #0]
    osDelay(1);
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f007 fe51 	bl	8008930 <osDelay>
	timer_counter = __HAL_TIM_GET_COUNTER(&htim1);
 8000c8e:	bf00      	nop
 8000c90:	e7e4      	b.n	8000c5c <StartDefaultTask+0x8>
 8000c92:	bf00      	nop
 8000c94:	24000228 	.word	0x24000228
 8000c98:	24000858 	.word	0x24000858
 8000c9c:	24000840 	.word	0x24000840
 8000ca0:	24000854 	.word	0x24000854
 8000ca4:	24000850 	.word	0x24000850
 8000ca8:	2400085c 	.word	0x2400085c

08000cac <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  set_direction(DIRECTION_LEFT);
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f000 f8ff 	bl	8000eb8 <set_direction>
	  //max 700
	  accelerate_RPM(440);
 8000cba:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 8000cbe:	f000 f833 	bl	8000d28 <accelerate_RPM>
	  osDelay(3000);
 8000cc2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000cc6:	f007 fe33 	bl	8008930 <osDelay>

	  decelerate_to_RPM(0);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f000 f890 	bl	8000df0 <decelerate_to_RPM>
	  osDelay(3000);
 8000cd0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000cd4:	f007 fe2c 	bl	8008930 <osDelay>

	  set_direction(DIRECTION_RIGHT);
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f000 f8ed 	bl	8000eb8 <set_direction>
	  accelerate_RPM(160);
 8000cde:	20a0      	movs	r0, #160	@ 0xa0
 8000ce0:	f000 f822 	bl	8000d28 <accelerate_RPM>
	  osDelay(3000);
 8000ce4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000ce8:	f007 fe22 	bl	8008930 <osDelay>

	  decelerate_to_RPM(0);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f000 f87f 	bl	8000df0 <decelerate_to_RPM>
	  osDelay(3000);
 8000cf2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000cf6:	f007 fe1b 	bl	8008930 <osDelay>
	  set_direction(DIRECTION_LEFT);
 8000cfa:	bf00      	nop
 8000cfc:	e7da      	b.n	8000cb4 <StartTask02+0x8>

08000cfe <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d0e:	d101      	bne.n	8000d14 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d10:	f000 fdc8 	bl	80018a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <Error_Handler+0x8>

08000d28 <accelerate_RPM>:
#include "stm32h7xx_hal.h"
#include "string.h"

extern TIM_HandleTypeDef htim3;

void accelerate_RPM(int target_speed_RPM) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

	//Porneste generarea de semnal PWM
	int target_frequency = (target_speed_RPM / 60.0) * 200;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	ee07 3a90 	vmov	s15, r3
 8000d36:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d3a:	ed9f 5b27 	vldr	d5, [pc, #156]	@ 8000dd8 <accelerate_RPM+0xb0>
 8000d3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d42:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 8000de0 <accelerate_RPM+0xb8>
 8000d46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d4a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d4e:	ee17 3a90 	vmov	r3, s15
 8000d52:	60fb      	str	r3, [r7, #12]
	int current_frequency  = 1000000 / (__HAL_TIM_GET_AUTORELOAD(&htim3)) +1;
 8000d54:	4b24      	ldr	r3, [pc, #144]	@ (8000de8 <accelerate_RPM+0xc0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d5a:	4a24      	ldr	r2, [pc, #144]	@ (8000dec <accelerate_RPM+0xc4>)
 8000d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d60:	3301      	adds	r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]

	if(target_frequency > MAX_FREQUENCY){
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8000d6a:	dd03      	ble.n	8000d74 <accelerate_RPM+0x4c>
		target_frequency = MAX_FREQUENCY;
 8000d6c:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	e004      	b.n	8000d7e <accelerate_RPM+0x56>
	}
	else if(target_frequency < MIN_FREQUENCY){
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b63      	cmp	r3, #99	@ 0x63
 8000d78:	dc01      	bgt.n	8000d7e <accelerate_RPM+0x56>
		target_frequency = MIN_FREQUENCY;
 8000d7a:	2364      	movs	r3, #100	@ 0x64
 8000d7c:	60fb      	str	r3, [r7, #12]
	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4819      	ldr	r0, [pc, #100]	@ (8000de8 <accelerate_RPM+0xc0>)
 8000d82:	f004 fdd1 	bl	8005928 <HAL_TIM_PWM_Start>


	while (current_frequency < target_frequency) {
 8000d86:	e01b      	b.n	8000dc0 <accelerate_RPM+0x98>

		current_frequency += ACCELERATION_STEP;
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	3305      	adds	r3, #5
 8000d8c:	60bb      	str	r3, [r7, #8]

		if (current_frequency > target_frequency) {
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	dd01      	ble.n	8000d9a <accelerate_RPM+0x72>
			current_frequency = target_frequency;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
		}

		//Actualizeaza ARR cu noua valoare (1000000 este frecventa ceasului folosita pentru pwm -64mhz cu prescalar de 64)
		__HAL_TIM_SET_AUTORELOAD(&htim3, (1000000 / current_frequency) - 1);
 8000d9a:	4a14      	ldr	r2, [pc, #80]	@ (8000dec <accelerate_RPM+0xc4>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000da2:	1e5a      	subs	r2, r3, #1
 8000da4:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <accelerate_RPM+0xc0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000daa:	4a10      	ldr	r2, [pc, #64]	@ (8000dec <accelerate_RPM+0xc4>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	fb92 f3f3 	sdiv	r3, r2, r3
 8000db2:	3b01      	subs	r3, #1
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <accelerate_RPM+0xc0>)
 8000db8:	60da      	str	r2, [r3, #12]
		HAL_Delay(10);
 8000dba:	200a      	movs	r0, #10
 8000dbc:	f000 fd92 	bl	80018e4 <HAL_Delay>
	while (current_frequency < target_frequency) {
 8000dc0:	68ba      	ldr	r2, [r7, #8]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dbdf      	blt.n	8000d88 <accelerate_RPM+0x60>
	}
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	f3af 8000 	nop.w
 8000dd8:	00000000 	.word	0x00000000
 8000ddc:	404e0000 	.word	0x404e0000
 8000de0:	00000000 	.word	0x00000000
 8000de4:	40690000 	.word	0x40690000
 8000de8:	24000274 	.word	0x24000274
 8000dec:	000f4240 	.word	0x000f4240

08000df0 <decelerate_to_RPM>:

void decelerate_to_RPM(int target_speed_RPM) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	int target_frequency = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
	int current_frequency  = 1000000 / (__HAL_TIM_GET_AUTORELOAD(&htim3)) +1;
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb0 <decelerate_to_RPM+0xc0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e02:	4a2c      	ldr	r2, [pc, #176]	@ (8000eb4 <decelerate_to_RPM+0xc4>)
 8000e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e08:	3301      	adds	r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]

	if (target_speed_RPM == 0) {
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d102      	bne.n	8000e18 <decelerate_to_RPM+0x28>
		target_frequency = MIN_FREQUENCY;
 8000e12:	2364      	movs	r3, #100	@ 0x64
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	e02e      	b.n	8000e76 <decelerate_to_RPM+0x86>
	} else {
		target_frequency = (target_speed_RPM / 60.0) * 200;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	ee07 3a90 	vmov	s15, r3
 8000e1e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e22:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 8000ea0 <decelerate_to_RPM+0xb0>
 8000e26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e2a:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8000ea8 <decelerate_to_RPM+0xb8>
 8000e2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e32:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e36:	ee17 3a90 	vmov	r3, s15
 8000e3a:	60fb      	str	r3, [r7, #12]
	}

	while (current_frequency > target_frequency) {
 8000e3c:	e01b      	b.n	8000e76 <decelerate_to_RPM+0x86>

		current_frequency -= DECELERATION_STEP;
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	3b05      	subs	r3, #5
 8000e42:	60bb      	str	r3, [r7, #8]

		if (current_frequency < target_frequency) {
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	da01      	bge.n	8000e50 <decelerate_to_RPM+0x60>
			current_frequency = target_frequency;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	60bb      	str	r3, [r7, #8]
		}

		//Actualizeaza ARR cu noua valoare (1000000 este frecventa ceasului folosita pentru pwm -64mhz cu prescalar de 64)
		__HAL_TIM_SET_AUTORELOAD(&htim3, (1000000 / current_frequency) - 1);
 8000e50:	4a18      	ldr	r2, [pc, #96]	@ (8000eb4 <decelerate_to_RPM+0xc4>)
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e58:	1e5a      	subs	r2, r3, #1
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <decelerate_to_RPM+0xc0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e60:	4a14      	ldr	r2, [pc, #80]	@ (8000eb4 <decelerate_to_RPM+0xc4>)
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b10      	ldr	r3, [pc, #64]	@ (8000eb0 <decelerate_to_RPM+0xc0>)
 8000e6e:	60da      	str	r2, [r3, #12]
		HAL_Delay(10);
 8000e70:	200a      	movs	r0, #10
 8000e72:	f000 fd37 	bl	80018e4 <HAL_Delay>
	while (current_frequency > target_frequency) {
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	dcdf      	bgt.n	8000e3e <decelerate_to_RPM+0x4e>
	}

	if (target_speed_RPM == 0 && target_frequency == MIN_FREQUENCY) {
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d106      	bne.n	8000e92 <decelerate_to_RPM+0xa2>
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b64      	cmp	r3, #100	@ 0x64
 8000e88:	d103      	bne.n	8000e92 <decelerate_to_RPM+0xa2>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4808      	ldr	r0, [pc, #32]	@ (8000eb0 <decelerate_to_RPM+0xc0>)
 8000e8e:	f004 fe59 	bl	8005b44 <HAL_TIM_PWM_Stop>
	}
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	f3af 8000 	nop.w
 8000ea0:	00000000 	.word	0x00000000
 8000ea4:	404e0000 	.word	0x404e0000
 8000ea8:	00000000 	.word	0x00000000
 8000eac:	40690000 	.word	0x40690000
 8000eb0:	24000274 	.word	0x24000274
 8000eb4:	000f4240 	.word	0x000f4240

08000eb8 <set_direction>:

void set_direction(Direction direction) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
    if (direction == DIRECTION_LEFT) {
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d105      	bne.n	8000ed4 <set_direction+0x1c>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2120      	movs	r1, #32
 8000ecc:	4807      	ldr	r0, [pc, #28]	@ (8000eec <set_direction+0x34>)
 8000ece:	f001 fc11 	bl	80026f4 <HAL_GPIO_WritePin>
    } else if (direction == DIRECTION_RIGHT) {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
    }
}
 8000ed2:	e007      	b.n	8000ee4 <set_direction+0x2c>
    } else if (direction == DIRECTION_RIGHT) {
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d104      	bne.n	8000ee4 <set_direction+0x2c>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2120      	movs	r1, #32
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <set_direction+0x34>)
 8000ee0:	f001 fc08 	bl	80026f4 <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	58020000 	.word	0x58020000

08000ef0 <update_encoder>:


void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
    static int32_t last_time = 0;
    int32_t current_time = HAL_GetTick();
 8000efa:	f000 fce7 	bl	80018cc <HAL_GetTick>
 8000efe:	4603      	mov	r3, r0
 8000f00:	617b      	str	r3, [r7, #20]
    float dt = (current_time - last_time) / 1000.0f;
 8000f02:	4b44      	ldr	r3, [pc, #272]	@ (8001014 <update_encoder+0x124>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	ee07 3a90 	vmov	s15, r3
 8000f0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f12:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001018 <update_encoder+0x128>
 8000f16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f1a:	edc7 7a04 	vstr	s15, [r7, #16]

    last_time = current_time;
 8000f1e:	4a3d      	ldr	r2, [pc, #244]	@ (8001014 <update_encoder+0x124>)
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	6013      	str	r3, [r2, #0]


    int32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f2a:	60fb      	str	r3, [r7, #12]
    static int32_t first_time = 0;

    if (!first_time) {
 8000f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800101c <update_encoder+0x12c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10a      	bne.n	8000f4a <update_encoder+0x5a>
        encoder_value->velocity = 0;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
        encoder_value->rpm = 0;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
        first_time = 1;
 8000f42:	4b36      	ldr	r3, [pc, #216]	@ (800101c <update_encoder+0x12c>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	e040      	b.n	8000fcc <update_encoder+0xdc>
    } else {
        if (temp_counter == encoder_value->last_counter_value) {
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d103      	bne.n	8000f5c <update_encoder+0x6c>
            encoder_value->velocity = 0;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	e037      	b.n	8000fcc <update_encoder+0xdc>
        } else if (temp_counter > encoder_value->last_counter_value) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	dd19      	ble.n	8000f9a <update_encoder+0xaa>
            if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0310 	and.w	r3, r3, #16
 8000f70:	2b10      	cmp	r3, #16
 8000f72:	d10b      	bne.n	8000f8c <update_encoder+0x9c>
                encoder_value->velocity = -encoder_value->last_counter_value -
                                         (__HAL_TIM_GET_AUTORELOAD(htim) - temp_counter);
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f7c:	1ad3      	subs	r3, r2, r3
                encoder_value->velocity = -encoder_value->last_counter_value -
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	6892      	ldr	r2, [r2, #8]
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	461a      	mov	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	e01f      	b.n	8000fcc <update_encoder+0xdc>
            } else {
                encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	1ad2      	subs	r2, r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	e018      	b.n	8000fcc <update_encoder+0xdc>
            }
        } else {
            if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0310 	and.w	r3, r3, #16
 8000fa4:	2b10      	cmp	r3, #16
 8000fa6:	d106      	bne.n	8000fb6 <update_encoder+0xc6>
                encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	1ad2      	subs	r2, r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	e00a      	b.n	8000fcc <update_encoder+0xdc>
            } else {
                encoder_value->velocity = temp_counter +
                                         (__HAL_TIM_GET_AUTORELOAD(htim) - encoder_value->last_counter_value);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	6892      	ldr	r2, [r2, #8]
 8000fc0:	1a9a      	subs	r2, r3, r2
                encoder_value->velocity = temp_counter +
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	601a      	str	r2, [r3, #0]
            }
        }
    }

    encoder_value->position += encoder_value->velocity;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	441a      	add	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	605a      	str	r2, [r3, #4]
    encoder_value->last_counter_value = temp_counter;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	609a      	str	r2, [r3, #8]

    // Conversie în RPM
    encoder_value->rpm = (encoder_value->velocity / 4000.0f) * (60.0f / dt);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fec:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001020 <update_encoder+0x130>
 8000ff0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ff4:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8001024 <update_encoder+0x134>
 8000ff8:	edd7 6a04 	vldr	s13, [r7, #16]
 8000ffc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	24000868 	.word	0x24000868
 8001018:	447a0000 	.word	0x447a0000
 800101c:	2400086c 	.word	0x2400086c
 8001020:	457a0000 	.word	0x457a0000
 8001024:	42700000 	.word	0x42700000

08001028 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <HAL_MspInit+0x38>)
 8001030:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001034:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <HAL_MspInit+0x38>)
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800103e:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <HAL_MspInit+0x38>)
 8001040:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	210f      	movs	r1, #15
 8001050:	f06f 0001 	mvn.w	r0, #1
 8001054:	f000 fd42 	bl	8001adc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	58024400 	.word	0x58024400

08001064 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08e      	sub	sp, #56	@ 0x38
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a59      	ldr	r2, [pc, #356]	@ (80011e8 <HAL_ETH_MspInit+0x184>)
 8001082:	4293      	cmp	r3, r2
 8001084:	f040 80ab 	bne.w	80011de <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001088:	4b58      	ldr	r3, [pc, #352]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 800108a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800108e:	4a57      	ldr	r2, [pc, #348]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 8001090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001094:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001098:	4b54      	ldr	r3, [pc, #336]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 800109a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800109e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010a2:	623b      	str	r3, [r7, #32]
 80010a4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80010a6:	4b51      	ldr	r3, [pc, #324]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 80010a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010ac:	4a4f      	ldr	r2, [pc, #316]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 80010ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010b6:	4b4d      	ldr	r3, [pc, #308]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 80010b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c0:	61fb      	str	r3, [r7, #28]
 80010c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80010c4:	4b49      	ldr	r3, [pc, #292]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 80010c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010ca:	4a48      	ldr	r2, [pc, #288]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010d4:	4b45      	ldr	r3, [pc, #276]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 80010d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010de:	61bb      	str	r3, [r7, #24]
 80010e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b42      	ldr	r3, [pc, #264]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 80010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e8:	4a40      	ldr	r2, [pc, #256]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f2:	4b3e      	ldr	r3, [pc, #248]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	4b3a      	ldr	r3, [pc, #232]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 8001102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001106:	4a39      	ldr	r2, [pc, #228]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001110:	4b36      	ldr	r3, [pc, #216]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	4b33      	ldr	r3, [pc, #204]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 8001120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001124:	4a31      	ldr	r2, [pc, #196]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800112e:	4b2f      	ldr	r3, [pc, #188]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800113c:	4b2b      	ldr	r3, [pc, #172]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001142:	4a2a      	ldr	r2, [pc, #168]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 8001144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001148:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800114c:	4b27      	ldr	r3, [pc, #156]	@ (80011ec <HAL_ETH_MspInit+0x188>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800115a:	2332      	movs	r3, #50	@ 0x32
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800116a:	230b      	movs	r3, #11
 800116c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001172:	4619      	mov	r1, r3
 8001174:	481e      	ldr	r0, [pc, #120]	@ (80011f0 <HAL_ETH_MspInit+0x18c>)
 8001176:	f001 f90d 	bl	8002394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800117a:	2386      	movs	r3, #134	@ 0x86
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800118a:	230b      	movs	r3, #11
 800118c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001192:	4619      	mov	r1, r3
 8001194:	4817      	ldr	r0, [pc, #92]	@ (80011f4 <HAL_ETH_MspInit+0x190>)
 8001196:	f001 f8fd 	bl	8002394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800119a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ac:	230b      	movs	r3, #11
 80011ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b4:	4619      	mov	r1, r3
 80011b6:	4810      	ldr	r0, [pc, #64]	@ (80011f8 <HAL_ETH_MspInit+0x194>)
 80011b8:	f001 f8ec 	bl	8002394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80011bc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ce:	230b      	movs	r3, #11
 80011d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	4808      	ldr	r0, [pc, #32]	@ (80011fc <HAL_ETH_MspInit+0x198>)
 80011da:	f001 f8db 	bl	8002394 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80011de:	bf00      	nop
 80011e0:	3738      	adds	r7, #56	@ 0x38
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40028000 	.word	0x40028000
 80011ec:	58024400 	.word	0x58024400
 80011f0:	58020800 	.word	0x58020800
 80011f4:	58020000 	.word	0x58020000
 80011f8:	58020400 	.word	0x58020400
 80011fc:	58021800 	.word	0x58021800

08001200 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	@ 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a2a      	ldr	r2, [pc, #168]	@ (80012c8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d14e      	bne.n	80012c0 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001222:	4b2a      	ldr	r3, [pc, #168]	@ (80012cc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001224:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001228:	4a28      	ldr	r2, [pc, #160]	@ (80012cc <HAL_TIM_Encoder_MspInit+0xcc>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001232:	4b26      	ldr	r3, [pc, #152]	@ (80012cc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001240:	4b22      	ldr	r3, [pc, #136]	@ (80012cc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001246:	4a21      	ldr	r2, [pc, #132]	@ (80012cc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001248:	f043 0310 	orr.w	r3, r3, #16
 800124c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001250:	4b1e      	ldr	r3, [pc, #120]	@ (80012cc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800125e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001270:	2301      	movs	r3, #1
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	4815      	ldr	r0, [pc, #84]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0xd0>)
 800127c:	f001 f88a 	bl	8002394 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	2105      	movs	r1, #5
 8001284:	2018      	movs	r0, #24
 8001286:	f000 fc29 	bl	8001adc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800128a:	2018      	movs	r0, #24
 800128c:	f000 fc40 	bl	8001b10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2105      	movs	r1, #5
 8001294:	2019      	movs	r0, #25
 8001296:	f000 fc21 	bl	8001adc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800129a:	2019      	movs	r0, #25
 800129c:	f000 fc38 	bl	8001b10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2105      	movs	r1, #5
 80012a4:	201a      	movs	r0, #26
 80012a6:	f000 fc19 	bl	8001adc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80012aa:	201a      	movs	r0, #26
 80012ac:	f000 fc30 	bl	8001b10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2105      	movs	r1, #5
 80012b4:	201b      	movs	r0, #27
 80012b6:	f000 fc11 	bl	8001adc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80012ba:	201b      	movs	r0, #27
 80012bc:	f000 fc28 	bl	8001b10 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80012c0:	bf00      	nop
 80012c2:	3728      	adds	r7, #40	@ 0x28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40010000 	.word	0x40010000
 80012cc:	58024400 	.word	0x58024400
 80012d0:	58021000 	.word	0x58021000

080012d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001310 <HAL_TIM_Base_MspInit+0x3c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d10e      	bne.n	8001304 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <HAL_TIM_Base_MspInit+0x40>)
 80012e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012ec:	4a09      	ldr	r2, [pc, #36]	@ (8001314 <HAL_TIM_Base_MspInit+0x40>)
 80012ee:	f043 0302 	orr.w	r3, r3, #2
 80012f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012f6:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <HAL_TIM_Base_MspInit+0x40>)
 80012f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	40000400 	.word	0x40000400
 8001314:	58024400 	.word	0x58024400

08001318 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a12      	ldr	r2, [pc, #72]	@ (8001380 <HAL_TIM_MspPostInit+0x68>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d11e      	bne.n	8001378 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <HAL_TIM_MspPostInit+0x6c>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001340:	4a10      	ldr	r2, [pc, #64]	@ (8001384 <HAL_TIM_MspPostInit+0x6c>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800134a:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <HAL_TIM_MspPostInit+0x6c>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001358:	2340      	movs	r3, #64	@ 0x40
 800135a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001368:	2302      	movs	r3, #2
 800136a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	4619      	mov	r1, r3
 8001372:	4805      	ldr	r0, [pc, #20]	@ (8001388 <HAL_TIM_MspPostInit+0x70>)
 8001374:	f001 f80e 	bl	8002394 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001378:	bf00      	nop
 800137a:	3720      	adds	r7, #32
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40000400 	.word	0x40000400
 8001384:	58024400 	.word	0x58024400
 8001388:	58020000 	.word	0x58020000

0800138c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b0ba      	sub	sp, #232	@ 0xe8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	22c0      	movs	r2, #192	@ 0xc0
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f009 ff93 	bl	800b2d8 <memset>
  if(huart->Instance==USART3)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a27      	ldr	r2, [pc, #156]	@ (8001454 <HAL_UART_MspInit+0xc8>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d146      	bne.n	800144a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013bc:	f04f 0202 	mov.w	r2, #2
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 fb4a 	bl	8003a6c <HAL_RCCEx_PeriphCLKConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013de:	f7ff fc9d 	bl	8000d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <HAL_UART_MspInit+0xcc>)
 80013e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001458 <HAL_UART_MspInit+0xcc>)
 80013ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <HAL_UART_MspInit+0xcc>)
 80013f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001400:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <HAL_UART_MspInit+0xcc>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001406:	4a14      	ldr	r2, [pc, #80]	@ (8001458 <HAL_UART_MspInit+0xcc>)
 8001408:	f043 0308 	orr.w	r3, r3, #8
 800140c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001410:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <HAL_UART_MspInit+0xcc>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800141e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001422:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001438:	2307      	movs	r3, #7
 800143a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	@ (800145c <HAL_UART_MspInit+0xd0>)
 8001446:	f000 ffa5 	bl	8002394 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800144a:	bf00      	nop
 800144c:	37e8      	adds	r7, #232	@ 0xe8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40004800 	.word	0x40004800
 8001458:	58024400 	.word	0x58024400
 800145c:	58020c00 	.word	0x58020c00

08001460 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b0ba      	sub	sp, #232	@ 0xe8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	22c0      	movs	r2, #192	@ 0xc0
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f009 ff29 	bl	800b2d8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a30      	ldr	r2, [pc, #192]	@ (800154c <HAL_PCD_MspInit+0xec>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d159      	bne.n	8001544 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001490:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800149c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	4618      	mov	r0, r3
 80014aa:	f002 fadf 	bl	8003a6c <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80014b4:	f7ff fc32 	bl	8000d1c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80014b8:	f001 faa0 	bl	80029fc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <HAL_PCD_MspInit+0xf0>)
 80014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c2:	4a23      	ldr	r2, [pc, #140]	@ (8001550 <HAL_PCD_MspInit+0xf0>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014cc:	4b20      	ldr	r3, [pc, #128]	@ (8001550 <HAL_PCD_MspInit+0xf0>)
 80014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80014da:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80014de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80014f4:	230a      	movs	r3, #10
 80014f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014fe:	4619      	mov	r1, r3
 8001500:	4814      	ldr	r0, [pc, #80]	@ (8001554 <HAL_PCD_MspInit+0xf4>)
 8001502:	f000 ff47 	bl	8002394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001506:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800150a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800151e:	4619      	mov	r1, r3
 8001520:	480c      	ldr	r0, [pc, #48]	@ (8001554 <HAL_PCD_MspInit+0xf4>)
 8001522:	f000 ff37 	bl	8002394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001526:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <HAL_PCD_MspInit+0xf0>)
 8001528:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800152c:	4a08      	ldr	r2, [pc, #32]	@ (8001550 <HAL_PCD_MspInit+0xf0>)
 800152e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001532:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_PCD_MspInit+0xf0>)
 8001538:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800153c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001544:	bf00      	nop
 8001546:	37e8      	adds	r7, #232	@ 0xe8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40080000 	.word	0x40080000
 8001550:	58024400 	.word	0x58024400
 8001554:	58020000 	.word	0x58020000

08001558 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b090      	sub	sp, #64	@ 0x40
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b0f      	cmp	r3, #15
 8001564:	d827      	bhi.n	80015b6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001566:	2200      	movs	r2, #0
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	201c      	movs	r0, #28
 800156c:	f000 fab6 	bl	8001adc <HAL_NVIC_SetPriority>

     /* Enable the TIM2 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001570:	201c      	movs	r0, #28
 8001572:	f000 facd 	bl	8001b10 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001576:	4a29      	ldr	r2, [pc, #164]	@ (800161c <HAL_InitTick+0xc4>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800157c:	4b28      	ldr	r3, [pc, #160]	@ (8001620 <HAL_InitTick+0xc8>)
 800157e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001582:	4a27      	ldr	r2, [pc, #156]	@ (8001620 <HAL_InitTick+0xc8>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800158c:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <HAL_InitTick+0xc8>)
 800158e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800159a:	f107 0210 	add.w	r2, r7, #16
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fa1f 	bl	80039e8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d106      	bne.n	80015c2 <HAL_InitTick+0x6a>
 80015b4:	e001      	b.n	80015ba <HAL_InitTick+0x62>
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e02c      	b.n	8001614 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015ba:	f002 f9e9 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 80015be:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80015c0:	e004      	b.n	80015cc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015c2:	f002 f9e5 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 80015c6:	4603      	mov	r3, r0
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015ce:	4a15      	ldr	r2, [pc, #84]	@ (8001624 <HAL_InitTick+0xcc>)
 80015d0:	fba2 2303 	umull	r2, r3, r2, r3
 80015d4:	0c9b      	lsrs	r3, r3, #18
 80015d6:	3b01      	subs	r3, #1
 80015d8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80015da:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <HAL_InitTick+0xd0>)
 80015dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <HAL_InitTick+0xd0>)
 80015e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015e8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80015ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001628 <HAL_InitTick+0xd0>)
 80015ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ee:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <HAL_InitTick+0xd0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <HAL_InitTick+0xd0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80015fc:	480a      	ldr	r0, [pc, #40]	@ (8001628 <HAL_InitTick+0xd0>)
 80015fe:	f004 f861 	bl	80056c4 <HAL_TIM_Base_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d104      	bne.n	8001612 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001608:	4807      	ldr	r0, [pc, #28]	@ (8001628 <HAL_InitTick+0xd0>)
 800160a:	f004 f8b3 	bl	8005774 <HAL_TIM_Base_Start_IT>
 800160e:	4603      	mov	r3, r0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3740      	adds	r7, #64	@ 0x40
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	24000008 	.word	0x24000008
 8001620:	58024400 	.word	0x58024400
 8001624:	431bde83 	.word	0x431bde83
 8001628:	24000870 	.word	0x24000870

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <NMI_Handler+0x4>

08001634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <MemManage_Handler+0x4>

08001644 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <UsageFault_Handler+0x4>

08001654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001668:	4802      	ldr	r0, [pc, #8]	@ (8001674 <TIM1_BRK_IRQHandler+0x10>)
 800166a:	f004 fc35 	bl	8005ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	24000228 	.word	0x24000228

08001678 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800167c:	4802      	ldr	r0, [pc, #8]	@ (8001688 <TIM1_UP_IRQHandler+0x10>)
 800167e:	f004 fc2b 	bl	8005ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	24000228 	.word	0x24000228

0800168c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <TIM1_TRG_COM_IRQHandler+0x10>)
 8001692:	f004 fc21 	bl	8005ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	24000228 	.word	0x24000228

080016a0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016a4:	4802      	ldr	r0, [pc, #8]	@ (80016b0 <TIM1_CC_IRQHandler+0x10>)
 80016a6:	f004 fc17 	bl	8005ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	24000228 	.word	0x24000228

080016b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016b8:	4802      	ldr	r0, [pc, #8]	@ (80016c4 <TIM2_IRQHandler+0x10>)
 80016ba:	f004 fc0d 	bl	8005ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	24000870 	.word	0x24000870

080016c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016cc:	4b37      	ldr	r3, [pc, #220]	@ (80017ac <SystemInit+0xe4>)
 80016ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016d2:	4a36      	ldr	r2, [pc, #216]	@ (80017ac <SystemInit+0xe4>)
 80016d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016dc:	4b34      	ldr	r3, [pc, #208]	@ (80017b0 <SystemInit+0xe8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	2b06      	cmp	r3, #6
 80016e6:	d807      	bhi.n	80016f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016e8:	4b31      	ldr	r3, [pc, #196]	@ (80017b0 <SystemInit+0xe8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 030f 	bic.w	r3, r3, #15
 80016f0:	4a2f      	ldr	r2, [pc, #188]	@ (80017b0 <SystemInit+0xe8>)
 80016f2:	f043 0307 	orr.w	r3, r3, #7
 80016f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016f8:	4b2e      	ldr	r3, [pc, #184]	@ (80017b4 <SystemInit+0xec>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a2d      	ldr	r2, [pc, #180]	@ (80017b4 <SystemInit+0xec>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001704:	4b2b      	ldr	r3, [pc, #172]	@ (80017b4 <SystemInit+0xec>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800170a:	4b2a      	ldr	r3, [pc, #168]	@ (80017b4 <SystemInit+0xec>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4929      	ldr	r1, [pc, #164]	@ (80017b4 <SystemInit+0xec>)
 8001710:	4b29      	ldr	r3, [pc, #164]	@ (80017b8 <SystemInit+0xf0>)
 8001712:	4013      	ands	r3, r2
 8001714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001716:	4b26      	ldr	r3, [pc, #152]	@ (80017b0 <SystemInit+0xe8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001722:	4b23      	ldr	r3, [pc, #140]	@ (80017b0 <SystemInit+0xe8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 030f 	bic.w	r3, r3, #15
 800172a:	4a21      	ldr	r2, [pc, #132]	@ (80017b0 <SystemInit+0xe8>)
 800172c:	f043 0307 	orr.w	r3, r3, #7
 8001730:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001732:	4b20      	ldr	r3, [pc, #128]	@ (80017b4 <SystemInit+0xec>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001738:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <SystemInit+0xec>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800173e:	4b1d      	ldr	r3, [pc, #116]	@ (80017b4 <SystemInit+0xec>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001744:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <SystemInit+0xec>)
 8001746:	4a1d      	ldr	r2, [pc, #116]	@ (80017bc <SystemInit+0xf4>)
 8001748:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800174a:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <SystemInit+0xec>)
 800174c:	4a1c      	ldr	r2, [pc, #112]	@ (80017c0 <SystemInit+0xf8>)
 800174e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001750:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <SystemInit+0xec>)
 8001752:	4a1c      	ldr	r2, [pc, #112]	@ (80017c4 <SystemInit+0xfc>)
 8001754:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001756:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <SystemInit+0xec>)
 8001758:	2200      	movs	r2, #0
 800175a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800175c:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <SystemInit+0xec>)
 800175e:	4a19      	ldr	r2, [pc, #100]	@ (80017c4 <SystemInit+0xfc>)
 8001760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001762:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <SystemInit+0xec>)
 8001764:	2200      	movs	r2, #0
 8001766:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001768:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <SystemInit+0xec>)
 800176a:	4a16      	ldr	r2, [pc, #88]	@ (80017c4 <SystemInit+0xfc>)
 800176c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800176e:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <SystemInit+0xec>)
 8001770:	2200      	movs	r2, #0
 8001772:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001774:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <SystemInit+0xec>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0e      	ldr	r2, [pc, #56]	@ (80017b4 <SystemInit+0xec>)
 800177a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800177e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001780:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <SystemInit+0xec>)
 8001782:	2200      	movs	r2, #0
 8001784:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001786:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <SystemInit+0x100>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <SystemInit+0x104>)
 800178c:	4013      	ands	r3, r2
 800178e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001792:	d202      	bcs.n	800179a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001794:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <SystemInit+0x108>)
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800179a:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <SystemInit+0x10c>)
 800179c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80017a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00
 80017b0:	52002000 	.word	0x52002000
 80017b4:	58024400 	.word	0x58024400
 80017b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80017bc:	02020200 	.word	0x02020200
 80017c0:	01ff0000 	.word	0x01ff0000
 80017c4:	01010280 	.word	0x01010280
 80017c8:	5c001000 	.word	0x5c001000
 80017cc:	ffff0000 	.word	0xffff0000
 80017d0:	51008108 	.word	0x51008108
 80017d4:	52004000 	.word	0x52004000

080017d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001810 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017dc:	f7ff ff74 	bl	80016c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e0:	480c      	ldr	r0, [pc, #48]	@ (8001814 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017e2:	490d      	ldr	r1, [pc, #52]	@ (8001818 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001824 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001806:	f009 fdc5 	bl	800b394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180a:	f7fe fee1 	bl	80005d0 <main>
  bx  lr
 800180e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001810:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001814:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001818:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 800181c:	0800b584 	.word	0x0800b584
  ldr r2, =_sbss
 8001820:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8001824:	240053e8 	.word	0x240053e8

08001828 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC3_IRQHandler>
	...

0800182c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001832:	2003      	movs	r0, #3
 8001834:	f000 f947 	bl	8001ac6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001838:	f001 ff00 	bl	800363c <HAL_RCC_GetSysClockFreq>
 800183c:	4602      	mov	r2, r0
 800183e:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <HAL_Init+0x68>)
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	0a1b      	lsrs	r3, r3, #8
 8001844:	f003 030f 	and.w	r3, r3, #15
 8001848:	4913      	ldr	r1, [pc, #76]	@ (8001898 <HAL_Init+0x6c>)
 800184a:	5ccb      	ldrb	r3, [r1, r3]
 800184c:	f003 031f 	and.w	r3, r3, #31
 8001850:	fa22 f303 	lsr.w	r3, r2, r3
 8001854:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001856:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <HAL_Init+0x68>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	4a0e      	ldr	r2, [pc, #56]	@ (8001898 <HAL_Init+0x6c>)
 8001860:	5cd3      	ldrb	r3, [r2, r3]
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
 800186c:	4a0b      	ldr	r2, [pc, #44]	@ (800189c <HAL_Init+0x70>)
 800186e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001870:	4a0b      	ldr	r2, [pc, #44]	@ (80018a0 <HAL_Init+0x74>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001876:	200f      	movs	r0, #15
 8001878:	f7ff fe6e 	bl	8001558 <HAL_InitTick>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e002      	b.n	800188c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001886:	f7ff fbcf 	bl	8001028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	58024400 	.word	0x58024400
 8001898:	0800b53c 	.word	0x0800b53c
 800189c:	24000004 	.word	0x24000004
 80018a0:	24000000 	.word	0x24000000

080018a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_IncTick+0x20>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_IncTick+0x24>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <HAL_IncTick+0x24>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	2400000c 	.word	0x2400000c
 80018c8:	240008bc 	.word	0x240008bc

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b03      	ldr	r3, [pc, #12]	@ (80018e0 <HAL_GetTick+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	240008bc 	.word	0x240008bc

080018e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff ffee 	bl	80018cc <HAL_GetTick>
 80018f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d005      	beq.n	800190a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_Delay+0x44>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190a:	bf00      	nop
 800190c:	f7ff ffde 	bl	80018cc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8f7      	bhi.n	800190c <HAL_Delay+0x28>
  {
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2400000c 	.word	0x2400000c

0800192c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001930:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <HAL_GetREVID+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	0c1b      	lsrs	r3, r3, #16
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	5c001000 	.word	0x5c001000

08001944 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001954:	4904      	ldr	r1, [pc, #16]	@ (8001968 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	58000400 	.word	0x58000400

0800196c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <__NVIC_SetPriorityGrouping+0x40>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001988:	4013      	ands	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001996:	4313      	orrs	r3, r2
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <__NVIC_SetPriorityGrouping+0x40>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00
 80019b0:	05fa0000 	.word	0x05fa0000

080019b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b8:	4b04      	ldr	r3, [pc, #16]	@ (80019cc <__NVIC_GetPriorityGrouping+0x18>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	f003 0307 	and.w	r3, r3, #7
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	db0b      	blt.n	80019fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	f003 021f 	and.w	r2, r3, #31
 80019e8:	4907      	ldr	r1, [pc, #28]	@ (8001a08 <__NVIC_EnableIRQ+0x38>)
 80019ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	2001      	movs	r0, #1
 80019f2:	fa00 f202 	lsl.w	r2, r0, r2
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000e100 	.word	0xe000e100

08001a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	6039      	str	r1, [r7, #0]
 8001a16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db0a      	blt.n	8001a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	490c      	ldr	r1, [pc, #48]	@ (8001a58 <__NVIC_SetPriority+0x4c>)
 8001a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a2a:	0112      	lsls	r2, r2, #4
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	440b      	add	r3, r1
 8001a30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a34:	e00a      	b.n	8001a4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4908      	ldr	r1, [pc, #32]	@ (8001a5c <__NVIC_SetPriority+0x50>)
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	3b04      	subs	r3, #4
 8001a44:	0112      	lsls	r2, r2, #4
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	440b      	add	r3, r1
 8001a4a:	761a      	strb	r2, [r3, #24]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000e100 	.word	0xe000e100
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	@ 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f1c3 0307 	rsb	r3, r3, #7
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	bf28      	it	cs
 8001a7e:	2304      	movcs	r3, #4
 8001a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3304      	adds	r3, #4
 8001a86:	2b06      	cmp	r3, #6
 8001a88:	d902      	bls.n	8001a90 <NVIC_EncodePriority+0x30>
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3b03      	subs	r3, #3
 8001a8e:	e000      	b.n	8001a92 <NVIC_EncodePriority+0x32>
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	4313      	orrs	r3, r2
         );
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3724      	adds	r7, #36	@ 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ff4c 	bl	800196c <__NVIC_SetPriorityGrouping>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001aea:	f7ff ff63 	bl	80019b4 <__NVIC_GetPriorityGrouping>
 8001aee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	6978      	ldr	r0, [r7, #20]
 8001af6:	f7ff ffb3 	bl	8001a60 <NVIC_EncodePriority>
 8001afa:	4602      	mov	r2, r0
 8001afc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff82 	bl	8001a0c <__NVIC_SetPriority>
}
 8001b08:	bf00      	nop
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff56 	bl	80019d0 <__NVIC_EnableIRQ>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e0e3      	b.n	8001d06 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d106      	bne.n	8001b56 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2223      	movs	r2, #35	@ 0x23
 8001b4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff fa87 	bl	8001064 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	4b6e      	ldr	r3, [pc, #440]	@ (8001d10 <HAL_ETH_Init+0x1e4>)
 8001b58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b5c:	4a6c      	ldr	r2, [pc, #432]	@ (8001d10 <HAL_ETH_Init+0x1e4>)
 8001b5e:	f043 0302 	orr.w	r3, r3, #2
 8001b62:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b66:	4b6a      	ldr	r3, [pc, #424]	@ (8001d10 <HAL_ETH_Init+0x1e4>)
 8001b68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7a1b      	ldrb	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d103      	bne.n	8001b84 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f7ff fee1 	bl	8001944 <HAL_SYSCFG_ETHInterfaceSelect>
 8001b82:	e003      	b.n	8001b8c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001b84:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001b88:	f7ff fedc 	bl	8001944 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001b8c:	4b61      	ldr	r3, [pc, #388]	@ (8001d14 <HAL_ETH_Init+0x1e8>)
 8001b8e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ba6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ba8:	f7ff fe90 	bl	80018cc <HAL_GetTick>
 8001bac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001bae:	e011      	b.n	8001bd4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001bb0:	f7ff fe8c 	bl	80018cc <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001bbe:	d909      	bls.n	8001bd4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	22e0      	movs	r2, #224	@ 0xe0
 8001bcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e098      	b.n	8001d06 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1e4      	bne.n	8001bb0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f89e 	bl	8001d28 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001bec:	f001 fea0 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4a49      	ldr	r2, [pc, #292]	@ (8001d18 <HAL_ETH_Init+0x1ec>)
 8001bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf8:	0c9a      	lsrs	r2, r3, #18
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	3a01      	subs	r2, #1
 8001c00:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 fa81 	bl	800210c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c12:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001c16:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001c22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c26:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	22e0      	movs	r2, #224	@ 0xe0
 8001c42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e05d      	b.n	8001d06 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c52:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001c56:	4b31      	ldr	r3, [pc, #196]	@ (8001d1c <HAL_ETH_Init+0x1f0>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6952      	ldr	r2, [r2, #20]
 8001c5e:	0051      	lsls	r1, r2, #1
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	430b      	orrs	r3, r1
 8001c66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c6a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 fae9 	bl	8002246 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 fb2f 	bl	80022d8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	3305      	adds	r3, #5
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	021a      	lsls	r2, r3, #8
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	3303      	adds	r3, #3
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	061a      	lsls	r2, r3, #24
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	041b      	lsls	r3, r3, #16
 8001cac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001cb8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001cc6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001cc8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <HAL_ETH_Init+0x1f4>)
 8001cda:	430b      	orrs	r3, r1
 8001cdc:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <HAL_ETH_Init+0x1f8>)
 8001cee:	430b      	orrs	r3, r1
 8001cf0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2210      	movs	r2, #16
 8001d00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	58024400 	.word	0x58024400
 8001d14:	58000400 	.word	0x58000400
 8001d18:	431bde83 	.word	0x431bde83
 8001d1c:	ffff8001 	.word	0xffff8001
 8001d20:	0c020060 	.word	0x0c020060
 8001d24:	0c20c000 	.word	0x0c20c000

08001d28 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d38:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001d42:	f001 fdf5 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 8001d46:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001db4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d804      	bhi.n	8001d5a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	e022      	b.n	8001da0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	4a16      	ldr	r2, [pc, #88]	@ (8001db8 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d204      	bcs.n	8001d6c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	e019      	b.n	8001da0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	4a13      	ldr	r2, [pc, #76]	@ (8001dbc <HAL_ETH_SetMDIOClockRange+0x94>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d915      	bls.n	8001da0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d804      	bhi.n	8001d86 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	e00c      	b.n	8001da0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	4a0e      	ldr	r2, [pc, #56]	@ (8001dc4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d804      	bhi.n	8001d98 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	e003      	b.n	8001da0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	02160ebf 	.word	0x02160ebf
 8001db8:	03938700 	.word	0x03938700
 8001dbc:	05f5e0ff 	.word	0x05f5e0ff
 8001dc0:	08f0d17f 	.word	0x08f0d17f
 8001dc4:	0ee6b27f 	.word	0x0ee6b27f

08001dc8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001dda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	791b      	ldrb	r3, [r3, #4]
 8001de0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001de2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	7b1b      	ldrb	r3, [r3, #12]
 8001de8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001dea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	7b5b      	ldrb	r3, [r3, #13]
 8001df0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001df2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	7b9b      	ldrb	r3, [r3, #14]
 8001df8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001dfa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	7bdb      	ldrb	r3, [r3, #15]
 8001e00:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001e02:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	7c12      	ldrb	r2, [r2, #16]
 8001e08:	2a00      	cmp	r2, #0
 8001e0a:	d102      	bne.n	8001e12 <ETH_SetMACConfig+0x4a>
 8001e0c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e10:	e000      	b.n	8001e14 <ETH_SetMACConfig+0x4c>
 8001e12:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001e14:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	7c52      	ldrb	r2, [r2, #17]
 8001e1a:	2a00      	cmp	r2, #0
 8001e1c:	d102      	bne.n	8001e24 <ETH_SetMACConfig+0x5c>
 8001e1e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e22:	e000      	b.n	8001e26 <ETH_SetMACConfig+0x5e>
 8001e24:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001e26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	7c9b      	ldrb	r3, [r3, #18]
 8001e2c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001e2e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001e34:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001e3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	7f1b      	ldrb	r3, [r3, #28]
 8001e40:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001e42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	7f5b      	ldrb	r3, [r3, #29]
 8001e48:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001e4a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	7f92      	ldrb	r2, [r2, #30]
 8001e50:	2a00      	cmp	r2, #0
 8001e52:	d102      	bne.n	8001e5a <ETH_SetMACConfig+0x92>
 8001e54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e58:	e000      	b.n	8001e5c <ETH_SetMACConfig+0x94>
 8001e5a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001e5c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	7fdb      	ldrb	r3, [r3, #31]
 8001e62:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001e64:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001e6c:	2a00      	cmp	r2, #0
 8001e6e:	d102      	bne.n	8001e76 <ETH_SetMACConfig+0xae>
 8001e70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e74:	e000      	b.n	8001e78 <ETH_SetMACConfig+0xb0>
 8001e76:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001e78:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001e7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001e86:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001e88:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b56      	ldr	r3, [pc, #344]	@ (8001ff4 <ETH_SetMACConfig+0x22c>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	68f9      	ldr	r1, [r7, #12]
 8001ea2:	430b      	orrs	r3, r1
 8001ea4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eaa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001eb2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001eb4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ebc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001ebe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001ec6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001ec8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001ed0:	2a00      	cmp	r2, #0
 8001ed2:	d102      	bne.n	8001eda <ETH_SetMACConfig+0x112>
 8001ed4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ed8:	e000      	b.n	8001edc <ETH_SetMACConfig+0x114>
 8001eda:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001edc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	4b42      	ldr	r3, [pc, #264]	@ (8001ff8 <ETH_SetMACConfig+0x230>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	68f9      	ldr	r1, [r7, #12]
 8001ef6:	430b      	orrs	r3, r1
 8001ef8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f00:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	4b3a      	ldr	r3, [pc, #232]	@ (8001ffc <ETH_SetMACConfig+0x234>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	68f9      	ldr	r1, [r7, #12]
 8001f1a:	430b      	orrs	r3, r1
 8001f1c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001f24:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001f2a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001f32:	2a00      	cmp	r2, #0
 8001f34:	d101      	bne.n	8001f3a <ETH_SetMACConfig+0x172>
 8001f36:	2280      	movs	r2, #128	@ 0x80
 8001f38:	e000      	b.n	8001f3c <ETH_SetMACConfig+0x174>
 8001f3a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001f3c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f42:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001f4e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001f52:	4013      	ands	r3, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	68f9      	ldr	r1, [r7, #12]
 8001f5a:	430b      	orrs	r3, r1
 8001f5c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001f64:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001f6c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f7a:	f023 0103 	bic.w	r1, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001f92:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001fae:	2a00      	cmp	r2, #0
 8001fb0:	d101      	bne.n	8001fb6 <ETH_SetMACConfig+0x1ee>
 8001fb2:	2240      	movs	r2, #64	@ 0x40
 8001fb4:	e000      	b.n	8001fb8 <ETH_SetMACConfig+0x1f0>
 8001fb6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001fb8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001fc0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001fc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001fca:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001fd8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	00048083 	.word	0x00048083
 8001ff8:	c0f88000 	.word	0xc0f88000
 8001ffc:	fffffef0 	.word	0xfffffef0

08002000 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b38      	ldr	r3, [pc, #224]	@ (80020f8 <ETH_SetDMAConfig+0xf8>)
 8002016:	4013      	ands	r3, r2
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	6811      	ldr	r1, [r2, #0]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	430b      	orrs	r3, r1
 8002022:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002026:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	791b      	ldrb	r3, [r3, #4]
 800202c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002032:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	7b1b      	ldrb	r3, [r3, #12]
 8002038:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	4b2c      	ldr	r3, [pc, #176]	@ (80020fc <ETH_SetDMAConfig+0xfc>)
 800204a:	4013      	ands	r3, r2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	68f9      	ldr	r1, [r7, #12]
 8002052:	430b      	orrs	r3, r1
 8002054:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002058:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	7b5b      	ldrb	r3, [r3, #13]
 800205e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002064:	4313      	orrs	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002070:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002074:	4b22      	ldr	r3, [pc, #136]	@ (8002100 <ETH_SetDMAConfig+0x100>)
 8002076:	4013      	ands	r3, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	68f9      	ldr	r1, [r7, #12]
 800207e:	430b      	orrs	r3, r1
 8002080:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002084:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	7d1b      	ldrb	r3, [r3, #20]
 8002090:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002092:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	7f5b      	ldrb	r3, [r3, #29]
 8002098:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800209a:	4313      	orrs	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80020aa:	4b16      	ldr	r3, [pc, #88]	@ (8002104 <ETH_SetDMAConfig+0x104>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	68f9      	ldr	r1, [r7, #12]
 80020b4:	430b      	orrs	r3, r1
 80020b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020ba:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	7f1b      	ldrb	r3, [r3, #28]
 80020c2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020d4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80020d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002108 <ETH_SetDMAConfig+0x108>)
 80020da:	4013      	ands	r3, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	68f9      	ldr	r1, [r7, #12]
 80020e2:	430b      	orrs	r3, r1
 80020e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020e8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	ffff87fd 	.word	0xffff87fd
 80020fc:	ffff2ffe 	.word	0xffff2ffe
 8002100:	fffec000 	.word	0xfffec000
 8002104:	ffc0efef 	.word	0xffc0efef
 8002108:	7fc0ffff 	.word	0x7fc0ffff

0800210c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b0a4      	sub	sp, #144	@ 0x90
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002114:	2301      	movs	r3, #1
 8002116:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800211a:	2300      	movs	r3, #0
 800211c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800212a:	2301      	movs	r3, #1
 800212c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002130:	2301      	movs	r3, #1
 8002132:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002136:	2301      	movs	r3, #1
 8002138:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002142:	2301      	movs	r3, #1
 8002144:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002148:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800214c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002154:	2300      	movs	r3, #0
 8002156:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002164:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002168:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002170:	2300      	movs	r3, #0
 8002172:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002174:	2301      	movs	r3, #1
 8002176:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002180:	2300      	movs	r3, #0
 8002182:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002186:	2300      	movs	r3, #0
 8002188:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800218a:	2300      	movs	r3, #0
 800218c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800218e:	2300      	movs	r3, #0
 8002190:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800219e:	2301      	movs	r3, #1
 80021a0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80021a4:	2320      	movs	r3, #32
 80021a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80021aa:	2301      	movs	r3, #1
 80021ac:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80021b6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80021ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80021bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021c0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80021c8:	2302      	movs	r3, #2
 80021ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80021da:	2300      	movs	r3, #0
 80021dc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80021e0:	2301      	movs	r3, #1
 80021e2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80021e6:	2300      	movs	r3, #0
 80021e8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80021f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021f4:	4619      	mov	r1, r3
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff fde6 	bl	8001dc8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021fc:	2301      	movs	r3, #1
 80021fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002200:	2301      	movs	r3, #1
 8002202:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800220e:	2300      	movs	r3, #0
 8002210:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002212:	2300      	movs	r3, #0
 8002214:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002216:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800221a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800221c:	2300      	movs	r3, #0
 800221e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002220:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002224:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800222c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002230:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002232:	f107 0308 	add.w	r3, r7, #8
 8002236:	4619      	mov	r1, r3
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff fee1 	bl	8002000 <ETH_SetDMAConfig>
}
 800223e:	bf00      	nop
 8002240:	3790      	adds	r7, #144	@ 0x90
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002246:	b480      	push	{r7}
 8002248:	b085      	sub	sp, #20
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	e01d      	b.n	8002290 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68d9      	ldr	r1, [r3, #12]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4613      	mov	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	440b      	add	r3, r1
 8002264:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2200      	movs	r2, #0
 8002270:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2200      	movs	r2, #0
 800227c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800227e:	68b9      	ldr	r1, [r7, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	3206      	adds	r2, #6
 8002286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	3301      	adds	r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b03      	cmp	r3, #3
 8002294:	d9de      	bls.n	8002254 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022a4:	461a      	mov	r2, r3
 80022a6:	2303      	movs	r3, #3
 80022a8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022b8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022c8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	e023      	b.n	800232e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6919      	ldr	r1, [r3, #16]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2200      	movs	r2, #0
 8002302:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2200      	movs	r2, #0
 800230e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2200      	movs	r2, #0
 8002314:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2200      	movs	r2, #0
 800231a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	3212      	adds	r2, #18
 8002324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	3301      	adds	r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d9d8      	bls.n	80022e6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800235a:	461a      	mov	r2, r3
 800235c:	2303      	movs	r3, #3
 800235e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800236e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002382:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002394:	b480      	push	{r7}
 8002396:	b089      	sub	sp, #36	@ 0x24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80023a2:	4b89      	ldr	r3, [pc, #548]	@ (80025c8 <HAL_GPIO_Init+0x234>)
 80023a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023a6:	e194      	b.n	80026d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	2101      	movs	r1, #1
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 8186 	beq.w	80026cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d005      	beq.n	80023d8 <HAL_GPIO_Init+0x44>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d130      	bne.n	800243a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800240e:	2201      	movs	r2, #1
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	f003 0201 	and.w	r2, r3, #1
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2b03      	cmp	r3, #3
 8002444:	d017      	beq.n	8002476 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	2203      	movs	r2, #3
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d123      	bne.n	80024ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	08da      	lsrs	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3208      	adds	r2, #8
 800248a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	220f      	movs	r2, #15
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	691a      	ldr	r2, [r3, #16]
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	08da      	lsrs	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3208      	adds	r2, #8
 80024c4:	69b9      	ldr	r1, [r7, #24]
 80024c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	2203      	movs	r2, #3
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0203 	and.w	r2, r3, #3
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 80e0 	beq.w	80026cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250c:	4b2f      	ldr	r3, [pc, #188]	@ (80025cc <HAL_GPIO_Init+0x238>)
 800250e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002512:	4a2e      	ldr	r2, [pc, #184]	@ (80025cc <HAL_GPIO_Init+0x238>)
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800251c:	4b2b      	ldr	r3, [pc, #172]	@ (80025cc <HAL_GPIO_Init+0x238>)
 800251e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800252a:	4a29      	ldr	r2, [pc, #164]	@ (80025d0 <HAL_GPIO_Init+0x23c>)
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	3302      	adds	r3, #2
 8002532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	220f      	movs	r2, #15
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a20      	ldr	r2, [pc, #128]	@ (80025d4 <HAL_GPIO_Init+0x240>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d052      	beq.n	80025fc <HAL_GPIO_Init+0x268>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a1f      	ldr	r2, [pc, #124]	@ (80025d8 <HAL_GPIO_Init+0x244>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d031      	beq.n	80025c2 <HAL_GPIO_Init+0x22e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a1e      	ldr	r2, [pc, #120]	@ (80025dc <HAL_GPIO_Init+0x248>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d02b      	beq.n	80025be <HAL_GPIO_Init+0x22a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a1d      	ldr	r2, [pc, #116]	@ (80025e0 <HAL_GPIO_Init+0x24c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d025      	beq.n	80025ba <HAL_GPIO_Init+0x226>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a1c      	ldr	r2, [pc, #112]	@ (80025e4 <HAL_GPIO_Init+0x250>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d01f      	beq.n	80025b6 <HAL_GPIO_Init+0x222>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a1b      	ldr	r2, [pc, #108]	@ (80025e8 <HAL_GPIO_Init+0x254>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d019      	beq.n	80025b2 <HAL_GPIO_Init+0x21e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a1a      	ldr	r2, [pc, #104]	@ (80025ec <HAL_GPIO_Init+0x258>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d013      	beq.n	80025ae <HAL_GPIO_Init+0x21a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a19      	ldr	r2, [pc, #100]	@ (80025f0 <HAL_GPIO_Init+0x25c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00d      	beq.n	80025aa <HAL_GPIO_Init+0x216>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a18      	ldr	r2, [pc, #96]	@ (80025f4 <HAL_GPIO_Init+0x260>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d007      	beq.n	80025a6 <HAL_GPIO_Init+0x212>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a17      	ldr	r2, [pc, #92]	@ (80025f8 <HAL_GPIO_Init+0x264>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d101      	bne.n	80025a2 <HAL_GPIO_Init+0x20e>
 800259e:	2309      	movs	r3, #9
 80025a0:	e02d      	b.n	80025fe <HAL_GPIO_Init+0x26a>
 80025a2:	230a      	movs	r3, #10
 80025a4:	e02b      	b.n	80025fe <HAL_GPIO_Init+0x26a>
 80025a6:	2308      	movs	r3, #8
 80025a8:	e029      	b.n	80025fe <HAL_GPIO_Init+0x26a>
 80025aa:	2307      	movs	r3, #7
 80025ac:	e027      	b.n	80025fe <HAL_GPIO_Init+0x26a>
 80025ae:	2306      	movs	r3, #6
 80025b0:	e025      	b.n	80025fe <HAL_GPIO_Init+0x26a>
 80025b2:	2305      	movs	r3, #5
 80025b4:	e023      	b.n	80025fe <HAL_GPIO_Init+0x26a>
 80025b6:	2304      	movs	r3, #4
 80025b8:	e021      	b.n	80025fe <HAL_GPIO_Init+0x26a>
 80025ba:	2303      	movs	r3, #3
 80025bc:	e01f      	b.n	80025fe <HAL_GPIO_Init+0x26a>
 80025be:	2302      	movs	r3, #2
 80025c0:	e01d      	b.n	80025fe <HAL_GPIO_Init+0x26a>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e01b      	b.n	80025fe <HAL_GPIO_Init+0x26a>
 80025c6:	bf00      	nop
 80025c8:	58000080 	.word	0x58000080
 80025cc:	58024400 	.word	0x58024400
 80025d0:	58000400 	.word	0x58000400
 80025d4:	58020000 	.word	0x58020000
 80025d8:	58020400 	.word	0x58020400
 80025dc:	58020800 	.word	0x58020800
 80025e0:	58020c00 	.word	0x58020c00
 80025e4:	58021000 	.word	0x58021000
 80025e8:	58021400 	.word	0x58021400
 80025ec:	58021800 	.word	0x58021800
 80025f0:	58021c00 	.word	0x58021c00
 80025f4:	58022000 	.word	0x58022000
 80025f8:	58022400 	.word	0x58022400
 80025fc:	2300      	movs	r3, #0
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	f002 0203 	and.w	r2, r2, #3
 8002604:	0092      	lsls	r2, r2, #2
 8002606:	4093      	lsls	r3, r2
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800260e:	4938      	ldr	r1, [pc, #224]	@ (80026f0 <HAL_GPIO_Init+0x35c>)
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	089b      	lsrs	r3, r3, #2
 8002614:	3302      	adds	r3, #2
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800261c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002642:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800264a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002670:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	3301      	adds	r3, #1
 80026d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f47f ae63 	bne.w	80023a8 <HAL_GPIO_Init+0x14>
  }
}
 80026e2:	bf00      	nop
 80026e4:	bf00      	nop
 80026e6:	3724      	adds	r7, #36	@ 0x24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	58000400 	.word	0x58000400

080026f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	807b      	strh	r3, [r7, #2]
 8002700:	4613      	mov	r3, r2
 8002702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002704:	787b      	ldrb	r3, [r7, #1]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800270a:	887a      	ldrh	r2, [r7, #2]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002710:	e003      	b.n	800271a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002712:	887b      	ldrh	r3, [r7, #2]
 8002714:	041a      	lsls	r2, r3, #16
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	619a      	str	r2, [r3, #24]
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b086      	sub	sp, #24
 800272a:	af02      	add	r7, sp, #8
 800272c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0fe      	b.n	8002936 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d106      	bne.n	8002752 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7fe fe87 	bl	8001460 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2203      	movs	r2, #3
 8002756:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f005 fd30 	bl	80081c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7c1a      	ldrb	r2, [r3, #16]
 800276c:	f88d 2000 	strb.w	r2, [sp]
 8002770:	3304      	adds	r3, #4
 8002772:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002774:	f005 fcb4 	bl	80080e0 <USB_CoreInit>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2202      	movs	r2, #2
 8002782:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e0d5      	b.n	8002936 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2100      	movs	r1, #0
 8002790:	4618      	mov	r0, r3
 8002792:	f005 fd28 	bl	80081e6 <USB_SetCurrentMode>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0c6      	b.n	8002936 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	73fb      	strb	r3, [r7, #15]
 80027ac:	e04a      	b.n	8002844 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027ae:	7bfa      	ldrb	r2, [r7, #15]
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	3315      	adds	r3, #21
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	3314      	adds	r3, #20
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	b298      	uxth	r0, r3
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	332e      	adds	r3, #46	@ 0x2e
 80027ea:	4602      	mov	r2, r0
 80027ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	3318      	adds	r3, #24
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002802:	7bfa      	ldrb	r2, [r7, #15]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	331c      	adds	r3, #28
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002816:	7bfa      	ldrb	r2, [r7, #15]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	3320      	adds	r3, #32
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3324      	adds	r3, #36	@ 0x24
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	3301      	adds	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	791b      	ldrb	r3, [r3, #4]
 8002848:	7bfa      	ldrb	r2, [r7, #15]
 800284a:	429a      	cmp	r2, r3
 800284c:	d3af      	bcc.n	80027ae <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284e:	2300      	movs	r3, #0
 8002850:	73fb      	strb	r3, [r7, #15]
 8002852:	e044      	b.n	80028de <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002880:	7bfa      	ldrb	r2, [r7, #15]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002896:	7bfa      	ldrb	r2, [r7, #15]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028ac:	7bfa      	ldrb	r2, [r7, #15]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028c2:	7bfa      	ldrb	r2, [r7, #15]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4413      	add	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	440b      	add	r3, r1
 80028d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	3301      	adds	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	791b      	ldrb	r3, [r3, #4]
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d3b5      	bcc.n	8002854 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7c1a      	ldrb	r2, [r3, #16]
 80028f0:	f88d 2000 	strb.w	r2, [sp]
 80028f4:	3304      	adds	r3, #4
 80028f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f8:	f005 fcc2 	bl	8008280 <USB_DevInit>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2202      	movs	r2, #2
 8002906:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e013      	b.n	8002936 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	7b1b      	ldrb	r3, [r3, #12]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d102      	bne.n	800292a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f80b 	bl	8002940 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f005 fe7d 	bl	800862e <USB_DevDisconnect>

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800296e:	4b05      	ldr	r3, [pc, #20]	@ (8002984 <HAL_PCDEx_ActivateLPM+0x44>)
 8002970:	4313      	orrs	r3, r2
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	10000003 	.word	0x10000003

08002988 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002990:	4b19      	ldr	r3, [pc, #100]	@ (80029f8 <HAL_PWREx_ConfigSupply+0x70>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b04      	cmp	r3, #4
 800299a:	d00a      	beq.n	80029b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800299c:	4b16      	ldr	r3, [pc, #88]	@ (80029f8 <HAL_PWREx_ConfigSupply+0x70>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d001      	beq.n	80029ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e01f      	b.n	80029ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e01d      	b.n	80029ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80029b2:	4b11      	ldr	r3, [pc, #68]	@ (80029f8 <HAL_PWREx_ConfigSupply+0x70>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f023 0207 	bic.w	r2, r3, #7
 80029ba:	490f      	ldr	r1, [pc, #60]	@ (80029f8 <HAL_PWREx_ConfigSupply+0x70>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80029c2:	f7fe ff83 	bl	80018cc <HAL_GetTick>
 80029c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029c8:	e009      	b.n	80029de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029ca:	f7fe ff7f 	bl	80018cc <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029d8:	d901      	bls.n	80029de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e007      	b.n	80029ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029de:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <HAL_PWREx_ConfigSupply+0x70>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029ea:	d1ee      	bne.n	80029ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	58024800 	.word	0x58024800

080029fc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002a00:	4b05      	ldr	r3, [pc, #20]	@ (8002a18 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a04      	ldr	r2, [pc, #16]	@ (8002a18 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a0a:	60d3      	str	r3, [r2, #12]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	58024800 	.word	0x58024800

08002a1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08c      	sub	sp, #48	@ 0x30
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d102      	bne.n	8002a30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f000 bc48 	b.w	80032c0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8088 	beq.w	8002b4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a3e:	4b99      	ldr	r3, [pc, #612]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a48:	4b96      	ldr	r3, [pc, #600]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	d007      	beq.n	8002a64 <HAL_RCC_OscConfig+0x48>
 8002a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a56:	2b18      	cmp	r3, #24
 8002a58:	d111      	bne.n	8002a7e <HAL_RCC_OscConfig+0x62>
 8002a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d10c      	bne.n	8002a7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	4b8f      	ldr	r3, [pc, #572]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d06d      	beq.n	8002b4c <HAL_RCC_OscConfig+0x130>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d169      	bne.n	8002b4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	f000 bc21 	b.w	80032c0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a86:	d106      	bne.n	8002a96 <HAL_RCC_OscConfig+0x7a>
 8002a88:	4b86      	ldr	r3, [pc, #536]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a85      	ldr	r2, [pc, #532]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	e02e      	b.n	8002af4 <HAL_RCC_OscConfig+0xd8>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x9c>
 8002a9e:	4b81      	ldr	r3, [pc, #516]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a80      	ldr	r2, [pc, #512]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002aa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	4b7e      	ldr	r3, [pc, #504]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a7d      	ldr	r2, [pc, #500]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002ab0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e01d      	b.n	8002af4 <HAL_RCC_OscConfig+0xd8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCC_OscConfig+0xc0>
 8002ac2:	4b78      	ldr	r3, [pc, #480]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a77      	ldr	r2, [pc, #476]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	4b75      	ldr	r3, [pc, #468]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a74      	ldr	r2, [pc, #464]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e00b      	b.n	8002af4 <HAL_RCC_OscConfig+0xd8>
 8002adc:	4b71      	ldr	r3, [pc, #452]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a70      	ldr	r2, [pc, #448]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	4b6e      	ldr	r3, [pc, #440]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a6d      	ldr	r2, [pc, #436]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d013      	beq.n	8002b24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe fee6 	bl	80018cc <HAL_GetTick>
 8002b00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b04:	f7fe fee2 	bl	80018cc <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	@ 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e3d4      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b16:	4b63      	ldr	r3, [pc, #396]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0xe8>
 8002b22:	e014      	b.n	8002b4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe fed2 	bl	80018cc <HAL_GetTick>
 8002b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7fe fece 	bl	80018cc <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	@ 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e3c0      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b3e:	4b59      	ldr	r3, [pc, #356]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x110>
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80ca 	beq.w	8002cf0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b5c:	4b51      	ldr	r3, [pc, #324]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b64:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b66:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <HAL_RCC_OscConfig+0x166>
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	2b18      	cmp	r3, #24
 8002b76:	d156      	bne.n	8002c26 <HAL_RCC_OscConfig+0x20a>
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d151      	bne.n	8002c26 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b82:	4b48      	ldr	r3, [pc, #288]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <HAL_RCC_OscConfig+0x17e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e392      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b9a:	4b42      	ldr	r3, [pc, #264]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 0219 	bic.w	r2, r3, #25
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	493f      	ldr	r1, [pc, #252]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fe fe8e 	bl	80018cc <HAL_GetTick>
 8002bb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb4:	f7fe fe8a 	bl	80018cc <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e37c      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bc6:	4b37      	ldr	r3, [pc, #220]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd2:	f7fe feab 	bl	800192c <HAL_GetREVID>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d817      	bhi.n	8002c10 <HAL_RCC_OscConfig+0x1f4>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	2b40      	cmp	r3, #64	@ 0x40
 8002be6:	d108      	bne.n	8002bfa <HAL_RCC_OscConfig+0x1de>
 8002be8:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002bf0:	4a2c      	ldr	r2, [pc, #176]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf8:	e07a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	031b      	lsls	r3, r3, #12
 8002c08:	4926      	ldr	r1, [pc, #152]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c0e:	e06f      	b.n	8002cf0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c10:	4b24      	ldr	r3, [pc, #144]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	061b      	lsls	r3, r3, #24
 8002c1e:	4921      	ldr	r1, [pc, #132]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c24:	e064      	b.n	8002cf0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d047      	beq.n	8002cbe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 0219 	bic.w	r2, r3, #25
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	491a      	ldr	r1, [pc, #104]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe fe44 	bl	80018cc <HAL_GetTick>
 8002c44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c48:	f7fe fe40 	bl	80018cc <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e332      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c5a:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c66:	f7fe fe61 	bl	800192c <HAL_GetREVID>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d819      	bhi.n	8002ca8 <HAL_RCC_OscConfig+0x28c>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2b40      	cmp	r3, #64	@ 0x40
 8002c7a:	d108      	bne.n	8002c8e <HAL_RCC_OscConfig+0x272>
 8002c7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002c84:	4a07      	ldr	r2, [pc, #28]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002c86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c8a:	6053      	str	r3, [r2, #4]
 8002c8c:	e030      	b.n	8002cf0 <HAL_RCC_OscConfig+0x2d4>
 8002c8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	031b      	lsls	r3, r3, #12
 8002c9c:	4901      	ldr	r1, [pc, #4]	@ (8002ca4 <HAL_RCC_OscConfig+0x288>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
 8002ca2:	e025      	b.n	8002cf0 <HAL_RCC_OscConfig+0x2d4>
 8002ca4:	58024400 	.word	0x58024400
 8002ca8:	4b9a      	ldr	r3, [pc, #616]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	061b      	lsls	r3, r3, #24
 8002cb6:	4997      	ldr	r1, [pc, #604]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
 8002cbc:	e018      	b.n	8002cf0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cbe:	4b95      	ldr	r3, [pc, #596]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a94      	ldr	r2, [pc, #592]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cca:	f7fe fdff 	bl	80018cc <HAL_GetTick>
 8002cce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd2:	f7fe fdfb 	bl	80018cc <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e2ed      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ce4:	4b8b      	ldr	r3, [pc, #556]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f0      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80a9 	beq.w	8002e50 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cfe:	4b85      	ldr	r3, [pc, #532]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d08:	4b82      	ldr	r3, [pc, #520]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d007      	beq.n	8002d24 <HAL_RCC_OscConfig+0x308>
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b18      	cmp	r3, #24
 8002d18:	d13a      	bne.n	8002d90 <HAL_RCC_OscConfig+0x374>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d135      	bne.n	8002d90 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d24:	4b7b      	ldr	r3, [pc, #492]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_OscConfig+0x320>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	2b80      	cmp	r3, #128	@ 0x80
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e2c1      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d3c:	f7fe fdf6 	bl	800192c <HAL_GetREVID>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d817      	bhi.n	8002d7a <HAL_RCC_OscConfig+0x35e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	2b20      	cmp	r3, #32
 8002d50:	d108      	bne.n	8002d64 <HAL_RCC_OscConfig+0x348>
 8002d52:	4b70      	ldr	r3, [pc, #448]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002d5a:	4a6e      	ldr	r2, [pc, #440]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002d5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d60:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d62:	e075      	b.n	8002e50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d64:	4b6b      	ldr	r3, [pc, #428]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	069b      	lsls	r3, r3, #26
 8002d72:	4968      	ldr	r1, [pc, #416]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d78:	e06a      	b.n	8002e50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d7a:	4b66      	ldr	r3, [pc, #408]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	061b      	lsls	r3, r3, #24
 8002d88:	4962      	ldr	r1, [pc, #392]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d8e:	e05f      	b.n	8002e50 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d042      	beq.n	8002e1e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d98:	4b5e      	ldr	r3, [pc, #376]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fe fd92 	bl	80018cc <HAL_GetTick>
 8002da8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002dac:	f7fe fd8e 	bl	80018cc <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e280      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dbe:	4b55      	ldr	r3, [pc, #340]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dca:	f7fe fdaf 	bl	800192c <HAL_GetREVID>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d817      	bhi.n	8002e08 <HAL_RCC_OscConfig+0x3ec>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d108      	bne.n	8002df2 <HAL_RCC_OscConfig+0x3d6>
 8002de0:	4b4c      	ldr	r3, [pc, #304]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002de8:	4a4a      	ldr	r2, [pc, #296]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002dea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002dee:	6053      	str	r3, [r2, #4]
 8002df0:	e02e      	b.n	8002e50 <HAL_RCC_OscConfig+0x434>
 8002df2:	4b48      	ldr	r3, [pc, #288]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	069b      	lsls	r3, r3, #26
 8002e00:	4944      	ldr	r1, [pc, #272]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	604b      	str	r3, [r1, #4]
 8002e06:	e023      	b.n	8002e50 <HAL_RCC_OscConfig+0x434>
 8002e08:	4b42      	ldr	r3, [pc, #264]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	061b      	lsls	r3, r3, #24
 8002e16:	493f      	ldr	r1, [pc, #252]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60cb      	str	r3, [r1, #12]
 8002e1c:	e018      	b.n	8002e50 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a3c      	ldr	r2, [pc, #240]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002e24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2a:	f7fe fd4f 	bl	80018cc <HAL_GetTick>
 8002e2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e32:	f7fe fd4b 	bl	80018cc <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e23d      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e44:	4b33      	ldr	r3, [pc, #204]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f0      	bne.n	8002e32 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d036      	beq.n	8002eca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d019      	beq.n	8002e98 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e64:	4b2b      	ldr	r3, [pc, #172]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e68:	4a2a      	ldr	r2, [pc, #168]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e70:	f7fe fd2c 	bl	80018cc <HAL_GetTick>
 8002e74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e78:	f7fe fd28 	bl	80018cc <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e21a      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e8a:	4b22      	ldr	r3, [pc, #136]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x45c>
 8002e96:	e018      	b.n	8002eca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e98:	4b1e      	ldr	r3, [pc, #120]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea4:	f7fe fd12 	bl	80018cc <HAL_GetTick>
 8002ea8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eac:	f7fe fd0e 	bl	80018cc <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e200      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ebe:	4b15      	ldr	r3, [pc, #84]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d039      	beq.n	8002f4a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d01c      	beq.n	8002f18 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ede:	4b0d      	ldr	r3, [pc, #52]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002ee4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ee8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002eea:	f7fe fcef 	bl	80018cc <HAL_GetTick>
 8002eee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ef2:	f7fe fceb 	bl	80018cc <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e1dd      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f04:	4b03      	ldr	r3, [pc, #12]	@ (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x4d6>
 8002f10:	e01b      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
 8002f12:	bf00      	nop
 8002f14:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f18:	4b9b      	ldr	r3, [pc, #620]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a9a      	ldr	r2, [pc, #616]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8002f1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f24:	f7fe fcd2 	bl	80018cc <HAL_GetTick>
 8002f28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f2c:	f7fe fcce 	bl	80018cc <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e1c0      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f3e:	4b92      	ldr	r3, [pc, #584]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 8081 	beq.w	800305a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f58:	4b8c      	ldr	r3, [pc, #560]	@ (800318c <HAL_RCC_OscConfig+0x770>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a8b      	ldr	r2, [pc, #556]	@ (800318c <HAL_RCC_OscConfig+0x770>)
 8002f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f64:	f7fe fcb2 	bl	80018cc <HAL_GetTick>
 8002f68:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6c:	f7fe fcae 	bl	80018cc <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	@ 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e1a0      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f7e:	4b83      	ldr	r3, [pc, #524]	@ (800318c <HAL_RCC_OscConfig+0x770>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d106      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x584>
 8002f92:	4b7d      	ldr	r3, [pc, #500]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f96:	4a7c      	ldr	r2, [pc, #496]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f9e:	e02d      	b.n	8002ffc <HAL_RCC_OscConfig+0x5e0>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10c      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x5a6>
 8002fa8:	4b77      	ldr	r3, [pc, #476]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fac:	4a76      	ldr	r2, [pc, #472]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8002fae:	f023 0301 	bic.w	r3, r3, #1
 8002fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb4:	4b74      	ldr	r3, [pc, #464]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb8:	4a73      	ldr	r2, [pc, #460]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8002fba:	f023 0304 	bic.w	r3, r3, #4
 8002fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc0:	e01c      	b.n	8002ffc <HAL_RCC_OscConfig+0x5e0>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2b05      	cmp	r3, #5
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x5c8>
 8002fca:	4b6f      	ldr	r3, [pc, #444]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fce:	4a6e      	ldr	r2, [pc, #440]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8002fd0:	f043 0304 	orr.w	r3, r3, #4
 8002fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd6:	4b6c      	ldr	r3, [pc, #432]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fda:	4a6b      	ldr	r2, [pc, #428]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe2:	e00b      	b.n	8002ffc <HAL_RCC_OscConfig+0x5e0>
 8002fe4:	4b68      	ldr	r3, [pc, #416]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe8:	4a67      	ldr	r2, [pc, #412]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8002fea:	f023 0301 	bic.w	r3, r3, #1
 8002fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ff0:	4b65      	ldr	r3, [pc, #404]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff4:	4a64      	ldr	r2, [pc, #400]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8002ff6:	f023 0304 	bic.w	r3, r3, #4
 8002ffa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d015      	beq.n	8003030 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fe fc62 	bl	80018cc <HAL_GetTick>
 8003008:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800300a:	e00a      	b.n	8003022 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300c:	f7fe fc5e 	bl	80018cc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e14e      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003022:	4b59      	ldr	r3, [pc, #356]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0ee      	beq.n	800300c <HAL_RCC_OscConfig+0x5f0>
 800302e:	e014      	b.n	800305a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003030:	f7fe fc4c 	bl	80018cc <HAL_GetTick>
 8003034:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003036:	e00a      	b.n	800304e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003038:	f7fe fc48 	bl	80018cc <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e138      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800304e:	4b4e      	ldr	r3, [pc, #312]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1ee      	bne.n	8003038 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 812d 	beq.w	80032be <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003064:	4b48      	ldr	r3, [pc, #288]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800306c:	2b18      	cmp	r3, #24
 800306e:	f000 80bd 	beq.w	80031ec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	2b02      	cmp	r3, #2
 8003078:	f040 809e 	bne.w	80031b8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307c:	4b42      	ldr	r3, [pc, #264]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a41      	ldr	r2, [pc, #260]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8003082:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe fc20 	bl	80018cc <HAL_GetTick>
 800308c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7fe fc1c 	bl	80018cc <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e10e      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030a2:	4b39      	ldr	r3, [pc, #228]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ae:	4b36      	ldr	r3, [pc, #216]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 80030b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030b2:	4b37      	ldr	r3, [pc, #220]	@ (8003190 <HAL_RCC_OscConfig+0x774>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80030be:	0112      	lsls	r2, r2, #4
 80030c0:	430a      	orrs	r2, r1
 80030c2:	4931      	ldr	r1, [pc, #196]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030cc:	3b01      	subs	r3, #1
 80030ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d6:	3b01      	subs	r3, #1
 80030d8:	025b      	lsls	r3, r3, #9
 80030da:	b29b      	uxth	r3, r3
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e2:	3b01      	subs	r3, #1
 80030e4:	041b      	lsls	r3, r3, #16
 80030e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f0:	3b01      	subs	r3, #1
 80030f2:	061b      	lsls	r3, r3, #24
 80030f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80030f8:	4923      	ldr	r1, [pc, #140]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80030fe:	4b22      	ldr	r3, [pc, #136]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8003100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003102:	4a21      	ldr	r2, [pc, #132]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800310a:	4b1f      	ldr	r3, [pc, #124]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 800310c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800310e:	4b21      	ldr	r3, [pc, #132]	@ (8003194 <HAL_RCC_OscConfig+0x778>)
 8003110:	4013      	ands	r3, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003116:	00d2      	lsls	r2, r2, #3
 8003118:	491b      	ldr	r1, [pc, #108]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 800311a:	4313      	orrs	r3, r2
 800311c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800311e:	4b1a      	ldr	r3, [pc, #104]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8003120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003122:	f023 020c 	bic.w	r2, r3, #12
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	4917      	ldr	r1, [pc, #92]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 800312c:	4313      	orrs	r3, r2
 800312e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003130:	4b15      	ldr	r3, [pc, #84]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8003132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003134:	f023 0202 	bic.w	r2, r3, #2
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313c:	4912      	ldr	r1, [pc, #72]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 800313e:	4313      	orrs	r3, r2
 8003140:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003142:	4b11      	ldr	r3, [pc, #68]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8003144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003146:	4a10      	ldr	r2, [pc, #64]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8003148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800314c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800314e:	4b0e      	ldr	r3, [pc, #56]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8003150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003152:	4a0d      	ldr	r2, [pc, #52]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8003154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003158:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800315a:	4b0b      	ldr	r3, [pc, #44]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 800315c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315e:	4a0a      	ldr	r2, [pc, #40]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8003160:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003164:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003166:	4b08      	ldr	r3, [pc, #32]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8003168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316a:	4a07      	ldr	r2, [pc, #28]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003172:	4b05      	ldr	r3, [pc, #20]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a04      	ldr	r2, [pc, #16]	@ (8003188 <HAL_RCC_OscConfig+0x76c>)
 8003178:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800317c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317e:	f7fe fba5 	bl	80018cc <HAL_GetTick>
 8003182:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003184:	e011      	b.n	80031aa <HAL_RCC_OscConfig+0x78e>
 8003186:	bf00      	nop
 8003188:	58024400 	.word	0x58024400
 800318c:	58024800 	.word	0x58024800
 8003190:	fffffc0c 	.word	0xfffffc0c
 8003194:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003198:	f7fe fb98 	bl	80018cc <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e08a      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031aa:	4b47      	ldr	r3, [pc, #284]	@ (80032c8 <HAL_RCC_OscConfig+0x8ac>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0x77c>
 80031b6:	e082      	b.n	80032be <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b8:	4b43      	ldr	r3, [pc, #268]	@ (80032c8 <HAL_RCC_OscConfig+0x8ac>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a42      	ldr	r2, [pc, #264]	@ (80032c8 <HAL_RCC_OscConfig+0x8ac>)
 80031be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fe fb82 	bl	80018cc <HAL_GetTick>
 80031c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031cc:	f7fe fb7e 	bl	80018cc <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e070      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031de:	4b3a      	ldr	r3, [pc, #232]	@ (80032c8 <HAL_RCC_OscConfig+0x8ac>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x7b0>
 80031ea:	e068      	b.n	80032be <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80031ec:	4b36      	ldr	r3, [pc, #216]	@ (80032c8 <HAL_RCC_OscConfig+0x8ac>)
 80031ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031f2:	4b35      	ldr	r3, [pc, #212]	@ (80032c8 <HAL_RCC_OscConfig+0x8ac>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d031      	beq.n	8003264 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f003 0203 	and.w	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d12a      	bne.n	8003264 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321a:	429a      	cmp	r2, r3
 800321c:	d122      	bne.n	8003264 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003228:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d11a      	bne.n	8003264 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	0a5b      	lsrs	r3, r3, #9
 8003232:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800323a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800323c:	429a      	cmp	r2, r3
 800323e:	d111      	bne.n	8003264 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	0c1b      	lsrs	r3, r3, #16
 8003244:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d108      	bne.n	8003264 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	0e1b      	lsrs	r3, r3, #24
 8003256:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e02b      	b.n	80032c0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003268:	4b17      	ldr	r3, [pc, #92]	@ (80032c8 <HAL_RCC_OscConfig+0x8ac>)
 800326a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800326c:	08db      	lsrs	r3, r3, #3
 800326e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003272:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	429a      	cmp	r2, r3
 800327c:	d01f      	beq.n	80032be <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800327e:	4b12      	ldr	r3, [pc, #72]	@ (80032c8 <HAL_RCC_OscConfig+0x8ac>)
 8003280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003282:	4a11      	ldr	r2, [pc, #68]	@ (80032c8 <HAL_RCC_OscConfig+0x8ac>)
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800328a:	f7fe fb1f 	bl	80018cc <HAL_GetTick>
 800328e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003290:	bf00      	nop
 8003292:	f7fe fb1b 	bl	80018cc <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329a:	4293      	cmp	r3, r2
 800329c:	d0f9      	beq.n	8003292 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800329e:	4b0a      	ldr	r3, [pc, #40]	@ (80032c8 <HAL_RCC_OscConfig+0x8ac>)
 80032a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032a2:	4b0a      	ldr	r3, [pc, #40]	@ (80032cc <HAL_RCC_OscConfig+0x8b0>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032aa:	00d2      	lsls	r2, r2, #3
 80032ac:	4906      	ldr	r1, [pc, #24]	@ (80032c8 <HAL_RCC_OscConfig+0x8ac>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80032b2:	4b05      	ldr	r3, [pc, #20]	@ (80032c8 <HAL_RCC_OscConfig+0x8ac>)
 80032b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b6:	4a04      	ldr	r2, [pc, #16]	@ (80032c8 <HAL_RCC_OscConfig+0x8ac>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3730      	adds	r7, #48	@ 0x30
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	58024400 	.word	0x58024400
 80032cc:	ffff0007 	.word	0xffff0007

080032d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e19c      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032e4:	4b8a      	ldr	r3, [pc, #552]	@ (8003510 <HAL_RCC_ClockConfig+0x240>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d910      	bls.n	8003314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b87      	ldr	r3, [pc, #540]	@ (8003510 <HAL_RCC_ClockConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 020f 	bic.w	r2, r3, #15
 80032fa:	4985      	ldr	r1, [pc, #532]	@ (8003510 <HAL_RCC_ClockConfig+0x240>)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b83      	ldr	r3, [pc, #524]	@ (8003510 <HAL_RCC_ClockConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e184      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d010      	beq.n	8003342 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	4b7b      	ldr	r3, [pc, #492]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800332c:	429a      	cmp	r2, r3
 800332e:	d908      	bls.n	8003342 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003330:	4b78      	ldr	r3, [pc, #480]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	4975      	ldr	r1, [pc, #468]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 800333e:	4313      	orrs	r3, r2
 8003340:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d010      	beq.n	8003370 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	4b70      	ldr	r3, [pc, #448]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800335a:	429a      	cmp	r2, r3
 800335c:	d908      	bls.n	8003370 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800335e:	4b6d      	ldr	r3, [pc, #436]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	496a      	ldr	r1, [pc, #424]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 800336c:	4313      	orrs	r3, r2
 800336e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0310 	and.w	r3, r3, #16
 8003378:	2b00      	cmp	r3, #0
 800337a:	d010      	beq.n	800339e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699a      	ldr	r2, [r3, #24]
 8003380:	4b64      	ldr	r3, [pc, #400]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003388:	429a      	cmp	r2, r3
 800338a:	d908      	bls.n	800339e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800338c:	4b61      	ldr	r3, [pc, #388]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	495e      	ldr	r1, [pc, #376]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 800339a:	4313      	orrs	r3, r2
 800339c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d010      	beq.n	80033cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69da      	ldr	r2, [r3, #28]
 80033ae:	4b59      	ldr	r3, [pc, #356]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d908      	bls.n	80033cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80033ba:	4b56      	ldr	r3, [pc, #344]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	4953      	ldr	r1, [pc, #332]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d010      	beq.n	80033fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d908      	bls.n	80033fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f023 020f 	bic.w	r2, r3, #15
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4947      	ldr	r1, [pc, #284]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d055      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003406:	4b43      	ldr	r3, [pc, #268]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	4940      	ldr	r1, [pc, #256]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003414:	4313      	orrs	r3, r2
 8003416:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d107      	bne.n	8003430 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003420:	4b3c      	ldr	r3, [pc, #240]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d121      	bne.n	8003470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0f6      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d107      	bne.n	8003448 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003438:	4b36      	ldr	r3, [pc, #216]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d115      	bne.n	8003470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0ea      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d107      	bne.n	8003460 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003450:	4b30      	ldr	r3, [pc, #192]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0de      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003460:	4b2c      	ldr	r3, [pc, #176]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0d6      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003470:	4b28      	ldr	r3, [pc, #160]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f023 0207 	bic.w	r2, r3, #7
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4925      	ldr	r1, [pc, #148]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 800347e:	4313      	orrs	r3, r2
 8003480:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003482:	f7fe fa23 	bl	80018cc <HAL_GetTick>
 8003486:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800348a:	f7fe fa1f 	bl	80018cc <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e0be      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d1eb      	bne.n	800348a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d010      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	4b14      	ldr	r3, [pc, #80]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d208      	bcs.n	80034e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ce:	4b11      	ldr	r3, [pc, #68]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f023 020f 	bic.w	r2, r3, #15
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	490e      	ldr	r1, [pc, #56]	@ (8003514 <HAL_RCC_ClockConfig+0x244>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003510 <HAL_RCC_ClockConfig+0x240>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d214      	bcs.n	8003518 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b08      	ldr	r3, [pc, #32]	@ (8003510 <HAL_RCC_ClockConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 020f 	bic.w	r2, r3, #15
 80034f6:	4906      	ldr	r1, [pc, #24]	@ (8003510 <HAL_RCC_ClockConfig+0x240>)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	4b04      	ldr	r3, [pc, #16]	@ (8003510 <HAL_RCC_ClockConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d005      	beq.n	8003518 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e086      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
 8003510:	52002000 	.word	0x52002000
 8003514:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d010      	beq.n	8003546 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	4b3f      	ldr	r3, [pc, #252]	@ (8003628 <HAL_RCC_ClockConfig+0x358>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003530:	429a      	cmp	r2, r3
 8003532:	d208      	bcs.n	8003546 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003534:	4b3c      	ldr	r3, [pc, #240]	@ (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	4939      	ldr	r1, [pc, #228]	@ (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003542:	4313      	orrs	r3, r2
 8003544:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d010      	beq.n	8003574 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	4b34      	ldr	r3, [pc, #208]	@ (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800355e:	429a      	cmp	r2, r3
 8003560:	d208      	bcs.n	8003574 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003562:	4b31      	ldr	r3, [pc, #196]	@ (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	492e      	ldr	r1, [pc, #184]	@ (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003570:	4313      	orrs	r3, r2
 8003572:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	d010      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699a      	ldr	r2, [r3, #24]
 8003584:	4b28      	ldr	r3, [pc, #160]	@ (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800358c:	429a      	cmp	r2, r3
 800358e:	d208      	bcs.n	80035a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003590:	4b25      	ldr	r3, [pc, #148]	@ (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	4922      	ldr	r1, [pc, #136]	@ (8003628 <HAL_RCC_ClockConfig+0x358>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d010      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003628 <HAL_RCC_ClockConfig+0x358>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d208      	bcs.n	80035d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035be:	4b1a      	ldr	r3, [pc, #104]	@ (8003628 <HAL_RCC_ClockConfig+0x358>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	4917      	ldr	r1, [pc, #92]	@ (8003628 <HAL_RCC_ClockConfig+0x358>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035d0:	f000 f834 	bl	800363c <HAL_RCC_GetSysClockFreq>
 80035d4:	4602      	mov	r2, r0
 80035d6:	4b14      	ldr	r3, [pc, #80]	@ (8003628 <HAL_RCC_ClockConfig+0x358>)
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	0a1b      	lsrs	r3, r3, #8
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	4912      	ldr	r1, [pc, #72]	@ (800362c <HAL_RCC_ClockConfig+0x35c>)
 80035e2:	5ccb      	ldrb	r3, [r1, r3]
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
 80035ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003628 <HAL_RCC_ClockConfig+0x358>)
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	4a0d      	ldr	r2, [pc, #52]	@ (800362c <HAL_RCC_ClockConfig+0x35c>)
 80035f8:	5cd3      	ldrb	r3, [r2, r3]
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
 8003604:	4a0a      	ldr	r2, [pc, #40]	@ (8003630 <HAL_RCC_ClockConfig+0x360>)
 8003606:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003608:	4a0a      	ldr	r2, [pc, #40]	@ (8003634 <HAL_RCC_ClockConfig+0x364>)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800360e:	4b0a      	ldr	r3, [pc, #40]	@ (8003638 <HAL_RCC_ClockConfig+0x368>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd ffa0 	bl	8001558 <HAL_InitTick>
 8003618:	4603      	mov	r3, r0
 800361a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800361c:	7bfb      	ldrb	r3, [r7, #15]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	58024400 	.word	0x58024400
 800362c:	0800b53c 	.word	0x0800b53c
 8003630:	24000004 	.word	0x24000004
 8003634:	24000000 	.word	0x24000000
 8003638:	24000008 	.word	0x24000008

0800363c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	@ 0x24
 8003640:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003642:	4bb3      	ldr	r3, [pc, #716]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800364a:	2b18      	cmp	r3, #24
 800364c:	f200 8155 	bhi.w	80038fa <HAL_RCC_GetSysClockFreq+0x2be>
 8003650:	a201      	add	r2, pc, #4	@ (adr r2, 8003658 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003656:	bf00      	nop
 8003658:	080036bd 	.word	0x080036bd
 800365c:	080038fb 	.word	0x080038fb
 8003660:	080038fb 	.word	0x080038fb
 8003664:	080038fb 	.word	0x080038fb
 8003668:	080038fb 	.word	0x080038fb
 800366c:	080038fb 	.word	0x080038fb
 8003670:	080038fb 	.word	0x080038fb
 8003674:	080038fb 	.word	0x080038fb
 8003678:	080036e3 	.word	0x080036e3
 800367c:	080038fb 	.word	0x080038fb
 8003680:	080038fb 	.word	0x080038fb
 8003684:	080038fb 	.word	0x080038fb
 8003688:	080038fb 	.word	0x080038fb
 800368c:	080038fb 	.word	0x080038fb
 8003690:	080038fb 	.word	0x080038fb
 8003694:	080038fb 	.word	0x080038fb
 8003698:	080036e9 	.word	0x080036e9
 800369c:	080038fb 	.word	0x080038fb
 80036a0:	080038fb 	.word	0x080038fb
 80036a4:	080038fb 	.word	0x080038fb
 80036a8:	080038fb 	.word	0x080038fb
 80036ac:	080038fb 	.word	0x080038fb
 80036b0:	080038fb 	.word	0x080038fb
 80036b4:	080038fb 	.word	0x080038fb
 80036b8:	080036ef 	.word	0x080036ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036bc:	4b94      	ldr	r3, [pc, #592]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d009      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036c8:	4b91      	ldr	r3, [pc, #580]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	08db      	lsrs	r3, r3, #3
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	4a90      	ldr	r2, [pc, #576]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
 80036d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80036da:	e111      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036dc:	4b8d      	ldr	r3, [pc, #564]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036de:	61bb      	str	r3, [r7, #24]
      break;
 80036e0:	e10e      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80036e2:	4b8d      	ldr	r3, [pc, #564]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036e4:	61bb      	str	r3, [r7, #24]
      break;
 80036e6:	e10b      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80036e8:	4b8c      	ldr	r3, [pc, #560]	@ (800391c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80036ea:	61bb      	str	r3, [r7, #24]
      break;
 80036ec:	e108      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036ee:	4b88      	ldr	r3, [pc, #544]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80036f8:	4b85      	ldr	r3, [pc, #532]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003702:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003704:	4b82      	ldr	r3, [pc, #520]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800370e:	4b80      	ldr	r3, [pc, #512]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003712:	08db      	lsrs	r3, r3, #3
 8003714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	ee07 3a90 	vmov	s15, r3
 8003722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003726:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80e1 	beq.w	80038f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2b02      	cmp	r3, #2
 8003736:	f000 8083 	beq.w	8003840 <HAL_RCC_GetSysClockFreq+0x204>
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b02      	cmp	r3, #2
 800373e:	f200 80a1 	bhi.w	8003884 <HAL_RCC_GetSysClockFreq+0x248>
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0x114>
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d056      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800374e:	e099      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003750:	4b6f      	ldr	r3, [pc, #444]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d02d      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800375c:	4b6c      	ldr	r3, [pc, #432]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	08db      	lsrs	r3, r3, #3
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	4a6b      	ldr	r2, [pc, #428]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003768:	fa22 f303 	lsr.w	r3, r2, r3
 800376c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	ee07 3a90 	vmov	s15, r3
 800377e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003786:	4b62      	ldr	r3, [pc, #392]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003796:	ed97 6a02 	vldr	s12, [r7, #8]
 800379a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003920 <HAL_RCC_GetSysClockFreq+0x2e4>
 800379e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80037b6:	e087      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003924 <HAL_RCC_GetSysClockFreq+0x2e8>
 80037c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ca:	4b51      	ldr	r3, [pc, #324]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037da:	ed97 6a02 	vldr	s12, [r7, #8]
 80037de:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003920 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037fa:	e065      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003806:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003928 <HAL_RCC_GetSysClockFreq+0x2ec>
 800380a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800380e:	4b40      	ldr	r3, [pc, #256]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003822:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003920 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800382a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800382e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800383e:	e043      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800392c <HAL_RCC_GetSysClockFreq+0x2f0>
 800384e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003852:	4b2f      	ldr	r3, [pc, #188]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003862:	ed97 6a02 	vldr	s12, [r7, #8]
 8003866:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003920 <HAL_RCC_GetSysClockFreq+0x2e4>
 800386a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800386e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800387a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003882:	e021      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003928 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003896:	4b1e      	ldr	r3, [pc, #120]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80038aa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003920 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80038c8:	4b11      	ldr	r3, [pc, #68]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038cc:	0a5b      	lsrs	r3, r3, #9
 80038ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038d2:	3301      	adds	r3, #1
 80038d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	ee07 3a90 	vmov	s15, r3
 80038dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80038e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ec:	ee17 3a90 	vmov	r3, s15
 80038f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80038f2:	e005      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61bb      	str	r3, [r7, #24]
      break;
 80038f8:	e002      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80038fa:	4b07      	ldr	r3, [pc, #28]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038fc:	61bb      	str	r3, [r7, #24]
      break;
 80038fe:	bf00      	nop
  }

  return sysclockfreq;
 8003900:	69bb      	ldr	r3, [r7, #24]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3724      	adds	r7, #36	@ 0x24
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	58024400 	.word	0x58024400
 8003914:	03d09000 	.word	0x03d09000
 8003918:	003d0900 	.word	0x003d0900
 800391c:	007a1200 	.word	0x007a1200
 8003920:	46000000 	.word	0x46000000
 8003924:	4c742400 	.word	0x4c742400
 8003928:	4a742400 	.word	0x4a742400
 800392c:	4af42400 	.word	0x4af42400

08003930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003936:	f7ff fe81 	bl	800363c <HAL_RCC_GetSysClockFreq>
 800393a:	4602      	mov	r2, r0
 800393c:	4b10      	ldr	r3, [pc, #64]	@ (8003980 <HAL_RCC_GetHCLKFreq+0x50>)
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	0a1b      	lsrs	r3, r3, #8
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	490f      	ldr	r1, [pc, #60]	@ (8003984 <HAL_RCC_GetHCLKFreq+0x54>)
 8003948:	5ccb      	ldrb	r3, [r1, r3]
 800394a:	f003 031f 	and.w	r3, r3, #31
 800394e:	fa22 f303 	lsr.w	r3, r2, r3
 8003952:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003954:	4b0a      	ldr	r3, [pc, #40]	@ (8003980 <HAL_RCC_GetHCLKFreq+0x50>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	4a09      	ldr	r2, [pc, #36]	@ (8003984 <HAL_RCC_GetHCLKFreq+0x54>)
 800395e:	5cd3      	ldrb	r3, [r2, r3]
 8003960:	f003 031f 	and.w	r3, r3, #31
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	fa22 f303 	lsr.w	r3, r2, r3
 800396a:	4a07      	ldr	r2, [pc, #28]	@ (8003988 <HAL_RCC_GetHCLKFreq+0x58>)
 800396c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800396e:	4a07      	ldr	r2, [pc, #28]	@ (800398c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003974:	4b04      	ldr	r3, [pc, #16]	@ (8003988 <HAL_RCC_GetHCLKFreq+0x58>)
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	58024400 	.word	0x58024400
 8003984:	0800b53c 	.word	0x0800b53c
 8003988:	24000004 	.word	0x24000004
 800398c:	24000000 	.word	0x24000000

08003990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003994:	f7ff ffcc 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b06      	ldr	r3, [pc, #24]	@ (80039b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4904      	ldr	r1, [pc, #16]	@ (80039b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	58024400 	.word	0x58024400
 80039b8:	0800b53c 	.word	0x0800b53c

080039bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80039c0:	f7ff ffb6 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 80039c4:	4602      	mov	r2, r0
 80039c6:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	0a1b      	lsrs	r3, r3, #8
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	4904      	ldr	r1, [pc, #16]	@ (80039e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039d2:	5ccb      	ldrb	r3, [r1, r3]
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80039dc:	4618      	mov	r0, r3
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	58024400 	.word	0x58024400
 80039e4:	0800b53c 	.word	0x0800b53c

080039e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	223f      	movs	r2, #63	@ 0x3f
 80039f6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a64 <HAL_RCC_GetClockConfig+0x7c>)
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	f003 0207 	and.w	r2, r3, #7
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003a04:	4b17      	ldr	r3, [pc, #92]	@ (8003a64 <HAL_RCC_GetClockConfig+0x7c>)
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003a10:	4b14      	ldr	r3, [pc, #80]	@ (8003a64 <HAL_RCC_GetClockConfig+0x7c>)
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f003 020f 	and.w	r2, r3, #15
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003a1c:	4b11      	ldr	r3, [pc, #68]	@ (8003a64 <HAL_RCC_GetClockConfig+0x7c>)
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003a28:	4b0e      	ldr	r3, [pc, #56]	@ (8003a64 <HAL_RCC_GetClockConfig+0x7c>)
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003a34:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <HAL_RCC_GetClockConfig+0x7c>)
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003a40:	4b08      	ldr	r3, [pc, #32]	@ (8003a64 <HAL_RCC_GetClockConfig+0x7c>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a4c:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <HAL_RCC_GetClockConfig+0x80>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 020f 	and.w	r2, r3, #15
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	601a      	str	r2, [r3, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	58024400 	.word	0x58024400
 8003a68:	52002000 	.word	0x52002000

08003a6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a70:	b0ca      	sub	sp, #296	@ 0x128
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003a90:	2500      	movs	r5, #0
 8003a92:	ea54 0305 	orrs.w	r3, r4, r5
 8003a96:	d049      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003aa2:	d02f      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003aa4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003aa8:	d828      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003aaa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aae:	d01a      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ab0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ab4:	d822      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003aba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003abe:	d007      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ac0:	e01c      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac2:	4bb8      	ldr	r3, [pc, #736]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac6:	4ab7      	ldr	r2, [pc, #732]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003acc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ace:	e01a      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad4:	3308      	adds	r3, #8
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f001 fc8f 	bl	80053fc <RCCEx_PLL2_Config>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ae4:	e00f      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aea:	3328      	adds	r3, #40	@ 0x28
 8003aec:	2102      	movs	r1, #2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f001 fd36 	bl	8005560 <RCCEx_PLL3_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003afa:	e004      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b02:	e000      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10a      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b0e:	4ba5      	ldr	r3, [pc, #660]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b12:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b1c:	4aa1      	ldr	r2, [pc, #644]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b22:	e003      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b34:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003b38:	f04f 0900 	mov.w	r9, #0
 8003b3c:	ea58 0309 	orrs.w	r3, r8, r9
 8003b40:	d047      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d82a      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b54 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b52:	bf00      	nop
 8003b54:	08003b69 	.word	0x08003b69
 8003b58:	08003b77 	.word	0x08003b77
 8003b5c:	08003b8d 	.word	0x08003b8d
 8003b60:	08003bab 	.word	0x08003bab
 8003b64:	08003bab 	.word	0x08003bab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b68:	4b8e      	ldr	r3, [pc, #568]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6c:	4a8d      	ldr	r2, [pc, #564]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b74:	e01a      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7a:	3308      	adds	r3, #8
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 fc3c 	bl	80053fc <RCCEx_PLL2_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b8a:	e00f      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b90:	3328      	adds	r3, #40	@ 0x28
 8003b92:	2100      	movs	r1, #0
 8003b94:	4618      	mov	r0, r3
 8003b96:	f001 fce3 	bl	8005560 <RCCEx_PLL3_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ba0:	e004      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ba8:	e000      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10a      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bb4:	4b7b      	ldr	r3, [pc, #492]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb8:	f023 0107 	bic.w	r1, r3, #7
 8003bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc2:	4a78      	ldr	r2, [pc, #480]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bc8:	e003      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003bde:	f04f 0b00 	mov.w	fp, #0
 8003be2:	ea5a 030b 	orrs.w	r3, sl, fp
 8003be6:	d04c      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf2:	d030      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003bf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf8:	d829      	bhi.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003bfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bfc:	d02d      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003bfe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c00:	d825      	bhi.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c02:	2b80      	cmp	r3, #128	@ 0x80
 8003c04:	d018      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003c06:	2b80      	cmp	r3, #128	@ 0x80
 8003c08:	d821      	bhi.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003c0e:	2b40      	cmp	r3, #64	@ 0x40
 8003c10:	d007      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003c12:	e01c      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c14:	4b63      	ldr	r3, [pc, #396]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c18:	4a62      	ldr	r2, [pc, #392]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c20:	e01c      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c26:	3308      	adds	r3, #8
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f001 fbe6 	bl	80053fc <RCCEx_PLL2_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c36:	e011      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3c:	3328      	adds	r3, #40	@ 0x28
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f001 fc8d 	bl	8005560 <RCCEx_PLL3_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c4c:	e006      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c54:	e002      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c56:	bf00      	nop
 8003c58:	e000      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10a      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003c64:	4b4f      	ldr	r3, [pc, #316]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c68:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c72:	4a4c      	ldr	r2, [pc, #304]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c74:	430b      	orrs	r3, r1
 8003c76:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c78:	e003      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003c8e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003c92:	2300      	movs	r3, #0
 8003c94:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003c98:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	d053      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003caa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cae:	d035      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003cb0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cb4:	d82e      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003cb6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003cba:	d031      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003cbc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003cc0:	d828      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003cc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cc6:	d01a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003cc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ccc:	d822      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003cd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cd6:	d007      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003cd8:	e01c      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cda:	4b32      	ldr	r3, [pc, #200]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cde:	4a31      	ldr	r2, [pc, #196]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ce6:	e01c      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cec:	3308      	adds	r3, #8
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 fb83 	bl	80053fc <RCCEx_PLL2_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003cfc:	e011      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d02:	3328      	adds	r3, #40	@ 0x28
 8003d04:	2100      	movs	r1, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f001 fc2a 	bl	8005560 <RCCEx_PLL3_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d12:	e006      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d1a:	e002      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003d1c:	bf00      	nop
 8003d1e:	e000      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10b      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d40:	e003      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003d56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003d60:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003d64:	460b      	mov	r3, r1
 8003d66:	4313      	orrs	r3, r2
 8003d68:	d056      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d76:	d038      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003d78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d7c:	d831      	bhi.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d82:	d034      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003d84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d88:	d82b      	bhi.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d8e:	d01d      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003d90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d94:	d825      	bhi.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d006      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003d9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d9e:	d00a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003da0:	e01f      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003da2:	bf00      	nop
 8003da4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da8:	4ba2      	ldr	r3, [pc, #648]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dac:	4aa1      	ldr	r2, [pc, #644]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003db2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003db4:	e01c      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dba:	3308      	adds	r3, #8
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f001 fb1c 	bl	80053fc <RCCEx_PLL2_Config>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003dca:	e011      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd0:	3328      	adds	r3, #40	@ 0x28
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f001 fbc3 	bl	8005560 <RCCEx_PLL3_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003de0:	e006      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003de8:	e002      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003dea:	bf00      	nop
 8003dec:	e000      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10b      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003df8:	4b8e      	ldr	r3, [pc, #568]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003e08:	4a8a      	ldr	r2, [pc, #552]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e0a:	430b      	orrs	r3, r1
 8003e0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e0e:	e003      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003e24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003e2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003e32:	460b      	mov	r3, r1
 8003e34:	4313      	orrs	r3, r2
 8003e36:	d03a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e3e:	2b30      	cmp	r3, #48	@ 0x30
 8003e40:	d01f      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003e42:	2b30      	cmp	r3, #48	@ 0x30
 8003e44:	d819      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	d00c      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d815      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d019      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d111      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e56:	4b77      	ldr	r3, [pc, #476]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5a:	4a76      	ldr	r2, [pc, #472]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e62:	e011      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e68:	3308      	adds	r3, #8
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f001 fac5 	bl	80053fc <RCCEx_PLL2_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e78:	e006      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e80:	e002      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003e82:	bf00      	nop
 8003e84:	e000      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10a      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e90:	4b68      	ldr	r3, [pc, #416]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e9e:	4a65      	ldr	r2, [pc, #404]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ea4:	e003      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003eba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003ec4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	d051      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ed8:	d035      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003eda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ede:	d82e      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ee0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ee4:	d031      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003ee6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003eea:	d828      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ef0:	d01a      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003ef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ef6:	d822      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f00:	d007      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003f02:	e01c      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f04:	4b4b      	ldr	r3, [pc, #300]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f08:	4a4a      	ldr	r2, [pc, #296]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f10:	e01c      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f16:	3308      	adds	r3, #8
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f001 fa6e 	bl	80053fc <RCCEx_PLL2_Config>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f26:	e011      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2c:	3328      	adds	r3, #40	@ 0x28
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 fb15 	bl	8005560 <RCCEx_PLL3_Config>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f3c:	e006      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f44:	e002      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f46:	bf00      	nop
 8003f48:	e000      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f54:	4b37      	ldr	r3, [pc, #220]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f58:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f62:	4a34      	ldr	r2, [pc, #208]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f68:	e003      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003f7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003f88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	d056      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f9c:	d033      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003f9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fa2:	d82c      	bhi.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fa4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fa8:	d02f      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003faa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fae:	d826      	bhi.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003fb4:	d02b      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003fb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003fba:	d820      	bhi.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fc0:	d012      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003fc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fc6:	d81a      	bhi.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d022      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fd0:	d115      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	2101      	movs	r1, #1
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f001 fa0e 	bl	80053fc <RCCEx_PLL2_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003fe6:	e015      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fec:	3328      	adds	r3, #40	@ 0x28
 8003fee:	2101      	movs	r1, #1
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f001 fab5 	bl	8005560 <RCCEx_PLL3_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ffc:	e00a      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004004:	e006      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004006:	bf00      	nop
 8004008:	e004      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800400a:	bf00      	nop
 800400c:	e002      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10d      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800401c:	4b05      	ldr	r3, [pc, #20]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800401e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004020:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004028:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800402a:	4a02      	ldr	r2, [pc, #8]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800402c:	430b      	orrs	r3, r1
 800402e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004030:	e006      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004032:	bf00      	nop
 8004034:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004038:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800403c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004048:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800404c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004050:	2300      	movs	r3, #0
 8004052:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004056:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800405a:	460b      	mov	r3, r1
 800405c:	4313      	orrs	r3, r2
 800405e:	d055      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004064:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004068:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800406c:	d033      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800406e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004072:	d82c      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004078:	d02f      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800407a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800407e:	d826      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004080:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004084:	d02b      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004086:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800408a:	d820      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800408c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004090:	d012      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004092:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004096:	d81a      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d022      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800409c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040a0:	d115      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a6:	3308      	adds	r3, #8
 80040a8:	2101      	movs	r1, #1
 80040aa:	4618      	mov	r0, r3
 80040ac:	f001 f9a6 	bl	80053fc <RCCEx_PLL2_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040b6:	e015      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040bc:	3328      	adds	r3, #40	@ 0x28
 80040be:	2101      	movs	r1, #1
 80040c0:	4618      	mov	r0, r3
 80040c2:	f001 fa4d 	bl	8005560 <RCCEx_PLL3_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040cc:	e00a      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040d4:	e006      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040d6:	bf00      	nop
 80040d8:	e004      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040da:	bf00      	nop
 80040dc:	e002      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040de:	bf00      	nop
 80040e0:	e000      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10b      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80040ec:	4ba3      	ldr	r3, [pc, #652]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80040f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80040fc:	4a9f      	ldr	r2, [pc, #636]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040fe:	430b      	orrs	r3, r1
 8004100:	6593      	str	r3, [r2, #88]	@ 0x58
 8004102:	e003      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004104:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004108:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800410c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004118:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800411c:	2300      	movs	r3, #0
 800411e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004122:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004126:	460b      	mov	r3, r1
 8004128:	4313      	orrs	r3, r2
 800412a:	d037      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800412c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004132:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004136:	d00e      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004138:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800413c:	d816      	bhi.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800413e:	2b00      	cmp	r3, #0
 8004140:	d018      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004142:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004146:	d111      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004148:	4b8c      	ldr	r3, [pc, #560]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800414a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414c:	4a8b      	ldr	r2, [pc, #556]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800414e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004152:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004154:	e00f      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415a:	3308      	adds	r3, #8
 800415c:	2101      	movs	r1, #1
 800415e:	4618      	mov	r0, r3
 8004160:	f001 f94c 	bl	80053fc <RCCEx_PLL2_Config>
 8004164:	4603      	mov	r3, r0
 8004166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800416a:	e004      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004172:	e000      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10a      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800417e:	4b7f      	ldr	r3, [pc, #508]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004182:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418c:	4a7b      	ldr	r2, [pc, #492]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800418e:	430b      	orrs	r3, r1
 8004190:	6513      	str	r3, [r2, #80]	@ 0x50
 8004192:	e003      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004198:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80041a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041ac:	2300      	movs	r3, #0
 80041ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80041b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4313      	orrs	r3, r2
 80041ba:	d039      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80041bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	d81c      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80041c6:	a201      	add	r2, pc, #4	@ (adr r2, 80041cc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	08004209 	.word	0x08004209
 80041d0:	080041dd 	.word	0x080041dd
 80041d4:	080041eb 	.word	0x080041eb
 80041d8:	08004209 	.word	0x08004209
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041dc:	4b67      	ldr	r3, [pc, #412]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e0:	4a66      	ldr	r2, [pc, #408]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041e8:	e00f      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	3308      	adds	r3, #8
 80041f0:	2102      	movs	r1, #2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f001 f902 	bl	80053fc <RCCEx_PLL2_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041fe:	e004      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004206:	e000      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800420a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004212:	4b5a      	ldr	r3, [pc, #360]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004216:	f023 0103 	bic.w	r1, r3, #3
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004220:	4a56      	ldr	r2, [pc, #344]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004222:	430b      	orrs	r3, r1
 8004224:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004226:	e003      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800422c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800423c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004240:	2300      	movs	r3, #0
 8004242:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004246:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800424a:	460b      	mov	r3, r1
 800424c:	4313      	orrs	r3, r2
 800424e:	f000 809f 	beq.w	8004390 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004252:	4b4b      	ldr	r3, [pc, #300]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a4a      	ldr	r2, [pc, #296]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800425c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800425e:	f7fd fb35 	bl	80018cc <HAL_GetTick>
 8004262:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004266:	e00b      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004268:	f7fd fb30 	bl	80018cc <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b64      	cmp	r3, #100	@ 0x64
 8004276:	d903      	bls.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800427e:	e005      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004280:	4b3f      	ldr	r3, [pc, #252]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0ed      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800428c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004290:	2b00      	cmp	r3, #0
 8004292:	d179      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004294:	4b39      	ldr	r3, [pc, #228]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004296:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042a0:	4053      	eors	r3, r2
 80042a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d015      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042aa:	4b34      	ldr	r3, [pc, #208]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042b6:	4b31      	ldr	r3, [pc, #196]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ba:	4a30      	ldr	r2, [pc, #192]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042c0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042c2:	4b2e      	ldr	r3, [pc, #184]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c6:	4a2d      	ldr	r2, [pc, #180]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042cc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80042ce:	4a2b      	ldr	r2, [pc, #172]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042d4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80042d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042e2:	d118      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fd faf2 	bl	80018cc <HAL_GetTick>
 80042e8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ec:	e00d      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ee:	f7fd faed 	bl	80018cc <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80042f8:	1ad2      	subs	r2, r2, r3
 80042fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80042fe:	429a      	cmp	r2, r3
 8004300:	d903      	bls.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004308:	e005      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800430a:	4b1c      	ldr	r3, [pc, #112]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0eb      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800431a:	2b00      	cmp	r3, #0
 800431c:	d129      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004322:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800432a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800432e:	d10e      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004330:	4b12      	ldr	r3, [pc, #72]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004340:	091a      	lsrs	r2, r3, #4
 8004342:	4b10      	ldr	r3, [pc, #64]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004344:	4013      	ands	r3, r2
 8004346:	4a0d      	ldr	r2, [pc, #52]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004348:	430b      	orrs	r3, r1
 800434a:	6113      	str	r3, [r2, #16]
 800434c:	e005      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800434e:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	4a0a      	ldr	r2, [pc, #40]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004354:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004358:	6113      	str	r3, [r2, #16]
 800435a:	4b08      	ldr	r3, [pc, #32]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800435c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800436a:	4a04      	ldr	r2, [pc, #16]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800436c:	430b      	orrs	r3, r1
 800436e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004370:	e00e      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800437a:	e009      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800437c:	58024400 	.word	0x58024400
 8004380:	58024800 	.word	0x58024800
 8004384:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800438c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	f002 0301 	and.w	r3, r2, #1
 800439c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043a0:	2300      	movs	r3, #0
 80043a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f000 8089 	beq.w	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80043b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043b8:	2b28      	cmp	r3, #40	@ 0x28
 80043ba:	d86b      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80043bc:	a201      	add	r2, pc, #4	@ (adr r2, 80043c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80043be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c2:	bf00      	nop
 80043c4:	0800449d 	.word	0x0800449d
 80043c8:	08004495 	.word	0x08004495
 80043cc:	08004495 	.word	0x08004495
 80043d0:	08004495 	.word	0x08004495
 80043d4:	08004495 	.word	0x08004495
 80043d8:	08004495 	.word	0x08004495
 80043dc:	08004495 	.word	0x08004495
 80043e0:	08004495 	.word	0x08004495
 80043e4:	08004469 	.word	0x08004469
 80043e8:	08004495 	.word	0x08004495
 80043ec:	08004495 	.word	0x08004495
 80043f0:	08004495 	.word	0x08004495
 80043f4:	08004495 	.word	0x08004495
 80043f8:	08004495 	.word	0x08004495
 80043fc:	08004495 	.word	0x08004495
 8004400:	08004495 	.word	0x08004495
 8004404:	0800447f 	.word	0x0800447f
 8004408:	08004495 	.word	0x08004495
 800440c:	08004495 	.word	0x08004495
 8004410:	08004495 	.word	0x08004495
 8004414:	08004495 	.word	0x08004495
 8004418:	08004495 	.word	0x08004495
 800441c:	08004495 	.word	0x08004495
 8004420:	08004495 	.word	0x08004495
 8004424:	0800449d 	.word	0x0800449d
 8004428:	08004495 	.word	0x08004495
 800442c:	08004495 	.word	0x08004495
 8004430:	08004495 	.word	0x08004495
 8004434:	08004495 	.word	0x08004495
 8004438:	08004495 	.word	0x08004495
 800443c:	08004495 	.word	0x08004495
 8004440:	08004495 	.word	0x08004495
 8004444:	0800449d 	.word	0x0800449d
 8004448:	08004495 	.word	0x08004495
 800444c:	08004495 	.word	0x08004495
 8004450:	08004495 	.word	0x08004495
 8004454:	08004495 	.word	0x08004495
 8004458:	08004495 	.word	0x08004495
 800445c:	08004495 	.word	0x08004495
 8004460:	08004495 	.word	0x08004495
 8004464:	0800449d 	.word	0x0800449d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446c:	3308      	adds	r3, #8
 800446e:	2101      	movs	r1, #1
 8004470:	4618      	mov	r0, r3
 8004472:	f000 ffc3 	bl	80053fc <RCCEx_PLL2_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800447c:	e00f      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800447e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004482:	3328      	adds	r3, #40	@ 0x28
 8004484:	2101      	movs	r1, #1
 8004486:	4618      	mov	r0, r3
 8004488:	f001 f86a 	bl	8005560 <RCCEx_PLL3_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004492:	e004      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800449a:	e000      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800449c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800449e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10a      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044a6:	4bbf      	ldr	r3, [pc, #764]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80044ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044b4:	4abb      	ldr	r2, [pc, #748]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044b6:	430b      	orrs	r3, r1
 80044b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80044ba:	e003      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80044c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	f002 0302 	and.w	r3, r2, #2
 80044d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044d4:	2300      	movs	r3, #0
 80044d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80044da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80044de:	460b      	mov	r3, r1
 80044e0:	4313      	orrs	r3, r2
 80044e2:	d041      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80044e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044ea:	2b05      	cmp	r3, #5
 80044ec:	d824      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80044ee:	a201      	add	r2, pc, #4	@ (adr r2, 80044f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004541 	.word	0x08004541
 80044f8:	0800450d 	.word	0x0800450d
 80044fc:	08004523 	.word	0x08004523
 8004500:	08004541 	.word	0x08004541
 8004504:	08004541 	.word	0x08004541
 8004508:	08004541 	.word	0x08004541
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800450c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004510:	3308      	adds	r3, #8
 8004512:	2101      	movs	r1, #1
 8004514:	4618      	mov	r0, r3
 8004516:	f000 ff71 	bl	80053fc <RCCEx_PLL2_Config>
 800451a:	4603      	mov	r3, r0
 800451c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004520:	e00f      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004526:	3328      	adds	r3, #40	@ 0x28
 8004528:	2101      	movs	r1, #1
 800452a:	4618      	mov	r0, r3
 800452c:	f001 f818 	bl	8005560 <RCCEx_PLL3_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004536:	e004      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800453e:	e000      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800454a:	4b96      	ldr	r3, [pc, #600]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800454c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454e:	f023 0107 	bic.w	r1, r3, #7
 8004552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004556:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004558:	4a92      	ldr	r2, [pc, #584]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800455a:	430b      	orrs	r3, r1
 800455c:	6553      	str	r3, [r2, #84]	@ 0x54
 800455e:	e003      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004560:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004564:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004570:	f002 0304 	and.w	r3, r2, #4
 8004574:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004578:	2300      	movs	r3, #0
 800457a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800457e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004582:	460b      	mov	r3, r1
 8004584:	4313      	orrs	r3, r2
 8004586:	d044      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004590:	2b05      	cmp	r3, #5
 8004592:	d825      	bhi.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004594:	a201      	add	r2, pc, #4	@ (adr r2, 800459c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045e9 	.word	0x080045e9
 80045a0:	080045b5 	.word	0x080045b5
 80045a4:	080045cb 	.word	0x080045cb
 80045a8:	080045e9 	.word	0x080045e9
 80045ac:	080045e9 	.word	0x080045e9
 80045b0:	080045e9 	.word	0x080045e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b8:	3308      	adds	r3, #8
 80045ba:	2101      	movs	r1, #1
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 ff1d 	bl	80053fc <RCCEx_PLL2_Config>
 80045c2:	4603      	mov	r3, r0
 80045c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80045c8:	e00f      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ce:	3328      	adds	r3, #40	@ 0x28
 80045d0:	2101      	movs	r1, #1
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 ffc4 	bl	8005560 <RCCEx_PLL3_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80045de:	e004      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045e6:	e000      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80045e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10b      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045f2:	4b6c      	ldr	r3, [pc, #432]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f6:	f023 0107 	bic.w	r1, r3, #7
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004602:	4a68      	ldr	r2, [pc, #416]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004604:	430b      	orrs	r3, r1
 8004606:	6593      	str	r3, [r2, #88]	@ 0x58
 8004608:	e003      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800460e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461a:	f002 0320 	and.w	r3, r2, #32
 800461e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004622:	2300      	movs	r3, #0
 8004624:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004628:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800462c:	460b      	mov	r3, r1
 800462e:	4313      	orrs	r3, r2
 8004630:	d055      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800463e:	d033      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004640:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004644:	d82c      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800464a:	d02f      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800464c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004650:	d826      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004652:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004656:	d02b      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004658:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800465c:	d820      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800465e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004662:	d012      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004664:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004668:	d81a      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d022      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800466e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004672:	d115      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004678:	3308      	adds	r3, #8
 800467a:	2100      	movs	r1, #0
 800467c:	4618      	mov	r0, r3
 800467e:	f000 febd 	bl	80053fc <RCCEx_PLL2_Config>
 8004682:	4603      	mov	r3, r0
 8004684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004688:	e015      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468e:	3328      	adds	r3, #40	@ 0x28
 8004690:	2102      	movs	r1, #2
 8004692:	4618      	mov	r0, r3
 8004694:	f000 ff64 	bl	8005560 <RCCEx_PLL3_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800469e:	e00a      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046a6:	e006      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046a8:	bf00      	nop
 80046aa:	e004      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046ac:	bf00      	nop
 80046ae:	e002      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046b0:	bf00      	nop
 80046b2:	e000      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10b      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046be:	4b39      	ldr	r3, [pc, #228]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80046c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ce:	4a35      	ldr	r2, [pc, #212]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80046d4:	e003      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80046ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046ee:	2300      	movs	r3, #0
 80046f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80046f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4313      	orrs	r3, r2
 80046fc:	d058      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004706:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800470a:	d033      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800470c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004710:	d82c      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004716:	d02f      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800471c:	d826      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800471e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004722:	d02b      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004724:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004728:	d820      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800472a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800472e:	d012      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004730:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004734:	d81a      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d022      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800473a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800473e:	d115      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004744:	3308      	adds	r3, #8
 8004746:	2100      	movs	r1, #0
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fe57 	bl	80053fc <RCCEx_PLL2_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004754:	e015      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475a:	3328      	adds	r3, #40	@ 0x28
 800475c:	2102      	movs	r1, #2
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fefe 	bl	8005560 <RCCEx_PLL3_Config>
 8004764:	4603      	mov	r3, r0
 8004766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800476a:	e00a      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004772:	e006      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004774:	bf00      	nop
 8004776:	e004      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004778:	bf00      	nop
 800477a:	e002      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800477c:	bf00      	nop
 800477e:	e000      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10e      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800478a:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800478c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004796:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800479a:	4a02      	ldr	r2, [pc, #8]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800479c:	430b      	orrs	r3, r1
 800479e:	6593      	str	r3, [r2, #88]	@ 0x58
 80047a0:	e006      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80047a2:	bf00      	nop
 80047a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80047b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80047bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047c0:	2300      	movs	r3, #0
 80047c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80047ca:	460b      	mov	r3, r1
 80047cc:	4313      	orrs	r3, r2
 80047ce:	d055      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80047d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80047dc:	d033      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80047de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80047e2:	d82c      	bhi.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047e8:	d02f      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80047ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ee:	d826      	bhi.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80047f4:	d02b      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80047f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80047fa:	d820      	bhi.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004800:	d012      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004802:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004806:	d81a      	bhi.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004808:	2b00      	cmp	r3, #0
 800480a:	d022      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800480c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004810:	d115      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004816:	3308      	adds	r3, #8
 8004818:	2100      	movs	r1, #0
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fdee 	bl	80053fc <RCCEx_PLL2_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004826:	e015      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482c:	3328      	adds	r3, #40	@ 0x28
 800482e:	2102      	movs	r1, #2
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fe95 	bl	8005560 <RCCEx_PLL3_Config>
 8004836:	4603      	mov	r3, r0
 8004838:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800483c:	e00a      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004844:	e006      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004846:	bf00      	nop
 8004848:	e004      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800484a:	bf00      	nop
 800484c:	e002      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800484e:	bf00      	nop
 8004850:	e000      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10b      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800485c:	4ba1      	ldr	r3, [pc, #644]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800485e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004860:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004868:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800486c:	4a9d      	ldr	r2, [pc, #628]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800486e:	430b      	orrs	r3, r1
 8004870:	6593      	str	r3, [r2, #88]	@ 0x58
 8004872:	e003      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004878:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800487c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004884:	f002 0308 	and.w	r3, r2, #8
 8004888:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800488c:	2300      	movs	r3, #0
 800488e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004892:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004896:	460b      	mov	r3, r1
 8004898:	4313      	orrs	r3, r2
 800489a:	d01e      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800489c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048a8:	d10c      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ae:	3328      	adds	r3, #40	@ 0x28
 80048b0:	2102      	movs	r1, #2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fe54 	bl	8005560 <RCCEx_PLL3_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80048c4:	4b87      	ldr	r3, [pc, #540]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048d4:	4a83      	ldr	r2, [pc, #524]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048d6:	430b      	orrs	r3, r1
 80048d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e2:	f002 0310 	and.w	r3, r2, #16
 80048e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048ea:	2300      	movs	r3, #0
 80048ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80048f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80048f4:	460b      	mov	r3, r1
 80048f6:	4313      	orrs	r3, r2
 80048f8:	d01e      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80048fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004906:	d10c      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490c:	3328      	adds	r3, #40	@ 0x28
 800490e:	2102      	movs	r1, #2
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fe25 	bl	8005560 <RCCEx_PLL3_Config>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004922:	4b70      	ldr	r3, [pc, #448]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004926:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800492a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004932:	4a6c      	ldr	r2, [pc, #432]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004934:	430b      	orrs	r3, r1
 8004936:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004944:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004948:	2300      	movs	r3, #0
 800494a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800494e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004952:	460b      	mov	r3, r1
 8004954:	4313      	orrs	r3, r2
 8004956:	d03e      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004960:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004964:	d022      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004966:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800496a:	d81b      	bhi.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004974:	d00b      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004976:	e015      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497c:	3308      	adds	r3, #8
 800497e:	2100      	movs	r1, #0
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fd3b 	bl	80053fc <RCCEx_PLL2_Config>
 8004986:	4603      	mov	r3, r0
 8004988:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800498c:	e00f      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800498e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004992:	3328      	adds	r3, #40	@ 0x28
 8004994:	2102      	movs	r1, #2
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fde2 	bl	8005560 <RCCEx_PLL3_Config>
 800499c:	4603      	mov	r3, r0
 800499e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049a2:	e004      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049aa:	e000      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80049ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10b      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049b6:	4b4b      	ldr	r3, [pc, #300]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80049be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049c6:	4a47      	ldr	r2, [pc, #284]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049c8:	430b      	orrs	r3, r1
 80049ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80049cc:	e003      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80049e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049e4:	2300      	movs	r3, #0
 80049e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80049ec:	460b      	mov	r3, r1
 80049ee:	4313      	orrs	r3, r2
 80049f0:	d03b      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80049f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049fe:	d01f      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004a00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a04:	d818      	bhi.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004a06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a0a:	d003      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004a0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a10:	d007      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004a12:	e011      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a14:	4b33      	ldr	r3, [pc, #204]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a18:	4a32      	ldr	r2, [pc, #200]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a20:	e00f      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a26:	3328      	adds	r3, #40	@ 0x28
 8004a28:	2101      	movs	r1, #1
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fd98 	bl	8005560 <RCCEx_PLL3_Config>
 8004a30:	4603      	mov	r3, r0
 8004a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a36:	e004      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a3e:	e000      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10b      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a4a:	4b26      	ldr	r3, [pc, #152]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a5a:	4a22      	ldr	r2, [pc, #136]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a60:	e003      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a72:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004a76:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a78:	2300      	movs	r3, #0
 8004a7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004a80:	460b      	mov	r3, r1
 8004a82:	4313      	orrs	r3, r2
 8004a84:	d034      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a94:	d007      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004a96:	e011      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a98:	4b12      	ldr	r3, [pc, #72]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9c:	4a11      	ldr	r2, [pc, #68]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004aa4:	e00e      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aaa:	3308      	adds	r3, #8
 8004aac:	2102      	movs	r1, #2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fca4 	bl	80053fc <RCCEx_PLL2_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004aba:	e003      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10d      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004acc:	4b05      	ldr	r3, [pc, #20]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ad0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ada:	4a02      	ldr	r2, [pc, #8]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004adc:	430b      	orrs	r3, r1
 8004ade:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ae0:	e006      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004ae2:	bf00      	nop
 8004ae4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004afc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004afe:	2300      	movs	r3, #0
 8004b00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b02:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004b06:	460b      	mov	r3, r1
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	d00c      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b10:	3328      	adds	r3, #40	@ 0x28
 8004b12:	2102      	movs	r1, #2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fd23 	bl	8005560 <RCCEx_PLL3_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004b32:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b34:	2300      	movs	r3, #0
 8004b36:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b38:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	d038      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b4e:	d018      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004b50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b54:	d811      	bhi.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b5a:	d014      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b60:	d80b      	bhi.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d011      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b6a:	d106      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b6c:	4bc3      	ldr	r3, [pc, #780]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b70:	4ac2      	ldr	r2, [pc, #776]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004b78:	e008      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b80:	e004      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b82:	bf00      	nop
 8004b84:	e002      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b86:	bf00      	nop
 8004b88:	e000      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10b      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b94:	4bb9      	ldr	r3, [pc, #740]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b98:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ba4:	4ab5      	ldr	r2, [pc, #724]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	6553      	str	r3, [r2, #84]	@ 0x54
 8004baa:	e003      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004bc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bc6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	d009      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bd0:	4baa      	ldr	r3, [pc, #680]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bde:	4aa7      	ldr	r2, [pc, #668]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004be0:	430b      	orrs	r3, r1
 8004be2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004bf0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bf6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	d00a      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c00:	4b9e      	ldr	r3, [pc, #632]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004c10:	4a9a      	ldr	r2, [pc, #616]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c12:	430b      	orrs	r3, r1
 8004c14:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004c22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c24:	2300      	movs	r3, #0
 8004c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c28:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	d009      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c32:	4b92      	ldr	r3, [pc, #584]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c36:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c40:	4a8e      	ldr	r2, [pc, #568]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c42:	430b      	orrs	r3, r1
 8004c44:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004c52:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c54:	2300      	movs	r3, #0
 8004c56:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c58:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	d00e      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c62:	4b86      	ldr	r3, [pc, #536]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	4a85      	ldr	r2, [pc, #532]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c6c:	6113      	str	r3, [r2, #16]
 8004c6e:	4b83      	ldr	r3, [pc, #524]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c70:	6919      	ldr	r1, [r3, #16]
 8004c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004c7a:	4a80      	ldr	r2, [pc, #512]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c88:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c8e:	2300      	movs	r3, #0
 8004c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c92:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004c96:	460b      	mov	r3, r1
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	d009      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c9c:	4b77      	ldr	r3, [pc, #476]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ca0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004caa:	4a74      	ldr	r2, [pc, #464]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cac:	430b      	orrs	r3, r1
 8004cae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cc2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	d00a      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ccc:	4b6b      	ldr	r3, [pc, #428]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cdc:	4a67      	ldr	r2, [pc, #412]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cde:	430b      	orrs	r3, r1
 8004ce0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	2100      	movs	r1, #0
 8004cec:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cf4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	d011      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d02:	3308      	adds	r3, #8
 8004d04:	2100      	movs	r1, #0
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fb78 	bl	80053fc <RCCEx_PLL2_Config>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	6239      	str	r1, [r7, #32]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	d011      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d42:	3308      	adds	r3, #8
 8004d44:	2101      	movs	r1, #1
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fb58 	bl	80053fc <RCCEx_PLL2_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	61b9      	str	r1, [r7, #24]
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	61fb      	str	r3, [r7, #28]
 8004d74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	d011      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d82:	3308      	adds	r3, #8
 8004d84:	2102      	movs	r1, #2
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fb38 	bl	80053fc <RCCEx_PLL2_Config>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	2100      	movs	r1, #0
 8004dac:	6139      	str	r1, [r7, #16]
 8004dae:	f003 0308 	and.w	r3, r3, #8
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004db8:	460b      	mov	r3, r1
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	d011      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc2:	3328      	adds	r3, #40	@ 0x28
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fbca 	bl	8005560 <RCCEx_PLL3_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	2100      	movs	r1, #0
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	f003 0310 	and.w	r3, r3, #16
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	d011      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e02:	3328      	adds	r3, #40	@ 0x28
 8004e04:	2101      	movs	r1, #1
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fbaa 	bl	8005560 <RCCEx_PLL3_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	6039      	str	r1, [r7, #0]
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	607b      	str	r3, [r7, #4]
 8004e34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	d011      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e42:	3328      	adds	r3, #40	@ 0x28
 8004e44:	2102      	movs	r1, #2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fb8a 	bl	8005560 <RCCEx_PLL3_Config>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004e62:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e000      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004e76:	46bd      	mov	sp, r7
 8004e78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e7c:	58024400 	.word	0x58024400

08004e80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004e84:	f7fe fd54 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	091b      	lsrs	r3, r3, #4
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	4904      	ldr	r1, [pc, #16]	@ (8004ea8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004e96:	5ccb      	ldrb	r3, [r1, r3]
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	58024400 	.word	0x58024400
 8004ea8:	0800b53c 	.word	0x0800b53c

08004eac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b089      	sub	sp, #36	@ 0x24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004eb4:	4ba1      	ldr	r3, [pc, #644]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004ebe:	4b9f      	ldr	r3, [pc, #636]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec2:	0b1b      	lsrs	r3, r3, #12
 8004ec4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ec8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004eca:	4b9c      	ldr	r3, [pc, #624]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ece:	091b      	lsrs	r3, r3, #4
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004ed6:	4b99      	ldr	r3, [pc, #612]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eda:	08db      	lsrs	r3, r3, #3
 8004edc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	fb02 f303 	mul.w	r3, r2, r3
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 8111 	beq.w	800511c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	f000 8083 	beq.w	8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	f200 80a1 	bhi.w	800504c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d056      	beq.n	8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f16:	e099      	b.n	800504c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f18:	4b88      	ldr	r3, [pc, #544]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0320 	and.w	r3, r3, #32
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d02d      	beq.n	8004f80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f24:	4b85      	ldr	r3, [pc, #532]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	08db      	lsrs	r3, r3, #3
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	4a84      	ldr	r2, [pc, #528]	@ (8005140 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
 8004f34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	ee07 3a90 	vmov	s15, r3
 8004f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f4e:	4b7b      	ldr	r3, [pc, #492]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f7e:	e087      	b.n	8005090 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f92:	4b6a      	ldr	r3, [pc, #424]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fa6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fc2:	e065      	b.n	8005090 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800514c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fd6:	4b59      	ldr	r3, [pc, #356]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005006:	e043      	b.n	8005090 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	ee07 3a90 	vmov	s15, r3
 800500e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005012:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800501a:	4b48      	ldr	r3, [pc, #288]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800501c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800502a:	ed97 6a03 	vldr	s12, [r7, #12]
 800502e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800503a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800503e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800504a:	e021      	b.n	8005090 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005056:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800514c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800505a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800505e:	4b37      	ldr	r3, [pc, #220]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800506e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005072:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800507a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800507e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800508e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005090:	4b2a      	ldr	r3, [pc, #168]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005094:	0a5b      	lsrs	r3, r3, #9
 8005096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80050ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050b6:	ee17 2a90 	vmov	r2, s15
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80050be:	4b1f      	ldr	r3, [pc, #124]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c2:	0c1b      	lsrs	r3, r3, #16
 80050c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050c8:	ee07 3a90 	vmov	s15, r3
 80050cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80050dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050e4:	ee17 2a90 	vmov	r2, s15
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80050ec:	4b13      	ldr	r3, [pc, #76]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f0:	0e1b      	lsrs	r3, r3, #24
 80050f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005102:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005106:	edd7 6a07 	vldr	s13, [r7, #28]
 800510a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800510e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005112:	ee17 2a90 	vmov	r2, s15
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800511a:	e008      	b.n	800512e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	609a      	str	r2, [r3, #8]
}
 800512e:	bf00      	nop
 8005130:	3724      	adds	r7, #36	@ 0x24
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	58024400 	.word	0x58024400
 8005140:	03d09000 	.word	0x03d09000
 8005144:	46000000 	.word	0x46000000
 8005148:	4c742400 	.word	0x4c742400
 800514c:	4a742400 	.word	0x4a742400
 8005150:	4af42400 	.word	0x4af42400

08005154 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005154:	b480      	push	{r7}
 8005156:	b089      	sub	sp, #36	@ 0x24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800515c:	4ba1      	ldr	r3, [pc, #644]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800515e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005166:	4b9f      	ldr	r3, [pc, #636]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516a:	0d1b      	lsrs	r3, r3, #20
 800516c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005170:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005172:	4b9c      	ldr	r3, [pc, #624]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005176:	0a1b      	lsrs	r3, r3, #8
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800517e:	4b99      	ldr	r3, [pc, #612]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005182:	08db      	lsrs	r3, r3, #3
 8005184:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	fb02 f303 	mul.w	r3, r2, r3
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005196:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 8111 	beq.w	80053c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	f000 8083 	beq.w	80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	f200 80a1 	bhi.w	80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d056      	beq.n	800526c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80051be:	e099      	b.n	80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051c0:	4b88      	ldr	r3, [pc, #544]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d02d      	beq.n	8005228 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051cc:	4b85      	ldr	r3, [pc, #532]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	08db      	lsrs	r3, r3, #3
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	4a84      	ldr	r2, [pc, #528]	@ (80053e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
 80051dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	ee07 3a90 	vmov	s15, r3
 80051e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051f6:	4b7b      	ldr	r3, [pc, #492]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005206:	ed97 6a03 	vldr	s12, [r7, #12]
 800520a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800520e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800521a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800521e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005222:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005226:	e087      	b.n	8005338 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005232:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800523a:	4b6a      	ldr	r3, [pc, #424]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005242:	ee07 3a90 	vmov	s15, r3
 8005246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524a:	ed97 6a03 	vldr	s12, [r7, #12]
 800524e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800525e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800526a:	e065      	b.n	8005338 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005276:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800527a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800527e:	4b59      	ldr	r3, [pc, #356]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005292:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800529a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800529e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ae:	e043      	b.n	8005338 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80052be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c2:	4b48      	ldr	r3, [pc, #288]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80052d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052f2:	e021      	b.n	8005338 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005306:	4b37      	ldr	r3, [pc, #220]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005316:	ed97 6a03 	vldr	s12, [r7, #12]
 800531a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800531e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800532a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800532e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005336:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005338:	4b2a      	ldr	r3, [pc, #168]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800533a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533c:	0a5b      	lsrs	r3, r3, #9
 800533e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800534e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005352:	edd7 6a07 	vldr	s13, [r7, #28]
 8005356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800535a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800535e:	ee17 2a90 	vmov	r2, s15
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005366:	4b1f      	ldr	r3, [pc, #124]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536a:	0c1b      	lsrs	r3, r3, #16
 800536c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005370:	ee07 3a90 	vmov	s15, r3
 8005374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005378:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800537c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005380:	edd7 6a07 	vldr	s13, [r7, #28]
 8005384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800538c:	ee17 2a90 	vmov	r2, s15
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005394:	4b13      	ldr	r3, [pc, #76]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005398:	0e1b      	lsrs	r3, r3, #24
 800539a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80053b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ba:	ee17 2a90 	vmov	r2, s15
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80053c2:	e008      	b.n	80053d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	609a      	str	r2, [r3, #8]
}
 80053d6:	bf00      	nop
 80053d8:	3724      	adds	r7, #36	@ 0x24
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	58024400 	.word	0x58024400
 80053e8:	03d09000 	.word	0x03d09000
 80053ec:	46000000 	.word	0x46000000
 80053f0:	4c742400 	.word	0x4c742400
 80053f4:	4a742400 	.word	0x4a742400
 80053f8:	4af42400 	.word	0x4af42400

080053fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800540a:	4b53      	ldr	r3, [pc, #332]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 800540c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	2b03      	cmp	r3, #3
 8005414:	d101      	bne.n	800541a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e099      	b.n	800554e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800541a:	4b4f      	ldr	r3, [pc, #316]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a4e      	ldr	r2, [pc, #312]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005420:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005426:	f7fc fa51 	bl	80018cc <HAL_GetTick>
 800542a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800542c:	e008      	b.n	8005440 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800542e:	f7fc fa4d 	bl	80018cc <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e086      	b.n	800554e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005440:	4b45      	ldr	r3, [pc, #276]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f0      	bne.n	800542e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800544c:	4b42      	ldr	r3, [pc, #264]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 800544e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005450:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	031b      	lsls	r3, r3, #12
 800545a:	493f      	ldr	r1, [pc, #252]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 800545c:	4313      	orrs	r3, r2
 800545e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	3b01      	subs	r3, #1
 8005466:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	3b01      	subs	r3, #1
 8005470:	025b      	lsls	r3, r3, #9
 8005472:	b29b      	uxth	r3, r3
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	3b01      	subs	r3, #1
 800547c:	041b      	lsls	r3, r3, #16
 800547e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	3b01      	subs	r3, #1
 800548a:	061b      	lsls	r3, r3, #24
 800548c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005490:	4931      	ldr	r1, [pc, #196]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005492:	4313      	orrs	r3, r2
 8005494:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005496:	4b30      	ldr	r3, [pc, #192]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	492d      	ldr	r1, [pc, #180]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80054a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ac:	f023 0220 	bic.w	r2, r3, #32
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	4928      	ldr	r1, [pc, #160]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80054ba:	4b27      	ldr	r3, [pc, #156]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054be:	4a26      	ldr	r2, [pc, #152]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054c0:	f023 0310 	bic.w	r3, r3, #16
 80054c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80054c6:	4b24      	ldr	r3, [pc, #144]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054ca:	4b24      	ldr	r3, [pc, #144]	@ (800555c <RCCEx_PLL2_Config+0x160>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	69d2      	ldr	r2, [r2, #28]
 80054d2:	00d2      	lsls	r2, r2, #3
 80054d4:	4920      	ldr	r1, [pc, #128]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80054da:	4b1f      	ldr	r3, [pc, #124]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054de:	4a1e      	ldr	r2, [pc, #120]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054e0:	f043 0310 	orr.w	r3, r3, #16
 80054e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d106      	bne.n	80054fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80054ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f0:	4a19      	ldr	r2, [pc, #100]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80054f8:	e00f      	b.n	800551a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d106      	bne.n	800550e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005500:	4b15      	ldr	r3, [pc, #84]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	4a14      	ldr	r2, [pc, #80]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005506:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800550a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800550c:	e005      	b.n	800551a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800550e:	4b12      	ldr	r3, [pc, #72]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005512:	4a11      	ldr	r2, [pc, #68]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005514:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005518:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800551a:	4b0f      	ldr	r3, [pc, #60]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a0e      	ldr	r2, [pc, #56]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005520:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005526:	f7fc f9d1 	bl	80018cc <HAL_GetTick>
 800552a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800552c:	e008      	b.n	8005540 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800552e:	f7fc f9cd 	bl	80018cc <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e006      	b.n	800554e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005540:	4b05      	ldr	r3, [pc, #20]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0f0      	beq.n	800552e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	58024400 	.word	0x58024400
 800555c:	ffff0007 	.word	0xffff0007

08005560 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800556e:	4b53      	ldr	r3, [pc, #332]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	2b03      	cmp	r3, #3
 8005578:	d101      	bne.n	800557e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e099      	b.n	80056b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800557e:	4b4f      	ldr	r3, [pc, #316]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a4e      	ldr	r2, [pc, #312]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005588:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800558a:	f7fc f99f 	bl	80018cc <HAL_GetTick>
 800558e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005590:	e008      	b.n	80055a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005592:	f7fc f99b 	bl	80018cc <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d901      	bls.n	80055a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e086      	b.n	80056b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055a4:	4b45      	ldr	r3, [pc, #276]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1f0      	bne.n	8005592 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80055b0:	4b42      	ldr	r3, [pc, #264]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 80055b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	051b      	lsls	r3, r3, #20
 80055be:	493f      	ldr	r1, [pc, #252]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	025b      	lsls	r3, r3, #9
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	431a      	orrs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	3b01      	subs	r3, #1
 80055e0:	041b      	lsls	r3, r3, #16
 80055e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	061b      	lsls	r3, r3, #24
 80055f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80055f4:	4931      	ldr	r1, [pc, #196]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80055fa:	4b30      	ldr	r3, [pc, #192]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 80055fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	492d      	ldr	r1, [pc, #180]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005608:	4313      	orrs	r3, r2
 800560a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800560c:	4b2b      	ldr	r3, [pc, #172]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 800560e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005610:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	4928      	ldr	r1, [pc, #160]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 800561a:	4313      	orrs	r3, r2
 800561c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800561e:	4b27      	ldr	r3, [pc, #156]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005622:	4a26      	ldr	r2, [pc, #152]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005628:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800562a:	4b24      	ldr	r3, [pc, #144]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 800562c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800562e:	4b24      	ldr	r3, [pc, #144]	@ (80056c0 <RCCEx_PLL3_Config+0x160>)
 8005630:	4013      	ands	r3, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	69d2      	ldr	r2, [r2, #28]
 8005636:	00d2      	lsls	r2, r2, #3
 8005638:	4920      	ldr	r1, [pc, #128]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 800563a:	4313      	orrs	r3, r2
 800563c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800563e:	4b1f      	ldr	r3, [pc, #124]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005642:	4a1e      	ldr	r2, [pc, #120]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005648:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d106      	bne.n	800565e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005650:	4b1a      	ldr	r3, [pc, #104]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005654:	4a19      	ldr	r2, [pc, #100]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005656:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800565a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800565c:	e00f      	b.n	800567e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d106      	bne.n	8005672 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005664:	4b15      	ldr	r3, [pc, #84]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005668:	4a14      	ldr	r2, [pc, #80]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 800566a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800566e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005670:	e005      	b.n	800567e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005672:	4b12      	ldr	r3, [pc, #72]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005676:	4a11      	ldr	r2, [pc, #68]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005678:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800567c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800567e:	4b0f      	ldr	r3, [pc, #60]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a0e      	ldr	r2, [pc, #56]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800568a:	f7fc f91f 	bl	80018cc <HAL_GetTick>
 800568e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005690:	e008      	b.n	80056a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005692:	f7fc f91b 	bl	80018cc <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e006      	b.n	80056b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056a4:	4b05      	ldr	r3, [pc, #20]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0f0      	beq.n	8005692 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	58024400 	.word	0x58024400
 80056c0:	ffff0007 	.word	0xffff0007

080056c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e049      	b.n	800576a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fb fdf2 	bl	80012d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3304      	adds	r3, #4
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f000 ff24 	bl	8006550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	d001      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e054      	b.n	8005836 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0201 	orr.w	r2, r2, #1
 80057a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a26      	ldr	r2, [pc, #152]	@ (8005844 <HAL_TIM_Base_Start_IT+0xd0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d022      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0x80>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057b6:	d01d      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0x80>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a22      	ldr	r2, [pc, #136]	@ (8005848 <HAL_TIM_Base_Start_IT+0xd4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d018      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0x80>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a21      	ldr	r2, [pc, #132]	@ (800584c <HAL_TIM_Base_Start_IT+0xd8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d013      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0x80>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005850 <HAL_TIM_Base_Start_IT+0xdc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00e      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0x80>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a1e      	ldr	r2, [pc, #120]	@ (8005854 <HAL_TIM_Base_Start_IT+0xe0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d009      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0x80>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005858 <HAL_TIM_Base_Start_IT+0xe4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d004      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0x80>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a1b      	ldr	r2, [pc, #108]	@ (800585c <HAL_TIM_Base_Start_IT+0xe8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d115      	bne.n	8005820 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	4b19      	ldr	r3, [pc, #100]	@ (8005860 <HAL_TIM_Base_Start_IT+0xec>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b06      	cmp	r3, #6
 8005804:	d015      	beq.n	8005832 <HAL_TIM_Base_Start_IT+0xbe>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800580c:	d011      	beq.n	8005832 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 0201 	orr.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581e:	e008      	b.n	8005832 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	e000      	b.n	8005834 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005832:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40010000 	.word	0x40010000
 8005848:	40000400 	.word	0x40000400
 800584c:	40000800 	.word	0x40000800
 8005850:	40000c00 	.word	0x40000c00
 8005854:	40010400 	.word	0x40010400
 8005858:	40001800 	.word	0x40001800
 800585c:	40014000 	.word	0x40014000
 8005860:	00010007 	.word	0x00010007

08005864 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e049      	b.n	800590a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f841 	bl	8005912 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3304      	adds	r3, #4
 80058a0:	4619      	mov	r1, r3
 80058a2:	4610      	mov	r0, r2
 80058a4:	f000 fe54 	bl	8006550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
	...

08005928 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d109      	bne.n	800594c <HAL_TIM_PWM_Start+0x24>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b01      	cmp	r3, #1
 8005942:	bf14      	ite	ne
 8005944:	2301      	movne	r3, #1
 8005946:	2300      	moveq	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	e03c      	b.n	80059c6 <HAL_TIM_PWM_Start+0x9e>
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b04      	cmp	r3, #4
 8005950:	d109      	bne.n	8005966 <HAL_TIM_PWM_Start+0x3e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b01      	cmp	r3, #1
 800595c:	bf14      	ite	ne
 800595e:	2301      	movne	r3, #1
 8005960:	2300      	moveq	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	e02f      	b.n	80059c6 <HAL_TIM_PWM_Start+0x9e>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b08      	cmp	r3, #8
 800596a:	d109      	bne.n	8005980 <HAL_TIM_PWM_Start+0x58>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b01      	cmp	r3, #1
 8005976:	bf14      	ite	ne
 8005978:	2301      	movne	r3, #1
 800597a:	2300      	moveq	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	e022      	b.n	80059c6 <HAL_TIM_PWM_Start+0x9e>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b0c      	cmp	r3, #12
 8005984:	d109      	bne.n	800599a <HAL_TIM_PWM_Start+0x72>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b01      	cmp	r3, #1
 8005990:	bf14      	ite	ne
 8005992:	2301      	movne	r3, #1
 8005994:	2300      	moveq	r3, #0
 8005996:	b2db      	uxtb	r3, r3
 8005998:	e015      	b.n	80059c6 <HAL_TIM_PWM_Start+0x9e>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b10      	cmp	r3, #16
 800599e:	d109      	bne.n	80059b4 <HAL_TIM_PWM_Start+0x8c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	bf14      	ite	ne
 80059ac:	2301      	movne	r3, #1
 80059ae:	2300      	moveq	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	e008      	b.n	80059c6 <HAL_TIM_PWM_Start+0x9e>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	bf14      	ite	ne
 80059c0:	2301      	movne	r3, #1
 80059c2:	2300      	moveq	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e0a1      	b.n	8005b12 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d104      	bne.n	80059de <HAL_TIM_PWM_Start+0xb6>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059dc:	e023      	b.n	8005a26 <HAL_TIM_PWM_Start+0xfe>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d104      	bne.n	80059ee <HAL_TIM_PWM_Start+0xc6>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059ec:	e01b      	b.n	8005a26 <HAL_TIM_PWM_Start+0xfe>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d104      	bne.n	80059fe <HAL_TIM_PWM_Start+0xd6>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059fc:	e013      	b.n	8005a26 <HAL_TIM_PWM_Start+0xfe>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b0c      	cmp	r3, #12
 8005a02:	d104      	bne.n	8005a0e <HAL_TIM_PWM_Start+0xe6>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a0c:	e00b      	b.n	8005a26 <HAL_TIM_PWM_Start+0xfe>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b10      	cmp	r3, #16
 8005a12:	d104      	bne.n	8005a1e <HAL_TIM_PWM_Start+0xf6>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a1c:	e003      	b.n	8005a26 <HAL_TIM_PWM_Start+0xfe>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2202      	movs	r2, #2
 8005a22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	6839      	ldr	r1, [r7, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 f9a8 	bl	8006d84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a38      	ldr	r2, [pc, #224]	@ (8005b1c <HAL_TIM_PWM_Start+0x1f4>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d013      	beq.n	8005a66 <HAL_TIM_PWM_Start+0x13e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a37      	ldr	r2, [pc, #220]	@ (8005b20 <HAL_TIM_PWM_Start+0x1f8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00e      	beq.n	8005a66 <HAL_TIM_PWM_Start+0x13e>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a35      	ldr	r2, [pc, #212]	@ (8005b24 <HAL_TIM_PWM_Start+0x1fc>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d009      	beq.n	8005a66 <HAL_TIM_PWM_Start+0x13e>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a34      	ldr	r2, [pc, #208]	@ (8005b28 <HAL_TIM_PWM_Start+0x200>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d004      	beq.n	8005a66 <HAL_TIM_PWM_Start+0x13e>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a32      	ldr	r2, [pc, #200]	@ (8005b2c <HAL_TIM_PWM_Start+0x204>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d101      	bne.n	8005a6a <HAL_TIM_PWM_Start+0x142>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e000      	b.n	8005a6c <HAL_TIM_PWM_Start+0x144>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d007      	beq.n	8005a80 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a7e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a25      	ldr	r2, [pc, #148]	@ (8005b1c <HAL_TIM_PWM_Start+0x1f4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d022      	beq.n	8005ad0 <HAL_TIM_PWM_Start+0x1a8>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a92:	d01d      	beq.n	8005ad0 <HAL_TIM_PWM_Start+0x1a8>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a25      	ldr	r2, [pc, #148]	@ (8005b30 <HAL_TIM_PWM_Start+0x208>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d018      	beq.n	8005ad0 <HAL_TIM_PWM_Start+0x1a8>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a24      	ldr	r2, [pc, #144]	@ (8005b34 <HAL_TIM_PWM_Start+0x20c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d013      	beq.n	8005ad0 <HAL_TIM_PWM_Start+0x1a8>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a22      	ldr	r2, [pc, #136]	@ (8005b38 <HAL_TIM_PWM_Start+0x210>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00e      	beq.n	8005ad0 <HAL_TIM_PWM_Start+0x1a8>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8005b20 <HAL_TIM_PWM_Start+0x1f8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d009      	beq.n	8005ad0 <HAL_TIM_PWM_Start+0x1a8>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8005b3c <HAL_TIM_PWM_Start+0x214>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d004      	beq.n	8005ad0 <HAL_TIM_PWM_Start+0x1a8>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a16      	ldr	r2, [pc, #88]	@ (8005b24 <HAL_TIM_PWM_Start+0x1fc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d115      	bne.n	8005afc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8005b40 <HAL_TIM_PWM_Start+0x218>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b06      	cmp	r3, #6
 8005ae0:	d015      	beq.n	8005b0e <HAL_TIM_PWM_Start+0x1e6>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ae8:	d011      	beq.n	8005b0e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0201 	orr.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005afa:	e008      	b.n	8005b0e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0201 	orr.w	r2, r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	e000      	b.n	8005b10 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	40010400 	.word	0x40010400
 8005b24:	40014000 	.word	0x40014000
 8005b28:	40014400 	.word	0x40014400
 8005b2c:	40014800 	.word	0x40014800
 8005b30:	40000400 	.word	0x40000400
 8005b34:	40000800 	.word	0x40000800
 8005b38:	40000c00 	.word	0x40000c00
 8005b3c:	40001800 	.word	0x40001800
 8005b40:	00010007 	.word	0x00010007

08005b44 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2200      	movs	r2, #0
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 f914 	bl	8006d84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a3e      	ldr	r2, [pc, #248]	@ (8005c5c <HAL_TIM_PWM_Stop+0x118>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d013      	beq.n	8005b8e <HAL_TIM_PWM_Stop+0x4a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a3d      	ldr	r2, [pc, #244]	@ (8005c60 <HAL_TIM_PWM_Stop+0x11c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d00e      	beq.n	8005b8e <HAL_TIM_PWM_Stop+0x4a>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a3b      	ldr	r2, [pc, #236]	@ (8005c64 <HAL_TIM_PWM_Stop+0x120>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d009      	beq.n	8005b8e <HAL_TIM_PWM_Stop+0x4a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a3a      	ldr	r2, [pc, #232]	@ (8005c68 <HAL_TIM_PWM_Stop+0x124>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d004      	beq.n	8005b8e <HAL_TIM_PWM_Stop+0x4a>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a38      	ldr	r2, [pc, #224]	@ (8005c6c <HAL_TIM_PWM_Stop+0x128>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d101      	bne.n	8005b92 <HAL_TIM_PWM_Stop+0x4e>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <HAL_TIM_PWM_Stop+0x50>
 8005b92:	2300      	movs	r3, #0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d017      	beq.n	8005bc8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6a1a      	ldr	r2, [r3, #32]
 8005b9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10f      	bne.n	8005bc8 <HAL_TIM_PWM_Stop+0x84>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6a1a      	ldr	r2, [r3, #32]
 8005bae:	f240 4344 	movw	r3, #1092	@ 0x444
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d107      	bne.n	8005bc8 <HAL_TIM_PWM_Stop+0x84>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bc6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6a1a      	ldr	r2, [r3, #32]
 8005bce:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10f      	bne.n	8005bf8 <HAL_TIM_PWM_Stop+0xb4>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6a1a      	ldr	r2, [r3, #32]
 8005bde:	f240 4344 	movw	r3, #1092	@ 0x444
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d107      	bne.n	8005bf8 <HAL_TIM_PWM_Stop+0xb4>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0201 	bic.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d104      	bne.n	8005c08 <HAL_TIM_PWM_Stop+0xc4>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c06:	e023      	b.n	8005c50 <HAL_TIM_PWM_Stop+0x10c>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d104      	bne.n	8005c18 <HAL_TIM_PWM_Stop+0xd4>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c16:	e01b      	b.n	8005c50 <HAL_TIM_PWM_Stop+0x10c>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b08      	cmp	r3, #8
 8005c1c:	d104      	bne.n	8005c28 <HAL_TIM_PWM_Stop+0xe4>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c26:	e013      	b.n	8005c50 <HAL_TIM_PWM_Stop+0x10c>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b0c      	cmp	r3, #12
 8005c2c:	d104      	bne.n	8005c38 <HAL_TIM_PWM_Stop+0xf4>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c36:	e00b      	b.n	8005c50 <HAL_TIM_PWM_Stop+0x10c>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b10      	cmp	r3, #16
 8005c3c:	d104      	bne.n	8005c48 <HAL_TIM_PWM_Stop+0x104>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c46:	e003      	b.n	8005c50 <HAL_TIM_PWM_Stop+0x10c>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40010400 	.word	0x40010400
 8005c64:	40014000 	.word	0x40014000
 8005c68:	40014400 	.word	0x40014400
 8005c6c:	40014800 	.word	0x40014800

08005c70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e08f      	b.n	8005da4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d106      	bne.n	8005c9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7fb fab1 	bl	8001200 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6899      	ldr	r1, [r3, #8]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8005dac <HAL_TIM_Encoder_Init+0x13c>)
 8005cb2:	400b      	ands	r3, r1
 8005cb4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	f000 fc45 	bl	8006550 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4b31      	ldr	r3, [pc, #196]	@ (8005db0 <HAL_TIM_Encoder_Init+0x140>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	021b      	lsls	r3, r3, #8
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4b2b      	ldr	r3, [pc, #172]	@ (8005db4 <HAL_TIM_Encoder_Init+0x144>)
 8005d06:	4013      	ands	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8005db8 <HAL_TIM_Encoder_Init+0x148>)
 8005d0e:	4013      	ands	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	021b      	lsls	r3, r3, #8
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	011a      	lsls	r2, r3, #4
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	031b      	lsls	r3, r3, #12
 8005d30:	4313      	orrs	r3, r2
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005d3e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005d46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	4313      	orrs	r3, r2
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	fffebff8 	.word	0xfffebff8
 8005db0:	fffffcfc 	.word	0xfffffcfc
 8005db4:	fffff3f3 	.word	0xfffff3f3
 8005db8:	ffff0f0f 	.word	0xffff0f0f

08005dbc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005dcc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005dd4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ddc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005de4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d110      	bne.n	8005e0e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d102      	bne.n	8005df8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005df2:	7b7b      	ldrb	r3, [r7, #13]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d001      	beq.n	8005dfc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e069      	b.n	8005ed0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e0c:	e031      	b.n	8005e72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d110      	bne.n	8005e36 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e14:	7bbb      	ldrb	r3, [r7, #14]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d102      	bne.n	8005e20 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e1a:	7b3b      	ldrb	r3, [r7, #12]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d001      	beq.n	8005e24 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e055      	b.n	8005ed0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e34:	e01d      	b.n	8005e72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d108      	bne.n	8005e4e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e3c:	7bbb      	ldrb	r3, [r7, #14]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d105      	bne.n	8005e4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e42:	7b7b      	ldrb	r3, [r7, #13]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d102      	bne.n	8005e4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e48:	7b3b      	ldrb	r3, [r7, #12]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d001      	beq.n	8005e52 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e03e      	b.n	8005ed0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2202      	movs	r2, #2
 8005e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2202      	movs	r2, #2
 8005e66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_TIM_Encoder_Start+0xc4>
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	d008      	beq.n	8005e90 <HAL_TIM_Encoder_Start+0xd4>
 8005e7e:	e00f      	b.n	8005ea0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2201      	movs	r2, #1
 8005e86:	2100      	movs	r1, #0
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 ff7b 	bl	8006d84 <TIM_CCxChannelCmd>
      break;
 8005e8e:	e016      	b.n	8005ebe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2201      	movs	r2, #1
 8005e96:	2104      	movs	r1, #4
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 ff73 	bl	8006d84 <TIM_CCxChannelCmd>
      break;
 8005e9e:	e00e      	b.n	8005ebe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 ff6b 	bl	8006d84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	2104      	movs	r1, #4
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 ff64 	bl	8006d84 <TIM_CCxChannelCmd>
      break;
 8005ebc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f042 0201 	orr.w	r2, r2, #1
 8005ecc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d020      	beq.n	8005f3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01b      	beq.n	8005f3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f06f 0202 	mvn.w	r2, #2
 8005f0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 faf6 	bl	8006514 <HAL_TIM_IC_CaptureCallback>
 8005f28:	e005      	b.n	8005f36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fae8 	bl	8006500 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 faf9 	bl	8006528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f003 0304 	and.w	r3, r3, #4
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d020      	beq.n	8005f88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01b      	beq.n	8005f88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f06f 0204 	mvn.w	r2, #4
 8005f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fad0 	bl	8006514 <HAL_TIM_IC_CaptureCallback>
 8005f74:	e005      	b.n	8005f82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fac2 	bl	8006500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fad3 	bl	8006528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d020      	beq.n	8005fd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d01b      	beq.n	8005fd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f06f 0208 	mvn.w	r2, #8
 8005fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2204      	movs	r2, #4
 8005faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	f003 0303 	and.w	r3, r3, #3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 faaa 	bl	8006514 <HAL_TIM_IC_CaptureCallback>
 8005fc0:	e005      	b.n	8005fce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fa9c 	bl	8006500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 faad 	bl	8006528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	f003 0310 	and.w	r3, r3, #16
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d020      	beq.n	8006020 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01b      	beq.n	8006020 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0210 	mvn.w	r2, #16
 8005ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2208      	movs	r2, #8
 8005ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fa84 	bl	8006514 <HAL_TIM_IC_CaptureCallback>
 800600c:	e005      	b.n	800601a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fa76 	bl	8006500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fa87 	bl	8006528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00c      	beq.n	8006044 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d007      	beq.n	8006044 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0201 	mvn.w	r2, #1
 800603c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7fa fe5d 	bl	8000cfe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800604a:	2b00      	cmp	r3, #0
 800604c:	d104      	bne.n	8006058 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00c      	beq.n	8006072 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800605e:	2b00      	cmp	r3, #0
 8006060:	d007      	beq.n	8006072 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800606a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 ff47 	bl	8006f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00c      	beq.n	8006096 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006082:	2b00      	cmp	r3, #0
 8006084:	d007      	beq.n	8006096 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800608e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 ff3f 	bl	8006f14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00c      	beq.n	80060ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d007      	beq.n	80060ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fa41 	bl	800653c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f003 0320 	and.w	r3, r3, #32
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00c      	beq.n	80060de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f003 0320 	and.w	r3, r3, #32
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d007      	beq.n	80060de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f06f 0220 	mvn.w	r2, #32
 80060d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 ff07 	bl	8006eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060de:	bf00      	nop
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
	...

080060e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006102:	2302      	movs	r3, #2
 8006104:	e0ff      	b.n	8006306 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b14      	cmp	r3, #20
 8006112:	f200 80f0 	bhi.w	80062f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006116:	a201      	add	r2, pc, #4	@ (adr r2, 800611c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611c:	08006171 	.word	0x08006171
 8006120:	080062f7 	.word	0x080062f7
 8006124:	080062f7 	.word	0x080062f7
 8006128:	080062f7 	.word	0x080062f7
 800612c:	080061b1 	.word	0x080061b1
 8006130:	080062f7 	.word	0x080062f7
 8006134:	080062f7 	.word	0x080062f7
 8006138:	080062f7 	.word	0x080062f7
 800613c:	080061f3 	.word	0x080061f3
 8006140:	080062f7 	.word	0x080062f7
 8006144:	080062f7 	.word	0x080062f7
 8006148:	080062f7 	.word	0x080062f7
 800614c:	08006233 	.word	0x08006233
 8006150:	080062f7 	.word	0x080062f7
 8006154:	080062f7 	.word	0x080062f7
 8006158:	080062f7 	.word	0x080062f7
 800615c:	08006275 	.word	0x08006275
 8006160:	080062f7 	.word	0x080062f7
 8006164:	080062f7 	.word	0x080062f7
 8006168:	080062f7 	.word	0x080062f7
 800616c:	080062b5 	.word	0x080062b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68b9      	ldr	r1, [r7, #8]
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fa90 	bl	800669c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0208 	orr.w	r2, r2, #8
 800618a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699a      	ldr	r2, [r3, #24]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0204 	bic.w	r2, r2, #4
 800619a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6999      	ldr	r1, [r3, #24]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	691a      	ldr	r2, [r3, #16]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	619a      	str	r2, [r3, #24]
      break;
 80061ae:	e0a5      	b.n	80062fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 fb00 	bl	80067bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699a      	ldr	r2, [r3, #24]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6999      	ldr	r1, [r3, #24]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	021a      	lsls	r2, r3, #8
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	619a      	str	r2, [r3, #24]
      break;
 80061f0:	e084      	b.n	80062fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 fb69 	bl	80068d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f042 0208 	orr.w	r2, r2, #8
 800620c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69da      	ldr	r2, [r3, #28]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0204 	bic.w	r2, r2, #4
 800621c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69d9      	ldr	r1, [r3, #28]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	691a      	ldr	r2, [r3, #16]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	61da      	str	r2, [r3, #28]
      break;
 8006230:	e064      	b.n	80062fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	4618      	mov	r0, r3
 800623a:	f000 fbd1 	bl	80069e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69da      	ldr	r2, [r3, #28]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800624c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69da      	ldr	r2, [r3, #28]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800625c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69d9      	ldr	r1, [r3, #28]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	021a      	lsls	r2, r3, #8
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	61da      	str	r2, [r3, #28]
      break;
 8006272:	e043      	b.n	80062fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fc1a 	bl	8006ab4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0208 	orr.w	r2, r2, #8
 800628e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0204 	bic.w	r2, r2, #4
 800629e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	691a      	ldr	r2, [r3, #16]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80062b2:	e023      	b.n	80062fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fc5e 	bl	8006b7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	021a      	lsls	r2, r3, #8
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80062f4:	e002      	b.n	80062fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	75fb      	strb	r3, [r7, #23]
      break;
 80062fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006304:	7dfb      	ldrb	r3, [r7, #23]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop

08006310 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006324:	2b01      	cmp	r3, #1
 8006326:	d101      	bne.n	800632c <HAL_TIM_ConfigClockSource+0x1c>
 8006328:	2302      	movs	r3, #2
 800632a:	e0dc      	b.n	80064e6 <HAL_TIM_ConfigClockSource+0x1d6>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	4b6a      	ldr	r3, [pc, #424]	@ (80064f0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006348:	4013      	ands	r3, r2
 800634a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006352:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a64      	ldr	r2, [pc, #400]	@ (80064f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	f000 80a9 	beq.w	80064ba <HAL_TIM_ConfigClockSource+0x1aa>
 8006368:	4a62      	ldr	r2, [pc, #392]	@ (80064f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	f200 80ae 	bhi.w	80064cc <HAL_TIM_ConfigClockSource+0x1bc>
 8006370:	4a61      	ldr	r2, [pc, #388]	@ (80064f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	f000 80a1 	beq.w	80064ba <HAL_TIM_ConfigClockSource+0x1aa>
 8006378:	4a5f      	ldr	r2, [pc, #380]	@ (80064f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	f200 80a6 	bhi.w	80064cc <HAL_TIM_ConfigClockSource+0x1bc>
 8006380:	4a5e      	ldr	r2, [pc, #376]	@ (80064fc <HAL_TIM_ConfigClockSource+0x1ec>)
 8006382:	4293      	cmp	r3, r2
 8006384:	f000 8099 	beq.w	80064ba <HAL_TIM_ConfigClockSource+0x1aa>
 8006388:	4a5c      	ldr	r2, [pc, #368]	@ (80064fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800638a:	4293      	cmp	r3, r2
 800638c:	f200 809e 	bhi.w	80064cc <HAL_TIM_ConfigClockSource+0x1bc>
 8006390:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006394:	f000 8091 	beq.w	80064ba <HAL_TIM_ConfigClockSource+0x1aa>
 8006398:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800639c:	f200 8096 	bhi.w	80064cc <HAL_TIM_ConfigClockSource+0x1bc>
 80063a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063a4:	f000 8089 	beq.w	80064ba <HAL_TIM_ConfigClockSource+0x1aa>
 80063a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063ac:	f200 808e 	bhi.w	80064cc <HAL_TIM_ConfigClockSource+0x1bc>
 80063b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063b4:	d03e      	beq.n	8006434 <HAL_TIM_ConfigClockSource+0x124>
 80063b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ba:	f200 8087 	bhi.w	80064cc <HAL_TIM_ConfigClockSource+0x1bc>
 80063be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063c2:	f000 8086 	beq.w	80064d2 <HAL_TIM_ConfigClockSource+0x1c2>
 80063c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ca:	d87f      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x1bc>
 80063cc:	2b70      	cmp	r3, #112	@ 0x70
 80063ce:	d01a      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0xf6>
 80063d0:	2b70      	cmp	r3, #112	@ 0x70
 80063d2:	d87b      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x1bc>
 80063d4:	2b60      	cmp	r3, #96	@ 0x60
 80063d6:	d050      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x16a>
 80063d8:	2b60      	cmp	r3, #96	@ 0x60
 80063da:	d877      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x1bc>
 80063dc:	2b50      	cmp	r3, #80	@ 0x50
 80063de:	d03c      	beq.n	800645a <HAL_TIM_ConfigClockSource+0x14a>
 80063e0:	2b50      	cmp	r3, #80	@ 0x50
 80063e2:	d873      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x1bc>
 80063e4:	2b40      	cmp	r3, #64	@ 0x40
 80063e6:	d058      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x18a>
 80063e8:	2b40      	cmp	r3, #64	@ 0x40
 80063ea:	d86f      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x1bc>
 80063ec:	2b30      	cmp	r3, #48	@ 0x30
 80063ee:	d064      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0x1aa>
 80063f0:	2b30      	cmp	r3, #48	@ 0x30
 80063f2:	d86b      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x1bc>
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	d060      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0x1aa>
 80063f8:	2b20      	cmp	r3, #32
 80063fa:	d867      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x1bc>
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d05c      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0x1aa>
 8006400:	2b10      	cmp	r3, #16
 8006402:	d05a      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0x1aa>
 8006404:	e062      	b.n	80064cc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006416:	f000 fc95 	bl	8006d44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006428:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	609a      	str	r2, [r3, #8]
      break;
 8006432:	e04f      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006444:	f000 fc7e 	bl	8006d44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006456:	609a      	str	r2, [r3, #8]
      break;
 8006458:	e03c      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006466:	461a      	mov	r2, r3
 8006468:	f000 fbee 	bl	8006c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2150      	movs	r1, #80	@ 0x50
 8006472:	4618      	mov	r0, r3
 8006474:	f000 fc48 	bl	8006d08 <TIM_ITRx_SetConfig>
      break;
 8006478:	e02c      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006486:	461a      	mov	r2, r3
 8006488:	f000 fc0d 	bl	8006ca6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2160      	movs	r1, #96	@ 0x60
 8006492:	4618      	mov	r0, r3
 8006494:	f000 fc38 	bl	8006d08 <TIM_ITRx_SetConfig>
      break;
 8006498:	e01c      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064a6:	461a      	mov	r2, r3
 80064a8:	f000 fbce 	bl	8006c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2140      	movs	r1, #64	@ 0x40
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 fc28 	bl	8006d08 <TIM_ITRx_SetConfig>
      break;
 80064b8:	e00c      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4619      	mov	r1, r3
 80064c4:	4610      	mov	r0, r2
 80064c6:	f000 fc1f 	bl	8006d08 <TIM_ITRx_SetConfig>
      break;
 80064ca:	e003      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	73fb      	strb	r3, [r7, #15]
      break;
 80064d0:	e000      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80064d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	ffceff88 	.word	0xffceff88
 80064f4:	00100040 	.word	0x00100040
 80064f8:	00100030 	.word	0x00100030
 80064fc:	00100020 	.word	0x00100020

08006500 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a46      	ldr	r2, [pc, #280]	@ (800667c <TIM_Base_SetConfig+0x12c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d013      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800656e:	d00f      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a43      	ldr	r2, [pc, #268]	@ (8006680 <TIM_Base_SetConfig+0x130>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00b      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a42      	ldr	r2, [pc, #264]	@ (8006684 <TIM_Base_SetConfig+0x134>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d007      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a41      	ldr	r2, [pc, #260]	@ (8006688 <TIM_Base_SetConfig+0x138>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a40      	ldr	r2, [pc, #256]	@ (800668c <TIM_Base_SetConfig+0x13c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d108      	bne.n	80065a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a35      	ldr	r2, [pc, #212]	@ (800667c <TIM_Base_SetConfig+0x12c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d01f      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b0:	d01b      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a32      	ldr	r2, [pc, #200]	@ (8006680 <TIM_Base_SetConfig+0x130>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d017      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a31      	ldr	r2, [pc, #196]	@ (8006684 <TIM_Base_SetConfig+0x134>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d013      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a30      	ldr	r2, [pc, #192]	@ (8006688 <TIM_Base_SetConfig+0x138>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00f      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a2f      	ldr	r2, [pc, #188]	@ (800668c <TIM_Base_SetConfig+0x13c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d00b      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006690 <TIM_Base_SetConfig+0x140>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d007      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006694 <TIM_Base_SetConfig+0x144>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d003      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006698 <TIM_Base_SetConfig+0x148>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d108      	bne.n	80065fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a16      	ldr	r2, [pc, #88]	@ (800667c <TIM_Base_SetConfig+0x12c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00f      	beq.n	8006648 <TIM_Base_SetConfig+0xf8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a18      	ldr	r2, [pc, #96]	@ (800668c <TIM_Base_SetConfig+0x13c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d00b      	beq.n	8006648 <TIM_Base_SetConfig+0xf8>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a17      	ldr	r2, [pc, #92]	@ (8006690 <TIM_Base_SetConfig+0x140>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d007      	beq.n	8006648 <TIM_Base_SetConfig+0xf8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a16      	ldr	r2, [pc, #88]	@ (8006694 <TIM_Base_SetConfig+0x144>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d003      	beq.n	8006648 <TIM_Base_SetConfig+0xf8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a15      	ldr	r2, [pc, #84]	@ (8006698 <TIM_Base_SetConfig+0x148>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d103      	bne.n	8006650 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b01      	cmp	r3, #1
 8006660:	d105      	bne.n	800666e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f023 0201 	bic.w	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	611a      	str	r2, [r3, #16]
  }
}
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40010000 	.word	0x40010000
 8006680:	40000400 	.word	0x40000400
 8006684:	40000800 	.word	0x40000800
 8006688:	40000c00 	.word	0x40000c00
 800668c:	40010400 	.word	0x40010400
 8006690:	40014000 	.word	0x40014000
 8006694:	40014400 	.word	0x40014400
 8006698:	40014800 	.word	0x40014800

0800669c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	f023 0201 	bic.w	r2, r3, #1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4b37      	ldr	r3, [pc, #220]	@ (80067a4 <TIM_OC1_SetConfig+0x108>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 0303 	bic.w	r3, r3, #3
 80066d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f023 0302 	bic.w	r3, r3, #2
 80066e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a2d      	ldr	r2, [pc, #180]	@ (80067a8 <TIM_OC1_SetConfig+0x10c>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d00f      	beq.n	8006718 <TIM_OC1_SetConfig+0x7c>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a2c      	ldr	r2, [pc, #176]	@ (80067ac <TIM_OC1_SetConfig+0x110>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d00b      	beq.n	8006718 <TIM_OC1_SetConfig+0x7c>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a2b      	ldr	r2, [pc, #172]	@ (80067b0 <TIM_OC1_SetConfig+0x114>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d007      	beq.n	8006718 <TIM_OC1_SetConfig+0x7c>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a2a      	ldr	r2, [pc, #168]	@ (80067b4 <TIM_OC1_SetConfig+0x118>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d003      	beq.n	8006718 <TIM_OC1_SetConfig+0x7c>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a29      	ldr	r2, [pc, #164]	@ (80067b8 <TIM_OC1_SetConfig+0x11c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d10c      	bne.n	8006732 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f023 0308 	bic.w	r3, r3, #8
 800671e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	4313      	orrs	r3, r2
 8006728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f023 0304 	bic.w	r3, r3, #4
 8006730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a1c      	ldr	r2, [pc, #112]	@ (80067a8 <TIM_OC1_SetConfig+0x10c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d00f      	beq.n	800675a <TIM_OC1_SetConfig+0xbe>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a1b      	ldr	r2, [pc, #108]	@ (80067ac <TIM_OC1_SetConfig+0x110>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d00b      	beq.n	800675a <TIM_OC1_SetConfig+0xbe>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a1a      	ldr	r2, [pc, #104]	@ (80067b0 <TIM_OC1_SetConfig+0x114>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d007      	beq.n	800675a <TIM_OC1_SetConfig+0xbe>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a19      	ldr	r2, [pc, #100]	@ (80067b4 <TIM_OC1_SetConfig+0x118>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d003      	beq.n	800675a <TIM_OC1_SetConfig+0xbe>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a18      	ldr	r2, [pc, #96]	@ (80067b8 <TIM_OC1_SetConfig+0x11c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d111      	bne.n	800677e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	4313      	orrs	r3, r2
 8006772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	4313      	orrs	r3, r2
 800677c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	621a      	str	r2, [r3, #32]
}
 8006798:	bf00      	nop
 800679a:	371c      	adds	r7, #28
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	fffeff8f 	.word	0xfffeff8f
 80067a8:	40010000 	.word	0x40010000
 80067ac:	40010400 	.word	0x40010400
 80067b0:	40014000 	.word	0x40014000
 80067b4:	40014400 	.word	0x40014400
 80067b8:	40014800 	.word	0x40014800

080067bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	f023 0210 	bic.w	r2, r3, #16
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4b34      	ldr	r3, [pc, #208]	@ (80068b8 <TIM_OC2_SetConfig+0xfc>)
 80067e8:	4013      	ands	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	021b      	lsls	r3, r3, #8
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f023 0320 	bic.w	r3, r3, #32
 8006806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a29      	ldr	r2, [pc, #164]	@ (80068bc <TIM_OC2_SetConfig+0x100>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d003      	beq.n	8006824 <TIM_OC2_SetConfig+0x68>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a28      	ldr	r2, [pc, #160]	@ (80068c0 <TIM_OC2_SetConfig+0x104>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d10d      	bne.n	8006840 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800682a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800683e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a1e      	ldr	r2, [pc, #120]	@ (80068bc <TIM_OC2_SetConfig+0x100>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00f      	beq.n	8006868 <TIM_OC2_SetConfig+0xac>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a1d      	ldr	r2, [pc, #116]	@ (80068c0 <TIM_OC2_SetConfig+0x104>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00b      	beq.n	8006868 <TIM_OC2_SetConfig+0xac>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a1c      	ldr	r2, [pc, #112]	@ (80068c4 <TIM_OC2_SetConfig+0x108>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d007      	beq.n	8006868 <TIM_OC2_SetConfig+0xac>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a1b      	ldr	r2, [pc, #108]	@ (80068c8 <TIM_OC2_SetConfig+0x10c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d003      	beq.n	8006868 <TIM_OC2_SetConfig+0xac>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a1a      	ldr	r2, [pc, #104]	@ (80068cc <TIM_OC2_SetConfig+0x110>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d113      	bne.n	8006890 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800686e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006876:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	4313      	orrs	r3, r2
 8006882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4313      	orrs	r3, r2
 800688e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	621a      	str	r2, [r3, #32]
}
 80068aa:	bf00      	nop
 80068ac:	371c      	adds	r7, #28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	feff8fff 	.word	0xfeff8fff
 80068bc:	40010000 	.word	0x40010000
 80068c0:	40010400 	.word	0x40010400
 80068c4:	40014000 	.word	0x40014000
 80068c8:	40014400 	.word	0x40014400
 80068cc:	40014800 	.word	0x40014800

080068d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4b33      	ldr	r3, [pc, #204]	@ (80069c8 <TIM_OC3_SetConfig+0xf8>)
 80068fc:	4013      	ands	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f023 0303 	bic.w	r3, r3, #3
 8006906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	4313      	orrs	r3, r2
 8006910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	021b      	lsls	r3, r3, #8
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	4313      	orrs	r3, r2
 8006924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a28      	ldr	r2, [pc, #160]	@ (80069cc <TIM_OC3_SetConfig+0xfc>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d003      	beq.n	8006936 <TIM_OC3_SetConfig+0x66>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a27      	ldr	r2, [pc, #156]	@ (80069d0 <TIM_OC3_SetConfig+0x100>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d10d      	bne.n	8006952 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800693c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	021b      	lsls	r3, r3, #8
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	4313      	orrs	r3, r2
 8006948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a1d      	ldr	r2, [pc, #116]	@ (80069cc <TIM_OC3_SetConfig+0xfc>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00f      	beq.n	800697a <TIM_OC3_SetConfig+0xaa>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a1c      	ldr	r2, [pc, #112]	@ (80069d0 <TIM_OC3_SetConfig+0x100>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00b      	beq.n	800697a <TIM_OC3_SetConfig+0xaa>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a1b      	ldr	r2, [pc, #108]	@ (80069d4 <TIM_OC3_SetConfig+0x104>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d007      	beq.n	800697a <TIM_OC3_SetConfig+0xaa>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a1a      	ldr	r2, [pc, #104]	@ (80069d8 <TIM_OC3_SetConfig+0x108>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d003      	beq.n	800697a <TIM_OC3_SetConfig+0xaa>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a19      	ldr	r2, [pc, #100]	@ (80069dc <TIM_OC3_SetConfig+0x10c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d113      	bne.n	80069a2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	4313      	orrs	r3, r2
 8006994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	4313      	orrs	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	621a      	str	r2, [r3, #32]
}
 80069bc:	bf00      	nop
 80069be:	371c      	adds	r7, #28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	fffeff8f 	.word	0xfffeff8f
 80069cc:	40010000 	.word	0x40010000
 80069d0:	40010400 	.word	0x40010400
 80069d4:	40014000 	.word	0x40014000
 80069d8:	40014400 	.word	0x40014400
 80069dc:	40014800 	.word	0x40014800

080069e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4b24      	ldr	r3, [pc, #144]	@ (8006a9c <TIM_OC4_SetConfig+0xbc>)
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	021b      	lsls	r3, r3, #8
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	031b      	lsls	r3, r3, #12
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a19      	ldr	r2, [pc, #100]	@ (8006aa0 <TIM_OC4_SetConfig+0xc0>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d00f      	beq.n	8006a60 <TIM_OC4_SetConfig+0x80>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a18      	ldr	r2, [pc, #96]	@ (8006aa4 <TIM_OC4_SetConfig+0xc4>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00b      	beq.n	8006a60 <TIM_OC4_SetConfig+0x80>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a17      	ldr	r2, [pc, #92]	@ (8006aa8 <TIM_OC4_SetConfig+0xc8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d007      	beq.n	8006a60 <TIM_OC4_SetConfig+0x80>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a16      	ldr	r2, [pc, #88]	@ (8006aac <TIM_OC4_SetConfig+0xcc>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d003      	beq.n	8006a60 <TIM_OC4_SetConfig+0x80>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a15      	ldr	r2, [pc, #84]	@ (8006ab0 <TIM_OC4_SetConfig+0xd0>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d109      	bne.n	8006a74 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	019b      	lsls	r3, r3, #6
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	621a      	str	r2, [r3, #32]
}
 8006a8e:	bf00      	nop
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	feff8fff 	.word	0xfeff8fff
 8006aa0:	40010000 	.word	0x40010000
 8006aa4:	40010400 	.word	0x40010400
 8006aa8:	40014000 	.word	0x40014000
 8006aac:	40014400 	.word	0x40014400
 8006ab0:	40014800 	.word	0x40014800

08006ab4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4b21      	ldr	r3, [pc, #132]	@ (8006b64 <TIM_OC5_SetConfig+0xb0>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006af4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	041b      	lsls	r3, r3, #16
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a18      	ldr	r2, [pc, #96]	@ (8006b68 <TIM_OC5_SetConfig+0xb4>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00f      	beq.n	8006b2a <TIM_OC5_SetConfig+0x76>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a17      	ldr	r2, [pc, #92]	@ (8006b6c <TIM_OC5_SetConfig+0xb8>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00b      	beq.n	8006b2a <TIM_OC5_SetConfig+0x76>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a16      	ldr	r2, [pc, #88]	@ (8006b70 <TIM_OC5_SetConfig+0xbc>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d007      	beq.n	8006b2a <TIM_OC5_SetConfig+0x76>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a15      	ldr	r2, [pc, #84]	@ (8006b74 <TIM_OC5_SetConfig+0xc0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d003      	beq.n	8006b2a <TIM_OC5_SetConfig+0x76>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a14      	ldr	r2, [pc, #80]	@ (8006b78 <TIM_OC5_SetConfig+0xc4>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d109      	bne.n	8006b3e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	021b      	lsls	r3, r3, #8
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	621a      	str	r2, [r3, #32]
}
 8006b58:	bf00      	nop
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	fffeff8f 	.word	0xfffeff8f
 8006b68:	40010000 	.word	0x40010000
 8006b6c:	40010400 	.word	0x40010400
 8006b70:	40014000 	.word	0x40014000
 8006b74:	40014400 	.word	0x40014400
 8006b78:	40014800 	.word	0x40014800

08006b7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4b22      	ldr	r3, [pc, #136]	@ (8006c30 <TIM_OC6_SetConfig+0xb4>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	021b      	lsls	r3, r3, #8
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	051b      	lsls	r3, r3, #20
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a19      	ldr	r2, [pc, #100]	@ (8006c34 <TIM_OC6_SetConfig+0xb8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00f      	beq.n	8006bf4 <TIM_OC6_SetConfig+0x78>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a18      	ldr	r2, [pc, #96]	@ (8006c38 <TIM_OC6_SetConfig+0xbc>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d00b      	beq.n	8006bf4 <TIM_OC6_SetConfig+0x78>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a17      	ldr	r2, [pc, #92]	@ (8006c3c <TIM_OC6_SetConfig+0xc0>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d007      	beq.n	8006bf4 <TIM_OC6_SetConfig+0x78>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a16      	ldr	r2, [pc, #88]	@ (8006c40 <TIM_OC6_SetConfig+0xc4>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d003      	beq.n	8006bf4 <TIM_OC6_SetConfig+0x78>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a15      	ldr	r2, [pc, #84]	@ (8006c44 <TIM_OC6_SetConfig+0xc8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d109      	bne.n	8006c08 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	029b      	lsls	r3, r3, #10
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	621a      	str	r2, [r3, #32]
}
 8006c22:	bf00      	nop
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	feff8fff 	.word	0xfeff8fff
 8006c34:	40010000 	.word	0x40010000
 8006c38:	40010400 	.word	0x40010400
 8006c3c:	40014000 	.word	0x40014000
 8006c40:	40014400 	.word	0x40014400
 8006c44:	40014800 	.word	0x40014800

08006c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f023 0201 	bic.w	r2, r3, #1
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f023 030a 	bic.w	r3, r3, #10
 8006c84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	621a      	str	r2, [r3, #32]
}
 8006c9a:	bf00      	nop
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b087      	sub	sp, #28
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	f023 0210 	bic.w	r2, r3, #16
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006cd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	031b      	lsls	r3, r3, #12
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ce2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	011b      	lsls	r3, r3, #4
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	621a      	str	r2, [r3, #32]
}
 8006cfa:	bf00      	nop
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
	...

08006d08 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4b09      	ldr	r3, [pc, #36]	@ (8006d40 <TIM_ITRx_SetConfig+0x38>)
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	f043 0307 	orr.w	r3, r3, #7
 8006d2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	609a      	str	r2, [r3, #8]
}
 8006d32:	bf00      	nop
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	ffcfff8f 	.word	0xffcfff8f

08006d44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	021a      	lsls	r2, r3, #8
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	431a      	orrs	r2, r3
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	609a      	str	r2, [r3, #8]
}
 8006d78:	bf00      	nop
 8006d7a:	371c      	adds	r7, #28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f003 031f 	and.w	r3, r3, #31
 8006d96:	2201      	movs	r2, #1
 8006d98:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6a1a      	ldr	r2, [r3, #32]
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	43db      	mvns	r3, r3
 8006da6:	401a      	ands	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a1a      	ldr	r2, [r3, #32]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f003 031f 	and.w	r3, r3, #31
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	621a      	str	r2, [r3, #32]
}
 8006dc2:	bf00      	nop
 8006dc4:	371c      	adds	r7, #28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
	...

08006dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d101      	bne.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006de4:	2302      	movs	r3, #2
 8006de6:	e06d      	b.n	8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a30      	ldr	r2, [pc, #192]	@ (8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d004      	beq.n	8006e1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a2f      	ldr	r2, [pc, #188]	@ (8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d108      	bne.n	8006e2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006e22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a20      	ldr	r2, [pc, #128]	@ (8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d022      	beq.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e5a:	d01d      	beq.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a1d      	ldr	r2, [pc, #116]	@ (8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d018      	beq.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8006edc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d013      	beq.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a1a      	ldr	r2, [pc, #104]	@ (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00e      	beq.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a15      	ldr	r2, [pc, #84]	@ (8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d009      	beq.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a16      	ldr	r2, [pc, #88]	@ (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d004      	beq.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a15      	ldr	r2, [pc, #84]	@ (8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d10c      	bne.n	8006eb2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	40010000 	.word	0x40010000
 8006ed4:	40010400 	.word	0x40010400
 8006ed8:	40000400 	.word	0x40000400
 8006edc:	40000800 	.word	0x40000800
 8006ee0:	40000c00 	.word	0x40000c00
 8006ee4:	40001800 	.word	0x40001800
 8006ee8:	40014000 	.word	0x40014000

08006eec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e042      	b.n	8006fc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d106      	bne.n	8006f52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7fa fa1d 	bl	800138c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2224      	movs	r2, #36	@ 0x24
 8006f56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0201 	bic.w	r2, r2, #1
 8006f68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d002      	beq.n	8006f78 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fd90 	bl	8007a98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f825 	bl	8006fc8 <UART_SetConfig>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e01b      	b.n	8006fc0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0201 	orr.w	r2, r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fe0f 	bl	8007bdc <UART_CheckIdleState>
 8006fbe:	4603      	mov	r3, r0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fcc:	b092      	sub	sp, #72	@ 0x48
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	689a      	ldr	r2, [r3, #8]
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	4bbe      	ldr	r3, [pc, #760]	@ (80072f0 <UART_SetConfig+0x328>)
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	6812      	ldr	r2, [r2, #0]
 8006ffe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007000:	430b      	orrs	r3, r1
 8007002:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4ab3      	ldr	r2, [pc, #716]	@ (80072f4 <UART_SetConfig+0x32c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d004      	beq.n	8007034 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007030:	4313      	orrs	r3, r2
 8007032:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	4baf      	ldr	r3, [pc, #700]	@ (80072f8 <UART_SetConfig+0x330>)
 800703c:	4013      	ands	r3, r2
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	6812      	ldr	r2, [r2, #0]
 8007042:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007044:	430b      	orrs	r3, r1
 8007046:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704e:	f023 010f 	bic.w	r1, r3, #15
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4aa6      	ldr	r2, [pc, #664]	@ (80072fc <UART_SetConfig+0x334>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d177      	bne.n	8007158 <UART_SetConfig+0x190>
 8007068:	4ba5      	ldr	r3, [pc, #660]	@ (8007300 <UART_SetConfig+0x338>)
 800706a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800706c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007070:	2b28      	cmp	r3, #40	@ 0x28
 8007072:	d86d      	bhi.n	8007150 <UART_SetConfig+0x188>
 8007074:	a201      	add	r2, pc, #4	@ (adr r2, 800707c <UART_SetConfig+0xb4>)
 8007076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707a:	bf00      	nop
 800707c:	08007121 	.word	0x08007121
 8007080:	08007151 	.word	0x08007151
 8007084:	08007151 	.word	0x08007151
 8007088:	08007151 	.word	0x08007151
 800708c:	08007151 	.word	0x08007151
 8007090:	08007151 	.word	0x08007151
 8007094:	08007151 	.word	0x08007151
 8007098:	08007151 	.word	0x08007151
 800709c:	08007129 	.word	0x08007129
 80070a0:	08007151 	.word	0x08007151
 80070a4:	08007151 	.word	0x08007151
 80070a8:	08007151 	.word	0x08007151
 80070ac:	08007151 	.word	0x08007151
 80070b0:	08007151 	.word	0x08007151
 80070b4:	08007151 	.word	0x08007151
 80070b8:	08007151 	.word	0x08007151
 80070bc:	08007131 	.word	0x08007131
 80070c0:	08007151 	.word	0x08007151
 80070c4:	08007151 	.word	0x08007151
 80070c8:	08007151 	.word	0x08007151
 80070cc:	08007151 	.word	0x08007151
 80070d0:	08007151 	.word	0x08007151
 80070d4:	08007151 	.word	0x08007151
 80070d8:	08007151 	.word	0x08007151
 80070dc:	08007139 	.word	0x08007139
 80070e0:	08007151 	.word	0x08007151
 80070e4:	08007151 	.word	0x08007151
 80070e8:	08007151 	.word	0x08007151
 80070ec:	08007151 	.word	0x08007151
 80070f0:	08007151 	.word	0x08007151
 80070f4:	08007151 	.word	0x08007151
 80070f8:	08007151 	.word	0x08007151
 80070fc:	08007141 	.word	0x08007141
 8007100:	08007151 	.word	0x08007151
 8007104:	08007151 	.word	0x08007151
 8007108:	08007151 	.word	0x08007151
 800710c:	08007151 	.word	0x08007151
 8007110:	08007151 	.word	0x08007151
 8007114:	08007151 	.word	0x08007151
 8007118:	08007151 	.word	0x08007151
 800711c:	08007149 	.word	0x08007149
 8007120:	2301      	movs	r3, #1
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007126:	e222      	b.n	800756e <UART_SetConfig+0x5a6>
 8007128:	2304      	movs	r3, #4
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712e:	e21e      	b.n	800756e <UART_SetConfig+0x5a6>
 8007130:	2308      	movs	r3, #8
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007136:	e21a      	b.n	800756e <UART_SetConfig+0x5a6>
 8007138:	2310      	movs	r3, #16
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800713e:	e216      	b.n	800756e <UART_SetConfig+0x5a6>
 8007140:	2320      	movs	r3, #32
 8007142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007146:	e212      	b.n	800756e <UART_SetConfig+0x5a6>
 8007148:	2340      	movs	r3, #64	@ 0x40
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800714e:	e20e      	b.n	800756e <UART_SetConfig+0x5a6>
 8007150:	2380      	movs	r3, #128	@ 0x80
 8007152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007156:	e20a      	b.n	800756e <UART_SetConfig+0x5a6>
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a69      	ldr	r2, [pc, #420]	@ (8007304 <UART_SetConfig+0x33c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d130      	bne.n	80071c4 <UART_SetConfig+0x1fc>
 8007162:	4b67      	ldr	r3, [pc, #412]	@ (8007300 <UART_SetConfig+0x338>)
 8007164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	2b05      	cmp	r3, #5
 800716c:	d826      	bhi.n	80071bc <UART_SetConfig+0x1f4>
 800716e:	a201      	add	r2, pc, #4	@ (adr r2, 8007174 <UART_SetConfig+0x1ac>)
 8007170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007174:	0800718d 	.word	0x0800718d
 8007178:	08007195 	.word	0x08007195
 800717c:	0800719d 	.word	0x0800719d
 8007180:	080071a5 	.word	0x080071a5
 8007184:	080071ad 	.word	0x080071ad
 8007188:	080071b5 	.word	0x080071b5
 800718c:	2300      	movs	r3, #0
 800718e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007192:	e1ec      	b.n	800756e <UART_SetConfig+0x5a6>
 8007194:	2304      	movs	r3, #4
 8007196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800719a:	e1e8      	b.n	800756e <UART_SetConfig+0x5a6>
 800719c:	2308      	movs	r3, #8
 800719e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071a2:	e1e4      	b.n	800756e <UART_SetConfig+0x5a6>
 80071a4:	2310      	movs	r3, #16
 80071a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071aa:	e1e0      	b.n	800756e <UART_SetConfig+0x5a6>
 80071ac:	2320      	movs	r3, #32
 80071ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071b2:	e1dc      	b.n	800756e <UART_SetConfig+0x5a6>
 80071b4:	2340      	movs	r3, #64	@ 0x40
 80071b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ba:	e1d8      	b.n	800756e <UART_SetConfig+0x5a6>
 80071bc:	2380      	movs	r3, #128	@ 0x80
 80071be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071c2:	e1d4      	b.n	800756e <UART_SetConfig+0x5a6>
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a4f      	ldr	r2, [pc, #316]	@ (8007308 <UART_SetConfig+0x340>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d130      	bne.n	8007230 <UART_SetConfig+0x268>
 80071ce:	4b4c      	ldr	r3, [pc, #304]	@ (8007300 <UART_SetConfig+0x338>)
 80071d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	2b05      	cmp	r3, #5
 80071d8:	d826      	bhi.n	8007228 <UART_SetConfig+0x260>
 80071da:	a201      	add	r2, pc, #4	@ (adr r2, 80071e0 <UART_SetConfig+0x218>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	080071f9 	.word	0x080071f9
 80071e4:	08007201 	.word	0x08007201
 80071e8:	08007209 	.word	0x08007209
 80071ec:	08007211 	.word	0x08007211
 80071f0:	08007219 	.word	0x08007219
 80071f4:	08007221 	.word	0x08007221
 80071f8:	2300      	movs	r3, #0
 80071fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071fe:	e1b6      	b.n	800756e <UART_SetConfig+0x5a6>
 8007200:	2304      	movs	r3, #4
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007206:	e1b2      	b.n	800756e <UART_SetConfig+0x5a6>
 8007208:	2308      	movs	r3, #8
 800720a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800720e:	e1ae      	b.n	800756e <UART_SetConfig+0x5a6>
 8007210:	2310      	movs	r3, #16
 8007212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007216:	e1aa      	b.n	800756e <UART_SetConfig+0x5a6>
 8007218:	2320      	movs	r3, #32
 800721a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800721e:	e1a6      	b.n	800756e <UART_SetConfig+0x5a6>
 8007220:	2340      	movs	r3, #64	@ 0x40
 8007222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007226:	e1a2      	b.n	800756e <UART_SetConfig+0x5a6>
 8007228:	2380      	movs	r3, #128	@ 0x80
 800722a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800722e:	e19e      	b.n	800756e <UART_SetConfig+0x5a6>
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a35      	ldr	r2, [pc, #212]	@ (800730c <UART_SetConfig+0x344>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d130      	bne.n	800729c <UART_SetConfig+0x2d4>
 800723a:	4b31      	ldr	r3, [pc, #196]	@ (8007300 <UART_SetConfig+0x338>)
 800723c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800723e:	f003 0307 	and.w	r3, r3, #7
 8007242:	2b05      	cmp	r3, #5
 8007244:	d826      	bhi.n	8007294 <UART_SetConfig+0x2cc>
 8007246:	a201      	add	r2, pc, #4	@ (adr r2, 800724c <UART_SetConfig+0x284>)
 8007248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724c:	08007265 	.word	0x08007265
 8007250:	0800726d 	.word	0x0800726d
 8007254:	08007275 	.word	0x08007275
 8007258:	0800727d 	.word	0x0800727d
 800725c:	08007285 	.word	0x08007285
 8007260:	0800728d 	.word	0x0800728d
 8007264:	2300      	movs	r3, #0
 8007266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800726a:	e180      	b.n	800756e <UART_SetConfig+0x5a6>
 800726c:	2304      	movs	r3, #4
 800726e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007272:	e17c      	b.n	800756e <UART_SetConfig+0x5a6>
 8007274:	2308      	movs	r3, #8
 8007276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800727a:	e178      	b.n	800756e <UART_SetConfig+0x5a6>
 800727c:	2310      	movs	r3, #16
 800727e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007282:	e174      	b.n	800756e <UART_SetConfig+0x5a6>
 8007284:	2320      	movs	r3, #32
 8007286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800728a:	e170      	b.n	800756e <UART_SetConfig+0x5a6>
 800728c:	2340      	movs	r3, #64	@ 0x40
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007292:	e16c      	b.n	800756e <UART_SetConfig+0x5a6>
 8007294:	2380      	movs	r3, #128	@ 0x80
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800729a:	e168      	b.n	800756e <UART_SetConfig+0x5a6>
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007310 <UART_SetConfig+0x348>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d142      	bne.n	800732c <UART_SetConfig+0x364>
 80072a6:	4b16      	ldr	r3, [pc, #88]	@ (8007300 <UART_SetConfig+0x338>)
 80072a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	2b05      	cmp	r3, #5
 80072b0:	d838      	bhi.n	8007324 <UART_SetConfig+0x35c>
 80072b2:	a201      	add	r2, pc, #4	@ (adr r2, 80072b8 <UART_SetConfig+0x2f0>)
 80072b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b8:	080072d1 	.word	0x080072d1
 80072bc:	080072d9 	.word	0x080072d9
 80072c0:	080072e1 	.word	0x080072e1
 80072c4:	080072e9 	.word	0x080072e9
 80072c8:	08007315 	.word	0x08007315
 80072cc:	0800731d 	.word	0x0800731d
 80072d0:	2300      	movs	r3, #0
 80072d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072d6:	e14a      	b.n	800756e <UART_SetConfig+0x5a6>
 80072d8:	2304      	movs	r3, #4
 80072da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072de:	e146      	b.n	800756e <UART_SetConfig+0x5a6>
 80072e0:	2308      	movs	r3, #8
 80072e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072e6:	e142      	b.n	800756e <UART_SetConfig+0x5a6>
 80072e8:	2310      	movs	r3, #16
 80072ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ee:	e13e      	b.n	800756e <UART_SetConfig+0x5a6>
 80072f0:	cfff69f3 	.word	0xcfff69f3
 80072f4:	58000c00 	.word	0x58000c00
 80072f8:	11fff4ff 	.word	0x11fff4ff
 80072fc:	40011000 	.word	0x40011000
 8007300:	58024400 	.word	0x58024400
 8007304:	40004400 	.word	0x40004400
 8007308:	40004800 	.word	0x40004800
 800730c:	40004c00 	.word	0x40004c00
 8007310:	40005000 	.word	0x40005000
 8007314:	2320      	movs	r3, #32
 8007316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800731a:	e128      	b.n	800756e <UART_SetConfig+0x5a6>
 800731c:	2340      	movs	r3, #64	@ 0x40
 800731e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007322:	e124      	b.n	800756e <UART_SetConfig+0x5a6>
 8007324:	2380      	movs	r3, #128	@ 0x80
 8007326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800732a:	e120      	b.n	800756e <UART_SetConfig+0x5a6>
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4acb      	ldr	r2, [pc, #812]	@ (8007660 <UART_SetConfig+0x698>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d176      	bne.n	8007424 <UART_SetConfig+0x45c>
 8007336:	4bcb      	ldr	r3, [pc, #812]	@ (8007664 <UART_SetConfig+0x69c>)
 8007338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800733a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800733e:	2b28      	cmp	r3, #40	@ 0x28
 8007340:	d86c      	bhi.n	800741c <UART_SetConfig+0x454>
 8007342:	a201      	add	r2, pc, #4	@ (adr r2, 8007348 <UART_SetConfig+0x380>)
 8007344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007348:	080073ed 	.word	0x080073ed
 800734c:	0800741d 	.word	0x0800741d
 8007350:	0800741d 	.word	0x0800741d
 8007354:	0800741d 	.word	0x0800741d
 8007358:	0800741d 	.word	0x0800741d
 800735c:	0800741d 	.word	0x0800741d
 8007360:	0800741d 	.word	0x0800741d
 8007364:	0800741d 	.word	0x0800741d
 8007368:	080073f5 	.word	0x080073f5
 800736c:	0800741d 	.word	0x0800741d
 8007370:	0800741d 	.word	0x0800741d
 8007374:	0800741d 	.word	0x0800741d
 8007378:	0800741d 	.word	0x0800741d
 800737c:	0800741d 	.word	0x0800741d
 8007380:	0800741d 	.word	0x0800741d
 8007384:	0800741d 	.word	0x0800741d
 8007388:	080073fd 	.word	0x080073fd
 800738c:	0800741d 	.word	0x0800741d
 8007390:	0800741d 	.word	0x0800741d
 8007394:	0800741d 	.word	0x0800741d
 8007398:	0800741d 	.word	0x0800741d
 800739c:	0800741d 	.word	0x0800741d
 80073a0:	0800741d 	.word	0x0800741d
 80073a4:	0800741d 	.word	0x0800741d
 80073a8:	08007405 	.word	0x08007405
 80073ac:	0800741d 	.word	0x0800741d
 80073b0:	0800741d 	.word	0x0800741d
 80073b4:	0800741d 	.word	0x0800741d
 80073b8:	0800741d 	.word	0x0800741d
 80073bc:	0800741d 	.word	0x0800741d
 80073c0:	0800741d 	.word	0x0800741d
 80073c4:	0800741d 	.word	0x0800741d
 80073c8:	0800740d 	.word	0x0800740d
 80073cc:	0800741d 	.word	0x0800741d
 80073d0:	0800741d 	.word	0x0800741d
 80073d4:	0800741d 	.word	0x0800741d
 80073d8:	0800741d 	.word	0x0800741d
 80073dc:	0800741d 	.word	0x0800741d
 80073e0:	0800741d 	.word	0x0800741d
 80073e4:	0800741d 	.word	0x0800741d
 80073e8:	08007415 	.word	0x08007415
 80073ec:	2301      	movs	r3, #1
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f2:	e0bc      	b.n	800756e <UART_SetConfig+0x5a6>
 80073f4:	2304      	movs	r3, #4
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073fa:	e0b8      	b.n	800756e <UART_SetConfig+0x5a6>
 80073fc:	2308      	movs	r3, #8
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007402:	e0b4      	b.n	800756e <UART_SetConfig+0x5a6>
 8007404:	2310      	movs	r3, #16
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800740a:	e0b0      	b.n	800756e <UART_SetConfig+0x5a6>
 800740c:	2320      	movs	r3, #32
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007412:	e0ac      	b.n	800756e <UART_SetConfig+0x5a6>
 8007414:	2340      	movs	r3, #64	@ 0x40
 8007416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800741a:	e0a8      	b.n	800756e <UART_SetConfig+0x5a6>
 800741c:	2380      	movs	r3, #128	@ 0x80
 800741e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007422:	e0a4      	b.n	800756e <UART_SetConfig+0x5a6>
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a8f      	ldr	r2, [pc, #572]	@ (8007668 <UART_SetConfig+0x6a0>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d130      	bne.n	8007490 <UART_SetConfig+0x4c8>
 800742e:	4b8d      	ldr	r3, [pc, #564]	@ (8007664 <UART_SetConfig+0x69c>)
 8007430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	2b05      	cmp	r3, #5
 8007438:	d826      	bhi.n	8007488 <UART_SetConfig+0x4c0>
 800743a:	a201      	add	r2, pc, #4	@ (adr r2, 8007440 <UART_SetConfig+0x478>)
 800743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007440:	08007459 	.word	0x08007459
 8007444:	08007461 	.word	0x08007461
 8007448:	08007469 	.word	0x08007469
 800744c:	08007471 	.word	0x08007471
 8007450:	08007479 	.word	0x08007479
 8007454:	08007481 	.word	0x08007481
 8007458:	2300      	movs	r3, #0
 800745a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800745e:	e086      	b.n	800756e <UART_SetConfig+0x5a6>
 8007460:	2304      	movs	r3, #4
 8007462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007466:	e082      	b.n	800756e <UART_SetConfig+0x5a6>
 8007468:	2308      	movs	r3, #8
 800746a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800746e:	e07e      	b.n	800756e <UART_SetConfig+0x5a6>
 8007470:	2310      	movs	r3, #16
 8007472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007476:	e07a      	b.n	800756e <UART_SetConfig+0x5a6>
 8007478:	2320      	movs	r3, #32
 800747a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800747e:	e076      	b.n	800756e <UART_SetConfig+0x5a6>
 8007480:	2340      	movs	r3, #64	@ 0x40
 8007482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007486:	e072      	b.n	800756e <UART_SetConfig+0x5a6>
 8007488:	2380      	movs	r3, #128	@ 0x80
 800748a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800748e:	e06e      	b.n	800756e <UART_SetConfig+0x5a6>
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a75      	ldr	r2, [pc, #468]	@ (800766c <UART_SetConfig+0x6a4>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d130      	bne.n	80074fc <UART_SetConfig+0x534>
 800749a:	4b72      	ldr	r3, [pc, #456]	@ (8007664 <UART_SetConfig+0x69c>)
 800749c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800749e:	f003 0307 	and.w	r3, r3, #7
 80074a2:	2b05      	cmp	r3, #5
 80074a4:	d826      	bhi.n	80074f4 <UART_SetConfig+0x52c>
 80074a6:	a201      	add	r2, pc, #4	@ (adr r2, 80074ac <UART_SetConfig+0x4e4>)
 80074a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ac:	080074c5 	.word	0x080074c5
 80074b0:	080074cd 	.word	0x080074cd
 80074b4:	080074d5 	.word	0x080074d5
 80074b8:	080074dd 	.word	0x080074dd
 80074bc:	080074e5 	.word	0x080074e5
 80074c0:	080074ed 	.word	0x080074ed
 80074c4:	2300      	movs	r3, #0
 80074c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ca:	e050      	b.n	800756e <UART_SetConfig+0x5a6>
 80074cc:	2304      	movs	r3, #4
 80074ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074d2:	e04c      	b.n	800756e <UART_SetConfig+0x5a6>
 80074d4:	2308      	movs	r3, #8
 80074d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074da:	e048      	b.n	800756e <UART_SetConfig+0x5a6>
 80074dc:	2310      	movs	r3, #16
 80074de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074e2:	e044      	b.n	800756e <UART_SetConfig+0x5a6>
 80074e4:	2320      	movs	r3, #32
 80074e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ea:	e040      	b.n	800756e <UART_SetConfig+0x5a6>
 80074ec:	2340      	movs	r3, #64	@ 0x40
 80074ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074f2:	e03c      	b.n	800756e <UART_SetConfig+0x5a6>
 80074f4:	2380      	movs	r3, #128	@ 0x80
 80074f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074fa:	e038      	b.n	800756e <UART_SetConfig+0x5a6>
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a5b      	ldr	r2, [pc, #364]	@ (8007670 <UART_SetConfig+0x6a8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d130      	bne.n	8007568 <UART_SetConfig+0x5a0>
 8007506:	4b57      	ldr	r3, [pc, #348]	@ (8007664 <UART_SetConfig+0x69c>)
 8007508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800750a:	f003 0307 	and.w	r3, r3, #7
 800750e:	2b05      	cmp	r3, #5
 8007510:	d826      	bhi.n	8007560 <UART_SetConfig+0x598>
 8007512:	a201      	add	r2, pc, #4	@ (adr r2, 8007518 <UART_SetConfig+0x550>)
 8007514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007518:	08007531 	.word	0x08007531
 800751c:	08007539 	.word	0x08007539
 8007520:	08007541 	.word	0x08007541
 8007524:	08007549 	.word	0x08007549
 8007528:	08007551 	.word	0x08007551
 800752c:	08007559 	.word	0x08007559
 8007530:	2302      	movs	r3, #2
 8007532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007536:	e01a      	b.n	800756e <UART_SetConfig+0x5a6>
 8007538:	2304      	movs	r3, #4
 800753a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800753e:	e016      	b.n	800756e <UART_SetConfig+0x5a6>
 8007540:	2308      	movs	r3, #8
 8007542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007546:	e012      	b.n	800756e <UART_SetConfig+0x5a6>
 8007548:	2310      	movs	r3, #16
 800754a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800754e:	e00e      	b.n	800756e <UART_SetConfig+0x5a6>
 8007550:	2320      	movs	r3, #32
 8007552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007556:	e00a      	b.n	800756e <UART_SetConfig+0x5a6>
 8007558:	2340      	movs	r3, #64	@ 0x40
 800755a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800755e:	e006      	b.n	800756e <UART_SetConfig+0x5a6>
 8007560:	2380      	movs	r3, #128	@ 0x80
 8007562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007566:	e002      	b.n	800756e <UART_SetConfig+0x5a6>
 8007568:	2380      	movs	r3, #128	@ 0x80
 800756a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a3f      	ldr	r2, [pc, #252]	@ (8007670 <UART_SetConfig+0x6a8>)
 8007574:	4293      	cmp	r3, r2
 8007576:	f040 80f8 	bne.w	800776a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800757a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800757e:	2b20      	cmp	r3, #32
 8007580:	dc46      	bgt.n	8007610 <UART_SetConfig+0x648>
 8007582:	2b02      	cmp	r3, #2
 8007584:	f2c0 8082 	blt.w	800768c <UART_SetConfig+0x6c4>
 8007588:	3b02      	subs	r3, #2
 800758a:	2b1e      	cmp	r3, #30
 800758c:	d87e      	bhi.n	800768c <UART_SetConfig+0x6c4>
 800758e:	a201      	add	r2, pc, #4	@ (adr r2, 8007594 <UART_SetConfig+0x5cc>)
 8007590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007594:	08007617 	.word	0x08007617
 8007598:	0800768d 	.word	0x0800768d
 800759c:	0800761f 	.word	0x0800761f
 80075a0:	0800768d 	.word	0x0800768d
 80075a4:	0800768d 	.word	0x0800768d
 80075a8:	0800768d 	.word	0x0800768d
 80075ac:	0800762f 	.word	0x0800762f
 80075b0:	0800768d 	.word	0x0800768d
 80075b4:	0800768d 	.word	0x0800768d
 80075b8:	0800768d 	.word	0x0800768d
 80075bc:	0800768d 	.word	0x0800768d
 80075c0:	0800768d 	.word	0x0800768d
 80075c4:	0800768d 	.word	0x0800768d
 80075c8:	0800768d 	.word	0x0800768d
 80075cc:	0800763f 	.word	0x0800763f
 80075d0:	0800768d 	.word	0x0800768d
 80075d4:	0800768d 	.word	0x0800768d
 80075d8:	0800768d 	.word	0x0800768d
 80075dc:	0800768d 	.word	0x0800768d
 80075e0:	0800768d 	.word	0x0800768d
 80075e4:	0800768d 	.word	0x0800768d
 80075e8:	0800768d 	.word	0x0800768d
 80075ec:	0800768d 	.word	0x0800768d
 80075f0:	0800768d 	.word	0x0800768d
 80075f4:	0800768d 	.word	0x0800768d
 80075f8:	0800768d 	.word	0x0800768d
 80075fc:	0800768d 	.word	0x0800768d
 8007600:	0800768d 	.word	0x0800768d
 8007604:	0800768d 	.word	0x0800768d
 8007608:	0800768d 	.word	0x0800768d
 800760c:	0800767f 	.word	0x0800767f
 8007610:	2b40      	cmp	r3, #64	@ 0x40
 8007612:	d037      	beq.n	8007684 <UART_SetConfig+0x6bc>
 8007614:	e03a      	b.n	800768c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007616:	f7fd fc33 	bl	8004e80 <HAL_RCCEx_GetD3PCLK1Freq>
 800761a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800761c:	e03c      	b.n	8007698 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800761e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007622:	4618      	mov	r0, r3
 8007624:	f7fd fc42 	bl	8004eac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800762c:	e034      	b.n	8007698 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800762e:	f107 0318 	add.w	r3, r7, #24
 8007632:	4618      	mov	r0, r3
 8007634:	f7fd fd8e 	bl	8005154 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800763c:	e02c      	b.n	8007698 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800763e:	4b09      	ldr	r3, [pc, #36]	@ (8007664 <UART_SetConfig+0x69c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d016      	beq.n	8007678 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800764a:	4b06      	ldr	r3, [pc, #24]	@ (8007664 <UART_SetConfig+0x69c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	08db      	lsrs	r3, r3, #3
 8007650:	f003 0303 	and.w	r3, r3, #3
 8007654:	4a07      	ldr	r2, [pc, #28]	@ (8007674 <UART_SetConfig+0x6ac>)
 8007656:	fa22 f303 	lsr.w	r3, r2, r3
 800765a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800765c:	e01c      	b.n	8007698 <UART_SetConfig+0x6d0>
 800765e:	bf00      	nop
 8007660:	40011400 	.word	0x40011400
 8007664:	58024400 	.word	0x58024400
 8007668:	40007800 	.word	0x40007800
 800766c:	40007c00 	.word	0x40007c00
 8007670:	58000c00 	.word	0x58000c00
 8007674:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007678:	4b9d      	ldr	r3, [pc, #628]	@ (80078f0 <UART_SetConfig+0x928>)
 800767a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800767c:	e00c      	b.n	8007698 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800767e:	4b9d      	ldr	r3, [pc, #628]	@ (80078f4 <UART_SetConfig+0x92c>)
 8007680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007682:	e009      	b.n	8007698 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007684:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800768a:	e005      	b.n	8007698 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800768c:	2300      	movs	r3, #0
 800768e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007696:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 81de 	beq.w	8007a5c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a4:	4a94      	ldr	r2, [pc, #592]	@ (80078f8 <UART_SetConfig+0x930>)
 80076a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076aa:	461a      	mov	r2, r3
 80076ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80076b2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	4613      	mov	r3, r2
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	4413      	add	r3, r2
 80076be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d305      	bcc.n	80076d0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d903      	bls.n	80076d8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80076d6:	e1c1      	b.n	8007a5c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076da:	2200      	movs	r2, #0
 80076dc:	60bb      	str	r3, [r7, #8]
 80076de:	60fa      	str	r2, [r7, #12]
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e4:	4a84      	ldr	r2, [pc, #528]	@ (80078f8 <UART_SetConfig+0x930>)
 80076e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	2200      	movs	r2, #0
 80076ee:	603b      	str	r3, [r7, #0]
 80076f0:	607a      	str	r2, [r7, #4]
 80076f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076fa:	f7f8 fdf1 	bl	80002e0 <__aeabi_uldivmod>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	4610      	mov	r0, r2
 8007704:	4619      	mov	r1, r3
 8007706:	f04f 0200 	mov.w	r2, #0
 800770a:	f04f 0300 	mov.w	r3, #0
 800770e:	020b      	lsls	r3, r1, #8
 8007710:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007714:	0202      	lsls	r2, r0, #8
 8007716:	6979      	ldr	r1, [r7, #20]
 8007718:	6849      	ldr	r1, [r1, #4]
 800771a:	0849      	lsrs	r1, r1, #1
 800771c:	2000      	movs	r0, #0
 800771e:	460c      	mov	r4, r1
 8007720:	4605      	mov	r5, r0
 8007722:	eb12 0804 	adds.w	r8, r2, r4
 8007726:	eb43 0905 	adc.w	r9, r3, r5
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	469a      	mov	sl, r3
 8007732:	4693      	mov	fp, r2
 8007734:	4652      	mov	r2, sl
 8007736:	465b      	mov	r3, fp
 8007738:	4640      	mov	r0, r8
 800773a:	4649      	mov	r1, r9
 800773c:	f7f8 fdd0 	bl	80002e0 <__aeabi_uldivmod>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4613      	mov	r3, r2
 8007746:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800774e:	d308      	bcc.n	8007762 <UART_SetConfig+0x79a>
 8007750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007756:	d204      	bcs.n	8007762 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800775e:	60da      	str	r2, [r3, #12]
 8007760:	e17c      	b.n	8007a5c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007768:	e178      	b.n	8007a5c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007772:	f040 80c5 	bne.w	8007900 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007776:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800777a:	2b20      	cmp	r3, #32
 800777c:	dc48      	bgt.n	8007810 <UART_SetConfig+0x848>
 800777e:	2b00      	cmp	r3, #0
 8007780:	db7b      	blt.n	800787a <UART_SetConfig+0x8b2>
 8007782:	2b20      	cmp	r3, #32
 8007784:	d879      	bhi.n	800787a <UART_SetConfig+0x8b2>
 8007786:	a201      	add	r2, pc, #4	@ (adr r2, 800778c <UART_SetConfig+0x7c4>)
 8007788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778c:	08007817 	.word	0x08007817
 8007790:	0800781f 	.word	0x0800781f
 8007794:	0800787b 	.word	0x0800787b
 8007798:	0800787b 	.word	0x0800787b
 800779c:	08007827 	.word	0x08007827
 80077a0:	0800787b 	.word	0x0800787b
 80077a4:	0800787b 	.word	0x0800787b
 80077a8:	0800787b 	.word	0x0800787b
 80077ac:	08007837 	.word	0x08007837
 80077b0:	0800787b 	.word	0x0800787b
 80077b4:	0800787b 	.word	0x0800787b
 80077b8:	0800787b 	.word	0x0800787b
 80077bc:	0800787b 	.word	0x0800787b
 80077c0:	0800787b 	.word	0x0800787b
 80077c4:	0800787b 	.word	0x0800787b
 80077c8:	0800787b 	.word	0x0800787b
 80077cc:	08007847 	.word	0x08007847
 80077d0:	0800787b 	.word	0x0800787b
 80077d4:	0800787b 	.word	0x0800787b
 80077d8:	0800787b 	.word	0x0800787b
 80077dc:	0800787b 	.word	0x0800787b
 80077e0:	0800787b 	.word	0x0800787b
 80077e4:	0800787b 	.word	0x0800787b
 80077e8:	0800787b 	.word	0x0800787b
 80077ec:	0800787b 	.word	0x0800787b
 80077f0:	0800787b 	.word	0x0800787b
 80077f4:	0800787b 	.word	0x0800787b
 80077f8:	0800787b 	.word	0x0800787b
 80077fc:	0800787b 	.word	0x0800787b
 8007800:	0800787b 	.word	0x0800787b
 8007804:	0800787b 	.word	0x0800787b
 8007808:	0800787b 	.word	0x0800787b
 800780c:	0800786d 	.word	0x0800786d
 8007810:	2b40      	cmp	r3, #64	@ 0x40
 8007812:	d02e      	beq.n	8007872 <UART_SetConfig+0x8aa>
 8007814:	e031      	b.n	800787a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007816:	f7fc f8bb 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 800781a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800781c:	e033      	b.n	8007886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800781e:	f7fc f8cd 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 8007822:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007824:	e02f      	b.n	8007886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800782a:	4618      	mov	r0, r3
 800782c:	f7fd fb3e 	bl	8004eac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007834:	e027      	b.n	8007886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007836:	f107 0318 	add.w	r3, r7, #24
 800783a:	4618      	mov	r0, r3
 800783c:	f7fd fc8a 	bl	8005154 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007844:	e01f      	b.n	8007886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007846:	4b2d      	ldr	r3, [pc, #180]	@ (80078fc <UART_SetConfig+0x934>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b00      	cmp	r3, #0
 8007850:	d009      	beq.n	8007866 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007852:	4b2a      	ldr	r3, [pc, #168]	@ (80078fc <UART_SetConfig+0x934>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	08db      	lsrs	r3, r3, #3
 8007858:	f003 0303 	and.w	r3, r3, #3
 800785c:	4a24      	ldr	r2, [pc, #144]	@ (80078f0 <UART_SetConfig+0x928>)
 800785e:	fa22 f303 	lsr.w	r3, r2, r3
 8007862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007864:	e00f      	b.n	8007886 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007866:	4b22      	ldr	r3, [pc, #136]	@ (80078f0 <UART_SetConfig+0x928>)
 8007868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800786a:	e00c      	b.n	8007886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800786c:	4b21      	ldr	r3, [pc, #132]	@ (80078f4 <UART_SetConfig+0x92c>)
 800786e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007870:	e009      	b.n	8007886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007878:	e005      	b.n	8007886 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007884:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 80e7 	beq.w	8007a5c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007892:	4a19      	ldr	r2, [pc, #100]	@ (80078f8 <UART_SetConfig+0x930>)
 8007894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007898:	461a      	mov	r2, r3
 800789a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800789c:	fbb3 f3f2 	udiv	r3, r3, r2
 80078a0:	005a      	lsls	r2, r3, #1
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	085b      	lsrs	r3, r3, #1
 80078a8:	441a      	add	r2, r3
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b6:	2b0f      	cmp	r3, #15
 80078b8:	d916      	bls.n	80078e8 <UART_SetConfig+0x920>
 80078ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078c0:	d212      	bcs.n	80078e8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	f023 030f 	bic.w	r3, r3, #15
 80078ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ce:	085b      	lsrs	r3, r3, #1
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80078da:	4313      	orrs	r3, r2
 80078dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80078e4:	60da      	str	r2, [r3, #12]
 80078e6:	e0b9      	b.n	8007a5c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80078ee:	e0b5      	b.n	8007a5c <UART_SetConfig+0xa94>
 80078f0:	03d09000 	.word	0x03d09000
 80078f4:	003d0900 	.word	0x003d0900
 80078f8:	0800b54c 	.word	0x0800b54c
 80078fc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007900:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007904:	2b20      	cmp	r3, #32
 8007906:	dc49      	bgt.n	800799c <UART_SetConfig+0x9d4>
 8007908:	2b00      	cmp	r3, #0
 800790a:	db7c      	blt.n	8007a06 <UART_SetConfig+0xa3e>
 800790c:	2b20      	cmp	r3, #32
 800790e:	d87a      	bhi.n	8007a06 <UART_SetConfig+0xa3e>
 8007910:	a201      	add	r2, pc, #4	@ (adr r2, 8007918 <UART_SetConfig+0x950>)
 8007912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007916:	bf00      	nop
 8007918:	080079a3 	.word	0x080079a3
 800791c:	080079ab 	.word	0x080079ab
 8007920:	08007a07 	.word	0x08007a07
 8007924:	08007a07 	.word	0x08007a07
 8007928:	080079b3 	.word	0x080079b3
 800792c:	08007a07 	.word	0x08007a07
 8007930:	08007a07 	.word	0x08007a07
 8007934:	08007a07 	.word	0x08007a07
 8007938:	080079c3 	.word	0x080079c3
 800793c:	08007a07 	.word	0x08007a07
 8007940:	08007a07 	.word	0x08007a07
 8007944:	08007a07 	.word	0x08007a07
 8007948:	08007a07 	.word	0x08007a07
 800794c:	08007a07 	.word	0x08007a07
 8007950:	08007a07 	.word	0x08007a07
 8007954:	08007a07 	.word	0x08007a07
 8007958:	080079d3 	.word	0x080079d3
 800795c:	08007a07 	.word	0x08007a07
 8007960:	08007a07 	.word	0x08007a07
 8007964:	08007a07 	.word	0x08007a07
 8007968:	08007a07 	.word	0x08007a07
 800796c:	08007a07 	.word	0x08007a07
 8007970:	08007a07 	.word	0x08007a07
 8007974:	08007a07 	.word	0x08007a07
 8007978:	08007a07 	.word	0x08007a07
 800797c:	08007a07 	.word	0x08007a07
 8007980:	08007a07 	.word	0x08007a07
 8007984:	08007a07 	.word	0x08007a07
 8007988:	08007a07 	.word	0x08007a07
 800798c:	08007a07 	.word	0x08007a07
 8007990:	08007a07 	.word	0x08007a07
 8007994:	08007a07 	.word	0x08007a07
 8007998:	080079f9 	.word	0x080079f9
 800799c:	2b40      	cmp	r3, #64	@ 0x40
 800799e:	d02e      	beq.n	80079fe <UART_SetConfig+0xa36>
 80079a0:	e031      	b.n	8007a06 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079a2:	f7fb fff5 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 80079a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80079a8:	e033      	b.n	8007a12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079aa:	f7fc f807 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 80079ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80079b0:	e02f      	b.n	8007a12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fd fa78 	bl	8004eac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079c0:	e027      	b.n	8007a12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079c2:	f107 0318 	add.w	r3, r7, #24
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fd fbc4 	bl	8005154 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079d0:	e01f      	b.n	8007a12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079d2:	4b2d      	ldr	r3, [pc, #180]	@ (8007a88 <UART_SetConfig+0xac0>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d009      	beq.n	80079f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80079de:	4b2a      	ldr	r3, [pc, #168]	@ (8007a88 <UART_SetConfig+0xac0>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	08db      	lsrs	r3, r3, #3
 80079e4:	f003 0303 	and.w	r3, r3, #3
 80079e8:	4a28      	ldr	r2, [pc, #160]	@ (8007a8c <UART_SetConfig+0xac4>)
 80079ea:	fa22 f303 	lsr.w	r3, r2, r3
 80079ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079f0:	e00f      	b.n	8007a12 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80079f2:	4b26      	ldr	r3, [pc, #152]	@ (8007a8c <UART_SetConfig+0xac4>)
 80079f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079f6:	e00c      	b.n	8007a12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80079f8:	4b25      	ldr	r3, [pc, #148]	@ (8007a90 <UART_SetConfig+0xac8>)
 80079fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079fc:	e009      	b.n	8007a12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a04:	e005      	b.n	8007a12 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007a10:	bf00      	nop
    }

    if (pclk != 0U)
 8007a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d021      	beq.n	8007a5c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007a94 <UART_SetConfig+0xacc>)
 8007a1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a22:	461a      	mov	r2, r3
 8007a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a26:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	085b      	lsrs	r3, r3, #1
 8007a30:	441a      	add	r2, r3
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3e:	2b0f      	cmp	r3, #15
 8007a40:	d909      	bls.n	8007a56 <UART_SetConfig+0xa8e>
 8007a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a48:	d205      	bcs.n	8007a56 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	60da      	str	r2, [r3, #12]
 8007a54:	e002      	b.n	8007a5c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2200      	movs	r2, #0
 8007a76:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007a78:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3748      	adds	r7, #72	@ 0x48
 8007a80:	46bd      	mov	sp, r7
 8007a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a86:	bf00      	nop
 8007a88:	58024400 	.word	0x58024400
 8007a8c:	03d09000 	.word	0x03d09000
 8007a90:	003d0900 	.word	0x003d0900
 8007a94:	0800b54c 	.word	0x0800b54c

08007a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aa4:	f003 0308 	and.w	r3, r3, #8
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00a      	beq.n	8007ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae8:	f003 0302 	and.w	r3, r3, #2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00a      	beq.n	8007b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4e:	f003 0320 	and.w	r3, r3, #32
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01a      	beq.n	8007bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b96:	d10a      	bne.n	8007bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	605a      	str	r2, [r3, #4]
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b098      	sub	sp, #96	@ 0x60
 8007be0:	af02      	add	r7, sp, #8
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bec:	f7f9 fe6e 	bl	80018cc <HAL_GetTick>
 8007bf0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0308 	and.w	r3, r3, #8
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	d12f      	bne.n	8007c60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f88e 	bl	8007d30 <UART_WaitOnFlagUntilTimeout>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d022      	beq.n	8007c60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	461a      	mov	r2, r3
 8007c36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c40:	e841 2300 	strex	r3, r2, [r1]
 8007c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e6      	bne.n	8007c1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e063      	b.n	8007d28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0304 	and.w	r3, r3, #4
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d149      	bne.n	8007d02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c6e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c76:	2200      	movs	r2, #0
 8007c78:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f857 	bl	8007d30 <UART_WaitOnFlagUntilTimeout>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d03c      	beq.n	8007d02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	623b      	str	r3, [r7, #32]
   return(result);
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ca6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e6      	bne.n	8007c88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f023 0301 	bic.w	r3, r3, #1
 8007cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	3308      	adds	r3, #8
 8007cd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cda:	61fa      	str	r2, [r7, #28]
 8007cdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	69b9      	ldr	r1, [r7, #24]
 8007ce0:	69fa      	ldr	r2, [r7, #28]
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e5      	bne.n	8007cba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e012      	b.n	8007d28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3758      	adds	r7, #88	@ 0x58
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	603b      	str	r3, [r7, #0]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d40:	e04f      	b.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d48:	d04b      	beq.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d4a:	f7f9 fdbf 	bl	80018cc <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	69ba      	ldr	r2, [r7, #24]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d302      	bcc.n	8007d60 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e04e      	b.n	8007e02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0304 	and.w	r3, r3, #4
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d037      	beq.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b80      	cmp	r3, #128	@ 0x80
 8007d76:	d034      	beq.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2b40      	cmp	r3, #64	@ 0x40
 8007d7c:	d031      	beq.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69db      	ldr	r3, [r3, #28]
 8007d84:	f003 0308 	and.w	r3, r3, #8
 8007d88:	2b08      	cmp	r3, #8
 8007d8a:	d110      	bne.n	8007dae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2208      	movs	r2, #8
 8007d92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 f839 	bl	8007e0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2208      	movs	r2, #8
 8007d9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e029      	b.n	8007e02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007db8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dbc:	d111      	bne.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007dc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 f81f 	bl	8007e0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e00f      	b.n	8007e02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69da      	ldr	r2, [r3, #28]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	4013      	ands	r3, r2
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	bf0c      	ite	eq
 8007df2:	2301      	moveq	r3, #1
 8007df4:	2300      	movne	r3, #0
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	461a      	mov	r2, r3
 8007dfa:	79fb      	ldrb	r3, [r7, #7]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d0a0      	beq.n	8007d42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
	...

08007e0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b095      	sub	sp, #84	@ 0x54
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e32:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e3a:	e841 2300 	strex	r3, r2, [r1]
 8007e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1e6      	bne.n	8007e14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e56:	69fa      	ldr	r2, [r7, #28]
 8007e58:	4b1e      	ldr	r3, [pc, #120]	@ (8007ed4 <UART_EndRxTransfer+0xc8>)
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3308      	adds	r3, #8
 8007e64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e5      	bne.n	8007e46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d118      	bne.n	8007eb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	e853 3f00 	ldrex	r3, [r3]
 8007e8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f023 0310 	bic.w	r3, r3, #16
 8007e96:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ea0:	61bb      	str	r3, [r7, #24]
 8007ea2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea4:	6979      	ldr	r1, [r7, #20]
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	e841 2300 	strex	r3, r2, [r1]
 8007eac:	613b      	str	r3, [r7, #16]
   return(result);
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1e6      	bne.n	8007e82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007ec8:	bf00      	nop
 8007eca:	3754      	adds	r7, #84	@ 0x54
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	effffffe 	.word	0xeffffffe

08007ed8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d101      	bne.n	8007eee <HAL_UARTEx_DisableFifoMode+0x16>
 8007eea:	2302      	movs	r3, #2
 8007eec:	e027      	b.n	8007f3e <HAL_UARTEx_DisableFifoMode+0x66>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2224      	movs	r2, #36	@ 0x24
 8007efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f022 0201 	bic.w	r2, r2, #1
 8007f14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d101      	bne.n	8007f62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f5e:	2302      	movs	r3, #2
 8007f60:	e02d      	b.n	8007fbe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2224      	movs	r2, #36	@ 0x24
 8007f6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 0201 	bic.w	r2, r2, #1
 8007f88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f850 	bl	8008044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007fda:	2302      	movs	r3, #2
 8007fdc:	e02d      	b.n	800803a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2224      	movs	r2, #36	@ 0x24
 8007fea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0201 	bic.w	r2, r2, #1
 8008004:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	430a      	orrs	r2, r1
 8008018:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f812 	bl	8008044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2220      	movs	r2, #32
 800802c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008050:	2b00      	cmp	r3, #0
 8008052:	d108      	bne.n	8008066 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008064:	e031      	b.n	80080ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008066:	2310      	movs	r3, #16
 8008068:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800806a:	2310      	movs	r3, #16
 800806c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	0e5b      	lsrs	r3, r3, #25
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f003 0307 	and.w	r3, r3, #7
 800807c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	0f5b      	lsrs	r3, r3, #29
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	7b3a      	ldrb	r2, [r7, #12]
 8008092:	4911      	ldr	r1, [pc, #68]	@ (80080d8 <UARTEx_SetNbDataToProcess+0x94>)
 8008094:	5c8a      	ldrb	r2, [r1, r2]
 8008096:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800809a:	7b3a      	ldrb	r2, [r7, #12]
 800809c:	490f      	ldr	r1, [pc, #60]	@ (80080dc <UARTEx_SetNbDataToProcess+0x98>)
 800809e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	7b7a      	ldrb	r2, [r7, #13]
 80080b0:	4909      	ldr	r1, [pc, #36]	@ (80080d8 <UARTEx_SetNbDataToProcess+0x94>)
 80080b2:	5c8a      	ldrb	r2, [r1, r2]
 80080b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080b8:	7b7a      	ldrb	r2, [r7, #13]
 80080ba:	4908      	ldr	r1, [pc, #32]	@ (80080dc <UARTEx_SetNbDataToProcess+0x98>)
 80080bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080be:	fb93 f3f2 	sdiv	r3, r3, r2
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80080ca:	bf00      	nop
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	0800b564 	.word	0x0800b564
 80080dc:	0800b56c 	.word	0x0800b56c

080080e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080e0:	b084      	sub	sp, #16
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	f107 001c 	add.w	r0, r7, #28
 80080ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d121      	bne.n	800813e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68da      	ldr	r2, [r3, #12]
 800810a:	4b2c      	ldr	r3, [pc, #176]	@ (80081bc <USB_CoreInit+0xdc>)
 800810c:	4013      	ands	r3, r2
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800811e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008122:	2b01      	cmp	r3, #1
 8008124:	d105      	bne.n	8008132 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 faaa 	bl	800868c <USB_CoreReset>
 8008138:	4603      	mov	r3, r0
 800813a:	73fb      	strb	r3, [r7, #15]
 800813c:	e01b      	b.n	8008176 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fa9e 	bl	800868c <USB_CoreReset>
 8008150:	4603      	mov	r3, r0
 8008152:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008154:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008158:	2b00      	cmp	r3, #0
 800815a:	d106      	bne.n	800816a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008160:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	639a      	str	r2, [r3, #56]	@ 0x38
 8008168:	e005      	b.n	8008176 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008176:	7fbb      	ldrb	r3, [r7, #30]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d116      	bne.n	80081aa <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008180:	b29a      	uxth	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800818a:	4b0d      	ldr	r3, [pc, #52]	@ (80081c0 <USB_CoreInit+0xe0>)
 800818c:	4313      	orrs	r3, r2
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f043 0206 	orr.w	r2, r3, #6
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f043 0220 	orr.w	r2, r3, #32
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081b6:	b004      	add	sp, #16
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	ffbdffbf 	.word	0xffbdffbf
 80081c0:	03ee0000 	.word	0x03ee0000

080081c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f023 0201 	bic.w	r2, r3, #1
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b084      	sub	sp, #16
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	460b      	mov	r3, r1
 80081f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008202:	78fb      	ldrb	r3, [r7, #3]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d115      	bne.n	8008234 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008214:	200a      	movs	r0, #10
 8008216:	f7f9 fb65 	bl	80018e4 <HAL_Delay>
      ms += 10U;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	330a      	adds	r3, #10
 800821e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fa25 	bl	8008670 <USB_GetMode>
 8008226:	4603      	mov	r3, r0
 8008228:	2b01      	cmp	r3, #1
 800822a:	d01e      	beq.n	800826a <USB_SetCurrentMode+0x84>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008230:	d9f0      	bls.n	8008214 <USB_SetCurrentMode+0x2e>
 8008232:	e01a      	b.n	800826a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008234:	78fb      	ldrb	r3, [r7, #3]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d115      	bne.n	8008266 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008246:	200a      	movs	r0, #10
 8008248:	f7f9 fb4c 	bl	80018e4 <HAL_Delay>
      ms += 10U;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	330a      	adds	r3, #10
 8008250:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fa0c 	bl	8008670 <USB_GetMode>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d005      	beq.n	800826a <USB_SetCurrentMode+0x84>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2bc7      	cmp	r3, #199	@ 0xc7
 8008262:	d9f0      	bls.n	8008246 <USB_SetCurrentMode+0x60>
 8008264:	e001      	b.n	800826a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e005      	b.n	8008276 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2bc8      	cmp	r3, #200	@ 0xc8
 800826e:	d101      	bne.n	8008274 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e000      	b.n	8008276 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008280:	b084      	sub	sp, #16
 8008282:	b580      	push	{r7, lr}
 8008284:	b086      	sub	sp, #24
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800828e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800829a:	2300      	movs	r3, #0
 800829c:	613b      	str	r3, [r7, #16]
 800829e:	e009      	b.n	80082b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	3340      	adds	r3, #64	@ 0x40
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	2200      	movs	r2, #0
 80082ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	3301      	adds	r3, #1
 80082b2:	613b      	str	r3, [r7, #16]
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	2b0e      	cmp	r3, #14
 80082b8:	d9f2      	bls.n	80082a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80082ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d11c      	bne.n	80082fc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082d0:	f043 0302 	orr.w	r3, r3, #2
 80082d4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082da:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	e005      	b.n	8008308 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008300:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800830e:	461a      	mov	r2, r3
 8008310:	2300      	movs	r3, #0
 8008312:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008314:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008318:	2b01      	cmp	r3, #1
 800831a:	d10d      	bne.n	8008338 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800831c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008320:	2b00      	cmp	r3, #0
 8008322:	d104      	bne.n	800832e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008324:	2100      	movs	r1, #0
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f968 	bl	80085fc <USB_SetDevSpeed>
 800832c:	e008      	b.n	8008340 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800832e:	2101      	movs	r1, #1
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f963 	bl	80085fc <USB_SetDevSpeed>
 8008336:	e003      	b.n	8008340 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008338:	2103      	movs	r1, #3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f95e 	bl	80085fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008340:	2110      	movs	r1, #16
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f8fa 	bl	800853c <USB_FlushTxFifo>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f924 	bl	80085a0 <USB_FlushRxFifo>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008368:	461a      	mov	r2, r3
 800836a:	2300      	movs	r3, #0
 800836c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008374:	461a      	mov	r2, r3
 8008376:	2300      	movs	r3, #0
 8008378:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008380:	461a      	mov	r2, r3
 8008382:	2300      	movs	r3, #0
 8008384:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008386:	2300      	movs	r3, #0
 8008388:	613b      	str	r3, [r7, #16]
 800838a:	e043      	b.n	8008414 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	015a      	lsls	r2, r3, #5
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	4413      	add	r3, r2
 8008394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800839e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083a2:	d118      	bne.n	80083d6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10a      	bne.n	80083c0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083b6:	461a      	mov	r2, r3
 80083b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80083bc:	6013      	str	r3, [r2, #0]
 80083be:	e013      	b.n	80083e8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083cc:	461a      	mov	r2, r3
 80083ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80083d2:	6013      	str	r3, [r2, #0]
 80083d4:	e008      	b.n	80083e8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	015a      	lsls	r2, r3, #5
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	4413      	add	r3, r2
 80083de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083e2:	461a      	mov	r2, r3
 80083e4:	2300      	movs	r3, #0
 80083e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083f4:	461a      	mov	r2, r3
 80083f6:	2300      	movs	r3, #0
 80083f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	4413      	add	r3, r2
 8008402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008406:	461a      	mov	r2, r3
 8008408:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800840c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	3301      	adds	r3, #1
 8008412:	613b      	str	r3, [r7, #16]
 8008414:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008418:	461a      	mov	r2, r3
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	4293      	cmp	r3, r2
 800841e:	d3b5      	bcc.n	800838c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008420:	2300      	movs	r3, #0
 8008422:	613b      	str	r3, [r7, #16]
 8008424:	e043      	b.n	80084ae <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	015a      	lsls	r2, r3, #5
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	4413      	add	r3, r2
 800842e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008438:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800843c:	d118      	bne.n	8008470 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10a      	bne.n	800845a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	015a      	lsls	r2, r3, #5
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	4413      	add	r3, r2
 800844c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008450:	461a      	mov	r2, r3
 8008452:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008456:	6013      	str	r3, [r2, #0]
 8008458:	e013      	b.n	8008482 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	4413      	add	r3, r2
 8008462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008466:	461a      	mov	r2, r3
 8008468:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800846c:	6013      	str	r3, [r2, #0]
 800846e:	e008      	b.n	8008482 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4413      	add	r3, r2
 8008478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800847c:	461a      	mov	r2, r3
 800847e:	2300      	movs	r3, #0
 8008480:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	4413      	add	r3, r2
 800848a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800848e:	461a      	mov	r2, r3
 8008490:	2300      	movs	r3, #0
 8008492:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	4413      	add	r3, r2
 800849c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084a0:	461a      	mov	r2, r3
 80084a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80084a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	3301      	adds	r3, #1
 80084ac:	613b      	str	r3, [r7, #16]
 80084ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80084b2:	461a      	mov	r2, r3
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d3b5      	bcc.n	8008426 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80084da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80084dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d105      	bne.n	80084f0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	f043 0210 	orr.w	r2, r3, #16
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	699a      	ldr	r2, [r3, #24]
 80084f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008534 <USB_DevInit+0x2b4>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80084fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008500:	2b00      	cmp	r3, #0
 8008502:	d005      	beq.n	8008510 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	f043 0208 	orr.w	r2, r3, #8
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008510:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008514:	2b01      	cmp	r3, #1
 8008516:	d105      	bne.n	8008524 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	699a      	ldr	r2, [r3, #24]
 800851c:	4b06      	ldr	r3, [pc, #24]	@ (8008538 <USB_DevInit+0x2b8>)
 800851e:	4313      	orrs	r3, r2
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008524:	7dfb      	ldrb	r3, [r7, #23]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008530:	b004      	add	sp, #16
 8008532:	4770      	bx	lr
 8008534:	803c3800 	.word	0x803c3800
 8008538:	40000004 	.word	0x40000004

0800853c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008546:	2300      	movs	r3, #0
 8008548:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	3301      	adds	r3, #1
 800854e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008556:	d901      	bls.n	800855c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008558:	2303      	movs	r3, #3
 800855a:	e01b      	b.n	8008594 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	2b00      	cmp	r3, #0
 8008562:	daf2      	bge.n	800854a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008564:	2300      	movs	r3, #0
 8008566:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	019b      	lsls	r3, r3, #6
 800856c:	f043 0220 	orr.w	r2, r3, #32
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	3301      	adds	r3, #1
 8008578:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008580:	d901      	bls.n	8008586 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e006      	b.n	8008594 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	f003 0320 	and.w	r3, r3, #32
 800858e:	2b20      	cmp	r3, #32
 8008590:	d0f0      	beq.n	8008574 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085a8:	2300      	movs	r3, #0
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3301      	adds	r3, #1
 80085b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085b8:	d901      	bls.n	80085be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e018      	b.n	80085f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	daf2      	bge.n	80085ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2210      	movs	r2, #16
 80085ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	3301      	adds	r3, #1
 80085d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085dc:	d901      	bls.n	80085e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e006      	b.n	80085f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	f003 0310 	and.w	r3, r3, #16
 80085ea:	2b10      	cmp	r3, #16
 80085ec:	d0f0      	beq.n	80085d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	78fb      	ldrb	r3, [r7, #3]
 8008616:	68f9      	ldr	r1, [r7, #12]
 8008618:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800861c:	4313      	orrs	r3, r2
 800861e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800862e:	b480      	push	{r7}
 8008630:	b085      	sub	sp, #20
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008648:	f023 0303 	bic.w	r3, r3, #3
 800864c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800865c:	f043 0302 	orr.w	r3, r3, #2
 8008660:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	f003 0301 	and.w	r3, r3, #1
}
 8008680:	4618      	mov	r0, r3
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008694:	2300      	movs	r3, #0
 8008696:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	3301      	adds	r3, #1
 800869c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086a4:	d901      	bls.n	80086aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e01b      	b.n	80086e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	daf2      	bge.n	8008698 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086b2:	2300      	movs	r3, #0
 80086b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	f043 0201 	orr.w	r2, r3, #1
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3301      	adds	r3, #1
 80086c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086ce:	d901      	bls.n	80086d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e006      	b.n	80086e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	f003 0301 	and.w	r3, r3, #1
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d0f0      	beq.n	80086c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
	...

080086f0 <__NVIC_SetPriority>:
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	4603      	mov	r3, r0
 80086f8:	6039      	str	r1, [r7, #0]
 80086fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80086fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008700:	2b00      	cmp	r3, #0
 8008702:	db0a      	blt.n	800871a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	b2da      	uxtb	r2, r3
 8008708:	490c      	ldr	r1, [pc, #48]	@ (800873c <__NVIC_SetPriority+0x4c>)
 800870a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800870e:	0112      	lsls	r2, r2, #4
 8008710:	b2d2      	uxtb	r2, r2
 8008712:	440b      	add	r3, r1
 8008714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008718:	e00a      	b.n	8008730 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	b2da      	uxtb	r2, r3
 800871e:	4908      	ldr	r1, [pc, #32]	@ (8008740 <__NVIC_SetPriority+0x50>)
 8008720:	88fb      	ldrh	r3, [r7, #6]
 8008722:	f003 030f 	and.w	r3, r3, #15
 8008726:	3b04      	subs	r3, #4
 8008728:	0112      	lsls	r2, r2, #4
 800872a:	b2d2      	uxtb	r2, r2
 800872c:	440b      	add	r3, r1
 800872e:	761a      	strb	r2, [r3, #24]
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	e000e100 	.word	0xe000e100
 8008740:	e000ed00 	.word	0xe000ed00

08008744 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008744:	b580      	push	{r7, lr}
 8008746:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008748:	4b05      	ldr	r3, [pc, #20]	@ (8008760 <SysTick_Handler+0x1c>)
 800874a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800874c:	f001 fd46 	bl	800a1dc <xTaskGetSchedulerState>
 8008750:	4603      	mov	r3, r0
 8008752:	2b01      	cmp	r3, #1
 8008754:	d001      	beq.n	800875a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008756:	f002 fb3f 	bl	800add8 <xPortSysTickHandler>
  }
}
 800875a:	bf00      	nop
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	e000e010 	.word	0xe000e010

08008764 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008764:	b580      	push	{r7, lr}
 8008766:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008768:	2100      	movs	r1, #0
 800876a:	f06f 0004 	mvn.w	r0, #4
 800876e:	f7ff ffbf 	bl	80086f0 <__NVIC_SetPriority>
#endif
}
 8008772:	bf00      	nop
 8008774:	bd80      	pop	{r7, pc}
	...

08008778 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800877e:	f3ef 8305 	mrs	r3, IPSR
 8008782:	603b      	str	r3, [r7, #0]
  return(result);
 8008784:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800878a:	f06f 0305 	mvn.w	r3, #5
 800878e:	607b      	str	r3, [r7, #4]
 8008790:	e00c      	b.n	80087ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008792:	4b0a      	ldr	r3, [pc, #40]	@ (80087bc <osKernelInitialize+0x44>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d105      	bne.n	80087a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800879a:	4b08      	ldr	r3, [pc, #32]	@ (80087bc <osKernelInitialize+0x44>)
 800879c:	2201      	movs	r2, #1
 800879e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	607b      	str	r3, [r7, #4]
 80087a4:	e002      	b.n	80087ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80087a6:	f04f 33ff 	mov.w	r3, #4294967295
 80087aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087ac:	687b      	ldr	r3, [r7, #4]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	240008c0 	.word	0x240008c0

080087c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087c6:	f3ef 8305 	mrs	r3, IPSR
 80087ca:	603b      	str	r3, [r7, #0]
  return(result);
 80087cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d003      	beq.n	80087da <osKernelStart+0x1a>
    stat = osErrorISR;
 80087d2:	f06f 0305 	mvn.w	r3, #5
 80087d6:	607b      	str	r3, [r7, #4]
 80087d8:	e010      	b.n	80087fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80087da:	4b0b      	ldr	r3, [pc, #44]	@ (8008808 <osKernelStart+0x48>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d109      	bne.n	80087f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80087e2:	f7ff ffbf 	bl	8008764 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80087e6:	4b08      	ldr	r3, [pc, #32]	@ (8008808 <osKernelStart+0x48>)
 80087e8:	2202      	movs	r2, #2
 80087ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80087ec:	f001 f892 	bl	8009914 <vTaskStartScheduler>
      stat = osOK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	607b      	str	r3, [r7, #4]
 80087f4:	e002      	b.n	80087fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80087f6:	f04f 33ff 	mov.w	r3, #4294967295
 80087fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087fc:	687b      	ldr	r3, [r7, #4]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	240008c0 	.word	0x240008c0

0800880c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800880c:	b580      	push	{r7, lr}
 800880e:	b08e      	sub	sp, #56	@ 0x38
 8008810:	af04      	add	r7, sp, #16
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008818:	2300      	movs	r3, #0
 800881a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800881c:	f3ef 8305 	mrs	r3, IPSR
 8008820:	617b      	str	r3, [r7, #20]
  return(result);
 8008822:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008824:	2b00      	cmp	r3, #0
 8008826:	d17e      	bne.n	8008926 <osThreadNew+0x11a>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d07b      	beq.n	8008926 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800882e:	2380      	movs	r3, #128	@ 0x80
 8008830:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008832:	2318      	movs	r3, #24
 8008834:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008836:	2300      	movs	r3, #0
 8008838:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800883a:	f04f 33ff 	mov.w	r3, #4294967295
 800883e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d045      	beq.n	80088d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <osThreadNew+0x48>
        name = attr->name;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d008      	beq.n	800887a <osThreadNew+0x6e>
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	2b38      	cmp	r3, #56	@ 0x38
 800886c:	d805      	bhi.n	800887a <osThreadNew+0x6e>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <osThreadNew+0x72>
        return (NULL);
 800887a:	2300      	movs	r3, #0
 800887c:	e054      	b.n	8008928 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d003      	beq.n	800888e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	089b      	lsrs	r3, r3, #2
 800888c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00e      	beq.n	80088b4 <osThreadNew+0xa8>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	2ba7      	cmp	r3, #167	@ 0xa7
 800889c:	d90a      	bls.n	80088b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d006      	beq.n	80088b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <osThreadNew+0xa8>
        mem = 1;
 80088ae:	2301      	movs	r3, #1
 80088b0:	61bb      	str	r3, [r7, #24]
 80088b2:	e010      	b.n	80088d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10c      	bne.n	80088d6 <osThreadNew+0xca>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d108      	bne.n	80088d6 <osThreadNew+0xca>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d104      	bne.n	80088d6 <osThreadNew+0xca>
          mem = 0;
 80088cc:	2300      	movs	r3, #0
 80088ce:	61bb      	str	r3, [r7, #24]
 80088d0:	e001      	b.n	80088d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d110      	bne.n	80088fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088e4:	9202      	str	r2, [sp, #8]
 80088e6:	9301      	str	r3, [sp, #4]
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	6a3a      	ldr	r2, [r7, #32]
 80088f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f000 fe1a 	bl	800952c <xTaskCreateStatic>
 80088f8:	4603      	mov	r3, r0
 80088fa:	613b      	str	r3, [r7, #16]
 80088fc:	e013      	b.n	8008926 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d110      	bne.n	8008926 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008904:	6a3b      	ldr	r3, [r7, #32]
 8008906:	b29a      	uxth	r2, r3
 8008908:	f107 0310 	add.w	r3, r7, #16
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f000 fe68 	bl	80095ec <xTaskCreate>
 800891c:	4603      	mov	r3, r0
 800891e:	2b01      	cmp	r3, #1
 8008920:	d001      	beq.n	8008926 <osThreadNew+0x11a>
            hTask = NULL;
 8008922:	2300      	movs	r3, #0
 8008924:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008926:	693b      	ldr	r3, [r7, #16]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3728      	adds	r7, #40	@ 0x28
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008938:	f3ef 8305 	mrs	r3, IPSR
 800893c:	60bb      	str	r3, [r7, #8]
  return(result);
 800893e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008940:	2b00      	cmp	r3, #0
 8008942:	d003      	beq.n	800894c <osDelay+0x1c>
    stat = osErrorISR;
 8008944:	f06f 0305 	mvn.w	r3, #5
 8008948:	60fb      	str	r3, [r7, #12]
 800894a:	e007      	b.n	800895c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800894c:	2300      	movs	r3, #0
 800894e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 ffa6 	bl	80098a8 <vTaskDelay>
    }
  }

  return (stat);
 800895c:	68fb      	ldr	r3, [r7, #12]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
	...

08008968 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4a07      	ldr	r2, [pc, #28]	@ (8008994 <vApplicationGetIdleTaskMemory+0x2c>)
 8008978:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	4a06      	ldr	r2, [pc, #24]	@ (8008998 <vApplicationGetIdleTaskMemory+0x30>)
 800897e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2280      	movs	r2, #128	@ 0x80
 8008984:	601a      	str	r2, [r3, #0]
}
 8008986:	bf00      	nop
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	240008c4 	.word	0x240008c4
 8008998:	2400096c 	.word	0x2400096c

0800899c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	4a07      	ldr	r2, [pc, #28]	@ (80089c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80089ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	4a06      	ldr	r2, [pc, #24]	@ (80089cc <vApplicationGetTimerTaskMemory+0x30>)
 80089b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80089ba:	601a      	str	r2, [r3, #0]
}
 80089bc:	bf00      	nop
 80089be:	3714      	adds	r7, #20
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	24000b6c 	.word	0x24000b6c
 80089cc:	24000c14 	.word	0x24000c14

080089d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f103 0208 	add.w	r2, r3, #8
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f04f 32ff 	mov.w	r2, #4294967295
 80089e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f103 0208 	add.w	r2, r3, #8
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f103 0208 	add.w	r2, r3, #8
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a1e:	bf00      	nop
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b085      	sub	sp, #20
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	689a      	ldr	r2, [r3, #8]
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	601a      	str	r2, [r3, #0]
}
 8008a66:	bf00      	nop
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a72:	b480      	push	{r7}
 8008a74:	b085      	sub	sp, #20
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a88:	d103      	bne.n	8008a92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	e00c      	b.n	8008aac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	3308      	adds	r3, #8
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	e002      	b.n	8008aa0 <vListInsert+0x2e>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d2f6      	bcs.n	8008a9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	685a      	ldr	r2, [r3, #4]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	1c5a      	adds	r2, r3, #1
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	601a      	str	r2, [r3, #0]
}
 8008ad8:	bf00      	nop
 8008ada:	3714      	adds	r7, #20
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	6892      	ldr	r2, [r2, #8]
 8008afa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	6852      	ldr	r2, [r2, #4]
 8008b04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d103      	bne.n	8008b18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	1e5a      	subs	r2, r3, #1
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10b      	bne.n	8008b64 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b5e:	bf00      	nop
 8008b60:	bf00      	nop
 8008b62:	e7fd      	b.n	8008b60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b64:	f002 f8a8 	bl	800acb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b70:	68f9      	ldr	r1, [r7, #12]
 8008b72:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008b74:	fb01 f303 	mul.w	r3, r1, r3
 8008b78:	441a      	add	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b94:	3b01      	subs	r3, #1
 8008b96:	68f9      	ldr	r1, [r7, #12]
 8008b98:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008b9a:	fb01 f303 	mul.w	r3, r1, r3
 8008b9e:	441a      	add	r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	22ff      	movs	r2, #255	@ 0xff
 8008ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	22ff      	movs	r2, #255	@ 0xff
 8008bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d114      	bne.n	8008be4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d01a      	beq.n	8008bf8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3310      	adds	r3, #16
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f001 f942 	bl	8009e50 <xTaskRemoveFromEventList>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d012      	beq.n	8008bf8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008c08 <xQueueGenericReset+0xd0>)
 8008bd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bd8:	601a      	str	r2, [r3, #0]
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	e009      	b.n	8008bf8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3310      	adds	r3, #16
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7ff fef1 	bl	80089d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3324      	adds	r3, #36	@ 0x24
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7ff feec 	bl	80089d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008bf8:	f002 f890 	bl	800ad1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008bfc:	2301      	movs	r3, #1
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	e000ed04 	.word	0xe000ed04

08008c0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b08e      	sub	sp, #56	@ 0x38
 8008c10:	af02      	add	r7, sp, #8
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
 8008c18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10b      	bne.n	8008c38 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008c32:	bf00      	nop
 8008c34:	bf00      	nop
 8008c36:	e7fd      	b.n	8008c34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10b      	bne.n	8008c56 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c50:	bf00      	nop
 8008c52:	bf00      	nop
 8008c54:	e7fd      	b.n	8008c52 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <xQueueGenericCreateStatic+0x56>
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <xQueueGenericCreateStatic+0x5a>
 8008c62:	2301      	movs	r3, #1
 8008c64:	e000      	b.n	8008c68 <xQueueGenericCreateStatic+0x5c>
 8008c66:	2300      	movs	r3, #0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10b      	bne.n	8008c84 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	623b      	str	r3, [r7, #32]
}
 8008c7e:	bf00      	nop
 8008c80:	bf00      	nop
 8008c82:	e7fd      	b.n	8008c80 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d102      	bne.n	8008c90 <xQueueGenericCreateStatic+0x84>
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <xQueueGenericCreateStatic+0x88>
 8008c90:	2301      	movs	r3, #1
 8008c92:	e000      	b.n	8008c96 <xQueueGenericCreateStatic+0x8a>
 8008c94:	2300      	movs	r3, #0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10b      	bne.n	8008cb2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	61fb      	str	r3, [r7, #28]
}
 8008cac:	bf00      	nop
 8008cae:	bf00      	nop
 8008cb0:	e7fd      	b.n	8008cae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008cb2:	2350      	movs	r3, #80	@ 0x50
 8008cb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2b50      	cmp	r3, #80	@ 0x50
 8008cba:	d00b      	beq.n	8008cd4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	61bb      	str	r3, [r7, #24]
}
 8008cce:	bf00      	nop
 8008cd0:	bf00      	nop
 8008cd2:	e7fd      	b.n	8008cd0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008cd4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00d      	beq.n	8008cfc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ce8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	68b9      	ldr	r1, [r7, #8]
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f000 f805 	bl	8008d06 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3730      	adds	r7, #48	@ 0x30
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	60f8      	str	r0, [r7, #12]
 8008d0e:	60b9      	str	r1, [r7, #8]
 8008d10:	607a      	str	r2, [r7, #4]
 8008d12:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d103      	bne.n	8008d22 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	69ba      	ldr	r2, [r7, #24]
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	e002      	b.n	8008d28 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d34:	2101      	movs	r1, #1
 8008d36:	69b8      	ldr	r0, [r7, #24]
 8008d38:	f7ff fefe 	bl	8008b38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	78fa      	ldrb	r2, [r7, #3]
 8008d40:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d44:	bf00      	nop
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b08e      	sub	sp, #56	@ 0x38
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10b      	bne.n	8008d80 <xQueueGenericSend+0x34>
	__asm volatile
 8008d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008d7a:	bf00      	nop
 8008d7c:	bf00      	nop
 8008d7e:	e7fd      	b.n	8008d7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d103      	bne.n	8008d8e <xQueueGenericSend+0x42>
 8008d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <xQueueGenericSend+0x46>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e000      	b.n	8008d94 <xQueueGenericSend+0x48>
 8008d92:	2300      	movs	r3, #0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10b      	bne.n	8008db0 <xQueueGenericSend+0x64>
	__asm volatile
 8008d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008daa:	bf00      	nop
 8008dac:	bf00      	nop
 8008dae:	e7fd      	b.n	8008dac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d103      	bne.n	8008dbe <xQueueGenericSend+0x72>
 8008db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d101      	bne.n	8008dc2 <xQueueGenericSend+0x76>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e000      	b.n	8008dc4 <xQueueGenericSend+0x78>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10b      	bne.n	8008de0 <xQueueGenericSend+0x94>
	__asm volatile
 8008dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	623b      	str	r3, [r7, #32]
}
 8008dda:	bf00      	nop
 8008ddc:	bf00      	nop
 8008dde:	e7fd      	b.n	8008ddc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008de0:	f001 f9fc 	bl	800a1dc <xTaskGetSchedulerState>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d102      	bne.n	8008df0 <xQueueGenericSend+0xa4>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <xQueueGenericSend+0xa8>
 8008df0:	2301      	movs	r3, #1
 8008df2:	e000      	b.n	8008df6 <xQueueGenericSend+0xaa>
 8008df4:	2300      	movs	r3, #0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10b      	bne.n	8008e12 <xQueueGenericSend+0xc6>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	61fb      	str	r3, [r7, #28]
}
 8008e0c:	bf00      	nop
 8008e0e:	bf00      	nop
 8008e10:	e7fd      	b.n	8008e0e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e12:	f001 ff51 	bl	800acb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d302      	bcc.n	8008e28 <xQueueGenericSend+0xdc>
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d129      	bne.n	8008e7c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e28:	683a      	ldr	r2, [r7, #0]
 8008e2a:	68b9      	ldr	r1, [r7, #8]
 8008e2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e2e:	f000 fa0f 	bl	8009250 <prvCopyDataToQueue>
 8008e32:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d010      	beq.n	8008e5e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3e:	3324      	adds	r3, #36	@ 0x24
 8008e40:	4618      	mov	r0, r3
 8008e42:	f001 f805 	bl	8009e50 <xTaskRemoveFromEventList>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d013      	beq.n	8008e74 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8008f4c <xQueueGenericSend+0x200>)
 8008e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	f3bf 8f4f 	dsb	sy
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	e00a      	b.n	8008e74 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d007      	beq.n	8008e74 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e64:	4b39      	ldr	r3, [pc, #228]	@ (8008f4c <xQueueGenericSend+0x200>)
 8008e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e6a:	601a      	str	r2, [r3, #0]
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e74:	f001 ff52 	bl	800ad1c <vPortExitCritical>
				return pdPASS;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e063      	b.n	8008f44 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d103      	bne.n	8008e8a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e82:	f001 ff4b 	bl	800ad1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e86:	2300      	movs	r3, #0
 8008e88:	e05c      	b.n	8008f44 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d106      	bne.n	8008e9e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e90:	f107 0314 	add.w	r3, r7, #20
 8008e94:	4618      	mov	r0, r3
 8008e96:	f001 f83f 	bl	8009f18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e9e:	f001 ff3d 	bl	800ad1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ea2:	f000 fda7 	bl	80099f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ea6:	f001 ff07 	bl	800acb8 <vPortEnterCritical>
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008eb0:	b25b      	sxtb	r3, r3
 8008eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb6:	d103      	bne.n	8008ec0 <xQueueGenericSend+0x174>
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ec6:	b25b      	sxtb	r3, r3
 8008ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ecc:	d103      	bne.n	8008ed6 <xQueueGenericSend+0x18a>
 8008ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ed6:	f001 ff21 	bl	800ad1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008eda:	1d3a      	adds	r2, r7, #4
 8008edc:	f107 0314 	add.w	r3, r7, #20
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f001 f82e 	bl	8009f44 <xTaskCheckForTimeOut>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d124      	bne.n	8008f38 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008eee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ef0:	f000 faa6 	bl	8009440 <prvIsQueueFull>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d018      	beq.n	8008f2c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efc:	3310      	adds	r3, #16
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	4611      	mov	r1, r2
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 ff52 	bl	8009dac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f0a:	f000 fa31 	bl	8009370 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f0e:	f000 fd7f 	bl	8009a10 <xTaskResumeAll>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f47f af7c 	bne.w	8008e12 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8008f4c <xQueueGenericSend+0x200>)
 8008f1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f20:	601a      	str	r2, [r3, #0]
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	e772      	b.n	8008e12 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f2e:	f000 fa1f 	bl	8009370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f32:	f000 fd6d 	bl	8009a10 <xTaskResumeAll>
 8008f36:	e76c      	b.n	8008e12 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f3a:	f000 fa19 	bl	8009370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f3e:	f000 fd67 	bl	8009a10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3738      	adds	r7, #56	@ 0x38
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	e000ed04 	.word	0xe000ed04

08008f50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b090      	sub	sp, #64	@ 0x40
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
 8008f5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10b      	bne.n	8008f80 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008f7a:	bf00      	nop
 8008f7c:	bf00      	nop
 8008f7e:	e7fd      	b.n	8008f7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d103      	bne.n	8008f8e <xQueueGenericSendFromISR+0x3e>
 8008f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <xQueueGenericSendFromISR+0x42>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e000      	b.n	8008f94 <xQueueGenericSendFromISR+0x44>
 8008f92:	2300      	movs	r3, #0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10b      	bne.n	8008fb0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9c:	f383 8811 	msr	BASEPRI, r3
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008faa:	bf00      	nop
 8008fac:	bf00      	nop
 8008fae:	e7fd      	b.n	8008fac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d103      	bne.n	8008fbe <xQueueGenericSendFromISR+0x6e>
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d101      	bne.n	8008fc2 <xQueueGenericSendFromISR+0x72>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e000      	b.n	8008fc4 <xQueueGenericSendFromISR+0x74>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10b      	bne.n	8008fe0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	623b      	str	r3, [r7, #32]
}
 8008fda:	bf00      	nop
 8008fdc:	bf00      	nop
 8008fde:	e7fd      	b.n	8008fdc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fe0:	f001 ff4a 	bl	800ae78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008fe4:	f3ef 8211 	mrs	r2, BASEPRI
 8008fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	61fa      	str	r2, [r7, #28]
 8008ffa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ffc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ffe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009002:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009008:	429a      	cmp	r2, r3
 800900a:	d302      	bcc.n	8009012 <xQueueGenericSendFromISR+0xc2>
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	2b02      	cmp	r3, #2
 8009010:	d12f      	bne.n	8009072 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009014:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009018:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800901c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009020:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	68b9      	ldr	r1, [r7, #8]
 8009026:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009028:	f000 f912 	bl	8009250 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800902c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009034:	d112      	bne.n	800905c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800903a:	2b00      	cmp	r3, #0
 800903c:	d016      	beq.n	800906c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800903e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009040:	3324      	adds	r3, #36	@ 0x24
 8009042:	4618      	mov	r0, r3
 8009044:	f000 ff04 	bl	8009e50 <xTaskRemoveFromEventList>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00e      	beq.n	800906c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00b      	beq.n	800906c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	601a      	str	r2, [r3, #0]
 800905a:	e007      	b.n	800906c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800905c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009060:	3301      	adds	r3, #1
 8009062:	b2db      	uxtb	r3, r3
 8009064:	b25a      	sxtb	r2, r3
 8009066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800906c:	2301      	movs	r3, #1
 800906e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009070:	e001      	b.n	8009076 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009072:	2300      	movs	r3, #0
 8009074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009078:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009080:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009084:	4618      	mov	r0, r3
 8009086:	3740      	adds	r7, #64	@ 0x40
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b08c      	sub	sp, #48	@ 0x30
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009098:	2300      	movs	r3, #0
 800909a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80090a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10b      	bne.n	80090be <xQueueReceive+0x32>
	__asm volatile
 80090a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	623b      	str	r3, [r7, #32]
}
 80090b8:	bf00      	nop
 80090ba:	bf00      	nop
 80090bc:	e7fd      	b.n	80090ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d103      	bne.n	80090cc <xQueueReceive+0x40>
 80090c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <xQueueReceive+0x44>
 80090cc:	2301      	movs	r3, #1
 80090ce:	e000      	b.n	80090d2 <xQueueReceive+0x46>
 80090d0:	2300      	movs	r3, #0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10b      	bne.n	80090ee <xQueueReceive+0x62>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	61fb      	str	r3, [r7, #28]
}
 80090e8:	bf00      	nop
 80090ea:	bf00      	nop
 80090ec:	e7fd      	b.n	80090ea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090ee:	f001 f875 	bl	800a1dc <xTaskGetSchedulerState>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d102      	bne.n	80090fe <xQueueReceive+0x72>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d101      	bne.n	8009102 <xQueueReceive+0x76>
 80090fe:	2301      	movs	r3, #1
 8009100:	e000      	b.n	8009104 <xQueueReceive+0x78>
 8009102:	2300      	movs	r3, #0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10b      	bne.n	8009120 <xQueueReceive+0x94>
	__asm volatile
 8009108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	61bb      	str	r3, [r7, #24]
}
 800911a:	bf00      	nop
 800911c:	bf00      	nop
 800911e:	e7fd      	b.n	800911c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009120:	f001 fdca 	bl	800acb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009128:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800912a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912c:	2b00      	cmp	r3, #0
 800912e:	d01f      	beq.n	8009170 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009130:	68b9      	ldr	r1, [r7, #8]
 8009132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009134:	f000 f8f6 	bl	8009324 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913a:	1e5a      	subs	r2, r3, #1
 800913c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00f      	beq.n	8009168 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914a:	3310      	adds	r3, #16
 800914c:	4618      	mov	r0, r3
 800914e:	f000 fe7f 	bl	8009e50 <xTaskRemoveFromEventList>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d007      	beq.n	8009168 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009158:	4b3c      	ldr	r3, [pc, #240]	@ (800924c <xQueueReceive+0x1c0>)
 800915a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800915e:	601a      	str	r2, [r3, #0]
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009168:	f001 fdd8 	bl	800ad1c <vPortExitCritical>
				return pdPASS;
 800916c:	2301      	movs	r3, #1
 800916e:	e069      	b.n	8009244 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d103      	bne.n	800917e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009176:	f001 fdd1 	bl	800ad1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800917a:	2300      	movs	r3, #0
 800917c:	e062      	b.n	8009244 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800917e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009180:	2b00      	cmp	r3, #0
 8009182:	d106      	bne.n	8009192 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009184:	f107 0310 	add.w	r3, r7, #16
 8009188:	4618      	mov	r0, r3
 800918a:	f000 fec5 	bl	8009f18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800918e:	2301      	movs	r3, #1
 8009190:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009192:	f001 fdc3 	bl	800ad1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009196:	f000 fc2d 	bl	80099f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800919a:	f001 fd8d 	bl	800acb8 <vPortEnterCritical>
 800919e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091a4:	b25b      	sxtb	r3, r3
 80091a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091aa:	d103      	bne.n	80091b4 <xQueueReceive+0x128>
 80091ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091ba:	b25b      	sxtb	r3, r3
 80091bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c0:	d103      	bne.n	80091ca <xQueueReceive+0x13e>
 80091c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091ca:	f001 fda7 	bl	800ad1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091ce:	1d3a      	adds	r2, r7, #4
 80091d0:	f107 0310 	add.w	r3, r7, #16
 80091d4:	4611      	mov	r1, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 feb4 	bl	8009f44 <xTaskCheckForTimeOut>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d123      	bne.n	800922a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091e4:	f000 f916 	bl	8009414 <prvIsQueueEmpty>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d017      	beq.n	800921e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f0:	3324      	adds	r3, #36	@ 0x24
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	4611      	mov	r1, r2
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fdd8 	bl	8009dac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80091fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091fe:	f000 f8b7 	bl	8009370 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009202:	f000 fc05 	bl	8009a10 <xTaskResumeAll>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d189      	bne.n	8009120 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800920c:	4b0f      	ldr	r3, [pc, #60]	@ (800924c <xQueueReceive+0x1c0>)
 800920e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009212:	601a      	str	r2, [r3, #0]
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	e780      	b.n	8009120 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800921e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009220:	f000 f8a6 	bl	8009370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009224:	f000 fbf4 	bl	8009a10 <xTaskResumeAll>
 8009228:	e77a      	b.n	8009120 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800922a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800922c:	f000 f8a0 	bl	8009370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009230:	f000 fbee 	bl	8009a10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009234:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009236:	f000 f8ed 	bl	8009414 <prvIsQueueEmpty>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	f43f af6f 	beq.w	8009120 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009242:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009244:	4618      	mov	r0, r3
 8009246:	3730      	adds	r7, #48	@ 0x30
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	e000ed04 	.word	0xe000ed04

08009250 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800925c:	2300      	movs	r3, #0
 800925e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009264:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10d      	bne.n	800928a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d14d      	bne.n	8009312 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	4618      	mov	r0, r3
 800927c:	f000 ffcc 	bl	800a218 <xTaskPriorityDisinherit>
 8009280:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	609a      	str	r2, [r3, #8]
 8009288:	e043      	b.n	8009312 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d119      	bne.n	80092c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6858      	ldr	r0, [r3, #4]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009298:	461a      	mov	r2, r3
 800929a:	68b9      	ldr	r1, [r7, #8]
 800929c:	f002 f8a0 	bl	800b3e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	685a      	ldr	r2, [r3, #4]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a8:	441a      	add	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d32b      	bcc.n	8009312 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	605a      	str	r2, [r3, #4]
 80092c2:	e026      	b.n	8009312 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	68d8      	ldr	r0, [r3, #12]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092cc:	461a      	mov	r2, r3
 80092ce:	68b9      	ldr	r1, [r7, #8]
 80092d0:	f002 f886 	bl	800b3e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	68da      	ldr	r2, [r3, #12]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092dc:	425b      	negs	r3, r3
 80092de:	441a      	add	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	68da      	ldr	r2, [r3, #12]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d207      	bcs.n	8009300 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	689a      	ldr	r2, [r3, #8]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f8:	425b      	negs	r3, r3
 80092fa:	441a      	add	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b02      	cmp	r3, #2
 8009304:	d105      	bne.n	8009312 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	3b01      	subs	r3, #1
 8009310:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	1c5a      	adds	r2, r3, #1
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800931a:	697b      	ldr	r3, [r7, #20]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009332:	2b00      	cmp	r3, #0
 8009334:	d018      	beq.n	8009368 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68da      	ldr	r2, [r3, #12]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800933e:	441a      	add	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	68da      	ldr	r2, [r3, #12]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	429a      	cmp	r2, r3
 800934e:	d303      	bcc.n	8009358 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	68d9      	ldr	r1, [r3, #12]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009360:	461a      	mov	r2, r3
 8009362:	6838      	ldr	r0, [r7, #0]
 8009364:	f002 f83c 	bl	800b3e0 <memcpy>
	}
}
 8009368:	bf00      	nop
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009378:	f001 fc9e 	bl	800acb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009382:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009384:	e011      	b.n	80093aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938a:	2b00      	cmp	r3, #0
 800938c:	d012      	beq.n	80093b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	3324      	adds	r3, #36	@ 0x24
 8009392:	4618      	mov	r0, r3
 8009394:	f000 fd5c 	bl	8009e50 <xTaskRemoveFromEventList>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800939e:	f000 fe35 	bl	800a00c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
 80093a4:	3b01      	subs	r3, #1
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	dce9      	bgt.n	8009386 <prvUnlockQueue+0x16>
 80093b2:	e000      	b.n	80093b6 <prvUnlockQueue+0x46>
					break;
 80093b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	22ff      	movs	r2, #255	@ 0xff
 80093ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80093be:	f001 fcad 	bl	800ad1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80093c2:	f001 fc79 	bl	800acb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093ce:	e011      	b.n	80093f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d012      	beq.n	80093fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	3310      	adds	r3, #16
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 fd37 	bl	8009e50 <xTaskRemoveFromEventList>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80093e8:	f000 fe10 	bl	800a00c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093ec:	7bbb      	ldrb	r3, [r7, #14]
 80093ee:	3b01      	subs	r3, #1
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	dce9      	bgt.n	80093d0 <prvUnlockQueue+0x60>
 80093fc:	e000      	b.n	8009400 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80093fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	22ff      	movs	r2, #255	@ 0xff
 8009404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009408:	f001 fc88 	bl	800ad1c <vPortExitCritical>
}
 800940c:	bf00      	nop
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800941c:	f001 fc4c 	bl	800acb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009424:	2b00      	cmp	r3, #0
 8009426:	d102      	bne.n	800942e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009428:	2301      	movs	r3, #1
 800942a:	60fb      	str	r3, [r7, #12]
 800942c:	e001      	b.n	8009432 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800942e:	2300      	movs	r3, #0
 8009430:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009432:	f001 fc73 	bl	800ad1c <vPortExitCritical>

	return xReturn;
 8009436:	68fb      	ldr	r3, [r7, #12]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009448:	f001 fc36 	bl	800acb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009454:	429a      	cmp	r2, r3
 8009456:	d102      	bne.n	800945e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009458:	2301      	movs	r3, #1
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	e001      	b.n	8009462 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800945e:	2300      	movs	r3, #0
 8009460:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009462:	f001 fc5b 	bl	800ad1c <vPortExitCritical>

	return xReturn;
 8009466:	68fb      	ldr	r3, [r7, #12]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800947a:	2300      	movs	r3, #0
 800947c:	60fb      	str	r3, [r7, #12]
 800947e:	e014      	b.n	80094aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009480:	4a0f      	ldr	r2, [pc, #60]	@ (80094c0 <vQueueAddToRegistry+0x50>)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10b      	bne.n	80094a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800948c:	490c      	ldr	r1, [pc, #48]	@ (80094c0 <vQueueAddToRegistry+0x50>)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	683a      	ldr	r2, [r7, #0]
 8009492:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009496:	4a0a      	ldr	r2, [pc, #40]	@ (80094c0 <vQueueAddToRegistry+0x50>)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	00db      	lsls	r3, r3, #3
 800949c:	4413      	add	r3, r2
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80094a2:	e006      	b.n	80094b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	3301      	adds	r3, #1
 80094a8:	60fb      	str	r3, [r7, #12]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2b07      	cmp	r3, #7
 80094ae:	d9e7      	bls.n	8009480 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80094b0:	bf00      	nop
 80094b2:	bf00      	nop
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	24001014 	.word	0x24001014

080094c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80094d4:	f001 fbf0 	bl	800acb8 <vPortEnterCritical>
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094de:	b25b      	sxtb	r3, r3
 80094e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e4:	d103      	bne.n	80094ee <vQueueWaitForMessageRestricted+0x2a>
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094f4:	b25b      	sxtb	r3, r3
 80094f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fa:	d103      	bne.n	8009504 <vQueueWaitForMessageRestricted+0x40>
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009504:	f001 fc0a 	bl	800ad1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800950c:	2b00      	cmp	r3, #0
 800950e:	d106      	bne.n	800951e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	3324      	adds	r3, #36	@ 0x24
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	68b9      	ldr	r1, [r7, #8]
 8009518:	4618      	mov	r0, r3
 800951a:	f000 fc6d 	bl	8009df8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800951e:	6978      	ldr	r0, [r7, #20]
 8009520:	f7ff ff26 	bl	8009370 <prvUnlockQueue>
	}
 8009524:	bf00      	nop
 8009526:	3718      	adds	r7, #24
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800952c:	b580      	push	{r7, lr}
 800952e:	b08e      	sub	sp, #56	@ 0x38
 8009530:	af04      	add	r7, sp, #16
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
 8009538:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800953a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10b      	bne.n	8009558 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	623b      	str	r3, [r7, #32]
}
 8009552:	bf00      	nop
 8009554:	bf00      	nop
 8009556:	e7fd      	b.n	8009554 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10b      	bne.n	8009576 <xTaskCreateStatic+0x4a>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	61fb      	str	r3, [r7, #28]
}
 8009570:	bf00      	nop
 8009572:	bf00      	nop
 8009574:	e7fd      	b.n	8009572 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009576:	23a8      	movs	r3, #168	@ 0xa8
 8009578:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	2ba8      	cmp	r3, #168	@ 0xa8
 800957e:	d00b      	beq.n	8009598 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	61bb      	str	r3, [r7, #24]
}
 8009592:	bf00      	nop
 8009594:	bf00      	nop
 8009596:	e7fd      	b.n	8009594 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009598:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800959a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959c:	2b00      	cmp	r3, #0
 800959e:	d01e      	beq.n	80095de <xTaskCreateStatic+0xb2>
 80095a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d01b      	beq.n	80095de <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b2:	2202      	movs	r2, #2
 80095b4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095b8:	2300      	movs	r3, #0
 80095ba:	9303      	str	r3, [sp, #12]
 80095bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095be:	9302      	str	r3, [sp, #8]
 80095c0:	f107 0314 	add.w	r3, r7, #20
 80095c4:	9301      	str	r3, [sp, #4]
 80095c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	68b9      	ldr	r1, [r7, #8]
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f000 f851 	bl	8009678 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80095d8:	f000 f8f6 	bl	80097c8 <prvAddNewTaskToReadyList>
 80095dc:	e001      	b.n	80095e2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80095de:	2300      	movs	r3, #0
 80095e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80095e2:	697b      	ldr	r3, [r7, #20]
	}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3728      	adds	r7, #40	@ 0x28
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08c      	sub	sp, #48	@ 0x30
 80095f0:	af04      	add	r7, sp, #16
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	4613      	mov	r3, r2
 80095fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80095fc:	88fb      	ldrh	r3, [r7, #6]
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4618      	mov	r0, r3
 8009602:	f001 fc7b 	bl	800aefc <pvPortMalloc>
 8009606:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00e      	beq.n	800962c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800960e:	20a8      	movs	r0, #168	@ 0xa8
 8009610:	f001 fc74 	bl	800aefc <pvPortMalloc>
 8009614:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d003      	beq.n	8009624 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	697a      	ldr	r2, [r7, #20]
 8009620:	631a      	str	r2, [r3, #48]	@ 0x30
 8009622:	e005      	b.n	8009630 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009624:	6978      	ldr	r0, [r7, #20]
 8009626:	f001 fd37 	bl	800b098 <vPortFree>
 800962a:	e001      	b.n	8009630 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800962c:	2300      	movs	r3, #0
 800962e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d017      	beq.n	8009666 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800963e:	88fa      	ldrh	r2, [r7, #6]
 8009640:	2300      	movs	r3, #0
 8009642:	9303      	str	r3, [sp, #12]
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	9302      	str	r3, [sp, #8]
 8009648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800964a:	9301      	str	r3, [sp, #4]
 800964c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f000 f80f 	bl	8009678 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800965a:	69f8      	ldr	r0, [r7, #28]
 800965c:	f000 f8b4 	bl	80097c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009660:	2301      	movs	r3, #1
 8009662:	61bb      	str	r3, [r7, #24]
 8009664:	e002      	b.n	800966c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009666:	f04f 33ff 	mov.w	r3, #4294967295
 800966a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800966c:	69bb      	ldr	r3, [r7, #24]
	}
 800966e:	4618      	mov	r0, r3
 8009670:	3720      	adds	r7, #32
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
	...

08009678 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b088      	sub	sp, #32
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009688:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	461a      	mov	r2, r3
 8009690:	21a5      	movs	r1, #165	@ 0xa5
 8009692:	f001 fe21 	bl	800b2d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009698:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800969a:	6879      	ldr	r1, [r7, #4]
 800969c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80096a0:	440b      	add	r3, r1
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	4413      	add	r3, r2
 80096a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	f023 0307 	bic.w	r3, r3, #7
 80096ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	f003 0307 	and.w	r3, r3, #7
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00b      	beq.n	80096d2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096be:	f383 8811 	msr	BASEPRI, r3
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	617b      	str	r3, [r7, #20]
}
 80096cc:	bf00      	nop
 80096ce:	bf00      	nop
 80096d0:	e7fd      	b.n	80096ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d01f      	beq.n	8009718 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096d8:	2300      	movs	r3, #0
 80096da:	61fb      	str	r3, [r7, #28]
 80096dc:	e012      	b.n	8009704 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	4413      	add	r3, r2
 80096e4:	7819      	ldrb	r1, [r3, #0]
 80096e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	4413      	add	r3, r2
 80096ec:	3334      	adds	r3, #52	@ 0x34
 80096ee:	460a      	mov	r2, r1
 80096f0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	4413      	add	r3, r2
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d006      	beq.n	800970c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	3301      	adds	r3, #1
 8009702:	61fb      	str	r3, [r7, #28]
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	2b0f      	cmp	r3, #15
 8009708:	d9e9      	bls.n	80096de <prvInitialiseNewTask+0x66>
 800970a:	e000      	b.n	800970e <prvInitialiseNewTask+0x96>
			{
				break;
 800970c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800970e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009716:	e003      	b.n	8009720 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971a:	2200      	movs	r2, #0
 800971c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009722:	2b37      	cmp	r3, #55	@ 0x37
 8009724:	d901      	bls.n	800972a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009726:	2337      	movs	r3, #55	@ 0x37
 8009728:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800972a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800972e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009732:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009734:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009738:	2200      	movs	r2, #0
 800973a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800973c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973e:	3304      	adds	r3, #4
 8009740:	4618      	mov	r0, r3
 8009742:	f7ff f965 	bl	8008a10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009748:	3318      	adds	r3, #24
 800974a:	4618      	mov	r0, r3
 800974c:	f7ff f960 	bl	8008a10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009754:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009758:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800975c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009764:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009768:	2200      	movs	r2, #0
 800976a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800976e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009770:	2200      	movs	r2, #0
 8009772:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009778:	3354      	adds	r3, #84	@ 0x54
 800977a:	224c      	movs	r2, #76	@ 0x4c
 800977c:	2100      	movs	r1, #0
 800977e:	4618      	mov	r0, r3
 8009780:	f001 fdaa 	bl	800b2d8 <memset>
 8009784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009786:	4a0d      	ldr	r2, [pc, #52]	@ (80097bc <prvInitialiseNewTask+0x144>)
 8009788:	659a      	str	r2, [r3, #88]	@ 0x58
 800978a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978c:	4a0c      	ldr	r2, [pc, #48]	@ (80097c0 <prvInitialiseNewTask+0x148>)
 800978e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009792:	4a0c      	ldr	r2, [pc, #48]	@ (80097c4 <prvInitialiseNewTask+0x14c>)
 8009794:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	68f9      	ldr	r1, [r7, #12]
 800979a:	69b8      	ldr	r0, [r7, #24]
 800979c:	f001 f95a 	bl	800aa54 <pxPortInitialiseStack>
 80097a0:	4602      	mov	r2, r0
 80097a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80097a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d002      	beq.n	80097b2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80097ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097b2:	bf00      	nop
 80097b4:	3720      	adds	r7, #32
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	240052a8 	.word	0x240052a8
 80097c0:	24005310 	.word	0x24005310
 80097c4:	24005378 	.word	0x24005378

080097c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80097d0:	f001 fa72 	bl	800acb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80097d4:	4b2d      	ldr	r3, [pc, #180]	@ (800988c <prvAddNewTaskToReadyList+0xc4>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	3301      	adds	r3, #1
 80097da:	4a2c      	ldr	r2, [pc, #176]	@ (800988c <prvAddNewTaskToReadyList+0xc4>)
 80097dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80097de:	4b2c      	ldr	r3, [pc, #176]	@ (8009890 <prvAddNewTaskToReadyList+0xc8>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d109      	bne.n	80097fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80097e6:	4a2a      	ldr	r2, [pc, #168]	@ (8009890 <prvAddNewTaskToReadyList+0xc8>)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80097ec:	4b27      	ldr	r3, [pc, #156]	@ (800988c <prvAddNewTaskToReadyList+0xc4>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d110      	bne.n	8009816 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80097f4:	f000 fc2e 	bl	800a054 <prvInitialiseTaskLists>
 80097f8:	e00d      	b.n	8009816 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80097fa:	4b26      	ldr	r3, [pc, #152]	@ (8009894 <prvAddNewTaskToReadyList+0xcc>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d109      	bne.n	8009816 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009802:	4b23      	ldr	r3, [pc, #140]	@ (8009890 <prvAddNewTaskToReadyList+0xc8>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800980c:	429a      	cmp	r2, r3
 800980e:	d802      	bhi.n	8009816 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009810:	4a1f      	ldr	r2, [pc, #124]	@ (8009890 <prvAddNewTaskToReadyList+0xc8>)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009816:	4b20      	ldr	r3, [pc, #128]	@ (8009898 <prvAddNewTaskToReadyList+0xd0>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3301      	adds	r3, #1
 800981c:	4a1e      	ldr	r2, [pc, #120]	@ (8009898 <prvAddNewTaskToReadyList+0xd0>)
 800981e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009820:	4b1d      	ldr	r3, [pc, #116]	@ (8009898 <prvAddNewTaskToReadyList+0xd0>)
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800982c:	4b1b      	ldr	r3, [pc, #108]	@ (800989c <prvAddNewTaskToReadyList+0xd4>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	429a      	cmp	r2, r3
 8009832:	d903      	bls.n	800983c <prvAddNewTaskToReadyList+0x74>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009838:	4a18      	ldr	r2, [pc, #96]	@ (800989c <prvAddNewTaskToReadyList+0xd4>)
 800983a:	6013      	str	r3, [r2, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009840:	4613      	mov	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4413      	add	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4a15      	ldr	r2, [pc, #84]	@ (80098a0 <prvAddNewTaskToReadyList+0xd8>)
 800984a:	441a      	add	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	3304      	adds	r3, #4
 8009850:	4619      	mov	r1, r3
 8009852:	4610      	mov	r0, r2
 8009854:	f7ff f8e9 	bl	8008a2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009858:	f001 fa60 	bl	800ad1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800985c:	4b0d      	ldr	r3, [pc, #52]	@ (8009894 <prvAddNewTaskToReadyList+0xcc>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00e      	beq.n	8009882 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009864:	4b0a      	ldr	r3, [pc, #40]	@ (8009890 <prvAddNewTaskToReadyList+0xc8>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986e:	429a      	cmp	r2, r3
 8009870:	d207      	bcs.n	8009882 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009872:	4b0c      	ldr	r3, [pc, #48]	@ (80098a4 <prvAddNewTaskToReadyList+0xdc>)
 8009874:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009882:	bf00      	nop
 8009884:	3708      	adds	r7, #8
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	24001528 	.word	0x24001528
 8009890:	24001054 	.word	0x24001054
 8009894:	24001534 	.word	0x24001534
 8009898:	24001544 	.word	0x24001544
 800989c:	24001530 	.word	0x24001530
 80098a0:	24001058 	.word	0x24001058
 80098a4:	e000ed04 	.word	0xe000ed04

080098a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80098b0:	2300      	movs	r3, #0
 80098b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d018      	beq.n	80098ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80098ba:	4b14      	ldr	r3, [pc, #80]	@ (800990c <vTaskDelay+0x64>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00b      	beq.n	80098da <vTaskDelay+0x32>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	60bb      	str	r3, [r7, #8]
}
 80098d4:	bf00      	nop
 80098d6:	bf00      	nop
 80098d8:	e7fd      	b.n	80098d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80098da:	f000 f88b 	bl	80099f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80098de:	2100      	movs	r1, #0
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fd09 	bl	800a2f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80098e6:	f000 f893 	bl	8009a10 <xTaskResumeAll>
 80098ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d107      	bne.n	8009902 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80098f2:	4b07      	ldr	r3, [pc, #28]	@ (8009910 <vTaskDelay+0x68>)
 80098f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098f8:	601a      	str	r2, [r3, #0]
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009902:	bf00      	nop
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	24001550 	.word	0x24001550
 8009910:	e000ed04 	.word	0xe000ed04

08009914 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b08a      	sub	sp, #40	@ 0x28
 8009918:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800991a:	2300      	movs	r3, #0
 800991c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800991e:	2300      	movs	r3, #0
 8009920:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009922:	463a      	mov	r2, r7
 8009924:	1d39      	adds	r1, r7, #4
 8009926:	f107 0308 	add.w	r3, r7, #8
 800992a:	4618      	mov	r0, r3
 800992c:	f7ff f81c 	bl	8008968 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	9202      	str	r2, [sp, #8]
 8009938:	9301      	str	r3, [sp, #4]
 800993a:	2300      	movs	r3, #0
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	2300      	movs	r3, #0
 8009940:	460a      	mov	r2, r1
 8009942:	4924      	ldr	r1, [pc, #144]	@ (80099d4 <vTaskStartScheduler+0xc0>)
 8009944:	4824      	ldr	r0, [pc, #144]	@ (80099d8 <vTaskStartScheduler+0xc4>)
 8009946:	f7ff fdf1 	bl	800952c <xTaskCreateStatic>
 800994a:	4603      	mov	r3, r0
 800994c:	4a23      	ldr	r2, [pc, #140]	@ (80099dc <vTaskStartScheduler+0xc8>)
 800994e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009950:	4b22      	ldr	r3, [pc, #136]	@ (80099dc <vTaskStartScheduler+0xc8>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d002      	beq.n	800995e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009958:	2301      	movs	r3, #1
 800995a:	617b      	str	r3, [r7, #20]
 800995c:	e001      	b.n	8009962 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800995e:	2300      	movs	r3, #0
 8009960:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d102      	bne.n	800996e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009968:	f000 fd1a 	bl	800a3a0 <xTimerCreateTimerTask>
 800996c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d11b      	bne.n	80099ac <vTaskStartScheduler+0x98>
	__asm volatile
 8009974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	613b      	str	r3, [r7, #16]
}
 8009986:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009988:	4b15      	ldr	r3, [pc, #84]	@ (80099e0 <vTaskStartScheduler+0xcc>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	3354      	adds	r3, #84	@ 0x54
 800998e:	4a15      	ldr	r2, [pc, #84]	@ (80099e4 <vTaskStartScheduler+0xd0>)
 8009990:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009992:	4b15      	ldr	r3, [pc, #84]	@ (80099e8 <vTaskStartScheduler+0xd4>)
 8009994:	f04f 32ff 	mov.w	r2, #4294967295
 8009998:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800999a:	4b14      	ldr	r3, [pc, #80]	@ (80099ec <vTaskStartScheduler+0xd8>)
 800999c:	2201      	movs	r2, #1
 800999e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099a0:	4b13      	ldr	r3, [pc, #76]	@ (80099f0 <vTaskStartScheduler+0xdc>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099a6:	f001 f8e3 	bl	800ab70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80099aa:	e00f      	b.n	80099cc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b2:	d10b      	bne.n	80099cc <vTaskStartScheduler+0xb8>
	__asm volatile
 80099b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	60fb      	str	r3, [r7, #12]
}
 80099c6:	bf00      	nop
 80099c8:	bf00      	nop
 80099ca:	e7fd      	b.n	80099c8 <vTaskStartScheduler+0xb4>
}
 80099cc:	bf00      	nop
 80099ce:	3718      	adds	r7, #24
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	0800b4dc 	.word	0x0800b4dc
 80099d8:	0800a025 	.word	0x0800a025
 80099dc:	2400154c 	.word	0x2400154c
 80099e0:	24001054 	.word	0x24001054
 80099e4:	24000014 	.word	0x24000014
 80099e8:	24001548 	.word	0x24001548
 80099ec:	24001534 	.word	0x24001534
 80099f0:	2400152c 	.word	0x2400152c

080099f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80099f4:	b480      	push	{r7}
 80099f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80099f8:	4b04      	ldr	r3, [pc, #16]	@ (8009a0c <vTaskSuspendAll+0x18>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	3301      	adds	r3, #1
 80099fe:	4a03      	ldr	r2, [pc, #12]	@ (8009a0c <vTaskSuspendAll+0x18>)
 8009a00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a02:	bf00      	nop
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	24001550 	.word	0x24001550

08009a10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a16:	2300      	movs	r3, #0
 8009a18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a1e:	4b42      	ldr	r3, [pc, #264]	@ (8009b28 <xTaskResumeAll+0x118>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10b      	bne.n	8009a3e <xTaskResumeAll+0x2e>
	__asm volatile
 8009a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	603b      	str	r3, [r7, #0]
}
 8009a38:	bf00      	nop
 8009a3a:	bf00      	nop
 8009a3c:	e7fd      	b.n	8009a3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a3e:	f001 f93b 	bl	800acb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a42:	4b39      	ldr	r3, [pc, #228]	@ (8009b28 <xTaskResumeAll+0x118>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	3b01      	subs	r3, #1
 8009a48:	4a37      	ldr	r2, [pc, #220]	@ (8009b28 <xTaskResumeAll+0x118>)
 8009a4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a4c:	4b36      	ldr	r3, [pc, #216]	@ (8009b28 <xTaskResumeAll+0x118>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d162      	bne.n	8009b1a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a54:	4b35      	ldr	r3, [pc, #212]	@ (8009b2c <xTaskResumeAll+0x11c>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d05e      	beq.n	8009b1a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a5c:	e02f      	b.n	8009abe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a5e:	4b34      	ldr	r3, [pc, #208]	@ (8009b30 <xTaskResumeAll+0x120>)
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	3318      	adds	r3, #24
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7ff f83a 	bl	8008ae4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	3304      	adds	r3, #4
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7ff f835 	bl	8008ae4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8009b34 <xTaskResumeAll+0x124>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d903      	bls.n	8009a8e <xTaskResumeAll+0x7e>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8009b34 <xTaskResumeAll+0x124>)
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a92:	4613      	mov	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4a27      	ldr	r2, [pc, #156]	@ (8009b38 <xTaskResumeAll+0x128>)
 8009a9c:	441a      	add	r2, r3
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	f7fe ffc0 	bl	8008a2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aae:	4b23      	ldr	r3, [pc, #140]	@ (8009b3c <xTaskResumeAll+0x12c>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d302      	bcc.n	8009abe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009ab8:	4b21      	ldr	r3, [pc, #132]	@ (8009b40 <xTaskResumeAll+0x130>)
 8009aba:	2201      	movs	r2, #1
 8009abc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009abe:	4b1c      	ldr	r3, [pc, #112]	@ (8009b30 <xTaskResumeAll+0x120>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1cb      	bne.n	8009a5e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d001      	beq.n	8009ad0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009acc:	f000 fb66 	bl	800a19c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8009b44 <xTaskResumeAll+0x134>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d010      	beq.n	8009afe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009adc:	f000 f846 	bl	8009b6c <xTaskIncrementTick>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d002      	beq.n	8009aec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009ae6:	4b16      	ldr	r3, [pc, #88]	@ (8009b40 <xTaskResumeAll+0x130>)
 8009ae8:	2201      	movs	r2, #1
 8009aea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	3b01      	subs	r3, #1
 8009af0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1f1      	bne.n	8009adc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009af8:	4b12      	ldr	r3, [pc, #72]	@ (8009b44 <xTaskResumeAll+0x134>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009afe:	4b10      	ldr	r3, [pc, #64]	@ (8009b40 <xTaskResumeAll+0x130>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d009      	beq.n	8009b1a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b06:	2301      	movs	r3, #1
 8009b08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8009b48 <xTaskResumeAll+0x138>)
 8009b0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b10:	601a      	str	r2, [r3, #0]
 8009b12:	f3bf 8f4f 	dsb	sy
 8009b16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b1a:	f001 f8ff 	bl	800ad1c <vPortExitCritical>

	return xAlreadyYielded;
 8009b1e:	68bb      	ldr	r3, [r7, #8]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	24001550 	.word	0x24001550
 8009b2c:	24001528 	.word	0x24001528
 8009b30:	240014e8 	.word	0x240014e8
 8009b34:	24001530 	.word	0x24001530
 8009b38:	24001058 	.word	0x24001058
 8009b3c:	24001054 	.word	0x24001054
 8009b40:	2400153c 	.word	0x2400153c
 8009b44:	24001538 	.word	0x24001538
 8009b48:	e000ed04 	.word	0xe000ed04

08009b4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b52:	4b05      	ldr	r3, [pc, #20]	@ (8009b68 <xTaskGetTickCount+0x1c>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b58:	687b      	ldr	r3, [r7, #4]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	370c      	adds	r7, #12
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	2400152c 	.word	0x2400152c

08009b6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b72:	2300      	movs	r3, #0
 8009b74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b76:	4b4f      	ldr	r3, [pc, #316]	@ (8009cb4 <xTaskIncrementTick+0x148>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f040 8090 	bne.w	8009ca0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b80:	4b4d      	ldr	r3, [pc, #308]	@ (8009cb8 <xTaskIncrementTick+0x14c>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	3301      	adds	r3, #1
 8009b86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b88:	4a4b      	ldr	r2, [pc, #300]	@ (8009cb8 <xTaskIncrementTick+0x14c>)
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d121      	bne.n	8009bd8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b94:	4b49      	ldr	r3, [pc, #292]	@ (8009cbc <xTaskIncrementTick+0x150>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00b      	beq.n	8009bb6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	603b      	str	r3, [r7, #0]
}
 8009bb0:	bf00      	nop
 8009bb2:	bf00      	nop
 8009bb4:	e7fd      	b.n	8009bb2 <xTaskIncrementTick+0x46>
 8009bb6:	4b41      	ldr	r3, [pc, #260]	@ (8009cbc <xTaskIncrementTick+0x150>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	4b40      	ldr	r3, [pc, #256]	@ (8009cc0 <xTaskIncrementTick+0x154>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a3e      	ldr	r2, [pc, #248]	@ (8009cbc <xTaskIncrementTick+0x150>)
 8009bc2:	6013      	str	r3, [r2, #0]
 8009bc4:	4a3e      	ldr	r2, [pc, #248]	@ (8009cc0 <xTaskIncrementTick+0x154>)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6013      	str	r3, [r2, #0]
 8009bca:	4b3e      	ldr	r3, [pc, #248]	@ (8009cc4 <xTaskIncrementTick+0x158>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	4a3c      	ldr	r2, [pc, #240]	@ (8009cc4 <xTaskIncrementTick+0x158>)
 8009bd2:	6013      	str	r3, [r2, #0]
 8009bd4:	f000 fae2 	bl	800a19c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8009cc8 <xTaskIncrementTick+0x15c>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d349      	bcc.n	8009c76 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009be2:	4b36      	ldr	r3, [pc, #216]	@ (8009cbc <xTaskIncrementTick+0x150>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d104      	bne.n	8009bf6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bec:	4b36      	ldr	r3, [pc, #216]	@ (8009cc8 <xTaskIncrementTick+0x15c>)
 8009bee:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf2:	601a      	str	r2, [r3, #0]
					break;
 8009bf4:	e03f      	b.n	8009c76 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bf6:	4b31      	ldr	r3, [pc, #196]	@ (8009cbc <xTaskIncrementTick+0x150>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c06:	693a      	ldr	r2, [r7, #16]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d203      	bcs.n	8009c16 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c0e:	4a2e      	ldr	r2, [pc, #184]	@ (8009cc8 <xTaskIncrementTick+0x15c>)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c14:	e02f      	b.n	8009c76 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fe ff62 	bl	8008ae4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d004      	beq.n	8009c32 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	3318      	adds	r3, #24
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7fe ff59 	bl	8008ae4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c36:	4b25      	ldr	r3, [pc, #148]	@ (8009ccc <xTaskIncrementTick+0x160>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d903      	bls.n	8009c46 <xTaskIncrementTick+0xda>
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c42:	4a22      	ldr	r2, [pc, #136]	@ (8009ccc <xTaskIncrementTick+0x160>)
 8009c44:	6013      	str	r3, [r2, #0]
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4a1f      	ldr	r2, [pc, #124]	@ (8009cd0 <xTaskIncrementTick+0x164>)
 8009c54:	441a      	add	r2, r3
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	3304      	adds	r3, #4
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	f7fe fee4 	bl	8008a2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c66:	4b1b      	ldr	r3, [pc, #108]	@ (8009cd4 <xTaskIncrementTick+0x168>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d3b8      	bcc.n	8009be2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009c70:	2301      	movs	r3, #1
 8009c72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c74:	e7b5      	b.n	8009be2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c76:	4b17      	ldr	r3, [pc, #92]	@ (8009cd4 <xTaskIncrementTick+0x168>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c7c:	4914      	ldr	r1, [pc, #80]	@ (8009cd0 <xTaskIncrementTick+0x164>)
 8009c7e:	4613      	mov	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	440b      	add	r3, r1
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d901      	bls.n	8009c92 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009c92:	4b11      	ldr	r3, [pc, #68]	@ (8009cd8 <xTaskIncrementTick+0x16c>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d007      	beq.n	8009caa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	617b      	str	r3, [r7, #20]
 8009c9e:	e004      	b.n	8009caa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8009cdc <xTaskIncrementTick+0x170>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8009cdc <xTaskIncrementTick+0x170>)
 8009ca8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009caa:	697b      	ldr	r3, [r7, #20]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3718      	adds	r7, #24
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	24001550 	.word	0x24001550
 8009cb8:	2400152c 	.word	0x2400152c
 8009cbc:	240014e0 	.word	0x240014e0
 8009cc0:	240014e4 	.word	0x240014e4
 8009cc4:	24001540 	.word	0x24001540
 8009cc8:	24001548 	.word	0x24001548
 8009ccc:	24001530 	.word	0x24001530
 8009cd0:	24001058 	.word	0x24001058
 8009cd4:	24001054 	.word	0x24001054
 8009cd8:	2400153c 	.word	0x2400153c
 8009cdc:	24001538 	.word	0x24001538

08009ce0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8009d94 <vTaskSwitchContext+0xb4>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009cee:	4b2a      	ldr	r3, [pc, #168]	@ (8009d98 <vTaskSwitchContext+0xb8>)
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009cf4:	e047      	b.n	8009d86 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009cf6:	4b28      	ldr	r3, [pc, #160]	@ (8009d98 <vTaskSwitchContext+0xb8>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cfc:	4b27      	ldr	r3, [pc, #156]	@ (8009d9c <vTaskSwitchContext+0xbc>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	60fb      	str	r3, [r7, #12]
 8009d02:	e011      	b.n	8009d28 <vTaskSwitchContext+0x48>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10b      	bne.n	8009d22 <vTaskSwitchContext+0x42>
	__asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	607b      	str	r3, [r7, #4]
}
 8009d1c:	bf00      	nop
 8009d1e:	bf00      	nop
 8009d20:	e7fd      	b.n	8009d1e <vTaskSwitchContext+0x3e>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	3b01      	subs	r3, #1
 8009d26:	60fb      	str	r3, [r7, #12]
 8009d28:	491d      	ldr	r1, [pc, #116]	@ (8009da0 <vTaskSwitchContext+0xc0>)
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	440b      	add	r3, r1
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d0e3      	beq.n	8009d04 <vTaskSwitchContext+0x24>
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4a16      	ldr	r2, [pc, #88]	@ (8009da0 <vTaskSwitchContext+0xc0>)
 8009d48:	4413      	add	r3, r2
 8009d4a:	60bb      	str	r3, [r7, #8]
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	605a      	str	r2, [r3, #4]
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	685a      	ldr	r2, [r3, #4]
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	3308      	adds	r3, #8
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d104      	bne.n	8009d6c <vTaskSwitchContext+0x8c>
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	605a      	str	r2, [r3, #4]
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	4a0c      	ldr	r2, [pc, #48]	@ (8009da4 <vTaskSwitchContext+0xc4>)
 8009d74:	6013      	str	r3, [r2, #0]
 8009d76:	4a09      	ldr	r2, [pc, #36]	@ (8009d9c <vTaskSwitchContext+0xbc>)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d7c:	4b09      	ldr	r3, [pc, #36]	@ (8009da4 <vTaskSwitchContext+0xc4>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	3354      	adds	r3, #84	@ 0x54
 8009d82:	4a09      	ldr	r2, [pc, #36]	@ (8009da8 <vTaskSwitchContext+0xc8>)
 8009d84:	6013      	str	r3, [r2, #0]
}
 8009d86:	bf00      	nop
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	24001550 	.word	0x24001550
 8009d98:	2400153c 	.word	0x2400153c
 8009d9c:	24001530 	.word	0x24001530
 8009da0:	24001058 	.word	0x24001058
 8009da4:	24001054 	.word	0x24001054
 8009da8:	24000014 	.word	0x24000014

08009dac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10b      	bne.n	8009dd4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	60fb      	str	r3, [r7, #12]
}
 8009dce:	bf00      	nop
 8009dd0:	bf00      	nop
 8009dd2:	e7fd      	b.n	8009dd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009dd4:	4b07      	ldr	r3, [pc, #28]	@ (8009df4 <vTaskPlaceOnEventList+0x48>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	3318      	adds	r3, #24
 8009dda:	4619      	mov	r1, r3
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7fe fe48 	bl	8008a72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009de2:	2101      	movs	r1, #1
 8009de4:	6838      	ldr	r0, [r7, #0]
 8009de6:	f000 fa87 	bl	800a2f8 <prvAddCurrentTaskToDelayedList>
}
 8009dea:	bf00      	nop
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	24001054 	.word	0x24001054

08009df8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10b      	bne.n	8009e22 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e0e:	f383 8811 	msr	BASEPRI, r3
 8009e12:	f3bf 8f6f 	isb	sy
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	617b      	str	r3, [r7, #20]
}
 8009e1c:	bf00      	nop
 8009e1e:	bf00      	nop
 8009e20:	e7fd      	b.n	8009e1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e22:	4b0a      	ldr	r3, [pc, #40]	@ (8009e4c <vTaskPlaceOnEventListRestricted+0x54>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3318      	adds	r3, #24
 8009e28:	4619      	mov	r1, r3
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f7fe fdfd 	bl	8008a2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d002      	beq.n	8009e3c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009e36:	f04f 33ff 	mov.w	r3, #4294967295
 8009e3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e3c:	6879      	ldr	r1, [r7, #4]
 8009e3e:	68b8      	ldr	r0, [r7, #8]
 8009e40:	f000 fa5a 	bl	800a2f8 <prvAddCurrentTaskToDelayedList>
	}
 8009e44:	bf00      	nop
 8009e46:	3718      	adds	r7, #24
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	24001054 	.word	0x24001054

08009e50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b086      	sub	sp, #24
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d10b      	bne.n	8009e7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6a:	f383 8811 	msr	BASEPRI, r3
 8009e6e:	f3bf 8f6f 	isb	sy
 8009e72:	f3bf 8f4f 	dsb	sy
 8009e76:	60fb      	str	r3, [r7, #12]
}
 8009e78:	bf00      	nop
 8009e7a:	bf00      	nop
 8009e7c:	e7fd      	b.n	8009e7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	3318      	adds	r3, #24
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fe fe2e 	bl	8008ae4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e88:	4b1d      	ldr	r3, [pc, #116]	@ (8009f00 <xTaskRemoveFromEventList+0xb0>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d11d      	bne.n	8009ecc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	3304      	adds	r3, #4
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7fe fe25 	bl	8008ae4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e9e:	4b19      	ldr	r3, [pc, #100]	@ (8009f04 <xTaskRemoveFromEventList+0xb4>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d903      	bls.n	8009eae <xTaskRemoveFromEventList+0x5e>
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eaa:	4a16      	ldr	r2, [pc, #88]	@ (8009f04 <xTaskRemoveFromEventList+0xb4>)
 8009eac:	6013      	str	r3, [r2, #0]
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4413      	add	r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4a13      	ldr	r2, [pc, #76]	@ (8009f08 <xTaskRemoveFromEventList+0xb8>)
 8009ebc:	441a      	add	r2, r3
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	f7fe fdb0 	bl	8008a2a <vListInsertEnd>
 8009eca:	e005      	b.n	8009ed8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	3318      	adds	r3, #24
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	480e      	ldr	r0, [pc, #56]	@ (8009f0c <xTaskRemoveFromEventList+0xbc>)
 8009ed4:	f7fe fda9 	bl	8008a2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009edc:	4b0c      	ldr	r3, [pc, #48]	@ (8009f10 <xTaskRemoveFromEventList+0xc0>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d905      	bls.n	8009ef2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009eea:	4b0a      	ldr	r3, [pc, #40]	@ (8009f14 <xTaskRemoveFromEventList+0xc4>)
 8009eec:	2201      	movs	r2, #1
 8009eee:	601a      	str	r2, [r3, #0]
 8009ef0:	e001      	b.n	8009ef6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ef6:	697b      	ldr	r3, [r7, #20]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	24001550 	.word	0x24001550
 8009f04:	24001530 	.word	0x24001530
 8009f08:	24001058 	.word	0x24001058
 8009f0c:	240014e8 	.word	0x240014e8
 8009f10:	24001054 	.word	0x24001054
 8009f14:	2400153c 	.word	0x2400153c

08009f18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f20:	4b06      	ldr	r3, [pc, #24]	@ (8009f3c <vTaskInternalSetTimeOutState+0x24>)
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f28:	4b05      	ldr	r3, [pc, #20]	@ (8009f40 <vTaskInternalSetTimeOutState+0x28>)
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	605a      	str	r2, [r3, #4]
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr
 8009f3c:	24001540 	.word	0x24001540
 8009f40:	2400152c 	.word	0x2400152c

08009f44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b088      	sub	sp, #32
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10b      	bne.n	8009f6c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	613b      	str	r3, [r7, #16]
}
 8009f66:	bf00      	nop
 8009f68:	bf00      	nop
 8009f6a:	e7fd      	b.n	8009f68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10b      	bne.n	8009f8a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f76:	f383 8811 	msr	BASEPRI, r3
 8009f7a:	f3bf 8f6f 	isb	sy
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	60fb      	str	r3, [r7, #12]
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop
 8009f88:	e7fd      	b.n	8009f86 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009f8a:	f000 fe95 	bl	800acb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f8e:	4b1d      	ldr	r3, [pc, #116]	@ (800a004 <xTaskCheckForTimeOut+0xc0>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	69ba      	ldr	r2, [r7, #24]
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa6:	d102      	bne.n	8009fae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	61fb      	str	r3, [r7, #28]
 8009fac:	e023      	b.n	8009ff6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	4b15      	ldr	r3, [pc, #84]	@ (800a008 <xTaskCheckForTimeOut+0xc4>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d007      	beq.n	8009fca <xTaskCheckForTimeOut+0x86>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	69ba      	ldr	r2, [r7, #24]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d302      	bcc.n	8009fca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	61fb      	str	r3, [r7, #28]
 8009fc8:	e015      	b.n	8009ff6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	697a      	ldr	r2, [r7, #20]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d20b      	bcs.n	8009fec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	1ad2      	subs	r2, r2, r3
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f7ff ff99 	bl	8009f18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	61fb      	str	r3, [r7, #28]
 8009fea:	e004      	b.n	8009ff6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009ff6:	f000 fe91 	bl	800ad1c <vPortExitCritical>

	return xReturn;
 8009ffa:	69fb      	ldr	r3, [r7, #28]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3720      	adds	r7, #32
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	2400152c 	.word	0x2400152c
 800a008:	24001540 	.word	0x24001540

0800a00c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a00c:	b480      	push	{r7}
 800a00e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a010:	4b03      	ldr	r3, [pc, #12]	@ (800a020 <vTaskMissedYield+0x14>)
 800a012:	2201      	movs	r2, #1
 800a014:	601a      	str	r2, [r3, #0]
}
 800a016:	bf00      	nop
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	2400153c 	.word	0x2400153c

0800a024 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a02c:	f000 f852 	bl	800a0d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a030:	4b06      	ldr	r3, [pc, #24]	@ (800a04c <prvIdleTask+0x28>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d9f9      	bls.n	800a02c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a038:	4b05      	ldr	r3, [pc, #20]	@ (800a050 <prvIdleTask+0x2c>)
 800a03a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a03e:	601a      	str	r2, [r3, #0]
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a048:	e7f0      	b.n	800a02c <prvIdleTask+0x8>
 800a04a:	bf00      	nop
 800a04c:	24001058 	.word	0x24001058
 800a050:	e000ed04 	.word	0xe000ed04

0800a054 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a05a:	2300      	movs	r3, #0
 800a05c:	607b      	str	r3, [r7, #4]
 800a05e:	e00c      	b.n	800a07a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	4613      	mov	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	4a12      	ldr	r2, [pc, #72]	@ (800a0b4 <prvInitialiseTaskLists+0x60>)
 800a06c:	4413      	add	r3, r2
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fe fcae 	bl	80089d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	3301      	adds	r3, #1
 800a078:	607b      	str	r3, [r7, #4]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b37      	cmp	r3, #55	@ 0x37
 800a07e:	d9ef      	bls.n	800a060 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a080:	480d      	ldr	r0, [pc, #52]	@ (800a0b8 <prvInitialiseTaskLists+0x64>)
 800a082:	f7fe fca5 	bl	80089d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a086:	480d      	ldr	r0, [pc, #52]	@ (800a0bc <prvInitialiseTaskLists+0x68>)
 800a088:	f7fe fca2 	bl	80089d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a08c:	480c      	ldr	r0, [pc, #48]	@ (800a0c0 <prvInitialiseTaskLists+0x6c>)
 800a08e:	f7fe fc9f 	bl	80089d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a092:	480c      	ldr	r0, [pc, #48]	@ (800a0c4 <prvInitialiseTaskLists+0x70>)
 800a094:	f7fe fc9c 	bl	80089d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a098:	480b      	ldr	r0, [pc, #44]	@ (800a0c8 <prvInitialiseTaskLists+0x74>)
 800a09a:	f7fe fc99 	bl	80089d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a09e:	4b0b      	ldr	r3, [pc, #44]	@ (800a0cc <prvInitialiseTaskLists+0x78>)
 800a0a0:	4a05      	ldr	r2, [pc, #20]	@ (800a0b8 <prvInitialiseTaskLists+0x64>)
 800a0a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a0a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a0d0 <prvInitialiseTaskLists+0x7c>)
 800a0a6:	4a05      	ldr	r2, [pc, #20]	@ (800a0bc <prvInitialiseTaskLists+0x68>)
 800a0a8:	601a      	str	r2, [r3, #0]
}
 800a0aa:	bf00      	nop
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	24001058 	.word	0x24001058
 800a0b8:	240014b8 	.word	0x240014b8
 800a0bc:	240014cc 	.word	0x240014cc
 800a0c0:	240014e8 	.word	0x240014e8
 800a0c4:	240014fc 	.word	0x240014fc
 800a0c8:	24001514 	.word	0x24001514
 800a0cc:	240014e0 	.word	0x240014e0
 800a0d0:	240014e4 	.word	0x240014e4

0800a0d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0da:	e019      	b.n	800a110 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a0dc:	f000 fdec 	bl	800acb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0e0:	4b10      	ldr	r3, [pc, #64]	@ (800a124 <prvCheckTasksWaitingTermination+0x50>)
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fe fcf9 	bl	8008ae4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a0f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a128 <prvCheckTasksWaitingTermination+0x54>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	4a0b      	ldr	r2, [pc, #44]	@ (800a128 <prvCheckTasksWaitingTermination+0x54>)
 800a0fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a0fc:	4b0b      	ldr	r3, [pc, #44]	@ (800a12c <prvCheckTasksWaitingTermination+0x58>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	3b01      	subs	r3, #1
 800a102:	4a0a      	ldr	r2, [pc, #40]	@ (800a12c <prvCheckTasksWaitingTermination+0x58>)
 800a104:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a106:	f000 fe09 	bl	800ad1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f810 	bl	800a130 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a110:	4b06      	ldr	r3, [pc, #24]	@ (800a12c <prvCheckTasksWaitingTermination+0x58>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1e1      	bne.n	800a0dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a118:	bf00      	nop
 800a11a:	bf00      	nop
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	240014fc 	.word	0x240014fc
 800a128:	24001528 	.word	0x24001528
 800a12c:	24001510 	.word	0x24001510

0800a130 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	3354      	adds	r3, #84	@ 0x54
 800a13c:	4618      	mov	r0, r3
 800a13e:	f001 f8d3 	bl	800b2e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d108      	bne.n	800a15e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a150:	4618      	mov	r0, r3
 800a152:	f000 ffa1 	bl	800b098 <vPortFree>
				vPortFree( pxTCB );
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 ff9e 	bl	800b098 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a15c:	e019      	b.n	800a192 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a164:	2b01      	cmp	r3, #1
 800a166:	d103      	bne.n	800a170 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 ff95 	bl	800b098 <vPortFree>
	}
 800a16e:	e010      	b.n	800a192 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a176:	2b02      	cmp	r3, #2
 800a178:	d00b      	beq.n	800a192 <prvDeleteTCB+0x62>
	__asm volatile
 800a17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	60fb      	str	r3, [r7, #12]
}
 800a18c:	bf00      	nop
 800a18e:	bf00      	nop
 800a190:	e7fd      	b.n	800a18e <prvDeleteTCB+0x5e>
	}
 800a192:	bf00      	nop
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
	...

0800a19c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d4 <prvResetNextTaskUnblockTime+0x38>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d104      	bne.n	800a1b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a1d8 <prvResetNextTaskUnblockTime+0x3c>)
 800a1ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a1b4:	e008      	b.n	800a1c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1b6:	4b07      	ldr	r3, [pc, #28]	@ (800a1d4 <prvResetNextTaskUnblockTime+0x38>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	4a04      	ldr	r2, [pc, #16]	@ (800a1d8 <prvResetNextTaskUnblockTime+0x3c>)
 800a1c6:	6013      	str	r3, [r2, #0]
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	240014e0 	.word	0x240014e0
 800a1d8:	24001548 	.word	0x24001548

0800a1dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a1e2:	4b0b      	ldr	r3, [pc, #44]	@ (800a210 <xTaskGetSchedulerState+0x34>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d102      	bne.n	800a1f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	607b      	str	r3, [r7, #4]
 800a1ee:	e008      	b.n	800a202 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1f0:	4b08      	ldr	r3, [pc, #32]	@ (800a214 <xTaskGetSchedulerState+0x38>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d102      	bne.n	800a1fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	607b      	str	r3, [r7, #4]
 800a1fc:	e001      	b.n	800a202 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a1fe:	2300      	movs	r3, #0
 800a200:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a202:	687b      	ldr	r3, [r7, #4]
	}
 800a204:	4618      	mov	r0, r3
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr
 800a210:	24001534 	.word	0x24001534
 800a214:	24001550 	.word	0x24001550

0800a218 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a224:	2300      	movs	r3, #0
 800a226:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d058      	beq.n	800a2e0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a22e:	4b2f      	ldr	r3, [pc, #188]	@ (800a2ec <xTaskPriorityDisinherit+0xd4>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	693a      	ldr	r2, [r7, #16]
 800a234:	429a      	cmp	r2, r3
 800a236:	d00b      	beq.n	800a250 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23c:	f383 8811 	msr	BASEPRI, r3
 800a240:	f3bf 8f6f 	isb	sy
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	60fb      	str	r3, [r7, #12]
}
 800a24a:	bf00      	nop
 800a24c:	bf00      	nop
 800a24e:	e7fd      	b.n	800a24c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a254:	2b00      	cmp	r3, #0
 800a256:	d10b      	bne.n	800a270 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25c:	f383 8811 	msr	BASEPRI, r3
 800a260:	f3bf 8f6f 	isb	sy
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	60bb      	str	r3, [r7, #8]
}
 800a26a:	bf00      	nop
 800a26c:	bf00      	nop
 800a26e:	e7fd      	b.n	800a26c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a274:	1e5a      	subs	r2, r3, #1
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a282:	429a      	cmp	r2, r3
 800a284:	d02c      	beq.n	800a2e0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d128      	bne.n	800a2e0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	3304      	adds	r3, #4
 800a292:	4618      	mov	r0, r3
 800a294:	f7fe fc26 	bl	8008ae4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2b0:	4b0f      	ldr	r3, [pc, #60]	@ (800a2f0 <xTaskPriorityDisinherit+0xd8>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d903      	bls.n	800a2c0 <xTaskPriorityDisinherit+0xa8>
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2bc:	4a0c      	ldr	r2, [pc, #48]	@ (800a2f0 <xTaskPriorityDisinherit+0xd8>)
 800a2be:	6013      	str	r3, [r2, #0]
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4a09      	ldr	r2, [pc, #36]	@ (800a2f4 <xTaskPriorityDisinherit+0xdc>)
 800a2ce:	441a      	add	r2, r3
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	f7fe fba7 	bl	8008a2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a2e0:	697b      	ldr	r3, [r7, #20]
	}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3718      	adds	r7, #24
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	24001054 	.word	0x24001054
 800a2f0:	24001530 	.word	0x24001530
 800a2f4:	24001058 	.word	0x24001058

0800a2f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a302:	4b21      	ldr	r3, [pc, #132]	@ (800a388 <prvAddCurrentTaskToDelayedList+0x90>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a308:	4b20      	ldr	r3, [pc, #128]	@ (800a38c <prvAddCurrentTaskToDelayedList+0x94>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	3304      	adds	r3, #4
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fe fbe8 	bl	8008ae4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a31a:	d10a      	bne.n	800a332 <prvAddCurrentTaskToDelayedList+0x3a>
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d007      	beq.n	800a332 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a322:	4b1a      	ldr	r3, [pc, #104]	@ (800a38c <prvAddCurrentTaskToDelayedList+0x94>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	3304      	adds	r3, #4
 800a328:	4619      	mov	r1, r3
 800a32a:	4819      	ldr	r0, [pc, #100]	@ (800a390 <prvAddCurrentTaskToDelayedList+0x98>)
 800a32c:	f7fe fb7d 	bl	8008a2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a330:	e026      	b.n	800a380 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4413      	add	r3, r2
 800a338:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a33a:	4b14      	ldr	r3, [pc, #80]	@ (800a38c <prvAddCurrentTaskToDelayedList+0x94>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68ba      	ldr	r2, [r7, #8]
 800a340:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	429a      	cmp	r2, r3
 800a348:	d209      	bcs.n	800a35e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a34a:	4b12      	ldr	r3, [pc, #72]	@ (800a394 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	4b0f      	ldr	r3, [pc, #60]	@ (800a38c <prvAddCurrentTaskToDelayedList+0x94>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	3304      	adds	r3, #4
 800a354:	4619      	mov	r1, r3
 800a356:	4610      	mov	r0, r2
 800a358:	f7fe fb8b 	bl	8008a72 <vListInsert>
}
 800a35c:	e010      	b.n	800a380 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a35e:	4b0e      	ldr	r3, [pc, #56]	@ (800a398 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	4b0a      	ldr	r3, [pc, #40]	@ (800a38c <prvAddCurrentTaskToDelayedList+0x94>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	3304      	adds	r3, #4
 800a368:	4619      	mov	r1, r3
 800a36a:	4610      	mov	r0, r2
 800a36c:	f7fe fb81 	bl	8008a72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a370:	4b0a      	ldr	r3, [pc, #40]	@ (800a39c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	429a      	cmp	r2, r3
 800a378:	d202      	bcs.n	800a380 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a37a:	4a08      	ldr	r2, [pc, #32]	@ (800a39c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	6013      	str	r3, [r2, #0]
}
 800a380:	bf00      	nop
 800a382:	3710      	adds	r7, #16
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	2400152c 	.word	0x2400152c
 800a38c:	24001054 	.word	0x24001054
 800a390:	24001514 	.word	0x24001514
 800a394:	240014e4 	.word	0x240014e4
 800a398:	240014e0 	.word	0x240014e0
 800a39c:	24001548 	.word	0x24001548

0800a3a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b08a      	sub	sp, #40	@ 0x28
 800a3a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a3aa:	f000 fb13 	bl	800a9d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a3ae:	4b1d      	ldr	r3, [pc, #116]	@ (800a424 <xTimerCreateTimerTask+0x84>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d021      	beq.n	800a3fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a3be:	1d3a      	adds	r2, r7, #4
 800a3c0:	f107 0108 	add.w	r1, r7, #8
 800a3c4:	f107 030c 	add.w	r3, r7, #12
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7fe fae7 	bl	800899c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a3ce:	6879      	ldr	r1, [r7, #4]
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	9202      	str	r2, [sp, #8]
 800a3d6:	9301      	str	r3, [sp, #4]
 800a3d8:	2302      	movs	r3, #2
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	2300      	movs	r3, #0
 800a3de:	460a      	mov	r2, r1
 800a3e0:	4911      	ldr	r1, [pc, #68]	@ (800a428 <xTimerCreateTimerTask+0x88>)
 800a3e2:	4812      	ldr	r0, [pc, #72]	@ (800a42c <xTimerCreateTimerTask+0x8c>)
 800a3e4:	f7ff f8a2 	bl	800952c <xTaskCreateStatic>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	4a11      	ldr	r2, [pc, #68]	@ (800a430 <xTimerCreateTimerTask+0x90>)
 800a3ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a3ee:	4b10      	ldr	r3, [pc, #64]	@ (800a430 <xTimerCreateTimerTask+0x90>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10b      	bne.n	800a418 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	613b      	str	r3, [r7, #16]
}
 800a412:	bf00      	nop
 800a414:	bf00      	nop
 800a416:	e7fd      	b.n	800a414 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a418:	697b      	ldr	r3, [r7, #20]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3718      	adds	r7, #24
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	24001584 	.word	0x24001584
 800a428:	0800b4e4 	.word	0x0800b4e4
 800a42c:	0800a56d 	.word	0x0800a56d
 800a430:	24001588 	.word	0x24001588

0800a434 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b08a      	sub	sp, #40	@ 0x28
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
 800a440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a442:	2300      	movs	r3, #0
 800a444:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10b      	bne.n	800a464 <xTimerGenericCommand+0x30>
	__asm volatile
 800a44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a450:	f383 8811 	msr	BASEPRI, r3
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	623b      	str	r3, [r7, #32]
}
 800a45e:	bf00      	nop
 800a460:	bf00      	nop
 800a462:	e7fd      	b.n	800a460 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a464:	4b19      	ldr	r3, [pc, #100]	@ (800a4cc <xTimerGenericCommand+0x98>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d02a      	beq.n	800a4c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	2b05      	cmp	r3, #5
 800a47c:	dc18      	bgt.n	800a4b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a47e:	f7ff fead 	bl	800a1dc <xTaskGetSchedulerState>
 800a482:	4603      	mov	r3, r0
 800a484:	2b02      	cmp	r3, #2
 800a486:	d109      	bne.n	800a49c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a488:	4b10      	ldr	r3, [pc, #64]	@ (800a4cc <xTimerGenericCommand+0x98>)
 800a48a:	6818      	ldr	r0, [r3, #0]
 800a48c:	f107 0110 	add.w	r1, r7, #16
 800a490:	2300      	movs	r3, #0
 800a492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a494:	f7fe fc5a 	bl	8008d4c <xQueueGenericSend>
 800a498:	6278      	str	r0, [r7, #36]	@ 0x24
 800a49a:	e012      	b.n	800a4c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a49c:	4b0b      	ldr	r3, [pc, #44]	@ (800a4cc <xTimerGenericCommand+0x98>)
 800a49e:	6818      	ldr	r0, [r3, #0]
 800a4a0:	f107 0110 	add.w	r1, r7, #16
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f7fe fc50 	bl	8008d4c <xQueueGenericSend>
 800a4ac:	6278      	str	r0, [r7, #36]	@ 0x24
 800a4ae:	e008      	b.n	800a4c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a4b0:	4b06      	ldr	r3, [pc, #24]	@ (800a4cc <xTimerGenericCommand+0x98>)
 800a4b2:	6818      	ldr	r0, [r3, #0]
 800a4b4:	f107 0110 	add.w	r1, r7, #16
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	683a      	ldr	r2, [r7, #0]
 800a4bc:	f7fe fd48 	bl	8008f50 <xQueueGenericSendFromISR>
 800a4c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3728      	adds	r7, #40	@ 0x28
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	24001584 	.word	0x24001584

0800a4d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b088      	sub	sp, #32
 800a4d4:	af02      	add	r7, sp, #8
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4da:	4b23      	ldr	r3, [pc, #140]	@ (800a568 <prvProcessExpiredTimer+0x98>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	3304      	adds	r3, #4
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7fe fafb 	bl	8008ae4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4f4:	f003 0304 	and.w	r3, r3, #4
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d023      	beq.n	800a544 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	699a      	ldr	r2, [r3, #24]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	18d1      	adds	r1, r2, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	6978      	ldr	r0, [r7, #20]
 800a50a:	f000 f8d5 	bl	800a6b8 <prvInsertTimerInActiveList>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d020      	beq.n	800a556 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a514:	2300      	movs	r3, #0
 800a516:	9300      	str	r3, [sp, #0]
 800a518:	2300      	movs	r3, #0
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	2100      	movs	r1, #0
 800a51e:	6978      	ldr	r0, [r7, #20]
 800a520:	f7ff ff88 	bl	800a434 <xTimerGenericCommand>
 800a524:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d114      	bne.n	800a556 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a530:	f383 8811 	msr	BASEPRI, r3
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	60fb      	str	r3, [r7, #12]
}
 800a53e:	bf00      	nop
 800a540:	bf00      	nop
 800a542:	e7fd      	b.n	800a540 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a54a:	f023 0301 	bic.w	r3, r3, #1
 800a54e:	b2da      	uxtb	r2, r3
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	6a1b      	ldr	r3, [r3, #32]
 800a55a:	6978      	ldr	r0, [r7, #20]
 800a55c:	4798      	blx	r3
}
 800a55e:	bf00      	nop
 800a560:	3718      	adds	r7, #24
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	2400157c 	.word	0x2400157c

0800a56c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a574:	f107 0308 	add.w	r3, r7, #8
 800a578:	4618      	mov	r0, r3
 800a57a:	f000 f859 	bl	800a630 <prvGetNextExpireTime>
 800a57e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	4619      	mov	r1, r3
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f000 f805 	bl	800a594 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a58a:	f000 f8d7 	bl	800a73c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a58e:	bf00      	nop
 800a590:	e7f0      	b.n	800a574 <prvTimerTask+0x8>
	...

0800a594 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a59e:	f7ff fa29 	bl	80099f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5a2:	f107 0308 	add.w	r3, r7, #8
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f000 f866 	bl	800a678 <prvSampleTimeNow>
 800a5ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d130      	bne.n	800a616 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d10a      	bne.n	800a5d0 <prvProcessTimerOrBlockTask+0x3c>
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d806      	bhi.n	800a5d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a5c2:	f7ff fa25 	bl	8009a10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a5c6:	68f9      	ldr	r1, [r7, #12]
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff ff81 	bl	800a4d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a5ce:	e024      	b.n	800a61a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d008      	beq.n	800a5e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a5d6:	4b13      	ldr	r3, [pc, #76]	@ (800a624 <prvProcessTimerOrBlockTask+0x90>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d101      	bne.n	800a5e4 <prvProcessTimerOrBlockTask+0x50>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e000      	b.n	800a5e6 <prvProcessTimerOrBlockTask+0x52>
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a5e8:	4b0f      	ldr	r3, [pc, #60]	@ (800a628 <prvProcessTimerOrBlockTask+0x94>)
 800a5ea:	6818      	ldr	r0, [r3, #0]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	f7fe ff65 	bl	80094c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a5fa:	f7ff fa09 	bl	8009a10 <xTaskResumeAll>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d10a      	bne.n	800a61a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a604:	4b09      	ldr	r3, [pc, #36]	@ (800a62c <prvProcessTimerOrBlockTask+0x98>)
 800a606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a60a:	601a      	str	r2, [r3, #0]
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	f3bf 8f6f 	isb	sy
}
 800a614:	e001      	b.n	800a61a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a616:	f7ff f9fb 	bl	8009a10 <xTaskResumeAll>
}
 800a61a:	bf00      	nop
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	24001580 	.word	0x24001580
 800a628:	24001584 	.word	0x24001584
 800a62c:	e000ed04 	.word	0xe000ed04

0800a630 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a638:	4b0e      	ldr	r3, [pc, #56]	@ (800a674 <prvGetNextExpireTime+0x44>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d101      	bne.n	800a646 <prvGetNextExpireTime+0x16>
 800a642:	2201      	movs	r2, #1
 800a644:	e000      	b.n	800a648 <prvGetNextExpireTime+0x18>
 800a646:	2200      	movs	r2, #0
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d105      	bne.n	800a660 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a654:	4b07      	ldr	r3, [pc, #28]	@ (800a674 <prvGetNextExpireTime+0x44>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	60fb      	str	r3, [r7, #12]
 800a65e:	e001      	b.n	800a664 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a660:	2300      	movs	r3, #0
 800a662:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a664:	68fb      	ldr	r3, [r7, #12]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3714      	adds	r7, #20
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	2400157c 	.word	0x2400157c

0800a678 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a680:	f7ff fa64 	bl	8009b4c <xTaskGetTickCount>
 800a684:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a686:	4b0b      	ldr	r3, [pc, #44]	@ (800a6b4 <prvSampleTimeNow+0x3c>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d205      	bcs.n	800a69c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a690:	f000 f93a 	bl	800a908 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	601a      	str	r2, [r3, #0]
 800a69a:	e002      	b.n	800a6a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a6a2:	4a04      	ldr	r2, [pc, #16]	@ (800a6b4 <prvSampleTimeNow+0x3c>)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	2400158c 	.word	0x2400158c

0800a6b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
 800a6c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a6d6:	68ba      	ldr	r2, [r7, #8]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d812      	bhi.n	800a704 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	1ad2      	subs	r2, r2, r3
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	699b      	ldr	r3, [r3, #24]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d302      	bcc.n	800a6f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	617b      	str	r3, [r7, #20]
 800a6f0:	e01b      	b.n	800a72a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a6f2:	4b10      	ldr	r3, [pc, #64]	@ (800a734 <prvInsertTimerInActiveList+0x7c>)
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	3304      	adds	r3, #4
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	4610      	mov	r0, r2
 800a6fe:	f7fe f9b8 	bl	8008a72 <vListInsert>
 800a702:	e012      	b.n	800a72a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d206      	bcs.n	800a71a <prvInsertTimerInActiveList+0x62>
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	429a      	cmp	r2, r3
 800a712:	d302      	bcc.n	800a71a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a714:	2301      	movs	r3, #1
 800a716:	617b      	str	r3, [r7, #20]
 800a718:	e007      	b.n	800a72a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a71a:	4b07      	ldr	r3, [pc, #28]	@ (800a738 <prvInsertTimerInActiveList+0x80>)
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	3304      	adds	r3, #4
 800a722:	4619      	mov	r1, r3
 800a724:	4610      	mov	r0, r2
 800a726:	f7fe f9a4 	bl	8008a72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a72a:	697b      	ldr	r3, [r7, #20]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3718      	adds	r7, #24
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	24001580 	.word	0x24001580
 800a738:	2400157c 	.word	0x2400157c

0800a73c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b08e      	sub	sp, #56	@ 0x38
 800a740:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a742:	e0ce      	b.n	800a8e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	da19      	bge.n	800a77e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a74a:	1d3b      	adds	r3, r7, #4
 800a74c:	3304      	adds	r3, #4
 800a74e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a752:	2b00      	cmp	r3, #0
 800a754:	d10b      	bne.n	800a76e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	61fb      	str	r3, [r7, #28]
}
 800a768:	bf00      	nop
 800a76a:	bf00      	nop
 800a76c:	e7fd      	b.n	800a76a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a76e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a774:	6850      	ldr	r0, [r2, #4]
 800a776:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a778:	6892      	ldr	r2, [r2, #8]
 800a77a:	4611      	mov	r1, r2
 800a77c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	f2c0 80ae 	blt.w	800a8e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a78c:	695b      	ldr	r3, [r3, #20]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d004      	beq.n	800a79c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a794:	3304      	adds	r3, #4
 800a796:	4618      	mov	r0, r3
 800a798:	f7fe f9a4 	bl	8008ae4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a79c:	463b      	mov	r3, r7
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7ff ff6a 	bl	800a678 <prvSampleTimeNow>
 800a7a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2b09      	cmp	r3, #9
 800a7aa:	f200 8097 	bhi.w	800a8dc <prvProcessReceivedCommands+0x1a0>
 800a7ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a7b4 <prvProcessReceivedCommands+0x78>)
 800a7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b4:	0800a7dd 	.word	0x0800a7dd
 800a7b8:	0800a7dd 	.word	0x0800a7dd
 800a7bc:	0800a7dd 	.word	0x0800a7dd
 800a7c0:	0800a853 	.word	0x0800a853
 800a7c4:	0800a867 	.word	0x0800a867
 800a7c8:	0800a8b3 	.word	0x0800a8b3
 800a7cc:	0800a7dd 	.word	0x0800a7dd
 800a7d0:	0800a7dd 	.word	0x0800a7dd
 800a7d4:	0800a853 	.word	0x0800a853
 800a7d8:	0800a867 	.word	0x0800a867
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7e2:	f043 0301 	orr.w	r3, r3, #1
 800a7e6:	b2da      	uxtb	r2, r3
 800a7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	18d1      	adds	r1, r2, r3
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7fc:	f7ff ff5c 	bl	800a6b8 <prvInsertTimerInActiveList>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d06c      	beq.n	800a8e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a808:	6a1b      	ldr	r3, [r3, #32]
 800a80a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a80c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a810:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a814:	f003 0304 	and.w	r3, r3, #4
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d061      	beq.n	800a8e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a81c:	68ba      	ldr	r2, [r7, #8]
 800a81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	441a      	add	r2, r3
 800a824:	2300      	movs	r3, #0
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	2300      	movs	r3, #0
 800a82a:	2100      	movs	r1, #0
 800a82c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a82e:	f7ff fe01 	bl	800a434 <xTimerGenericCommand>
 800a832:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a834:	6a3b      	ldr	r3, [r7, #32]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d152      	bne.n	800a8e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a83a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	61bb      	str	r3, [r7, #24]
}
 800a84c:	bf00      	nop
 800a84e:	bf00      	nop
 800a850:	e7fd      	b.n	800a84e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a854:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a858:	f023 0301 	bic.w	r3, r3, #1
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a860:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a864:	e03d      	b.n	800a8e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a868:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a86c:	f043 0301 	orr.w	r3, r3, #1
 800a870:	b2da      	uxtb	r2, r3
 800a872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a874:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a878:	68ba      	ldr	r2, [r7, #8]
 800a87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d10b      	bne.n	800a89e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	617b      	str	r3, [r7, #20]
}
 800a898:	bf00      	nop
 800a89a:	bf00      	nop
 800a89c:	e7fd      	b.n	800a89a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8a0:	699a      	ldr	r2, [r3, #24]
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a4:	18d1      	adds	r1, r2, r3
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8ac:	f7ff ff04 	bl	800a6b8 <prvInsertTimerInActiveList>
					break;
 800a8b0:	e017      	b.n	800a8e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8b8:	f003 0302 	and.w	r3, r3, #2
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d103      	bne.n	800a8c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a8c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8c2:	f000 fbe9 	bl	800b098 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a8c6:	e00c      	b.n	800a8e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8ce:	f023 0301 	bic.w	r3, r3, #1
 800a8d2:	b2da      	uxtb	r2, r3
 800a8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a8da:	e002      	b.n	800a8e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a8dc:	bf00      	nop
 800a8de:	e000      	b.n	800a8e2 <prvProcessReceivedCommands+0x1a6>
					break;
 800a8e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8e2:	4b08      	ldr	r3, [pc, #32]	@ (800a904 <prvProcessReceivedCommands+0x1c8>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	1d39      	adds	r1, r7, #4
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fe fbce 	bl	800908c <xQueueReceive>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f47f af26 	bne.w	800a744 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a8f8:	bf00      	nop
 800a8fa:	bf00      	nop
 800a8fc:	3730      	adds	r7, #48	@ 0x30
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	24001584 	.word	0x24001584

0800a908 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b088      	sub	sp, #32
 800a90c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a90e:	e049      	b.n	800a9a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a910:	4b2e      	ldr	r3, [pc, #184]	@ (800a9cc <prvSwitchTimerLists+0xc4>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a91a:	4b2c      	ldr	r3, [pc, #176]	@ (800a9cc <prvSwitchTimerLists+0xc4>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	3304      	adds	r3, #4
 800a928:	4618      	mov	r0, r3
 800a92a:	f7fe f8db 	bl	8008ae4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6a1b      	ldr	r3, [r3, #32]
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a93c:	f003 0304 	and.w	r3, r3, #4
 800a940:	2b00      	cmp	r3, #0
 800a942:	d02f      	beq.n	800a9a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	693a      	ldr	r2, [r7, #16]
 800a94a:	4413      	add	r3, r2
 800a94c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	429a      	cmp	r2, r3
 800a954:	d90e      	bls.n	800a974 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a962:	4b1a      	ldr	r3, [pc, #104]	@ (800a9cc <prvSwitchTimerLists+0xc4>)
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	3304      	adds	r3, #4
 800a96a:	4619      	mov	r1, r3
 800a96c:	4610      	mov	r0, r2
 800a96e:	f7fe f880 	bl	8008a72 <vListInsert>
 800a972:	e017      	b.n	800a9a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a974:	2300      	movs	r3, #0
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	2300      	movs	r3, #0
 800a97a:	693a      	ldr	r2, [r7, #16]
 800a97c:	2100      	movs	r1, #0
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	f7ff fd58 	bl	800a434 <xTimerGenericCommand>
 800a984:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10b      	bne.n	800a9a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	603b      	str	r3, [r7, #0]
}
 800a99e:	bf00      	nop
 800a9a0:	bf00      	nop
 800a9a2:	e7fd      	b.n	800a9a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9a4:	4b09      	ldr	r3, [pc, #36]	@ (800a9cc <prvSwitchTimerLists+0xc4>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1b0      	bne.n	800a910 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a9ae:	4b07      	ldr	r3, [pc, #28]	@ (800a9cc <prvSwitchTimerLists+0xc4>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a9b4:	4b06      	ldr	r3, [pc, #24]	@ (800a9d0 <prvSwitchTimerLists+0xc8>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a04      	ldr	r2, [pc, #16]	@ (800a9cc <prvSwitchTimerLists+0xc4>)
 800a9ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a9bc:	4a04      	ldr	r2, [pc, #16]	@ (800a9d0 <prvSwitchTimerLists+0xc8>)
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	6013      	str	r3, [r2, #0]
}
 800a9c2:	bf00      	nop
 800a9c4:	3718      	adds	r7, #24
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	2400157c 	.word	0x2400157c
 800a9d0:	24001580 	.word	0x24001580

0800a9d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a9da:	f000 f96d 	bl	800acb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a9de:	4b15      	ldr	r3, [pc, #84]	@ (800aa34 <prvCheckForValidListAndQueue+0x60>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d120      	bne.n	800aa28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a9e6:	4814      	ldr	r0, [pc, #80]	@ (800aa38 <prvCheckForValidListAndQueue+0x64>)
 800a9e8:	f7fd fff2 	bl	80089d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a9ec:	4813      	ldr	r0, [pc, #76]	@ (800aa3c <prvCheckForValidListAndQueue+0x68>)
 800a9ee:	f7fd ffef 	bl	80089d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a9f2:	4b13      	ldr	r3, [pc, #76]	@ (800aa40 <prvCheckForValidListAndQueue+0x6c>)
 800a9f4:	4a10      	ldr	r2, [pc, #64]	@ (800aa38 <prvCheckForValidListAndQueue+0x64>)
 800a9f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a9f8:	4b12      	ldr	r3, [pc, #72]	@ (800aa44 <prvCheckForValidListAndQueue+0x70>)
 800a9fa:	4a10      	ldr	r2, [pc, #64]	@ (800aa3c <prvCheckForValidListAndQueue+0x68>)
 800a9fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a9fe:	2300      	movs	r3, #0
 800aa00:	9300      	str	r3, [sp, #0]
 800aa02:	4b11      	ldr	r3, [pc, #68]	@ (800aa48 <prvCheckForValidListAndQueue+0x74>)
 800aa04:	4a11      	ldr	r2, [pc, #68]	@ (800aa4c <prvCheckForValidListAndQueue+0x78>)
 800aa06:	2110      	movs	r1, #16
 800aa08:	200a      	movs	r0, #10
 800aa0a:	f7fe f8ff 	bl	8008c0c <xQueueGenericCreateStatic>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	4a08      	ldr	r2, [pc, #32]	@ (800aa34 <prvCheckForValidListAndQueue+0x60>)
 800aa12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa14:	4b07      	ldr	r3, [pc, #28]	@ (800aa34 <prvCheckForValidListAndQueue+0x60>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d005      	beq.n	800aa28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa1c:	4b05      	ldr	r3, [pc, #20]	@ (800aa34 <prvCheckForValidListAndQueue+0x60>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	490b      	ldr	r1, [pc, #44]	@ (800aa50 <prvCheckForValidListAndQueue+0x7c>)
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe fd24 	bl	8009470 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa28:	f000 f978 	bl	800ad1c <vPortExitCritical>
}
 800aa2c:	bf00      	nop
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	24001584 	.word	0x24001584
 800aa38:	24001554 	.word	0x24001554
 800aa3c:	24001568 	.word	0x24001568
 800aa40:	2400157c 	.word	0x2400157c
 800aa44:	24001580 	.word	0x24001580
 800aa48:	24001630 	.word	0x24001630
 800aa4c:	24001590 	.word	0x24001590
 800aa50:	0800b4ec 	.word	0x0800b4ec

0800aa54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	3b04      	subs	r3, #4
 800aa64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800aa6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	3b04      	subs	r3, #4
 800aa72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	f023 0201 	bic.w	r2, r3, #1
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	3b04      	subs	r3, #4
 800aa82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa84:	4a0c      	ldr	r2, [pc, #48]	@ (800aab8 <pxPortInitialiseStack+0x64>)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	3b14      	subs	r3, #20
 800aa8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	3b04      	subs	r3, #4
 800aa9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f06f 0202 	mvn.w	r2, #2
 800aaa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	3b20      	subs	r3, #32
 800aaa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	0800aabd 	.word	0x0800aabd

0800aabc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aac6:	4b13      	ldr	r3, [pc, #76]	@ (800ab14 <prvTaskExitError+0x58>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aace:	d00b      	beq.n	800aae8 <prvTaskExitError+0x2c>
	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	60fb      	str	r3, [r7, #12]
}
 800aae2:	bf00      	nop
 800aae4:	bf00      	nop
 800aae6:	e7fd      	b.n	800aae4 <prvTaskExitError+0x28>
	__asm volatile
 800aae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaec:	f383 8811 	msr	BASEPRI, r3
 800aaf0:	f3bf 8f6f 	isb	sy
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	60bb      	str	r3, [r7, #8]
}
 800aafa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aafc:	bf00      	nop
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d0fc      	beq.n	800aafe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab04:	bf00      	nop
 800ab06:	bf00      	nop
 800ab08:	3714      	adds	r7, #20
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	24000010 	.word	0x24000010
	...

0800ab20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab20:	4b07      	ldr	r3, [pc, #28]	@ (800ab40 <pxCurrentTCBConst2>)
 800ab22:	6819      	ldr	r1, [r3, #0]
 800ab24:	6808      	ldr	r0, [r1, #0]
 800ab26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2a:	f380 8809 	msr	PSP, r0
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	f04f 0000 	mov.w	r0, #0
 800ab36:	f380 8811 	msr	BASEPRI, r0
 800ab3a:	4770      	bx	lr
 800ab3c:	f3af 8000 	nop.w

0800ab40 <pxCurrentTCBConst2>:
 800ab40:	24001054 	.word	0x24001054
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab44:	bf00      	nop
 800ab46:	bf00      	nop

0800ab48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab48:	4808      	ldr	r0, [pc, #32]	@ (800ab6c <prvPortStartFirstTask+0x24>)
 800ab4a:	6800      	ldr	r0, [r0, #0]
 800ab4c:	6800      	ldr	r0, [r0, #0]
 800ab4e:	f380 8808 	msr	MSP, r0
 800ab52:	f04f 0000 	mov.w	r0, #0
 800ab56:	f380 8814 	msr	CONTROL, r0
 800ab5a:	b662      	cpsie	i
 800ab5c:	b661      	cpsie	f
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	f3bf 8f6f 	isb	sy
 800ab66:	df00      	svc	0
 800ab68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab6a:	bf00      	nop
 800ab6c:	e000ed08 	.word	0xe000ed08

0800ab70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b086      	sub	sp, #24
 800ab74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ab76:	4b47      	ldr	r3, [pc, #284]	@ (800ac94 <xPortStartScheduler+0x124>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a47      	ldr	r2, [pc, #284]	@ (800ac98 <xPortStartScheduler+0x128>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d10b      	bne.n	800ab98 <xPortStartScheduler+0x28>
	__asm volatile
 800ab80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	613b      	str	r3, [r7, #16]
}
 800ab92:	bf00      	nop
 800ab94:	bf00      	nop
 800ab96:	e7fd      	b.n	800ab94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ab98:	4b3e      	ldr	r3, [pc, #248]	@ (800ac94 <xPortStartScheduler+0x124>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a3f      	ldr	r2, [pc, #252]	@ (800ac9c <xPortStartScheduler+0x12c>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d10b      	bne.n	800abba <xPortStartScheduler+0x4a>
	__asm volatile
 800aba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba6:	f383 8811 	msr	BASEPRI, r3
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	60fb      	str	r3, [r7, #12]
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop
 800abb8:	e7fd      	b.n	800abb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800abba:	4b39      	ldr	r3, [pc, #228]	@ (800aca0 <xPortStartScheduler+0x130>)
 800abbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	22ff      	movs	r2, #255	@ 0xff
 800abca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800abd4:	78fb      	ldrb	r3, [r7, #3]
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800abdc:	b2da      	uxtb	r2, r3
 800abde:	4b31      	ldr	r3, [pc, #196]	@ (800aca4 <xPortStartScheduler+0x134>)
 800abe0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800abe2:	4b31      	ldr	r3, [pc, #196]	@ (800aca8 <xPortStartScheduler+0x138>)
 800abe4:	2207      	movs	r2, #7
 800abe6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abe8:	e009      	b.n	800abfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800abea:	4b2f      	ldr	r3, [pc, #188]	@ (800aca8 <xPortStartScheduler+0x138>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	3b01      	subs	r3, #1
 800abf0:	4a2d      	ldr	r2, [pc, #180]	@ (800aca8 <xPortStartScheduler+0x138>)
 800abf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800abf4:	78fb      	ldrb	r3, [r7, #3]
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	005b      	lsls	r3, r3, #1
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abfe:	78fb      	ldrb	r3, [r7, #3]
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac06:	2b80      	cmp	r3, #128	@ 0x80
 800ac08:	d0ef      	beq.n	800abea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac0a:	4b27      	ldr	r3, [pc, #156]	@ (800aca8 <xPortStartScheduler+0x138>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f1c3 0307 	rsb	r3, r3, #7
 800ac12:	2b04      	cmp	r3, #4
 800ac14:	d00b      	beq.n	800ac2e <xPortStartScheduler+0xbe>
	__asm volatile
 800ac16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac1a:	f383 8811 	msr	BASEPRI, r3
 800ac1e:	f3bf 8f6f 	isb	sy
 800ac22:	f3bf 8f4f 	dsb	sy
 800ac26:	60bb      	str	r3, [r7, #8]
}
 800ac28:	bf00      	nop
 800ac2a:	bf00      	nop
 800ac2c:	e7fd      	b.n	800ac2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac2e:	4b1e      	ldr	r3, [pc, #120]	@ (800aca8 <xPortStartScheduler+0x138>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	021b      	lsls	r3, r3, #8
 800ac34:	4a1c      	ldr	r2, [pc, #112]	@ (800aca8 <xPortStartScheduler+0x138>)
 800ac36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac38:	4b1b      	ldr	r3, [pc, #108]	@ (800aca8 <xPortStartScheduler+0x138>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ac40:	4a19      	ldr	r2, [pc, #100]	@ (800aca8 <xPortStartScheduler+0x138>)
 800ac42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac4c:	4b17      	ldr	r3, [pc, #92]	@ (800acac <xPortStartScheduler+0x13c>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a16      	ldr	r2, [pc, #88]	@ (800acac <xPortStartScheduler+0x13c>)
 800ac52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ac56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac58:	4b14      	ldr	r3, [pc, #80]	@ (800acac <xPortStartScheduler+0x13c>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a13      	ldr	r2, [pc, #76]	@ (800acac <xPortStartScheduler+0x13c>)
 800ac5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ac62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac64:	f000 f8da 	bl	800ae1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac68:	4b11      	ldr	r3, [pc, #68]	@ (800acb0 <xPortStartScheduler+0x140>)
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac6e:	f000 f8f9 	bl	800ae64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac72:	4b10      	ldr	r3, [pc, #64]	@ (800acb4 <xPortStartScheduler+0x144>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a0f      	ldr	r2, [pc, #60]	@ (800acb4 <xPortStartScheduler+0x144>)
 800ac78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ac7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac7e:	f7ff ff63 	bl	800ab48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac82:	f7ff f82d 	bl	8009ce0 <vTaskSwitchContext>
	prvTaskExitError();
 800ac86:	f7ff ff19 	bl	800aabc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3718      	adds	r7, #24
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	e000ed00 	.word	0xe000ed00
 800ac98:	410fc271 	.word	0x410fc271
 800ac9c:	410fc270 	.word	0x410fc270
 800aca0:	e000e400 	.word	0xe000e400
 800aca4:	24001680 	.word	0x24001680
 800aca8:	24001684 	.word	0x24001684
 800acac:	e000ed20 	.word	0xe000ed20
 800acb0:	24000010 	.word	0x24000010
 800acb4:	e000ef34 	.word	0xe000ef34

0800acb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	607b      	str	r3, [r7, #4]
}
 800acd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800acd2:	4b10      	ldr	r3, [pc, #64]	@ (800ad14 <vPortEnterCritical+0x5c>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	3301      	adds	r3, #1
 800acd8:	4a0e      	ldr	r2, [pc, #56]	@ (800ad14 <vPortEnterCritical+0x5c>)
 800acda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800acdc:	4b0d      	ldr	r3, [pc, #52]	@ (800ad14 <vPortEnterCritical+0x5c>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d110      	bne.n	800ad06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ace4:	4b0c      	ldr	r3, [pc, #48]	@ (800ad18 <vPortEnterCritical+0x60>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00b      	beq.n	800ad06 <vPortEnterCritical+0x4e>
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	603b      	str	r3, [r7, #0]
}
 800ad00:	bf00      	nop
 800ad02:	bf00      	nop
 800ad04:	e7fd      	b.n	800ad02 <vPortEnterCritical+0x4a>
	}
}
 800ad06:	bf00      	nop
 800ad08:	370c      	adds	r7, #12
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr
 800ad12:	bf00      	nop
 800ad14:	24000010 	.word	0x24000010
 800ad18:	e000ed04 	.word	0xe000ed04

0800ad1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad22:	4b12      	ldr	r3, [pc, #72]	@ (800ad6c <vPortExitCritical+0x50>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10b      	bne.n	800ad42 <vPortExitCritical+0x26>
	__asm volatile
 800ad2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad2e:	f383 8811 	msr	BASEPRI, r3
 800ad32:	f3bf 8f6f 	isb	sy
 800ad36:	f3bf 8f4f 	dsb	sy
 800ad3a:	607b      	str	r3, [r7, #4]
}
 800ad3c:	bf00      	nop
 800ad3e:	bf00      	nop
 800ad40:	e7fd      	b.n	800ad3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ad42:	4b0a      	ldr	r3, [pc, #40]	@ (800ad6c <vPortExitCritical+0x50>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	3b01      	subs	r3, #1
 800ad48:	4a08      	ldr	r2, [pc, #32]	@ (800ad6c <vPortExitCritical+0x50>)
 800ad4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad4c:	4b07      	ldr	r3, [pc, #28]	@ (800ad6c <vPortExitCritical+0x50>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d105      	bne.n	800ad60 <vPortExitCritical+0x44>
 800ad54:	2300      	movs	r3, #0
 800ad56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	f383 8811 	msr	BASEPRI, r3
}
 800ad5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad60:	bf00      	nop
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr
 800ad6c:	24000010 	.word	0x24000010

0800ad70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad70:	f3ef 8009 	mrs	r0, PSP
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	4b15      	ldr	r3, [pc, #84]	@ (800add0 <pxCurrentTCBConst>)
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	f01e 0f10 	tst.w	lr, #16
 800ad80:	bf08      	it	eq
 800ad82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8a:	6010      	str	r0, [r2, #0]
 800ad8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ad94:	f380 8811 	msr	BASEPRI, r0
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	f3bf 8f6f 	isb	sy
 800ada0:	f7fe ff9e 	bl	8009ce0 <vTaskSwitchContext>
 800ada4:	f04f 0000 	mov.w	r0, #0
 800ada8:	f380 8811 	msr	BASEPRI, r0
 800adac:	bc09      	pop	{r0, r3}
 800adae:	6819      	ldr	r1, [r3, #0]
 800adb0:	6808      	ldr	r0, [r1, #0]
 800adb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb6:	f01e 0f10 	tst.w	lr, #16
 800adba:	bf08      	it	eq
 800adbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800adc0:	f380 8809 	msr	PSP, r0
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop
 800adcc:	f3af 8000 	nop.w

0800add0 <pxCurrentTCBConst>:
 800add0:	24001054 	.word	0x24001054
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800add4:	bf00      	nop
 800add6:	bf00      	nop

0800add8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
	__asm volatile
 800adde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade2:	f383 8811 	msr	BASEPRI, r3
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	607b      	str	r3, [r7, #4]
}
 800adf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800adf2:	f7fe febb 	bl	8009b6c <xTaskIncrementTick>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d003      	beq.n	800ae04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800adfc:	4b06      	ldr	r3, [pc, #24]	@ (800ae18 <xPortSysTickHandler+0x40>)
 800adfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	2300      	movs	r3, #0
 800ae06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	f383 8811 	msr	BASEPRI, r3
}
 800ae0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae10:	bf00      	nop
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	e000ed04 	.word	0xe000ed04

0800ae1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae20:	4b0b      	ldr	r3, [pc, #44]	@ (800ae50 <vPortSetupTimerInterrupt+0x34>)
 800ae22:	2200      	movs	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae26:	4b0b      	ldr	r3, [pc, #44]	@ (800ae54 <vPortSetupTimerInterrupt+0x38>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ae58 <vPortSetupTimerInterrupt+0x3c>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a0a      	ldr	r2, [pc, #40]	@ (800ae5c <vPortSetupTimerInterrupt+0x40>)
 800ae32:	fba2 2303 	umull	r2, r3, r2, r3
 800ae36:	099b      	lsrs	r3, r3, #6
 800ae38:	4a09      	ldr	r2, [pc, #36]	@ (800ae60 <vPortSetupTimerInterrupt+0x44>)
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae3e:	4b04      	ldr	r3, [pc, #16]	@ (800ae50 <vPortSetupTimerInterrupt+0x34>)
 800ae40:	2207      	movs	r2, #7
 800ae42:	601a      	str	r2, [r3, #0]
}
 800ae44:	bf00      	nop
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	e000e010 	.word	0xe000e010
 800ae54:	e000e018 	.word	0xe000e018
 800ae58:	24000000 	.word	0x24000000
 800ae5c:	10624dd3 	.word	0x10624dd3
 800ae60:	e000e014 	.word	0xe000e014

0800ae64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ae74 <vPortEnableVFP+0x10>
 800ae68:	6801      	ldr	r1, [r0, #0]
 800ae6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ae6e:	6001      	str	r1, [r0, #0]
 800ae70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae72:	bf00      	nop
 800ae74:	e000ed88 	.word	0xe000ed88

0800ae78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae7e:	f3ef 8305 	mrs	r3, IPSR
 800ae82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2b0f      	cmp	r3, #15
 800ae88:	d915      	bls.n	800aeb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae8a:	4a18      	ldr	r2, [pc, #96]	@ (800aeec <vPortValidateInterruptPriority+0x74>)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	4413      	add	r3, r2
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae94:	4b16      	ldr	r3, [pc, #88]	@ (800aef0 <vPortValidateInterruptPriority+0x78>)
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	7afa      	ldrb	r2, [r7, #11]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d20b      	bcs.n	800aeb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	607b      	str	r3, [r7, #4]
}
 800aeb0:	bf00      	nop
 800aeb2:	bf00      	nop
 800aeb4:	e7fd      	b.n	800aeb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aeb6:	4b0f      	ldr	r3, [pc, #60]	@ (800aef4 <vPortValidateInterruptPriority+0x7c>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800aebe:	4b0e      	ldr	r3, [pc, #56]	@ (800aef8 <vPortValidateInterruptPriority+0x80>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d90b      	bls.n	800aede <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800aec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	603b      	str	r3, [r7, #0]
}
 800aed8:	bf00      	nop
 800aeda:	bf00      	nop
 800aedc:	e7fd      	b.n	800aeda <vPortValidateInterruptPriority+0x62>
	}
 800aede:	bf00      	nop
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	e000e3f0 	.word	0xe000e3f0
 800aef0:	24001680 	.word	0x24001680
 800aef4:	e000ed0c 	.word	0xe000ed0c
 800aef8:	24001684 	.word	0x24001684

0800aefc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b08a      	sub	sp, #40	@ 0x28
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af04:	2300      	movs	r3, #0
 800af06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af08:	f7fe fd74 	bl	80099f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af0c:	4b5c      	ldr	r3, [pc, #368]	@ (800b080 <pvPortMalloc+0x184>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af14:	f000 f924 	bl	800b160 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af18:	4b5a      	ldr	r3, [pc, #360]	@ (800b084 <pvPortMalloc+0x188>)
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4013      	ands	r3, r2
 800af20:	2b00      	cmp	r3, #0
 800af22:	f040 8095 	bne.w	800b050 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d01e      	beq.n	800af6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800af2c:	2208      	movs	r2, #8
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4413      	add	r3, r2
 800af32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f003 0307 	and.w	r3, r3, #7
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d015      	beq.n	800af6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f023 0307 	bic.w	r3, r3, #7
 800af44:	3308      	adds	r3, #8
 800af46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f003 0307 	and.w	r3, r3, #7
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00b      	beq.n	800af6a <pvPortMalloc+0x6e>
	__asm volatile
 800af52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af56:	f383 8811 	msr	BASEPRI, r3
 800af5a:	f3bf 8f6f 	isb	sy
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	617b      	str	r3, [r7, #20]
}
 800af64:	bf00      	nop
 800af66:	bf00      	nop
 800af68:	e7fd      	b.n	800af66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d06f      	beq.n	800b050 <pvPortMalloc+0x154>
 800af70:	4b45      	ldr	r3, [pc, #276]	@ (800b088 <pvPortMalloc+0x18c>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	429a      	cmp	r2, r3
 800af78:	d86a      	bhi.n	800b050 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af7a:	4b44      	ldr	r3, [pc, #272]	@ (800b08c <pvPortMalloc+0x190>)
 800af7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af7e:	4b43      	ldr	r3, [pc, #268]	@ (800b08c <pvPortMalloc+0x190>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af84:	e004      	b.n	800af90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800af86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	429a      	cmp	r2, r3
 800af98:	d903      	bls.n	800afa2 <pvPortMalloc+0xa6>
 800af9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1f1      	bne.n	800af86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800afa2:	4b37      	ldr	r3, [pc, #220]	@ (800b080 <pvPortMalloc+0x184>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d051      	beq.n	800b050 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800afac:	6a3b      	ldr	r3, [r7, #32]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2208      	movs	r2, #8
 800afb2:	4413      	add	r3, r2
 800afb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800afb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800afbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc0:	685a      	ldr	r2, [r3, #4]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	1ad2      	subs	r2, r2, r3
 800afc6:	2308      	movs	r3, #8
 800afc8:	005b      	lsls	r3, r3, #1
 800afca:	429a      	cmp	r2, r3
 800afcc:	d920      	bls.n	800b010 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800afce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4413      	add	r3, r2
 800afd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	f003 0307 	and.w	r3, r3, #7
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00b      	beq.n	800aff8 <pvPortMalloc+0xfc>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	613b      	str	r3, [r7, #16]
}
 800aff2:	bf00      	nop
 800aff4:	bf00      	nop
 800aff6:	e7fd      	b.n	800aff4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	1ad2      	subs	r2, r2, r3
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b00a:	69b8      	ldr	r0, [r7, #24]
 800b00c:	f000 f90a 	bl	800b224 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b010:	4b1d      	ldr	r3, [pc, #116]	@ (800b088 <pvPortMalloc+0x18c>)
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	4a1b      	ldr	r2, [pc, #108]	@ (800b088 <pvPortMalloc+0x18c>)
 800b01c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b01e:	4b1a      	ldr	r3, [pc, #104]	@ (800b088 <pvPortMalloc+0x18c>)
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	4b1b      	ldr	r3, [pc, #108]	@ (800b090 <pvPortMalloc+0x194>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	429a      	cmp	r2, r3
 800b028:	d203      	bcs.n	800b032 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b02a:	4b17      	ldr	r3, [pc, #92]	@ (800b088 <pvPortMalloc+0x18c>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a18      	ldr	r2, [pc, #96]	@ (800b090 <pvPortMalloc+0x194>)
 800b030:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b034:	685a      	ldr	r2, [r3, #4]
 800b036:	4b13      	ldr	r3, [pc, #76]	@ (800b084 <pvPortMalloc+0x188>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	431a      	orrs	r2, r3
 800b03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b03e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b042:	2200      	movs	r2, #0
 800b044:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b046:	4b13      	ldr	r3, [pc, #76]	@ (800b094 <pvPortMalloc+0x198>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	3301      	adds	r3, #1
 800b04c:	4a11      	ldr	r2, [pc, #68]	@ (800b094 <pvPortMalloc+0x198>)
 800b04e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b050:	f7fe fcde 	bl	8009a10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	f003 0307 	and.w	r3, r3, #7
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00b      	beq.n	800b076 <pvPortMalloc+0x17a>
	__asm volatile
 800b05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	60fb      	str	r3, [r7, #12]
}
 800b070:	bf00      	nop
 800b072:	bf00      	nop
 800b074:	e7fd      	b.n	800b072 <pvPortMalloc+0x176>
	return pvReturn;
 800b076:	69fb      	ldr	r3, [r7, #28]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3728      	adds	r7, #40	@ 0x28
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	24005290 	.word	0x24005290
 800b084:	240052a4 	.word	0x240052a4
 800b088:	24005294 	.word	0x24005294
 800b08c:	24005288 	.word	0x24005288
 800b090:	24005298 	.word	0x24005298
 800b094:	2400529c 	.word	0x2400529c

0800b098 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d04f      	beq.n	800b14a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b0aa:	2308      	movs	r3, #8
 800b0ac:	425b      	negs	r3, r3
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	685a      	ldr	r2, [r3, #4]
 800b0bc:	4b25      	ldr	r3, [pc, #148]	@ (800b154 <vPortFree+0xbc>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4013      	ands	r3, r2
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d10b      	bne.n	800b0de <vPortFree+0x46>
	__asm volatile
 800b0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ca:	f383 8811 	msr	BASEPRI, r3
 800b0ce:	f3bf 8f6f 	isb	sy
 800b0d2:	f3bf 8f4f 	dsb	sy
 800b0d6:	60fb      	str	r3, [r7, #12]
}
 800b0d8:	bf00      	nop
 800b0da:	bf00      	nop
 800b0dc:	e7fd      	b.n	800b0da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00b      	beq.n	800b0fe <vPortFree+0x66>
	__asm volatile
 800b0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ea:	f383 8811 	msr	BASEPRI, r3
 800b0ee:	f3bf 8f6f 	isb	sy
 800b0f2:	f3bf 8f4f 	dsb	sy
 800b0f6:	60bb      	str	r3, [r7, #8]
}
 800b0f8:	bf00      	nop
 800b0fa:	bf00      	nop
 800b0fc:	e7fd      	b.n	800b0fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	685a      	ldr	r2, [r3, #4]
 800b102:	4b14      	ldr	r3, [pc, #80]	@ (800b154 <vPortFree+0xbc>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4013      	ands	r3, r2
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d01e      	beq.n	800b14a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d11a      	bne.n	800b14a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	685a      	ldr	r2, [r3, #4]
 800b118:	4b0e      	ldr	r3, [pc, #56]	@ (800b154 <vPortFree+0xbc>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	43db      	mvns	r3, r3
 800b11e:	401a      	ands	r2, r3
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b124:	f7fe fc66 	bl	80099f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	685a      	ldr	r2, [r3, #4]
 800b12c:	4b0a      	ldr	r3, [pc, #40]	@ (800b158 <vPortFree+0xc0>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4413      	add	r3, r2
 800b132:	4a09      	ldr	r2, [pc, #36]	@ (800b158 <vPortFree+0xc0>)
 800b134:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b136:	6938      	ldr	r0, [r7, #16]
 800b138:	f000 f874 	bl	800b224 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b13c:	4b07      	ldr	r3, [pc, #28]	@ (800b15c <vPortFree+0xc4>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	3301      	adds	r3, #1
 800b142:	4a06      	ldr	r2, [pc, #24]	@ (800b15c <vPortFree+0xc4>)
 800b144:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b146:	f7fe fc63 	bl	8009a10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b14a:	bf00      	nop
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	240052a4 	.word	0x240052a4
 800b158:	24005294 	.word	0x24005294
 800b15c:	240052a0 	.word	0x240052a0

0800b160 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b166:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b16a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b16c:	4b27      	ldr	r3, [pc, #156]	@ (800b20c <prvHeapInit+0xac>)
 800b16e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f003 0307 	and.w	r3, r3, #7
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00c      	beq.n	800b194 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	3307      	adds	r3, #7
 800b17e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f023 0307 	bic.w	r3, r3, #7
 800b186:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	1ad3      	subs	r3, r2, r3
 800b18e:	4a1f      	ldr	r2, [pc, #124]	@ (800b20c <prvHeapInit+0xac>)
 800b190:	4413      	add	r3, r2
 800b192:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b198:	4a1d      	ldr	r2, [pc, #116]	@ (800b210 <prvHeapInit+0xb0>)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b19e:	4b1c      	ldr	r3, [pc, #112]	@ (800b210 <prvHeapInit+0xb0>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b1ac:	2208      	movs	r2, #8
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	1a9b      	subs	r3, r3, r2
 800b1b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f023 0307 	bic.w	r3, r3, #7
 800b1ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	4a15      	ldr	r2, [pc, #84]	@ (800b214 <prvHeapInit+0xb4>)
 800b1c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b1c2:	4b14      	ldr	r3, [pc, #80]	@ (800b214 <prvHeapInit+0xb4>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b1ca:	4b12      	ldr	r3, [pc, #72]	@ (800b214 <prvHeapInit+0xb4>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	1ad2      	subs	r2, r2, r3
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b1e0:	4b0c      	ldr	r3, [pc, #48]	@ (800b214 <prvHeapInit+0xb4>)
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	4a0a      	ldr	r2, [pc, #40]	@ (800b218 <prvHeapInit+0xb8>)
 800b1ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	4a09      	ldr	r2, [pc, #36]	@ (800b21c <prvHeapInit+0xbc>)
 800b1f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b1f8:	4b09      	ldr	r3, [pc, #36]	@ (800b220 <prvHeapInit+0xc0>)
 800b1fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b1fe:	601a      	str	r2, [r3, #0]
}
 800b200:	bf00      	nop
 800b202:	3714      	adds	r7, #20
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	24001688 	.word	0x24001688
 800b210:	24005288 	.word	0x24005288
 800b214:	24005290 	.word	0x24005290
 800b218:	24005298 	.word	0x24005298
 800b21c:	24005294 	.word	0x24005294
 800b220:	240052a4 	.word	0x240052a4

0800b224 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b22c:	4b28      	ldr	r3, [pc, #160]	@ (800b2d0 <prvInsertBlockIntoFreeList+0xac>)
 800b22e:	60fb      	str	r3, [r7, #12]
 800b230:	e002      	b.n	800b238 <prvInsertBlockIntoFreeList+0x14>
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	60fb      	str	r3, [r7, #12]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d8f7      	bhi.n	800b232 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	68ba      	ldr	r2, [r7, #8]
 800b24c:	4413      	add	r3, r2
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	429a      	cmp	r2, r3
 800b252:	d108      	bne.n	800b266 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	685a      	ldr	r2, [r3, #4]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	441a      	add	r2, r3
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	441a      	add	r2, r3
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	429a      	cmp	r2, r3
 800b278:	d118      	bne.n	800b2ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	4b15      	ldr	r3, [pc, #84]	@ (800b2d4 <prvInsertBlockIntoFreeList+0xb0>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	429a      	cmp	r2, r3
 800b284:	d00d      	beq.n	800b2a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	685a      	ldr	r2, [r3, #4]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	441a      	add	r2, r3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	601a      	str	r2, [r3, #0]
 800b2a0:	e008      	b.n	800b2b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b2a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b2d4 <prvInsertBlockIntoFreeList+0xb0>)
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	601a      	str	r2, [r3, #0]
 800b2aa:	e003      	b.n	800b2b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b2b4:	68fa      	ldr	r2, [r7, #12]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d002      	beq.n	800b2c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2c2:	bf00      	nop
 800b2c4:	3714      	adds	r7, #20
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop
 800b2d0:	24005288 	.word	0x24005288
 800b2d4:	24005290 	.word	0x24005290

0800b2d8 <memset>:
 800b2d8:	4402      	add	r2, r0
 800b2da:	4603      	mov	r3, r0
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d100      	bne.n	800b2e2 <memset+0xa>
 800b2e0:	4770      	bx	lr
 800b2e2:	f803 1b01 	strb.w	r1, [r3], #1
 800b2e6:	e7f9      	b.n	800b2dc <memset+0x4>

0800b2e8 <_reclaim_reent>:
 800b2e8:	4b29      	ldr	r3, [pc, #164]	@ (800b390 <_reclaim_reent+0xa8>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4283      	cmp	r3, r0
 800b2ee:	b570      	push	{r4, r5, r6, lr}
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	d04b      	beq.n	800b38c <_reclaim_reent+0xa4>
 800b2f4:	69c3      	ldr	r3, [r0, #28]
 800b2f6:	b1ab      	cbz	r3, 800b324 <_reclaim_reent+0x3c>
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	b16b      	cbz	r3, 800b318 <_reclaim_reent+0x30>
 800b2fc:	2500      	movs	r5, #0
 800b2fe:	69e3      	ldr	r3, [r4, #28]
 800b300:	68db      	ldr	r3, [r3, #12]
 800b302:	5959      	ldr	r1, [r3, r5]
 800b304:	2900      	cmp	r1, #0
 800b306:	d13b      	bne.n	800b380 <_reclaim_reent+0x98>
 800b308:	3504      	adds	r5, #4
 800b30a:	2d80      	cmp	r5, #128	@ 0x80
 800b30c:	d1f7      	bne.n	800b2fe <_reclaim_reent+0x16>
 800b30e:	69e3      	ldr	r3, [r4, #28]
 800b310:	4620      	mov	r0, r4
 800b312:	68d9      	ldr	r1, [r3, #12]
 800b314:	f000 f872 	bl	800b3fc <_free_r>
 800b318:	69e3      	ldr	r3, [r4, #28]
 800b31a:	6819      	ldr	r1, [r3, #0]
 800b31c:	b111      	cbz	r1, 800b324 <_reclaim_reent+0x3c>
 800b31e:	4620      	mov	r0, r4
 800b320:	f000 f86c 	bl	800b3fc <_free_r>
 800b324:	6961      	ldr	r1, [r4, #20]
 800b326:	b111      	cbz	r1, 800b32e <_reclaim_reent+0x46>
 800b328:	4620      	mov	r0, r4
 800b32a:	f000 f867 	bl	800b3fc <_free_r>
 800b32e:	69e1      	ldr	r1, [r4, #28]
 800b330:	b111      	cbz	r1, 800b338 <_reclaim_reent+0x50>
 800b332:	4620      	mov	r0, r4
 800b334:	f000 f862 	bl	800b3fc <_free_r>
 800b338:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b33a:	b111      	cbz	r1, 800b342 <_reclaim_reent+0x5a>
 800b33c:	4620      	mov	r0, r4
 800b33e:	f000 f85d 	bl	800b3fc <_free_r>
 800b342:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b344:	b111      	cbz	r1, 800b34c <_reclaim_reent+0x64>
 800b346:	4620      	mov	r0, r4
 800b348:	f000 f858 	bl	800b3fc <_free_r>
 800b34c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b34e:	b111      	cbz	r1, 800b356 <_reclaim_reent+0x6e>
 800b350:	4620      	mov	r0, r4
 800b352:	f000 f853 	bl	800b3fc <_free_r>
 800b356:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b358:	b111      	cbz	r1, 800b360 <_reclaim_reent+0x78>
 800b35a:	4620      	mov	r0, r4
 800b35c:	f000 f84e 	bl	800b3fc <_free_r>
 800b360:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b362:	b111      	cbz	r1, 800b36a <_reclaim_reent+0x82>
 800b364:	4620      	mov	r0, r4
 800b366:	f000 f849 	bl	800b3fc <_free_r>
 800b36a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b36c:	b111      	cbz	r1, 800b374 <_reclaim_reent+0x8c>
 800b36e:	4620      	mov	r0, r4
 800b370:	f000 f844 	bl	800b3fc <_free_r>
 800b374:	6a23      	ldr	r3, [r4, #32]
 800b376:	b14b      	cbz	r3, 800b38c <_reclaim_reent+0xa4>
 800b378:	4620      	mov	r0, r4
 800b37a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b37e:	4718      	bx	r3
 800b380:	680e      	ldr	r6, [r1, #0]
 800b382:	4620      	mov	r0, r4
 800b384:	f000 f83a 	bl	800b3fc <_free_r>
 800b388:	4631      	mov	r1, r6
 800b38a:	e7bb      	b.n	800b304 <_reclaim_reent+0x1c>
 800b38c:	bd70      	pop	{r4, r5, r6, pc}
 800b38e:	bf00      	nop
 800b390:	24000014 	.word	0x24000014

0800b394 <__libc_init_array>:
 800b394:	b570      	push	{r4, r5, r6, lr}
 800b396:	4d0d      	ldr	r5, [pc, #52]	@ (800b3cc <__libc_init_array+0x38>)
 800b398:	4c0d      	ldr	r4, [pc, #52]	@ (800b3d0 <__libc_init_array+0x3c>)
 800b39a:	1b64      	subs	r4, r4, r5
 800b39c:	10a4      	asrs	r4, r4, #2
 800b39e:	2600      	movs	r6, #0
 800b3a0:	42a6      	cmp	r6, r4
 800b3a2:	d109      	bne.n	800b3b8 <__libc_init_array+0x24>
 800b3a4:	4d0b      	ldr	r5, [pc, #44]	@ (800b3d4 <__libc_init_array+0x40>)
 800b3a6:	4c0c      	ldr	r4, [pc, #48]	@ (800b3d8 <__libc_init_array+0x44>)
 800b3a8:	f000 f87e 	bl	800b4a8 <_init>
 800b3ac:	1b64      	subs	r4, r4, r5
 800b3ae:	10a4      	asrs	r4, r4, #2
 800b3b0:	2600      	movs	r6, #0
 800b3b2:	42a6      	cmp	r6, r4
 800b3b4:	d105      	bne.n	800b3c2 <__libc_init_array+0x2e>
 800b3b6:	bd70      	pop	{r4, r5, r6, pc}
 800b3b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3bc:	4798      	blx	r3
 800b3be:	3601      	adds	r6, #1
 800b3c0:	e7ee      	b.n	800b3a0 <__libc_init_array+0xc>
 800b3c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3c6:	4798      	blx	r3
 800b3c8:	3601      	adds	r6, #1
 800b3ca:	e7f2      	b.n	800b3b2 <__libc_init_array+0x1e>
 800b3cc:	0800b57c 	.word	0x0800b57c
 800b3d0:	0800b57c 	.word	0x0800b57c
 800b3d4:	0800b57c 	.word	0x0800b57c
 800b3d8:	0800b580 	.word	0x0800b580

0800b3dc <__retarget_lock_acquire_recursive>:
 800b3dc:	4770      	bx	lr

0800b3de <__retarget_lock_release_recursive>:
 800b3de:	4770      	bx	lr

0800b3e0 <memcpy>:
 800b3e0:	440a      	add	r2, r1
 800b3e2:	4291      	cmp	r1, r2
 800b3e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3e8:	d100      	bne.n	800b3ec <memcpy+0xc>
 800b3ea:	4770      	bx	lr
 800b3ec:	b510      	push	{r4, lr}
 800b3ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3f6:	4291      	cmp	r1, r2
 800b3f8:	d1f9      	bne.n	800b3ee <memcpy+0xe>
 800b3fa:	bd10      	pop	{r4, pc}

0800b3fc <_free_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	4605      	mov	r5, r0
 800b400:	2900      	cmp	r1, #0
 800b402:	d041      	beq.n	800b488 <_free_r+0x8c>
 800b404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b408:	1f0c      	subs	r4, r1, #4
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	bfb8      	it	lt
 800b40e:	18e4      	addlt	r4, r4, r3
 800b410:	f000 f83e 	bl	800b490 <__malloc_lock>
 800b414:	4a1d      	ldr	r2, [pc, #116]	@ (800b48c <_free_r+0x90>)
 800b416:	6813      	ldr	r3, [r2, #0]
 800b418:	b933      	cbnz	r3, 800b428 <_free_r+0x2c>
 800b41a:	6063      	str	r3, [r4, #4]
 800b41c:	6014      	str	r4, [r2, #0]
 800b41e:	4628      	mov	r0, r5
 800b420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b424:	f000 b83a 	b.w	800b49c <__malloc_unlock>
 800b428:	42a3      	cmp	r3, r4
 800b42a:	d908      	bls.n	800b43e <_free_r+0x42>
 800b42c:	6820      	ldr	r0, [r4, #0]
 800b42e:	1821      	adds	r1, r4, r0
 800b430:	428b      	cmp	r3, r1
 800b432:	bf01      	itttt	eq
 800b434:	6819      	ldreq	r1, [r3, #0]
 800b436:	685b      	ldreq	r3, [r3, #4]
 800b438:	1809      	addeq	r1, r1, r0
 800b43a:	6021      	streq	r1, [r4, #0]
 800b43c:	e7ed      	b.n	800b41a <_free_r+0x1e>
 800b43e:	461a      	mov	r2, r3
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	b10b      	cbz	r3, 800b448 <_free_r+0x4c>
 800b444:	42a3      	cmp	r3, r4
 800b446:	d9fa      	bls.n	800b43e <_free_r+0x42>
 800b448:	6811      	ldr	r1, [r2, #0]
 800b44a:	1850      	adds	r0, r2, r1
 800b44c:	42a0      	cmp	r0, r4
 800b44e:	d10b      	bne.n	800b468 <_free_r+0x6c>
 800b450:	6820      	ldr	r0, [r4, #0]
 800b452:	4401      	add	r1, r0
 800b454:	1850      	adds	r0, r2, r1
 800b456:	4283      	cmp	r3, r0
 800b458:	6011      	str	r1, [r2, #0]
 800b45a:	d1e0      	bne.n	800b41e <_free_r+0x22>
 800b45c:	6818      	ldr	r0, [r3, #0]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	6053      	str	r3, [r2, #4]
 800b462:	4408      	add	r0, r1
 800b464:	6010      	str	r0, [r2, #0]
 800b466:	e7da      	b.n	800b41e <_free_r+0x22>
 800b468:	d902      	bls.n	800b470 <_free_r+0x74>
 800b46a:	230c      	movs	r3, #12
 800b46c:	602b      	str	r3, [r5, #0]
 800b46e:	e7d6      	b.n	800b41e <_free_r+0x22>
 800b470:	6820      	ldr	r0, [r4, #0]
 800b472:	1821      	adds	r1, r4, r0
 800b474:	428b      	cmp	r3, r1
 800b476:	bf04      	itt	eq
 800b478:	6819      	ldreq	r1, [r3, #0]
 800b47a:	685b      	ldreq	r3, [r3, #4]
 800b47c:	6063      	str	r3, [r4, #4]
 800b47e:	bf04      	itt	eq
 800b480:	1809      	addeq	r1, r1, r0
 800b482:	6021      	streq	r1, [r4, #0]
 800b484:	6054      	str	r4, [r2, #4]
 800b486:	e7ca      	b.n	800b41e <_free_r+0x22>
 800b488:	bd38      	pop	{r3, r4, r5, pc}
 800b48a:	bf00      	nop
 800b48c:	240053e4 	.word	0x240053e4

0800b490 <__malloc_lock>:
 800b490:	4801      	ldr	r0, [pc, #4]	@ (800b498 <__malloc_lock+0x8>)
 800b492:	f7ff bfa3 	b.w	800b3dc <__retarget_lock_acquire_recursive>
 800b496:	bf00      	nop
 800b498:	240053e0 	.word	0x240053e0

0800b49c <__malloc_unlock>:
 800b49c:	4801      	ldr	r0, [pc, #4]	@ (800b4a4 <__malloc_unlock+0x8>)
 800b49e:	f7ff bf9e 	b.w	800b3de <__retarget_lock_release_recursive>
 800b4a2:	bf00      	nop
 800b4a4:	240053e0 	.word	0x240053e0

0800b4a8 <_init>:
 800b4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4aa:	bf00      	nop
 800b4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ae:	bc08      	pop	{r3}
 800b4b0:	469e      	mov	lr, r3
 800b4b2:	4770      	bx	lr

0800b4b4 <_fini>:
 800b4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b6:	bf00      	nop
 800b4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ba:	bc08      	pop	{r3}
 800b4bc:	469e      	mov	lr, r3
 800b4be:	4770      	bx	lr
