
Stepper_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007924  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007bbc  08007bbc  00008bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007bf4  08007bf4  00008bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007bfc  08007bfc  00008bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007c00  08007c00  00008c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  08007c04  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  08007c18  00009014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  08007c78  00009074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  240000d4  08007cd8  000090d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240007a8  08007cd8  000097a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000090d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9e4  00000000  00000000  00009102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d81  00000000  00000000  00025ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  00028868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001063  00000000  00000000  00029d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038de2  00000000  00000000  0002adb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8ce  00000000  00000000  00063b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016c7b6  00000000  00000000  0007f463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ebc19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ae8  00000000  00000000  001ebc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001f1744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d4 	.word	0x240000d4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007ba4 	.word	0x08007ba4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d8 	.word	0x240000d8
 80002d4:	08007ba4 	.word	0x08007ba4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <accelerate>:
 #define ACCELERATION_STEP 1
 #define DECELERATION_STEP 1

 int current_speed = MIN_SPEED;

 void accelerate(int target_speed) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

	 //Porneste generarea de semnal PWM
	 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005d0:	2100      	movs	r1, #0
 80005d2:	4818      	ldr	r0, [pc, #96]	@ (8000634 <accelerate+0x6c>)
 80005d4:	f004 fe58 	bl	8005288 <HAL_TIM_PWM_Start>


	 while (current_speed < target_speed) {
 80005d8:	e021      	b.n	800061e <accelerate+0x56>

         current_speed += ACCELERATION_STEP;
 80005da:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <accelerate+0x70>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	4a15      	ldr	r2, [pc, #84]	@ (8000638 <accelerate+0x70>)
 80005e2:	6013      	str	r3, [r2, #0]

         if (current_speed > target_speed) {
 80005e4:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <accelerate+0x70>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	da02      	bge.n	80005f4 <accelerate+0x2c>
             current_speed = target_speed;
 80005ee:	4a12      	ldr	r2, [pc, #72]	@ (8000638 <accelerate+0x70>)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6013      	str	r3, [r2, #0]
         }

         //Actualizeaza ARR cu noua valoare (1000000 este frecventa ceasului folosita pentru pwm -64mhz cu prescalar de 64)
         __HAL_TIM_SET_AUTORELOAD(&htim3, (1000000 / current_speed) - 1);
 80005f4:	4b10      	ldr	r3, [pc, #64]	@ (8000638 <accelerate+0x70>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a10      	ldr	r2, [pc, #64]	@ (800063c <accelerate+0x74>)
 80005fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80005fe:	1e5a      	subs	r2, r3, #1
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <accelerate+0x6c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000606:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <accelerate+0x70>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a0c      	ldr	r2, [pc, #48]	@ (800063c <accelerate+0x74>)
 800060c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000610:	3b01      	subs	r3, #1
 8000612:	461a      	mov	r2, r3
 8000614:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <accelerate+0x6c>)
 8000616:	60da      	str	r2, [r3, #12]
         HAL_Delay(10);
 8000618:	200a      	movs	r0, #10
 800061a:	f000 fecb 	bl	80013b4 <HAL_Delay>
	 while (current_speed < target_speed) {
 800061e:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <accelerate+0x70>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	429a      	cmp	r2, r3
 8000626:	dcd8      	bgt.n	80005da <accelerate+0x12>
     }
 }
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	240001d8 	.word	0x240001d8
 8000638:	24000000 	.word	0x24000000
 800063c:	000f4240 	.word	0x000f4240

08000640 <decelerate_to_stop>:


 void decelerate_to_stop() {
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
     while (current_speed > MIN_SPEED) {
 8000644:	e020      	b.n	8000688 <decelerate_to_stop+0x48>

    	 current_speed -= DECELERATION_STEP;
 8000646:	4b15      	ldr	r3, [pc, #84]	@ (800069c <decelerate_to_stop+0x5c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3b01      	subs	r3, #1
 800064c:	4a13      	ldr	r2, [pc, #76]	@ (800069c <decelerate_to_stop+0x5c>)
 800064e:	6013      	str	r3, [r2, #0]

    	 if (current_speed < MIN_SPEED) {
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <decelerate_to_stop+0x5c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	dc02      	bgt.n	800065e <decelerate_to_stop+0x1e>
             current_speed = MIN_SPEED;
 8000658:	4b10      	ldr	r3, [pc, #64]	@ (800069c <decelerate_to_stop+0x5c>)
 800065a:	2210      	movs	r2, #16
 800065c:	601a      	str	r2, [r3, #0]
         }

         __HAL_TIM_SET_AUTORELOAD(&htim3, (1000000 / current_speed) - 1);
 800065e:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <decelerate_to_stop+0x5c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a0f      	ldr	r2, [pc, #60]	@ (80006a0 <decelerate_to_stop+0x60>)
 8000664:	fb92 f3f3 	sdiv	r3, r2, r3
 8000668:	1e5a      	subs	r2, r3, #1
 800066a:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <decelerate_to_stop+0x64>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <decelerate_to_stop+0x5c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0a      	ldr	r2, [pc, #40]	@ (80006a0 <decelerate_to_stop+0x60>)
 8000676:	fb92 f3f3 	sdiv	r3, r2, r3
 800067a:	3b01      	subs	r3, #1
 800067c:	461a      	mov	r2, r3
 800067e:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <decelerate_to_stop+0x64>)
 8000680:	60da      	str	r2, [r3, #12]
         HAL_Delay(10);
 8000682:	200a      	movs	r0, #10
 8000684:	f000 fe96 	bl	80013b4 <HAL_Delay>
     while (current_speed > MIN_SPEED) {
 8000688:	4b04      	ldr	r3, [pc, #16]	@ (800069c <decelerate_to_stop+0x5c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b10      	cmp	r3, #16
 800068e:	dcda      	bgt.n	8000646 <decelerate_to_stop+0x6>
     }
     HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1); //opreste generarea de semnal pwm(opreste motorul dar axul ramane liber)
 8000690:	2100      	movs	r1, #0
 8000692:	4804      	ldr	r0, [pc, #16]	@ (80006a4 <decelerate_to_stop+0x64>)
 8000694:	f004 ff06 	bl	80054a4 <HAL_TIM_PWM_Stop>
     //Aplicatia in cauza nu necesita mentinerea unui curent pe infasurarile bobinelor.

 }
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	24000000 	.word	0x24000000
 80006a0:	000f4240 	.word	0x000f4240
 80006a4:	240001d8 	.word	0x240001d8

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f000 fdf0 	bl	8001290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f828 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f000 f9ea 	bl	8000a8c <MX_GPIO_Init>
  MX_ETH_Init();
 80006b8:	f000 f8a4 	bl	8000804 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006bc:	f000 f968 	bl	8000990 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006c0:	f000 f9b2 	bl	8000a28 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80006c4:	f000 f8ea 	bl	800089c <MX_TIM3_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006c8:	2100      	movs	r1, #0
 80006ca:	480c      	ldr	r0, [pc, #48]	@ (80006fc <main+0x54>)
 80006cc:	f004 fddc 	bl	8005288 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2120      	movs	r1, #32
 80006d4:	480a      	ldr	r0, [pc, #40]	@ (8000700 <main+0x58>)
 80006d6:	f001 fd79 	bl	80021cc <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	          accelerate(MAX_SPEED);
 80006da:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 80006de:	f7ff ff73 	bl	80005c8 <accelerate>
	          HAL_Delay(1000); // Menține viteza țintă timp de 1 secundă
 80006e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006e6:	f000 fe65 	bl	80013b4 <HAL_Delay>

	          decelerate_to_stop();
 80006ea:	f7ff ffa9 	bl	8000640 <decelerate_to_stop>
	          HAL_Delay(1000); // Oprește motorul timp de 1 secundă
 80006ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006f2:	f000 fe5f 	bl	80013b4 <HAL_Delay>
	          accelerate(MAX_SPEED);
 80006f6:	bf00      	nop
 80006f8:	e7ef      	b.n	80006da <main+0x32>
 80006fa:	bf00      	nop
 80006fc:	240001d8 	.word	0x240001d8
 8000700:	58020000 	.word	0x58020000

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b09c      	sub	sp, #112	@ 0x70
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070e:	224c      	movs	r2, #76	@ 0x4c
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f007 fa19 	bl	8007b4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2220      	movs	r2, #32
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f007 fa13 	bl	8007b4a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000724:	2002      	movs	r0, #2
 8000726:	f001 fe9b 	bl	8002460 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b33      	ldr	r3, [pc, #204]	@ (80007fc <SystemClock_Config+0xf8>)
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	4a32      	ldr	r2, [pc, #200]	@ (80007fc <SystemClock_Config+0xf8>)
 8000734:	f023 0301 	bic.w	r3, r3, #1
 8000738:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800073a:	4b30      	ldr	r3, [pc, #192]	@ (80007fc <SystemClock_Config+0xf8>)
 800073c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b2e      	ldr	r3, [pc, #184]	@ (8000800 <SystemClock_Config+0xfc>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800074c:	4a2c      	ldr	r2, [pc, #176]	@ (8000800 <SystemClock_Config+0xfc>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b2a      	ldr	r3, [pc, #168]	@ (8000800 <SystemClock_Config+0xfc>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000760:	bf00      	nop
 8000762:	4b27      	ldr	r3, [pc, #156]	@ (8000800 <SystemClock_Config+0xfc>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800076a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800076e:	d1f8      	bne.n	8000762 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000770:	2303      	movs	r3, #3
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000778:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800077a:	2301      	movs	r3, #1
 800077c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077e:	2340      	movs	r3, #64	@ 0x40
 8000780:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	2302      	movs	r3, #2
 8000788:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800078e:	2318      	movs	r3, #24
 8000790:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000796:	2304      	movs	r3, #4
 8000798:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800079e:	230c      	movs	r3, #12
 80007a0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 fea0 	bl	80024f4 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007ba:	f000 fa57 	bl	8000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	233f      	movs	r3, #63	@ 0x3f
 80007c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007d2:	2340      	movs	r3, #64	@ 0x40
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2101      	movs	r1, #1
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fae0 	bl	8002da8 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80007ee:	f000 fa3d 	bl	8000c6c <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3770      	adds	r7, #112	@ 0x70
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	58000400 	.word	0x58000400
 8000800:	58024800 	.word	0x58024800

08000804 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000808:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <MX_ETH_Init+0x80>)
 800080a:	4a1f      	ldr	r2, [pc, #124]	@ (8000888 <MX_ETH_Init+0x84>)
 800080c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800080e:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <MX_ETH_Init+0x88>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000814:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <MX_ETH_Init+0x88>)
 8000816:	2280      	movs	r2, #128	@ 0x80
 8000818:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <MX_ETH_Init+0x88>)
 800081c:	22e1      	movs	r2, #225	@ 0xe1
 800081e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000820:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <MX_ETH_Init+0x88>)
 8000822:	2200      	movs	r2, #0
 8000824:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <MX_ETH_Init+0x88>)
 8000828:	2200      	movs	r2, #0
 800082a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800082c:	4b17      	ldr	r3, [pc, #92]	@ (800088c <MX_ETH_Init+0x88>)
 800082e:	2200      	movs	r2, #0
 8000830:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000832:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_ETH_Init+0x80>)
 8000834:	4a15      	ldr	r2, [pc, #84]	@ (800088c <MX_ETH_Init+0x88>)
 8000836:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_ETH_Init+0x80>)
 800083a:	2201      	movs	r2, #1
 800083c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_ETH_Init+0x80>)
 8000840:	4a13      	ldr	r2, [pc, #76]	@ (8000890 <MX_ETH_Init+0x8c>)
 8000842:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_ETH_Init+0x80>)
 8000846:	4a13      	ldr	r2, [pc, #76]	@ (8000894 <MX_ETH_Init+0x90>)
 8000848:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_ETH_Init+0x80>)
 800084c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000850:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000852:	480c      	ldr	r0, [pc, #48]	@ (8000884 <MX_ETH_Init+0x80>)
 8000854:	f000 fed6 	bl	8001604 <HAL_ETH_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800085e:	f000 fa05 	bl	8000c6c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000862:	2238      	movs	r2, #56	@ 0x38
 8000864:	2100      	movs	r1, #0
 8000866:	480c      	ldr	r0, [pc, #48]	@ (8000898 <MX_ETH_Init+0x94>)
 8000868:	f007 f96f 	bl	8007b4a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800086c:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <MX_ETH_Init+0x94>)
 800086e:	2221      	movs	r2, #33	@ 0x21
 8000870:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_ETH_Init+0x94>)
 8000874:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000878:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <MX_ETH_Init+0x94>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	24000128 	.word	0x24000128
 8000888:	40028000 	.word	0x40028000
 800088c:	2400079c 	.word	0x2400079c
 8000890:	24000074 	.word	0x24000074
 8000894:	24000014 	.word	0x24000014
 8000898:	240000f0 	.word	0x240000f0

0800089c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08e      	sub	sp, #56	@ 0x38
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008bc:	463b      	mov	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
 80008ca:	615a      	str	r2, [r3, #20]
 80008cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000988 <MX_TIM3_Init+0xec>)
 80008d0:	4a2e      	ldr	r2, [pc, #184]	@ (800098c <MX_TIM3_Init+0xf0>)
 80008d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80008d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000988 <MX_TIM3_Init+0xec>)
 80008d6:	223f      	movs	r2, #63	@ 0x3f
 80008d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008da:	4b2b      	ldr	r3, [pc, #172]	@ (8000988 <MX_TIM3_Init+0xec>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80008e0:	4b29      	ldr	r3, [pc, #164]	@ (8000988 <MX_TIM3_Init+0xec>)
 80008e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e8:	4b27      	ldr	r3, [pc, #156]	@ (8000988 <MX_TIM3_Init+0xec>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008ee:	4b26      	ldr	r3, [pc, #152]	@ (8000988 <MX_TIM3_Init+0xec>)
 80008f0:	2280      	movs	r2, #128	@ 0x80
 80008f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008f4:	4824      	ldr	r0, [pc, #144]	@ (8000988 <MX_TIM3_Init+0xec>)
 80008f6:	f004 fc0f 	bl	8005118 <HAL_TIM_Base_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000900:	f000 f9b4 	bl	8000c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000904:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800090a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800090e:	4619      	mov	r1, r3
 8000910:	481d      	ldr	r0, [pc, #116]	@ (8000988 <MX_TIM3_Init+0xec>)
 8000912:	f004 ff71 	bl	80057f8 <HAL_TIM_ConfigClockSource>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800091c:	f000 f9a6 	bl	8000c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000920:	4819      	ldr	r0, [pc, #100]	@ (8000988 <MX_TIM3_Init+0xec>)
 8000922:	f004 fc50 	bl	80051c6 <HAL_TIM_PWM_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800092c:	f000 f99e 	bl	8000c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4812      	ldr	r0, [pc, #72]	@ (8000988 <MX_TIM3_Init+0xec>)
 8000940:	f005 fc92 	bl	8006268 <HAL_TIMEx_MasterConfigSynchronization>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800094a:	f000 f98f 	bl	8000c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800094e:	2360      	movs	r3, #96	@ 0x60
 8000950:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = htim3.Init.Period / 2;
 8000952:	4b0d      	ldr	r3, [pc, #52]	@ (8000988 <MX_TIM3_Init+0xec>)
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	085b      	lsrs	r3, r3, #1
 8000958:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	2200      	movs	r2, #0
 8000966:	4619      	mov	r1, r3
 8000968:	4807      	ldr	r0, [pc, #28]	@ (8000988 <MX_TIM3_Init+0xec>)
 800096a:	f004 fe31 	bl	80055d0 <HAL_TIM_PWM_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8000974:	f000 f97a 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000978:	4803      	ldr	r0, [pc, #12]	@ (8000988 <MX_TIM3_Init+0xec>)
 800097a:	f000 fa87 	bl	8000e8c <HAL_TIM_MspPostInit>


}
 800097e:	bf00      	nop
 8000980:	3738      	adds	r7, #56	@ 0x38
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	240001d8 	.word	0x240001d8
 800098c:	40000400 	.word	0x40000400

08000990 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000994:	4b22      	ldr	r3, [pc, #136]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 8000996:	4a23      	ldr	r2, [pc, #140]	@ (8000a24 <MX_USART3_UART_Init+0x94>)
 8000998:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800099a:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009cc:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d2:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009d8:	4811      	ldr	r0, [pc, #68]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009da:	f005 fcd3 	bl	8006384 <HAL_UART_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009e4:	f000 f942 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e8:	2100      	movs	r1, #0
 80009ea:	480d      	ldr	r0, [pc, #52]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009ec:	f006 fcdb 	bl	80073a6 <HAL_UARTEx_SetTxFifoThreshold>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009f6:	f000 f939 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	4808      	ldr	r0, [pc, #32]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009fe:	f006 fd10 	bl	8007422 <HAL_UARTEx_SetRxFifoThreshold>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a08:	f000 f930 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 8000a0e:	f006 fc91 	bl	8007334 <HAL_UARTEx_DisableFifoMode>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a18:	f000 f928 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	24000224 	.word	0x24000224
 8000a24:	40004800 	.word	0x40004800

08000a28 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2e:	4a16      	ldr	r2, [pc, #88]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a30:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a32:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a34:	2209      	movs	r2, #9
 8000a36:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a68:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a70:	f001 fbc5 	bl	80021fe <HAL_PCD_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a7a:	f000 f8f7 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	240002b8 	.word	0x240002b8
 8000a88:	40080000 	.word	0x40080000

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	@ 0x30
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	4b6b      	ldr	r3, [pc, #428]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa8:	4a69      	ldr	r2, [pc, #420]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab2:	4b67      	ldr	r3, [pc, #412]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	61bb      	str	r3, [r7, #24]
 8000abe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac0:	4b63      	ldr	r3, [pc, #396]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac6:	4a62      	ldr	r2, [pc, #392]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000acc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad0:	4b5f      	ldr	r3, [pc, #380]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b5c      	ldr	r3, [pc, #368]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae4:	4a5a      	ldr	r2, [pc, #360]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aee:	4b58      	ldr	r3, [pc, #352]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afc:	4b54      	ldr	r3, [pc, #336]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b02:	4a53      	ldr	r2, [pc, #332]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0c:	4b50      	ldr	r3, [pc, #320]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1a:	4b4d      	ldr	r3, [pc, #308]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b20:	4a4b      	ldr	r2, [pc, #300]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2a:	4b49      	ldr	r3, [pc, #292]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b30:	f003 0308 	and.w	r3, r3, #8
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b38:	4b45      	ldr	r3, [pc, #276]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3e:	4a44      	ldr	r2, [pc, #272]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000b40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b48:	4b41      	ldr	r3, [pc, #260]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b56:	4b3e      	ldr	r3, [pc, #248]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	4a3c      	ldr	r2, [pc, #240]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b66:	4b3a      	ldr	r3, [pc, #232]	@ (8000c50 <MX_GPIO_Init+0x1c4>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2120      	movs	r1, #32
 8000b78:	4836      	ldr	r0, [pc, #216]	@ (8000c54 <MX_GPIO_Init+0x1c8>)
 8000b7a:	f001 fb27 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b84:	4834      	ldr	r0, [pc, #208]	@ (8000c58 <MX_GPIO_Init+0x1cc>)
 8000b86:	f001 fb21 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b90:	4832      	ldr	r0, [pc, #200]	@ (8000c5c <MX_GPIO_Init+0x1d0>)
 8000b92:	f001 fb1b 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2102      	movs	r1, #2
 8000b9a:	4831      	ldr	r0, [pc, #196]	@ (8000c60 <MX_GPIO_Init+0x1d4>)
 8000b9c:	f001 fb16 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	482b      	ldr	r0, [pc, #172]	@ (8000c64 <MX_GPIO_Init+0x1d8>)
 8000bb6:	f001 f959 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bba:	2320      	movs	r3, #32
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4820      	ldr	r0, [pc, #128]	@ (8000c54 <MX_GPIO_Init+0x1c8>)
 8000bd2:	f001 f94b 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bd6:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	481a      	ldr	r0, [pc, #104]	@ (8000c58 <MX_GPIO_Init+0x1cc>)
 8000bf0:	f001 f93c 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000bf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4813      	ldr	r0, [pc, #76]	@ (8000c5c <MX_GPIO_Init+0x1d0>)
 8000c0e:	f001 f92d 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c12:	2380      	movs	r3, #128	@ 0x80
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c16:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4619      	mov	r1, r3
 8000c26:	4810      	ldr	r0, [pc, #64]	@ (8000c68 <MX_GPIO_Init+0x1dc>)
 8000c28:	f001 f920 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	4807      	ldr	r0, [pc, #28]	@ (8000c60 <MX_GPIO_Init+0x1d4>)
 8000c44:	f001 f912 	bl	8001e6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c48:	bf00      	nop
 8000c4a:	3730      	adds	r7, #48	@ 0x30
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	58024400 	.word	0x58024400
 8000c54:	58020000 	.word	0x58020000
 8000c58:	58020400 	.word	0x58020400
 8000c5c:	58020c00 	.word	0x58020c00
 8000c60:	58021000 	.word	0x58021000
 8000c64:	58020800 	.word	0x58020800
 8000c68:	58021800 	.word	0x58021800

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <Error_Handler+0x8>

08000c78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <HAL_MspInit+0x30>)
 8000c80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c84:	4a08      	ldr	r2, [pc, #32]	@ (8000ca8 <HAL_MspInit+0x30>)
 8000c86:	f043 0302 	orr.w	r3, r3, #2
 8000c8a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_MspInit+0x30>)
 8000c90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	58024400 	.word	0x58024400

08000cac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08e      	sub	sp, #56	@ 0x38
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a59      	ldr	r2, [pc, #356]	@ (8000e30 <HAL_ETH_MspInit+0x184>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	f040 80ab 	bne.w	8000e26 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000cd0:	4b58      	ldr	r3, [pc, #352]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000cd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cd6:	4a57      	ldr	r2, [pc, #348]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000cd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cdc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ce0:	4b54      	ldr	r3, [pc, #336]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000ce2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ce6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cea:	623b      	str	r3, [r7, #32]
 8000cec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000cee:	4b51      	ldr	r3, [pc, #324]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cf4:	4a4f      	ldr	r2, [pc, #316]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cfe:	4b4d      	ldr	r3, [pc, #308]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d0c:	4b49      	ldr	r3, [pc, #292]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d12:	4a48      	ldr	r2, [pc, #288]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d18:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d1c:	4b45      	ldr	r3, [pc, #276]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d26:	61bb      	str	r3, [r7, #24]
 8000d28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	4b42      	ldr	r3, [pc, #264]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d30:	4a40      	ldr	r2, [pc, #256]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	4b3a      	ldr	r3, [pc, #232]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	4a39      	ldr	r2, [pc, #228]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d58:	4b36      	ldr	r3, [pc, #216]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	4b33      	ldr	r3, [pc, #204]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6c:	4a31      	ldr	r2, [pc, #196]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d76:	4b2f      	ldr	r3, [pc, #188]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d84:	4b2b      	ldr	r3, [pc, #172]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8a:	4a2a      	ldr	r2, [pc, #168]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d94:	4b27      	ldr	r3, [pc, #156]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000da2:	2332      	movs	r3, #50	@ 0x32
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db2:	230b      	movs	r3, #11
 8000db4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dba:	4619      	mov	r1, r3
 8000dbc:	481e      	ldr	r0, [pc, #120]	@ (8000e38 <HAL_ETH_MspInit+0x18c>)
 8000dbe:	f001 f855 	bl	8001e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000dc2:	2386      	movs	r3, #134	@ 0x86
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd2:	230b      	movs	r3, #11
 8000dd4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4817      	ldr	r0, [pc, #92]	@ (8000e3c <HAL_ETH_MspInit+0x190>)
 8000dde:	f001 f845 	bl	8001e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000de2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df4:	230b      	movs	r3, #11
 8000df6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4810      	ldr	r0, [pc, #64]	@ (8000e40 <HAL_ETH_MspInit+0x194>)
 8000e00:	f001 f834 	bl	8001e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e04:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e16:	230b      	movs	r3, #11
 8000e18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4808      	ldr	r0, [pc, #32]	@ (8000e44 <HAL_ETH_MspInit+0x198>)
 8000e22:	f001 f823 	bl	8001e6c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000e26:	bf00      	nop
 8000e28:	3738      	adds	r7, #56	@ 0x38
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40028000 	.word	0x40028000
 8000e34:	58024400 	.word	0x58024400
 8000e38:	58020800 	.word	0x58020800
 8000e3c:	58020000 	.word	0x58020000
 8000e40:	58020400 	.word	0x58020400
 8000e44:	58021800 	.word	0x58021800

08000e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0b      	ldr	r2, [pc, #44]	@ (8000e84 <HAL_TIM_Base_MspInit+0x3c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d10e      	bne.n	8000e78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <HAL_TIM_Base_MspInit+0x40>)
 8000e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e60:	4a09      	ldr	r2, [pc, #36]	@ (8000e88 <HAL_TIM_Base_MspInit+0x40>)
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e6a:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <HAL_TIM_Base_MspInit+0x40>)
 8000e6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	40000400 	.word	0x40000400
 8000e88:	58024400 	.word	0x58024400

08000e8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a12      	ldr	r2, [pc, #72]	@ (8000ef4 <HAL_TIM_MspPostInit+0x68>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d11e      	bne.n	8000eec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_TIM_MspPostInit+0x6c>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb4:	4a10      	ldr	r2, [pc, #64]	@ (8000ef8 <HAL_TIM_MspPostInit+0x6c>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_TIM_MspPostInit+0x6c>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ecc:	2340      	movs	r3, #64	@ 0x40
 8000ece:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4805      	ldr	r0, [pc, #20]	@ (8000efc <HAL_TIM_MspPostInit+0x70>)
 8000ee8:	f000 ffc0 	bl	8001e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000eec:	bf00      	nop
 8000eee:	3720      	adds	r7, #32
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40000400 	.word	0x40000400
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	58020000 	.word	0x58020000

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0ba      	sub	sp, #232	@ 0xe8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	22c0      	movs	r2, #192	@ 0xc0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f006 fe12 	bl	8007b4a <memset>
  if(huart->Instance==USART3)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a27      	ldr	r2, [pc, #156]	@ (8000fc8 <HAL_UART_MspInit+0xc8>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d146      	bne.n	8000fbe <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f30:	f04f 0202 	mov.w	r2, #2
 8000f34:	f04f 0300 	mov.w	r3, #0
 8000f38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f42:	f107 0310 	add.w	r3, r7, #16
 8000f46:	4618      	mov	r0, r3
 8000f48:	f002 faba 	bl	80034c0 <HAL_RCCEx_PeriphCLKConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f52:	f7ff fe8b 	bl	8000c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f56:	4b1d      	ldr	r3, [pc, #116]	@ (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f62:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f66:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f74:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7a:	4a14      	ldr	r2, [pc, #80]	@ (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f84:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fac:	2307      	movs	r3, #7
 8000fae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <HAL_UART_MspInit+0xd0>)
 8000fba:	f000 ff57 	bl	8001e6c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000fbe:	bf00      	nop
 8000fc0:	37e8      	adds	r7, #232	@ 0xe8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40004800 	.word	0x40004800
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	58020c00 	.word	0x58020c00

08000fd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b0ba      	sub	sp, #232	@ 0xe8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	22c0      	movs	r2, #192	@ 0xc0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f006 fda8 	bl	8007b4a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a30      	ldr	r2, [pc, #192]	@ (80010c0 <HAL_PCD_MspInit+0xec>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d159      	bne.n	80010b8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001004:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001010:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4618      	mov	r0, r3
 800101e:	f002 fa4f 	bl	80034c0 <HAL_RCCEx_PeriphCLKConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001028:	f7ff fe20 	bl	8000c6c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800102c:	f001 fa52 	bl	80024d4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	4b24      	ldr	r3, [pc, #144]	@ (80010c4 <HAL_PCD_MspInit+0xf0>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001036:	4a23      	ldr	r2, [pc, #140]	@ (80010c4 <HAL_PCD_MspInit+0xf0>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001040:	4b20      	ldr	r3, [pc, #128]	@ (80010c4 <HAL_PCD_MspInit+0xf0>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800104e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001052:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001068:	230a      	movs	r3, #10
 800106a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001072:	4619      	mov	r1, r3
 8001074:	4814      	ldr	r0, [pc, #80]	@ (80010c8 <HAL_PCD_MspInit+0xf4>)
 8001076:	f000 fef9 	bl	8001e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800107a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800107e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001092:	4619      	mov	r1, r3
 8001094:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <HAL_PCD_MspInit+0xf4>)
 8001096:	f000 fee9 	bl	8001e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_PCD_MspInit+0xf0>)
 800109c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010a0:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <HAL_PCD_MspInit+0xf0>)
 80010a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80010a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_PCD_MspInit+0xf0>)
 80010ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80010b8:	bf00      	nop
 80010ba:	37e8      	adds	r7, #232	@ 0xe8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40080000 	.word	0x40080000
 80010c4:	58024400 	.word	0x58024400
 80010c8:	58020000 	.word	0x58020000

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <NMI_Handler+0x4>

080010d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <HardFault_Handler+0x4>

080010dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <MemManage_Handler+0x4>

080010e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <BusFault_Handler+0x4>

080010ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <UsageFault_Handler+0x4>

080010f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001122:	f000 f927 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001130:	4b37      	ldr	r3, [pc, #220]	@ (8001210 <SystemInit+0xe4>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001136:	4a36      	ldr	r2, [pc, #216]	@ (8001210 <SystemInit+0xe4>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001140:	4b34      	ldr	r3, [pc, #208]	@ (8001214 <SystemInit+0xe8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	2b06      	cmp	r3, #6
 800114a:	d807      	bhi.n	800115c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800114c:	4b31      	ldr	r3, [pc, #196]	@ (8001214 <SystemInit+0xe8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f023 030f 	bic.w	r3, r3, #15
 8001154:	4a2f      	ldr	r2, [pc, #188]	@ (8001214 <SystemInit+0xe8>)
 8001156:	f043 0307 	orr.w	r3, r3, #7
 800115a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800115c:	4b2e      	ldr	r3, [pc, #184]	@ (8001218 <SystemInit+0xec>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a2d      	ldr	r2, [pc, #180]	@ (8001218 <SystemInit+0xec>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001168:	4b2b      	ldr	r3, [pc, #172]	@ (8001218 <SystemInit+0xec>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800116e:	4b2a      	ldr	r3, [pc, #168]	@ (8001218 <SystemInit+0xec>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4929      	ldr	r1, [pc, #164]	@ (8001218 <SystemInit+0xec>)
 8001174:	4b29      	ldr	r3, [pc, #164]	@ (800121c <SystemInit+0xf0>)
 8001176:	4013      	ands	r3, r2
 8001178:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800117a:	4b26      	ldr	r3, [pc, #152]	@ (8001214 <SystemInit+0xe8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b00      	cmp	r3, #0
 8001184:	d007      	beq.n	8001196 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001186:	4b23      	ldr	r3, [pc, #140]	@ (8001214 <SystemInit+0xe8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f023 030f 	bic.w	r3, r3, #15
 800118e:	4a21      	ldr	r2, [pc, #132]	@ (8001214 <SystemInit+0xe8>)
 8001190:	f043 0307 	orr.w	r3, r3, #7
 8001194:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001196:	4b20      	ldr	r3, [pc, #128]	@ (8001218 <SystemInit+0xec>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800119c:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <SystemInit+0xec>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001218 <SystemInit+0xec>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <SystemInit+0xec>)
 80011aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001220 <SystemInit+0xf4>)
 80011ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001218 <SystemInit+0xec>)
 80011b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001224 <SystemInit+0xf8>)
 80011b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011b4:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <SystemInit+0xec>)
 80011b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001228 <SystemInit+0xfc>)
 80011b8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011ba:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <SystemInit+0xec>)
 80011bc:	2200      	movs	r2, #0
 80011be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <SystemInit+0xec>)
 80011c2:	4a19      	ldr	r2, [pc, #100]	@ (8001228 <SystemInit+0xfc>)
 80011c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011c6:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <SystemInit+0xec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <SystemInit+0xec>)
 80011ce:	4a16      	ldr	r2, [pc, #88]	@ (8001228 <SystemInit+0xfc>)
 80011d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <SystemInit+0xec>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <SystemInit+0xec>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001218 <SystemInit+0xec>)
 80011de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <SystemInit+0xec>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <SystemInit+0x100>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <SystemInit+0x104>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011f6:	d202      	bcs.n	80011fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <SystemInit+0x108>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <SystemInit+0x10c>)
 8001200:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001204:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00
 8001214:	52002000 	.word	0x52002000
 8001218:	58024400 	.word	0x58024400
 800121c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001220:	02020200 	.word	0x02020200
 8001224:	01ff0000 	.word	0x01ff0000
 8001228:	01010280 	.word	0x01010280
 800122c:	5c001000 	.word	0x5c001000
 8001230:	ffff0000 	.word	0xffff0000
 8001234:	51008108 	.word	0x51008108
 8001238:	52004000 	.word	0x52004000

0800123c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800123c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001274 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001240:	f7ff ff74 	bl	800112c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001244:	480c      	ldr	r0, [pc, #48]	@ (8001278 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001246:	490d      	ldr	r1, [pc, #52]	@ (800127c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001248:	4a0d      	ldr	r2, [pc, #52]	@ (8001280 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800125c:	4c0a      	ldr	r4, [pc, #40]	@ (8001288 <LoopFillZerobss+0x22>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126a:	f006 fc77 	bl	8007b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126e:	f7ff fa1b 	bl	80006a8 <main>
  bx  lr
 8001272:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001274:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001278:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800127c:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001280:	08007c04 	.word	0x08007c04
  ldr r2, =_sbss
 8001284:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 8001288:	240007a8 	.word	0x240007a8

0800128c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC3_IRQHandler>
	...

08001290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001296:	2003      	movs	r0, #3
 8001298:	f000 f982 	bl	80015a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800129c:	f001 ff3a 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80012a0:	4602      	mov	r2, r0
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <HAL_Init+0x68>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	0a1b      	lsrs	r3, r3, #8
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	4913      	ldr	r1, [pc, #76]	@ (80012fc <HAL_Init+0x6c>)
 80012ae:	5ccb      	ldrb	r3, [r1, r3]
 80012b0:	f003 031f 	and.w	r3, r3, #31
 80012b4:	fa22 f303 	lsr.w	r3, r2, r3
 80012b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012ba:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <HAL_Init+0x68>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	4a0e      	ldr	r2, [pc, #56]	@ (80012fc <HAL_Init+0x6c>)
 80012c4:	5cd3      	ldrb	r3, [r2, r3]
 80012c6:	f003 031f 	and.w	r3, r3, #31
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
 80012d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001300 <HAL_Init+0x70>)
 80012d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <HAL_Init+0x74>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 f814 	bl	8001308 <HAL_InitTick>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e002      	b.n	80012f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012ea:	f7ff fcc5 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	58024400 	.word	0x58024400
 80012fc:	08007bbc 	.word	0x08007bbc
 8001300:	24000008 	.word	0x24000008
 8001304:	24000004 	.word	0x24000004

08001308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001310:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <HAL_InitTick+0x60>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e021      	b.n	8001360 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800131c:	4b13      	ldr	r3, [pc, #76]	@ (800136c <HAL_InitTick+0x64>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <HAL_InitTick+0x60>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800132a:	fbb3 f3f1 	udiv	r3, r3, r1
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f959 	bl	80015ea <HAL_SYSTICK_Config>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00e      	b.n	8001360 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d80a      	bhi.n	800135e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001348:	2200      	movs	r2, #0
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f000 f931 	bl	80015b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001354:	4a06      	ldr	r2, [pc, #24]	@ (8001370 <HAL_InitTick+0x68>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	24000010 	.word	0x24000010
 800136c:	24000004 	.word	0x24000004
 8001370:	2400000c 	.word	0x2400000c

08001374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <HAL_IncTick+0x20>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_IncTick+0x24>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a04      	ldr	r2, [pc, #16]	@ (8001398 <HAL_IncTick+0x24>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	24000010 	.word	0x24000010
 8001398:	240007a4 	.word	0x240007a4

0800139c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b03      	ldr	r3, [pc, #12]	@ (80013b0 <HAL_GetTick+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	240007a4 	.word	0x240007a4

080013b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013bc:	f7ff ffee 	bl	800139c <HAL_GetTick>
 80013c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d005      	beq.n	80013da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ce:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <HAL_Delay+0x44>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013da:	bf00      	nop
 80013dc:	f7ff ffde 	bl	800139c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d8f7      	bhi.n	80013dc <HAL_Delay+0x28>
  {
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	24000010 	.word	0x24000010

080013fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001400:	4b03      	ldr	r3, [pc, #12]	@ (8001410 <HAL_GetREVID+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	0c1b      	lsrs	r3, r3, #16
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	5c001000 	.word	0x5c001000

08001414 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001424:	4904      	ldr	r1, [pc, #16]	@ (8001438 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4313      	orrs	r3, r2
 800142a:	604b      	str	r3, [r1, #4]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	58000400 	.word	0x58000400

0800143c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800144c:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <__NVIC_SetPriorityGrouping+0x40>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001458:	4013      	ands	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 8001466:	4313      	orrs	r3, r2
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	@ (800147c <__NVIC_SetPriorityGrouping+0x40>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00
 8001480:	05fa0000 	.word	0x05fa0000

08001484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001488:	4b04      	ldr	r3, [pc, #16]	@ (800149c <__NVIC_GetPriorityGrouping+0x18>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	0a1b      	lsrs	r3, r3, #8
 800148e:	f003 0307 	and.w	r3, r3, #7
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db0a      	blt.n	80014ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	490c      	ldr	r1, [pc, #48]	@ (80014ec <__NVIC_SetPriority+0x4c>)
 80014ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c8:	e00a      	b.n	80014e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4908      	ldr	r1, [pc, #32]	@ (80014f0 <__NVIC_SetPriority+0x50>)
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	3b04      	subs	r3, #4
 80014d8:	0112      	lsls	r2, r2, #4
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	440b      	add	r3, r1
 80014de:	761a      	strb	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000e100 	.word	0xe000e100
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	@ 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f1c3 0307 	rsb	r3, r3, #7
 800150e:	2b04      	cmp	r3, #4
 8001510:	bf28      	it	cs
 8001512:	2304      	movcs	r3, #4
 8001514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	2b06      	cmp	r3, #6
 800151c:	d902      	bls.n	8001524 <NVIC_EncodePriority+0x30>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3b03      	subs	r3, #3
 8001522:	e000      	b.n	8001526 <NVIC_EncodePriority+0x32>
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	f04f 32ff 	mov.w	r2, #4294967295
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	401a      	ands	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800153c:	f04f 31ff 	mov.w	r1, #4294967295
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43d9      	mvns	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	4313      	orrs	r3, r2
         );
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	@ 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800156c:	d301      	bcc.n	8001572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156e:	2301      	movs	r3, #1
 8001570:	e00f      	b.n	8001592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001572:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <SysTick_Config+0x40>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157a:	210f      	movs	r1, #15
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	f7ff ff8e 	bl	80014a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <SysTick_Config+0x40>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158a:	4b04      	ldr	r3, [pc, #16]	@ (800159c <SysTick_Config+0x40>)
 800158c:	2207      	movs	r2, #7
 800158e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	e000e010 	.word	0xe000e010

080015a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff47 	bl	800143c <__NVIC_SetPriorityGrouping>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015c4:	f7ff ff5e 	bl	8001484 <__NVIC_GetPriorityGrouping>
 80015c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f7ff ff90 	bl	80014f4 <NVIC_EncodePriority>
 80015d4:	4602      	mov	r2, r0
 80015d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff5f 	bl	80014a0 <__NVIC_SetPriority>
}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ffb2 	bl	800155c <SysTick_Config>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e0e3      	b.n	80017de <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800161c:	2b00      	cmp	r3, #0
 800161e:	d106      	bne.n	800162e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2223      	movs	r2, #35	@ 0x23
 8001624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff fb3f 	bl	8000cac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	4b6e      	ldr	r3, [pc, #440]	@ (80017e8 <HAL_ETH_Init+0x1e4>)
 8001630:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001634:	4a6c      	ldr	r2, [pc, #432]	@ (80017e8 <HAL_ETH_Init+0x1e4>)
 8001636:	f043 0302 	orr.w	r3, r3, #2
 800163a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800163e:	4b6a      	ldr	r3, [pc, #424]	@ (80017e8 <HAL_ETH_Init+0x1e4>)
 8001640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7a1b      	ldrb	r3, [r3, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d103      	bne.n	800165c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff fedd 	bl	8001414 <HAL_SYSCFG_ETHInterfaceSelect>
 800165a:	e003      	b.n	8001664 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800165c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001660:	f7ff fed8 	bl	8001414 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001664:	4b61      	ldr	r3, [pc, #388]	@ (80017ec <HAL_ETH_Init+0x1e8>)
 8001666:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6812      	ldr	r2, [r2, #0]
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800167e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001680:	f7ff fe8c 	bl	800139c <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001686:	e011      	b.n	80016ac <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001688:	f7ff fe88 	bl	800139c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001696:	d909      	bls.n	80016ac <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2204      	movs	r2, #4
 800169c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	22e0      	movs	r2, #224	@ 0xe0
 80016a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e098      	b.n	80017de <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1e4      	bne.n	8001688 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f89e 	bl	8001800 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80016c4:	f001 fea0 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4a49      	ldr	r2, [pc, #292]	@ (80017f0 <HAL_ETH_Init+0x1ec>)
 80016cc:	fba2 2303 	umull	r2, r3, r2, r3
 80016d0:	0c9a      	lsrs	r2, r3, #18
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	3a01      	subs	r2, #1
 80016d8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 fa81 	bl	8001be4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80016ee:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016fe:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d009      	beq.n	8001722 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	22e0      	movs	r2, #224	@ 0xe0
 800171a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e05d      	b.n	80017de <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800172a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800172e:	4b31      	ldr	r3, [pc, #196]	@ (80017f4 <HAL_ETH_Init+0x1f0>)
 8001730:	4013      	ands	r3, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6952      	ldr	r2, [r2, #20]
 8001736:	0051      	lsls	r1, r2, #1
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	430b      	orrs	r3, r1
 800173e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001742:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fae9 	bl	8001d1e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fb2f 	bl	8001db0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	3305      	adds	r3, #5
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	021a      	lsls	r2, r3, #8
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	3304      	adds	r3, #4
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	3303      	adds	r3, #3
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	061a      	lsls	r2, r3, #24
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	3302      	adds	r3, #2
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	041b      	lsls	r3, r3, #16
 8001784:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	3301      	adds	r3, #1
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001790:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800179e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017a0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <HAL_ETH_Init+0x1f4>)
 80017b2:	430b      	orrs	r3, r1
 80017b4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b0d      	ldr	r3, [pc, #52]	@ (80017fc <HAL_ETH_Init+0x1f8>)
 80017c6:	430b      	orrs	r3, r1
 80017c8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2210      	movs	r2, #16
 80017d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	58024400 	.word	0x58024400
 80017ec:	58000400 	.word	0x58000400
 80017f0:	431bde83 	.word	0x431bde83
 80017f4:	ffff8001 	.word	0xffff8001
 80017f8:	0c020060 	.word	0x0c020060
 80017fc:	0c20c000 	.word	0x0c20c000

08001800 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001810:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001818:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800181a:	f001 fdf5 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 800181e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4a1a      	ldr	r2, [pc, #104]	@ (800188c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d804      	bhi.n	8001832 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e022      	b.n	8001878 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	4a16      	ldr	r2, [pc, #88]	@ (8001890 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d204      	bcs.n	8001844 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	e019      	b.n	8001878 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4a13      	ldr	r2, [pc, #76]	@ (8001894 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d915      	bls.n	8001878 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4a12      	ldr	r2, [pc, #72]	@ (8001898 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d804      	bhi.n	800185e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	e00c      	b.n	8001878 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	4a0e      	ldr	r2, [pc, #56]	@ (800189c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d804      	bhi.n	8001870 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	e003      	b.n	8001878 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001876:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	02160ebf 	.word	0x02160ebf
 8001890:	03938700 	.word	0x03938700
 8001894:	05f5e0ff 	.word	0x05f5e0ff
 8001898:	08f0d17f 	.word	0x08f0d17f
 800189c:	0ee6b27f 	.word	0x0ee6b27f

080018a0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80018b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	791b      	ldrb	r3, [r3, #4]
 80018b8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80018ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	7b1b      	ldrb	r3, [r3, #12]
 80018c0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80018c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	7b5b      	ldrb	r3, [r3, #13]
 80018c8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80018ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	7b9b      	ldrb	r3, [r3, #14]
 80018d0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80018d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	7bdb      	ldrb	r3, [r3, #15]
 80018d8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80018da:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	7c12      	ldrb	r2, [r2, #16]
 80018e0:	2a00      	cmp	r2, #0
 80018e2:	d102      	bne.n	80018ea <ETH_SetMACConfig+0x4a>
 80018e4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80018e8:	e000      	b.n	80018ec <ETH_SetMACConfig+0x4c>
 80018ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80018ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	7c52      	ldrb	r2, [r2, #17]
 80018f2:	2a00      	cmp	r2, #0
 80018f4:	d102      	bne.n	80018fc <ETH_SetMACConfig+0x5c>
 80018f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018fa:	e000      	b.n	80018fe <ETH_SetMACConfig+0x5e>
 80018fc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80018fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	7c9b      	ldrb	r3, [r3, #18]
 8001904:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001906:	431a      	orrs	r2, r3
               macconf->Speed |
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800190c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001912:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	7f1b      	ldrb	r3, [r3, #28]
 8001918:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800191a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	7f5b      	ldrb	r3, [r3, #29]
 8001920:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001922:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	7f92      	ldrb	r2, [r2, #30]
 8001928:	2a00      	cmp	r2, #0
 800192a:	d102      	bne.n	8001932 <ETH_SetMACConfig+0x92>
 800192c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001930:	e000      	b.n	8001934 <ETH_SetMACConfig+0x94>
 8001932:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001934:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	7fdb      	ldrb	r3, [r3, #31]
 800193a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800193c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001944:	2a00      	cmp	r2, #0
 8001946:	d102      	bne.n	800194e <ETH_SetMACConfig+0xae>
 8001948:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800194c:	e000      	b.n	8001950 <ETH_SetMACConfig+0xb0>
 800194e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001950:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001956:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800195e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001960:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b56      	ldr	r3, [pc, #344]	@ (8001acc <ETH_SetMACConfig+0x22c>)
 8001972:	4013      	ands	r3, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	68f9      	ldr	r1, [r7, #12]
 800197a:	430b      	orrs	r3, r1
 800197c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001982:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800198a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800198c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001994:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001996:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800199e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80019a0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80019a8:	2a00      	cmp	r2, #0
 80019aa:	d102      	bne.n	80019b2 <ETH_SetMACConfig+0x112>
 80019ac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019b0:	e000      	b.n	80019b4 <ETH_SetMACConfig+0x114>
 80019b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80019b4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4b42      	ldr	r3, [pc, #264]	@ (8001ad0 <ETH_SetMACConfig+0x230>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	68f9      	ldr	r1, [r7, #12]
 80019ce:	430b      	orrs	r3, r1
 80019d0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019d8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad4 <ETH_SetMACConfig+0x234>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	68f9      	ldr	r1, [r7, #12]
 80019f2:	430b      	orrs	r3, r1
 80019f4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80019fc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a02:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001a0a:	2a00      	cmp	r2, #0
 8001a0c:	d101      	bne.n	8001a12 <ETH_SetMACConfig+0x172>
 8001a0e:	2280      	movs	r2, #128	@ 0x80
 8001a10:	e000      	b.n	8001a14 <ETH_SetMACConfig+0x174>
 8001a12:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001a14:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a1a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001a26:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	68f9      	ldr	r1, [r7, #12]
 8001a32:	430b      	orrs	r3, r1
 8001a34:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001a3c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001a44:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a52:	f023 0103 	bic.w	r1, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001a6a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001a86:	2a00      	cmp	r2, #0
 8001a88:	d101      	bne.n	8001a8e <ETH_SetMACConfig+0x1ee>
 8001a8a:	2240      	movs	r2, #64	@ 0x40
 8001a8c:	e000      	b.n	8001a90 <ETH_SetMACConfig+0x1f0>
 8001a8e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a90:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001a98:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001aa2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001ab0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	00048083 	.word	0x00048083
 8001ad0:	c0f88000 	.word	0xc0f88000
 8001ad4:	fffffef0 	.word	0xfffffef0

08001ad8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b38      	ldr	r3, [pc, #224]	@ (8001bd0 <ETH_SetDMAConfig+0xf8>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	6811      	ldr	r1, [r2, #0]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	430b      	orrs	r3, r1
 8001afa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001afe:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	791b      	ldrb	r3, [r3, #4]
 8001b04:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b0a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	7b1b      	ldrb	r3, [r3, #12]
 8001b10:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd4 <ETH_SetDMAConfig+0xfc>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	68f9      	ldr	r1, [r7, #12]
 8001b2a:	430b      	orrs	r3, r1
 8001b2c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b30:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	7b5b      	ldrb	r3, [r3, #13]
 8001b36:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b48:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001b4c:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <ETH_SetDMAConfig+0x100>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	68f9      	ldr	r1, [r7, #12]
 8001b56:	430b      	orrs	r3, r1
 8001b58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b5c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	7d1b      	ldrb	r3, [r3, #20]
 8001b68:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b6a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	7f5b      	ldrb	r3, [r3, #29]
 8001b70:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b7e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001b82:	4b16      	ldr	r3, [pc, #88]	@ (8001bdc <ETH_SetDMAConfig+0x104>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	68f9      	ldr	r1, [r7, #12]
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b92:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	7f1b      	ldrb	r3, [r3, #28]
 8001b9a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bac:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <ETH_SetDMAConfig+0x108>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	68f9      	ldr	r1, [r7, #12]
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bc0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	ffff87fd 	.word	0xffff87fd
 8001bd4:	ffff2ffe 	.word	0xffff2ffe
 8001bd8:	fffec000 	.word	0xfffec000
 8001bdc:	ffc0efef 	.word	0xffc0efef
 8001be0:	7fc0ffff 	.word	0x7fc0ffff

08001be4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b0a4      	sub	sp, #144	@ 0x90
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001bec:	2301      	movs	r3, #1
 8001bee:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c02:	2301      	movs	r3, #1
 8001c04:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c24:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001c3c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001c40:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001c66:	2300      	movs	r3, #0
 8001c68:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c76:	2301      	movs	r3, #1
 8001c78:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c7c:	2320      	movs	r3, #32
 8001c7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c82:	2301      	movs	r3, #1
 8001c84:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c8e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c98:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001cc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff fde6 	bl	80018a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001cee:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001cf2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001cf8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001cfc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001d04:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001d08:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d0a:	f107 0308 	add.w	r3, r7, #8
 8001d0e:	4619      	mov	r1, r3
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fee1 	bl	8001ad8 <ETH_SetDMAConfig>
}
 8001d16:	bf00      	nop
 8001d18:	3790      	adds	r7, #144	@ 0x90
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b085      	sub	sp, #20
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	e01d      	b.n	8001d68 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68d9      	ldr	r1, [r3, #12]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2200      	movs	r2, #0
 8001d48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	3206      	adds	r2, #6
 8001d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3301      	adds	r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d9de      	bls.n	8001d2c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2303      	movs	r3, #3
 8001d80:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d90:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001da0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	e023      	b.n	8001e06 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6919      	ldr	r1, [r3, #16]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	440b      	add	r3, r1
 8001dce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2200      	movs	r2, #0
 8001de6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2200      	movs	r2, #0
 8001df2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	3212      	adds	r2, #18
 8001dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	3301      	adds	r3, #1
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d9d8      	bls.n	8001dbe <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e32:	461a      	mov	r2, r3
 8001e34:	2303      	movs	r3, #3
 8001e36:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691a      	ldr	r2, [r3, #16]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e46:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e5a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	@ 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e7a:	4b89      	ldr	r3, [pc, #548]	@ (80020a0 <HAL_GPIO_Init+0x234>)
 8001e7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e7e:	e194      	b.n	80021aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	2101      	movs	r1, #1
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8186 	beq.w	80021a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d005      	beq.n	8001eb0 <HAL_GPIO_Init+0x44>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d130      	bne.n	8001f12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2203      	movs	r2, #3
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	091b      	lsrs	r3, r3, #4
 8001efc:	f003 0201 	and.w	r2, r3, #1
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d017      	beq.n	8001f4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	2203      	movs	r2, #3
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d123      	bne.n	8001fa2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	08da      	lsrs	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3208      	adds	r2, #8
 8001f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	220f      	movs	r2, #15
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	691a      	ldr	r2, [r3, #16]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	08da      	lsrs	r2, r3, #3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3208      	adds	r2, #8
 8001f9c:	69b9      	ldr	r1, [r7, #24]
 8001f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	2203      	movs	r2, #3
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0203 	and.w	r2, r3, #3
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 80e0 	beq.w	80021a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80020a4 <HAL_GPIO_Init+0x238>)
 8001fe6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fea:	4a2e      	ldr	r2, [pc, #184]	@ (80020a4 <HAL_GPIO_Init+0x238>)
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80020a4 <HAL_GPIO_Init+0x238>)
 8001ff6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002002:	4a29      	ldr	r2, [pc, #164]	@ (80020a8 <HAL_GPIO_Init+0x23c>)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3302      	adds	r3, #2
 800200a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	220f      	movs	r2, #15
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a20      	ldr	r2, [pc, #128]	@ (80020ac <HAL_GPIO_Init+0x240>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d052      	beq.n	80020d4 <HAL_GPIO_Init+0x268>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a1f      	ldr	r2, [pc, #124]	@ (80020b0 <HAL_GPIO_Init+0x244>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d031      	beq.n	800209a <HAL_GPIO_Init+0x22e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a1e      	ldr	r2, [pc, #120]	@ (80020b4 <HAL_GPIO_Init+0x248>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d02b      	beq.n	8002096 <HAL_GPIO_Init+0x22a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a1d      	ldr	r2, [pc, #116]	@ (80020b8 <HAL_GPIO_Init+0x24c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d025      	beq.n	8002092 <HAL_GPIO_Init+0x226>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a1c      	ldr	r2, [pc, #112]	@ (80020bc <HAL_GPIO_Init+0x250>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01f      	beq.n	800208e <HAL_GPIO_Init+0x222>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a1b      	ldr	r2, [pc, #108]	@ (80020c0 <HAL_GPIO_Init+0x254>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d019      	beq.n	800208a <HAL_GPIO_Init+0x21e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a1a      	ldr	r2, [pc, #104]	@ (80020c4 <HAL_GPIO_Init+0x258>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <HAL_GPIO_Init+0x21a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a19      	ldr	r2, [pc, #100]	@ (80020c8 <HAL_GPIO_Init+0x25c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00d      	beq.n	8002082 <HAL_GPIO_Init+0x216>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a18      	ldr	r2, [pc, #96]	@ (80020cc <HAL_GPIO_Init+0x260>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d007      	beq.n	800207e <HAL_GPIO_Init+0x212>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a17      	ldr	r2, [pc, #92]	@ (80020d0 <HAL_GPIO_Init+0x264>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d101      	bne.n	800207a <HAL_GPIO_Init+0x20e>
 8002076:	2309      	movs	r3, #9
 8002078:	e02d      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 800207a:	230a      	movs	r3, #10
 800207c:	e02b      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 800207e:	2308      	movs	r3, #8
 8002080:	e029      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 8002082:	2307      	movs	r3, #7
 8002084:	e027      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 8002086:	2306      	movs	r3, #6
 8002088:	e025      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 800208a:	2305      	movs	r3, #5
 800208c:	e023      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 800208e:	2304      	movs	r3, #4
 8002090:	e021      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 8002092:	2303      	movs	r3, #3
 8002094:	e01f      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 8002096:	2302      	movs	r3, #2
 8002098:	e01d      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 800209a:	2301      	movs	r3, #1
 800209c:	e01b      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 800209e:	bf00      	nop
 80020a0:	58000080 	.word	0x58000080
 80020a4:	58024400 	.word	0x58024400
 80020a8:	58000400 	.word	0x58000400
 80020ac:	58020000 	.word	0x58020000
 80020b0:	58020400 	.word	0x58020400
 80020b4:	58020800 	.word	0x58020800
 80020b8:	58020c00 	.word	0x58020c00
 80020bc:	58021000 	.word	0x58021000
 80020c0:	58021400 	.word	0x58021400
 80020c4:	58021800 	.word	0x58021800
 80020c8:	58021c00 	.word	0x58021c00
 80020cc:	58022000 	.word	0x58022000
 80020d0:	58022400 	.word	0x58022400
 80020d4:	2300      	movs	r3, #0
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	f002 0203 	and.w	r2, r2, #3
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	4093      	lsls	r3, r2
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e6:	4938      	ldr	r1, [pc, #224]	@ (80021c8 <HAL_GPIO_Init+0x35c>)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	3302      	adds	r3, #2
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800211a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002122:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002148:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	3301      	adds	r3, #1
 80021a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa22 f303 	lsr.w	r3, r2, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f47f ae63 	bne.w	8001e80 <HAL_GPIO_Init+0x14>
  }
}
 80021ba:	bf00      	nop
 80021bc:	bf00      	nop
 80021be:	3724      	adds	r7, #36	@ 0x24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	58000400 	.word	0x58000400

080021cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
 80021d8:	4613      	mov	r3, r2
 80021da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021dc:	787b      	ldrb	r3, [r7, #1]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80021e8:	e003      	b.n	80021f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	041a      	lsls	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	619a      	str	r2, [r3, #24]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af02      	add	r7, sp, #8
 8002204:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0fe      	b.n	800240e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d106      	bne.n	800222a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7fe fed5 	bl	8000fd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2203      	movs	r2, #3
 800222e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f005 f9f2 	bl	8007620 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7c1a      	ldrb	r2, [r3, #16]
 8002244:	f88d 2000 	strb.w	r2, [sp]
 8002248:	3304      	adds	r3, #4
 800224a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800224c:	f005 f976 	bl	800753c <USB_CoreInit>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2202      	movs	r2, #2
 800225a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0d5      	b.n	800240e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f005 f9ea 	bl	8007642 <USB_SetCurrentMode>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0c6      	b.n	800240e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]
 8002284:	e04a      	b.n	800231c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	3315      	adds	r3, #21
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4413      	add	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	3314      	adds	r3, #20
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	b298      	uxth	r0, r3
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	332e      	adds	r3, #46	@ 0x2e
 80022c2:	4602      	mov	r2, r0
 80022c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	3318      	adds	r3, #24
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	331c      	adds	r3, #28
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022ee:	7bfa      	ldrb	r2, [r7, #15]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4413      	add	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	3320      	adds	r3, #32
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4413      	add	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	3324      	adds	r3, #36	@ 0x24
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	3301      	adds	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	791b      	ldrb	r3, [r3, #4]
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	429a      	cmp	r2, r3
 8002324:	d3af      	bcc.n	8002286 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]
 800232a:	e044      	b.n	80023b6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	3301      	adds	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	791b      	ldrb	r3, [r3, #4]
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d3b5      	bcc.n	800232c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	7c1a      	ldrb	r2, [r3, #16]
 80023c8:	f88d 2000 	strb.w	r2, [sp]
 80023cc:	3304      	adds	r3, #4
 80023ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d0:	f005 f984 	bl	80076dc <USB_DevInit>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2202      	movs	r2, #2
 80023de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e013      	b.n	800240e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7b1b      	ldrb	r3, [r3, #12]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d102      	bne.n	8002402 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f80b 	bl	8002418 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f005 fb3f 	bl	8007a8a <USB_DevDisconnect>

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002446:	4b05      	ldr	r3, [pc, #20]	@ (800245c <HAL_PCDEx_ActivateLPM+0x44>)
 8002448:	4313      	orrs	r3, r2
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	10000003 	.word	0x10000003

08002460 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002468:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <HAL_PWREx_ConfigSupply+0x70>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b04      	cmp	r3, #4
 8002472:	d00a      	beq.n	800248a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002474:	4b16      	ldr	r3, [pc, #88]	@ (80024d0 <HAL_PWREx_ConfigSupply+0x70>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	429a      	cmp	r2, r3
 8002480:	d001      	beq.n	8002486 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e01f      	b.n	80024c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e01d      	b.n	80024c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800248a:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <HAL_PWREx_ConfigSupply+0x70>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f023 0207 	bic.w	r2, r3, #7
 8002492:	490f      	ldr	r1, [pc, #60]	@ (80024d0 <HAL_PWREx_ConfigSupply+0x70>)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4313      	orrs	r3, r2
 8002498:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800249a:	f7fe ff7f 	bl	800139c <HAL_GetTick>
 800249e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024a0:	e009      	b.n	80024b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024a2:	f7fe ff7b 	bl	800139c <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024b0:	d901      	bls.n	80024b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e007      	b.n	80024c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_PWREx_ConfigSupply+0x70>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024c2:	d1ee      	bne.n	80024a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	58024800 	.word	0x58024800

080024d4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80024d8:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4a04      	ldr	r2, [pc, #16]	@ (80024f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024e2:	60d3      	str	r3, [r2, #12]
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	58024800 	.word	0x58024800

080024f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08c      	sub	sp, #48	@ 0x30
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d102      	bne.n	8002508 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	f000 bc48 	b.w	8002d98 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 8088 	beq.w	8002626 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002516:	4b99      	ldr	r3, [pc, #612]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800251e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002520:	4b96      	ldr	r3, [pc, #600]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 8002522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002524:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002528:	2b10      	cmp	r3, #16
 800252a:	d007      	beq.n	800253c <HAL_RCC_OscConfig+0x48>
 800252c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800252e:	2b18      	cmp	r3, #24
 8002530:	d111      	bne.n	8002556 <HAL_RCC_OscConfig+0x62>
 8002532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d10c      	bne.n	8002556 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	4b8f      	ldr	r3, [pc, #572]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d06d      	beq.n	8002624 <HAL_RCC_OscConfig+0x130>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d169      	bne.n	8002624 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	f000 bc21 	b.w	8002d98 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800255e:	d106      	bne.n	800256e <HAL_RCC_OscConfig+0x7a>
 8002560:	4b86      	ldr	r3, [pc, #536]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a85      	ldr	r2, [pc, #532]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 8002566:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	e02e      	b.n	80025cc <HAL_RCC_OscConfig+0xd8>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10c      	bne.n	8002590 <HAL_RCC_OscConfig+0x9c>
 8002576:	4b81      	ldr	r3, [pc, #516]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a80      	ldr	r2, [pc, #512]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 800257c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	4b7e      	ldr	r3, [pc, #504]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a7d      	ldr	r2, [pc, #500]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 8002588:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e01d      	b.n	80025cc <HAL_RCC_OscConfig+0xd8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0xc0>
 800259a:	4b78      	ldr	r3, [pc, #480]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a77      	ldr	r2, [pc, #476]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 80025a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	4b75      	ldr	r3, [pc, #468]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a74      	ldr	r2, [pc, #464]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e00b      	b.n	80025cc <HAL_RCC_OscConfig+0xd8>
 80025b4:	4b71      	ldr	r3, [pc, #452]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a70      	ldr	r2, [pc, #448]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 80025ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	4b6e      	ldr	r3, [pc, #440]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a6d      	ldr	r2, [pc, #436]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 80025c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d013      	beq.n	80025fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe fee2 	bl	800139c <HAL_GetTick>
 80025d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025dc:	f7fe fede 	bl	800139c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	@ 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e3d4      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025ee:	4b63      	ldr	r3, [pc, #396]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0xe8>
 80025fa:	e014      	b.n	8002626 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe fece 	bl	800139c <HAL_GetTick>
 8002600:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002604:	f7fe feca 	bl	800139c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	@ 0x64
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e3c0      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002616:	4b59      	ldr	r3, [pc, #356]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x110>
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 80ca 	beq.w	80027c8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002634:	4b51      	ldr	r3, [pc, #324]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800263c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800263e:	4b4f      	ldr	r3, [pc, #316]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 8002640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002642:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <HAL_RCC_OscConfig+0x166>
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	2b18      	cmp	r3, #24
 800264e:	d156      	bne.n	80026fe <HAL_RCC_OscConfig+0x20a>
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d151      	bne.n	80026fe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800265a:	4b48      	ldr	r3, [pc, #288]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_RCC_OscConfig+0x17e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e392      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002672:	4b42      	ldr	r3, [pc, #264]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 0219 	bic.w	r2, r3, #25
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	493f      	ldr	r1, [pc, #252]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe fe8a 	bl	800139c <HAL_GetTick>
 8002688:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268c:	f7fe fe86 	bl	800139c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e37c      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800269e:	4b37      	ldr	r3, [pc, #220]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026aa:	f7fe fea7 	bl	80013fc <HAL_GetREVID>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d817      	bhi.n	80026e8 <HAL_RCC_OscConfig+0x1f4>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b40      	cmp	r3, #64	@ 0x40
 80026be:	d108      	bne.n	80026d2 <HAL_RCC_OscConfig+0x1de>
 80026c0:	4b2e      	ldr	r3, [pc, #184]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80026c8:	4a2c      	ldr	r2, [pc, #176]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 80026ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d0:	e07a      	b.n	80027c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d2:	4b2a      	ldr	r3, [pc, #168]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	031b      	lsls	r3, r3, #12
 80026e0:	4926      	ldr	r1, [pc, #152]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e6:	e06f      	b.n	80027c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e8:	4b24      	ldr	r3, [pc, #144]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	4921      	ldr	r1, [pc, #132]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026fc:	e064      	b.n	80027c8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d047      	beq.n	8002796 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002706:	4b1d      	ldr	r3, [pc, #116]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 0219 	bic.w	r2, r3, #25
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	491a      	ldr	r1, [pc, #104]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe fe40 	bl	800139c <HAL_GetTick>
 800271c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002720:	f7fe fe3c 	bl	800139c <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e332      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002732:	4b12      	ldr	r3, [pc, #72]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273e:	f7fe fe5d 	bl	80013fc <HAL_GetREVID>
 8002742:	4603      	mov	r3, r0
 8002744:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002748:	4293      	cmp	r3, r2
 800274a:	d819      	bhi.n	8002780 <HAL_RCC_OscConfig+0x28c>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b40      	cmp	r3, #64	@ 0x40
 8002752:	d108      	bne.n	8002766 <HAL_RCC_OscConfig+0x272>
 8002754:	4b09      	ldr	r3, [pc, #36]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800275c:	4a07      	ldr	r2, [pc, #28]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 800275e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002762:	6053      	str	r3, [r2, #4]
 8002764:	e030      	b.n	80027c8 <HAL_RCC_OscConfig+0x2d4>
 8002766:	4b05      	ldr	r3, [pc, #20]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	031b      	lsls	r3, r3, #12
 8002774:	4901      	ldr	r1, [pc, #4]	@ (800277c <HAL_RCC_OscConfig+0x288>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
 800277a:	e025      	b.n	80027c8 <HAL_RCC_OscConfig+0x2d4>
 800277c:	58024400 	.word	0x58024400
 8002780:	4b9a      	ldr	r3, [pc, #616]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	061b      	lsls	r3, r3, #24
 800278e:	4997      	ldr	r1, [pc, #604]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
 8002794:	e018      	b.n	80027c8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002796:	4b95      	ldr	r3, [pc, #596]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a94      	ldr	r2, [pc, #592]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7fe fdfb 	bl	800139c <HAL_GetTick>
 80027a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027aa:	f7fe fdf7 	bl	800139c <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e2ed      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027bc:	4b8b      	ldr	r3, [pc, #556]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f0      	bne.n	80027aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80a9 	beq.w	8002928 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d6:	4b85      	ldr	r3, [pc, #532]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027e0:	4b82      	ldr	r3, [pc, #520]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80027e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d007      	beq.n	80027fc <HAL_RCC_OscConfig+0x308>
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2b18      	cmp	r3, #24
 80027f0:	d13a      	bne.n	8002868 <HAL_RCC_OscConfig+0x374>
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d135      	bne.n	8002868 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027fc:	4b7b      	ldr	r3, [pc, #492]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_OscConfig+0x320>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	2b80      	cmp	r3, #128	@ 0x80
 800280e:	d001      	beq.n	8002814 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e2c1      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002814:	f7fe fdf2 	bl	80013fc <HAL_GetREVID>
 8002818:	4603      	mov	r3, r0
 800281a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800281e:	4293      	cmp	r3, r2
 8002820:	d817      	bhi.n	8002852 <HAL_RCC_OscConfig+0x35e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	2b20      	cmp	r3, #32
 8002828:	d108      	bne.n	800283c <HAL_RCC_OscConfig+0x348>
 800282a:	4b70      	ldr	r3, [pc, #448]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002832:	4a6e      	ldr	r2, [pc, #440]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002834:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002838:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800283a:	e075      	b.n	8002928 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800283c:	4b6b      	ldr	r3, [pc, #428]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	069b      	lsls	r3, r3, #26
 800284a:	4968      	ldr	r1, [pc, #416]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002850:	e06a      	b.n	8002928 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002852:	4b66      	ldr	r3, [pc, #408]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	061b      	lsls	r3, r3, #24
 8002860:	4962      	ldr	r1, [pc, #392]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002862:	4313      	orrs	r3, r2
 8002864:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002866:	e05f      	b.n	8002928 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d042      	beq.n	80028f6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002870:	4b5e      	ldr	r3, [pc, #376]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a5d      	ldr	r2, [pc, #372]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800287a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe fd8e 	bl	800139c <HAL_GetTick>
 8002880:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002884:	f7fe fd8a 	bl	800139c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e280      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002896:	4b55      	ldr	r3, [pc, #340]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028a2:	f7fe fdab 	bl	80013fc <HAL_GetREVID>
 80028a6:	4603      	mov	r3, r0
 80028a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d817      	bhi.n	80028e0 <HAL_RCC_OscConfig+0x3ec>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d108      	bne.n	80028ca <HAL_RCC_OscConfig+0x3d6>
 80028b8:	4b4c      	ldr	r3, [pc, #304]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80028c0:	4a4a      	ldr	r2, [pc, #296]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80028c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028c6:	6053      	str	r3, [r2, #4]
 80028c8:	e02e      	b.n	8002928 <HAL_RCC_OscConfig+0x434>
 80028ca:	4b48      	ldr	r3, [pc, #288]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	069b      	lsls	r3, r3, #26
 80028d8:	4944      	ldr	r1, [pc, #272]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
 80028de:	e023      	b.n	8002928 <HAL_RCC_OscConfig+0x434>
 80028e0:	4b42      	ldr	r3, [pc, #264]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	061b      	lsls	r3, r3, #24
 80028ee:	493f      	ldr	r1, [pc, #252]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60cb      	str	r3, [r1, #12]
 80028f4:	e018      	b.n	8002928 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028f6:	4b3d      	ldr	r3, [pc, #244]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a3c      	ldr	r2, [pc, #240]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80028fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7fe fd4b 	bl	800139c <HAL_GetTick>
 8002906:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800290a:	f7fe fd47 	bl	800139c <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e23d      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800291c:	4b33      	ldr	r3, [pc, #204]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f0      	bne.n	800290a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d036      	beq.n	80029a2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d019      	beq.n	8002970 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800293c:	4b2b      	ldr	r3, [pc, #172]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 800293e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002940:	4a2a      	ldr	r2, [pc, #168]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7fe fd28 	bl	800139c <HAL_GetTick>
 800294c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002950:	f7fe fd24 	bl	800139c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e21a      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002962:	4b22      	ldr	r3, [pc, #136]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x45c>
 800296e:	e018      	b.n	80029a2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002970:	4b1e      	ldr	r3, [pc, #120]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002974:	4a1d      	ldr	r2, [pc, #116]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002976:	f023 0301 	bic.w	r3, r3, #1
 800297a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe fd0e 	bl	800139c <HAL_GetTick>
 8002980:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002984:	f7fe fd0a 	bl	800139c <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e200      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002996:	4b15      	ldr	r3, [pc, #84]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d039      	beq.n	8002a22 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d01c      	beq.n	80029f0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029b6:	4b0d      	ldr	r3, [pc, #52]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a0c      	ldr	r2, [pc, #48]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80029bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029c2:	f7fe fceb 	bl	800139c <HAL_GetTick>
 80029c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029ca:	f7fe fce7 	bl	800139c <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e1dd      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029dc:	4b03      	ldr	r3, [pc, #12]	@ (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x4d6>
 80029e8:	e01b      	b.n	8002a22 <HAL_RCC_OscConfig+0x52e>
 80029ea:	bf00      	nop
 80029ec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029f0:	4b9b      	ldr	r3, [pc, #620]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a9a      	ldr	r2, [pc, #616]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 80029f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029fc:	f7fe fcce 	bl	800139c <HAL_GetTick>
 8002a00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a04:	f7fe fcca 	bl	800139c <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e1c0      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a16:	4b92      	ldr	r3, [pc, #584]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8081 	beq.w	8002b32 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a30:	4b8c      	ldr	r3, [pc, #560]	@ (8002c64 <HAL_RCC_OscConfig+0x770>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a8b      	ldr	r2, [pc, #556]	@ (8002c64 <HAL_RCC_OscConfig+0x770>)
 8002a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a3c:	f7fe fcae 	bl	800139c <HAL_GetTick>
 8002a40:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a44:	f7fe fcaa 	bl	800139c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	@ 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e1a0      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a56:	4b83      	ldr	r3, [pc, #524]	@ (8002c64 <HAL_RCC_OscConfig+0x770>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d106      	bne.n	8002a78 <HAL_RCC_OscConfig+0x584>
 8002a6a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6e:	4a7c      	ldr	r2, [pc, #496]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a76:	e02d      	b.n	8002ad4 <HAL_RCC_OscConfig+0x5e0>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10c      	bne.n	8002a9a <HAL_RCC_OscConfig+0x5a6>
 8002a80:	4b77      	ldr	r3, [pc, #476]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a84:	4a76      	ldr	r2, [pc, #472]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a8c:	4b74      	ldr	r3, [pc, #464]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a90:	4a73      	ldr	r2, [pc, #460]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002a92:	f023 0304 	bic.w	r3, r3, #4
 8002a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a98:	e01c      	b.n	8002ad4 <HAL_RCC_OscConfig+0x5e0>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b05      	cmp	r3, #5
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCC_OscConfig+0x5c8>
 8002aa2:	4b6f      	ldr	r3, [pc, #444]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa6:	4a6e      	ldr	r2, [pc, #440]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002aa8:	f043 0304 	orr.w	r3, r3, #4
 8002aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aae:	4b6c      	ldr	r3, [pc, #432]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab2:	4a6b      	ldr	r2, [pc, #428]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aba:	e00b      	b.n	8002ad4 <HAL_RCC_OscConfig+0x5e0>
 8002abc:	4b68      	ldr	r3, [pc, #416]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac0:	4a67      	ldr	r2, [pc, #412]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002ac2:	f023 0301 	bic.w	r3, r3, #1
 8002ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac8:	4b65      	ldr	r3, [pc, #404]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002acc:	4a64      	ldr	r2, [pc, #400]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002ace:	f023 0304 	bic.w	r3, r3, #4
 8002ad2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d015      	beq.n	8002b08 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002adc:	f7fe fc5e 	bl	800139c <HAL_GetTick>
 8002ae0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ae2:	e00a      	b.n	8002afa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae4:	f7fe fc5a 	bl	800139c <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e14e      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002afa:	4b59      	ldr	r3, [pc, #356]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0ee      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x5f0>
 8002b06:	e014      	b.n	8002b32 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7fe fc48 	bl	800139c <HAL_GetTick>
 8002b0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b10:	f7fe fc44 	bl	800139c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e138      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b26:	4b4e      	ldr	r3, [pc, #312]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1ee      	bne.n	8002b10 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 812d 	beq.w	8002d96 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b3c:	4b48      	ldr	r3, [pc, #288]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b44:	2b18      	cmp	r3, #24
 8002b46:	f000 80bd 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	f040 809e 	bne.w	8002c90 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b54:	4b42      	ldr	r3, [pc, #264]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a41      	ldr	r2, [pc, #260]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002b5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe fc1c 	bl	800139c <HAL_GetTick>
 8002b64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fe fc18 	bl	800139c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e10e      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b7a:	4b39      	ldr	r3, [pc, #228]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b86:	4b36      	ldr	r3, [pc, #216]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002b88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b8a:	4b37      	ldr	r3, [pc, #220]	@ (8002c68 <HAL_RCC_OscConfig+0x774>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	4931      	ldr	r1, [pc, #196]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	025b      	lsls	r3, r3, #9
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	041b      	lsls	r3, r3, #16
 8002bbe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	061b      	lsls	r3, r3, #24
 8002bcc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002bd0:	4923      	ldr	r1, [pc, #140]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002bd6:	4b22      	ldr	r3, [pc, #136]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bda:	4a21      	ldr	r2, [pc, #132]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002be2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002be4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002be6:	4b21      	ldr	r3, [pc, #132]	@ (8002c6c <HAL_RCC_OscConfig+0x778>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bee:	00d2      	lsls	r2, r2, #3
 8002bf0:	491b      	ldr	r1, [pc, #108]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfa:	f023 020c 	bic.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	4917      	ldr	r1, [pc, #92]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c08:	4b15      	ldr	r3, [pc, #84]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0c:	f023 0202 	bic.w	r2, r3, #2
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c14:	4912      	ldr	r1, [pc, #72]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c1a:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1e:	4a10      	ldr	r2, [pc, #64]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c26:	4b0e      	ldr	r3, [pc, #56]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2a:	4a0d      	ldr	r2, [pc, #52]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c32:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c36:	4a0a      	ldr	r2, [pc, #40]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c3e:	4b08      	ldr	r3, [pc, #32]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c42:	4a07      	ldr	r2, [pc, #28]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c4a:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a04      	ldr	r2, [pc, #16]	@ (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c56:	f7fe fba1 	bl	800139c <HAL_GetTick>
 8002c5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c5c:	e011      	b.n	8002c82 <HAL_RCC_OscConfig+0x78e>
 8002c5e:	bf00      	nop
 8002c60:	58024400 	.word	0x58024400
 8002c64:	58024800 	.word	0x58024800
 8002c68:	fffffc0c 	.word	0xfffffc0c
 8002c6c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fe fb94 	bl	800139c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e08a      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c82:	4b47      	ldr	r3, [pc, #284]	@ (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0x77c>
 8002c8e:	e082      	b.n	8002d96 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c90:	4b43      	ldr	r3, [pc, #268]	@ (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a42      	ldr	r2, [pc, #264]	@ (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002c96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fb7e 	bl	800139c <HAL_GetTick>
 8002ca0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7fe fb7a 	bl	800139c <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e070      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x7b0>
 8002cc2:	e068      	b.n	8002d96 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002cc4:	4b36      	ldr	r3, [pc, #216]	@ (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cca:	4b35      	ldr	r3, [pc, #212]	@ (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d031      	beq.n	8002d3c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f003 0203 	and.w	r2, r3, #3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d12a      	bne.n	8002d3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d122      	bne.n	8002d3c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d00:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d11a      	bne.n	8002d3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	0a5b      	lsrs	r3, r3, #9
 8002d0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d12:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d111      	bne.n	8002d3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d24:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d108      	bne.n	8002d3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	0e1b      	lsrs	r3, r3, #24
 8002d2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d36:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e02b      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d40:	4b17      	ldr	r3, [pc, #92]	@ (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d44:	08db      	lsrs	r3, r3, #3
 8002d46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d4a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d01f      	beq.n	8002d96 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d56:	4b12      	ldr	r3, [pc, #72]	@ (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5a:	4a11      	ldr	r2, [pc, #68]	@ (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d62:	f7fe fb1b 	bl	800139c <HAL_GetTick>
 8002d66:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d68:	bf00      	nop
 8002d6a:	f7fe fb17 	bl	800139c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d0f9      	beq.n	8002d6a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d76:	4b0a      	ldr	r3, [pc, #40]	@ (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002d78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <HAL_RCC_OscConfig+0x8b0>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d82:	00d2      	lsls	r2, r2, #3
 8002d84:	4906      	ldr	r1, [pc, #24]	@ (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d8a:	4b05      	ldr	r3, [pc, #20]	@ (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8e:	4a04      	ldr	r2, [pc, #16]	@ (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3730      	adds	r7, #48	@ 0x30
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	58024400 	.word	0x58024400
 8002da4:	ffff0007 	.word	0xffff0007

08002da8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e19c      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b8a      	ldr	r3, [pc, #552]	@ (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d910      	bls.n	8002dec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b87      	ldr	r3, [pc, #540]	@ (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 020f 	bic.w	r2, r3, #15
 8002dd2:	4985      	ldr	r1, [pc, #532]	@ (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b83      	ldr	r3, [pc, #524]	@ (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e184      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d010      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	4b7b      	ldr	r3, [pc, #492]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d908      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e08:	4b78      	ldr	r3, [pc, #480]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	4975      	ldr	r1, [pc, #468]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d010      	beq.n	8002e48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	4b70      	ldr	r3, [pc, #448]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d908      	bls.n	8002e48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e36:	4b6d      	ldr	r3, [pc, #436]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	496a      	ldr	r1, [pc, #424]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d010      	beq.n	8002e76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699a      	ldr	r2, [r3, #24]
 8002e58:	4b64      	ldr	r3, [pc, #400]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d908      	bls.n	8002e76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e64:	4b61      	ldr	r3, [pc, #388]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	495e      	ldr	r1, [pc, #376]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d010      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69da      	ldr	r2, [r3, #28]
 8002e86:	4b59      	ldr	r3, [pc, #356]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d908      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e92:	4b56      	ldr	r3, [pc, #344]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	4953      	ldr	r1, [pc, #332]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d010      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	4b4d      	ldr	r3, [pc, #308]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d908      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec0:	4b4a      	ldr	r3, [pc, #296]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	f023 020f 	bic.w	r2, r3, #15
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4947      	ldr	r1, [pc, #284]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d055      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ede:	4b43      	ldr	r3, [pc, #268]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	4940      	ldr	r1, [pc, #256]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ef8:	4b3c      	ldr	r3, [pc, #240]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d121      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0f6      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d107      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f10:	4b36      	ldr	r3, [pc, #216]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d115      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0ea      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d107      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f28:	4b30      	ldr	r3, [pc, #192]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d109      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0de      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f38:	4b2c      	ldr	r3, [pc, #176]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0d6      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f48:	4b28      	ldr	r3, [pc, #160]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f023 0207 	bic.w	r2, r3, #7
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4925      	ldr	r1, [pc, #148]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f5a:	f7fe fa1f 	bl	800139c <HAL_GetTick>
 8002f5e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f62:	f7fe fa1b 	bl	800139c <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e0be      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f78:	4b1c      	ldr	r3, [pc, #112]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d1eb      	bne.n	8002f62 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d010      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	4b14      	ldr	r3, [pc, #80]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d208      	bcs.n	8002fb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa6:	4b11      	ldr	r3, [pc, #68]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f023 020f 	bic.w	r2, r3, #15
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	490e      	ldr	r1, [pc, #56]	@ (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d214      	bcs.n	8002ff0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b08      	ldr	r3, [pc, #32]	@ (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 020f 	bic.w	r2, r3, #15
 8002fce:	4906      	ldr	r1, [pc, #24]	@ (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e086      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
 8002fe8:	52002000 	.word	0x52002000
 8002fec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d010      	beq.n	800301e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	4b3f      	ldr	r3, [pc, #252]	@ (8003100 <HAL_RCC_ClockConfig+0x358>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003008:	429a      	cmp	r2, r3
 800300a:	d208      	bcs.n	800301e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800300c:	4b3c      	ldr	r3, [pc, #240]	@ (8003100 <HAL_RCC_ClockConfig+0x358>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	4939      	ldr	r1, [pc, #228]	@ (8003100 <HAL_RCC_ClockConfig+0x358>)
 800301a:	4313      	orrs	r3, r2
 800301c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d010      	beq.n	800304c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	4b34      	ldr	r3, [pc, #208]	@ (8003100 <HAL_RCC_ClockConfig+0x358>)
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003036:	429a      	cmp	r2, r3
 8003038:	d208      	bcs.n	800304c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800303a:	4b31      	ldr	r3, [pc, #196]	@ (8003100 <HAL_RCC_ClockConfig+0x358>)
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	492e      	ldr	r1, [pc, #184]	@ (8003100 <HAL_RCC_ClockConfig+0x358>)
 8003048:	4313      	orrs	r3, r2
 800304a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d010      	beq.n	800307a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699a      	ldr	r2, [r3, #24]
 800305c:	4b28      	ldr	r3, [pc, #160]	@ (8003100 <HAL_RCC_ClockConfig+0x358>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003064:	429a      	cmp	r2, r3
 8003066:	d208      	bcs.n	800307a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003068:	4b25      	ldr	r3, [pc, #148]	@ (8003100 <HAL_RCC_ClockConfig+0x358>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	4922      	ldr	r1, [pc, #136]	@ (8003100 <HAL_RCC_ClockConfig+0x358>)
 8003076:	4313      	orrs	r3, r2
 8003078:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b00      	cmp	r3, #0
 8003084:	d010      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69da      	ldr	r2, [r3, #28]
 800308a:	4b1d      	ldr	r3, [pc, #116]	@ (8003100 <HAL_RCC_ClockConfig+0x358>)
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003092:	429a      	cmp	r2, r3
 8003094:	d208      	bcs.n	80030a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003096:	4b1a      	ldr	r3, [pc, #104]	@ (8003100 <HAL_RCC_ClockConfig+0x358>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4917      	ldr	r1, [pc, #92]	@ (8003100 <HAL_RCC_ClockConfig+0x358>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030a8:	f000 f834 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b14      	ldr	r3, [pc, #80]	@ (8003100 <HAL_RCC_ClockConfig+0x358>)
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	4912      	ldr	r1, [pc, #72]	@ (8003104 <HAL_RCC_ClockConfig+0x35c>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
 80030c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003100 <HAL_RCC_ClockConfig+0x358>)
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003104 <HAL_RCC_ClockConfig+0x35c>)
 80030d0:	5cd3      	ldrb	r3, [r2, r3]
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
 80030dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003108 <HAL_RCC_ClockConfig+0x360>)
 80030de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030e0:	4a0a      	ldr	r2, [pc, #40]	@ (800310c <HAL_RCC_ClockConfig+0x364>)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80030e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003110 <HAL_RCC_ClockConfig+0x368>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe f90c 	bl	8001308 <HAL_InitTick>
 80030f0:	4603      	mov	r3, r0
 80030f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	58024400 	.word	0x58024400
 8003104:	08007bbc 	.word	0x08007bbc
 8003108:	24000008 	.word	0x24000008
 800310c:	24000004 	.word	0x24000004
 8003110:	2400000c 	.word	0x2400000c

08003114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	@ 0x24
 8003118:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800311a:	4bb3      	ldr	r3, [pc, #716]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003122:	2b18      	cmp	r3, #24
 8003124:	f200 8155 	bhi.w	80033d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003128:	a201      	add	r2, pc, #4	@ (adr r2, 8003130 <HAL_RCC_GetSysClockFreq+0x1c>)
 800312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312e:	bf00      	nop
 8003130:	08003195 	.word	0x08003195
 8003134:	080033d3 	.word	0x080033d3
 8003138:	080033d3 	.word	0x080033d3
 800313c:	080033d3 	.word	0x080033d3
 8003140:	080033d3 	.word	0x080033d3
 8003144:	080033d3 	.word	0x080033d3
 8003148:	080033d3 	.word	0x080033d3
 800314c:	080033d3 	.word	0x080033d3
 8003150:	080031bb 	.word	0x080031bb
 8003154:	080033d3 	.word	0x080033d3
 8003158:	080033d3 	.word	0x080033d3
 800315c:	080033d3 	.word	0x080033d3
 8003160:	080033d3 	.word	0x080033d3
 8003164:	080033d3 	.word	0x080033d3
 8003168:	080033d3 	.word	0x080033d3
 800316c:	080033d3 	.word	0x080033d3
 8003170:	080031c1 	.word	0x080031c1
 8003174:	080033d3 	.word	0x080033d3
 8003178:	080033d3 	.word	0x080033d3
 800317c:	080033d3 	.word	0x080033d3
 8003180:	080033d3 	.word	0x080033d3
 8003184:	080033d3 	.word	0x080033d3
 8003188:	080033d3 	.word	0x080033d3
 800318c:	080033d3 	.word	0x080033d3
 8003190:	080031c7 	.word	0x080031c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003194:	4b94      	ldr	r3, [pc, #592]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d009      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031a0:	4b91      	ldr	r3, [pc, #580]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	08db      	lsrs	r3, r3, #3
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	4a90      	ldr	r2, [pc, #576]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
 80031b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80031b2:	e111      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031b4:	4b8d      	ldr	r3, [pc, #564]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031b6:	61bb      	str	r3, [r7, #24]
      break;
 80031b8:	e10e      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80031ba:	4b8d      	ldr	r3, [pc, #564]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031bc:	61bb      	str	r3, [r7, #24]
      break;
 80031be:	e10b      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80031c0:	4b8c      	ldr	r3, [pc, #560]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031c2:	61bb      	str	r3, [r7, #24]
      break;
 80031c4:	e108      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031c6:	4b88      	ldr	r3, [pc, #544]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80031d0:	4b85      	ldr	r3, [pc, #532]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031dc:	4b82      	ldr	r3, [pc, #520]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80031e6:	4b80      	ldr	r3, [pc, #512]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ea:	08db      	lsrs	r3, r3, #3
 80031ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	fb02 f303 	mul.w	r3, r2, r3
 80031f6:	ee07 3a90 	vmov	s15, r3
 80031fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80e1 	beq.w	80033cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b02      	cmp	r3, #2
 800320e:	f000 8083 	beq.w	8003318 <HAL_RCC_GetSysClockFreq+0x204>
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b02      	cmp	r3, #2
 8003216:	f200 80a1 	bhi.w	800335c <HAL_RCC_GetSysClockFreq+0x248>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x114>
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d056      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003226:	e099      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003228:	4b6f      	ldr	r3, [pc, #444]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d02d      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003234:	4b6c      	ldr	r3, [pc, #432]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	08db      	lsrs	r3, r3, #3
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	4a6b      	ldr	r2, [pc, #428]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
 8003244:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	ee07 3a90 	vmov	s15, r3
 800324c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	ee07 3a90 	vmov	s15, r3
 8003256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800325e:	4b62      	ldr	r3, [pc, #392]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800326e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003272:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80033f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800327a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800327e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800328e:	e087      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80033fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800329e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032a2:	4b51      	ldr	r3, [pc, #324]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032b6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80033f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032d2:	e065      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032de:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003400 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e6:	4b40      	ldr	r3, [pc, #256]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032fa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80033f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800330a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800330e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003312:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003316:	e043      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003322:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003404 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332a:	4b2f      	ldr	r3, [pc, #188]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800333a:	ed97 6a02 	vldr	s12, [r7, #8]
 800333e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80033f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800334a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800334e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800335a:	e021      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003366:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003400 <HAL_RCC_GetSysClockFreq+0x2ec>
 800336a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800336e:	4b1e      	ldr	r3, [pc, #120]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800337e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003382:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80033f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800338a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800338e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800339e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80033a0:	4b11      	ldr	r3, [pc, #68]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a4:	0a5b      	lsrs	r3, r3, #9
 80033a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033aa:	3301      	adds	r3, #1
 80033ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80033bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033c4:	ee17 3a90 	vmov	r3, s15
 80033c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80033ca:	e005      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61bb      	str	r3, [r7, #24]
      break;
 80033d0:	e002      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80033d2:	4b07      	ldr	r3, [pc, #28]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033d4:	61bb      	str	r3, [r7, #24]
      break;
 80033d6:	bf00      	nop
  }

  return sysclockfreq;
 80033d8:	69bb      	ldr	r3, [r7, #24]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3724      	adds	r7, #36	@ 0x24
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	58024400 	.word	0x58024400
 80033ec:	03d09000 	.word	0x03d09000
 80033f0:	003d0900 	.word	0x003d0900
 80033f4:	007a1200 	.word	0x007a1200
 80033f8:	46000000 	.word	0x46000000
 80033fc:	4c742400 	.word	0x4c742400
 8003400:	4a742400 	.word	0x4a742400
 8003404:	4af42400 	.word	0x4af42400

08003408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800340e:	f7ff fe81 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 8003412:	4602      	mov	r2, r0
 8003414:	4b10      	ldr	r3, [pc, #64]	@ (8003458 <HAL_RCC_GetHCLKFreq+0x50>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	490f      	ldr	r1, [pc, #60]	@ (800345c <HAL_RCC_GetHCLKFreq+0x54>)
 8003420:	5ccb      	ldrb	r3, [r1, r3]
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	fa22 f303 	lsr.w	r3, r2, r3
 800342a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800342c:	4b0a      	ldr	r3, [pc, #40]	@ (8003458 <HAL_RCC_GetHCLKFreq+0x50>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	4a09      	ldr	r2, [pc, #36]	@ (800345c <HAL_RCC_GetHCLKFreq+0x54>)
 8003436:	5cd3      	ldrb	r3, [r2, r3]
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	fa22 f303 	lsr.w	r3, r2, r3
 8003442:	4a07      	ldr	r2, [pc, #28]	@ (8003460 <HAL_RCC_GetHCLKFreq+0x58>)
 8003444:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003446:	4a07      	ldr	r2, [pc, #28]	@ (8003464 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800344c:	4b04      	ldr	r3, [pc, #16]	@ (8003460 <HAL_RCC_GetHCLKFreq+0x58>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	58024400 	.word	0x58024400
 800345c:	08007bbc 	.word	0x08007bbc
 8003460:	24000008 	.word	0x24000008
 8003464:	24000004 	.word	0x24000004

08003468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800346c:	f7ff ffcc 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b06      	ldr	r3, [pc, #24]	@ (800348c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	091b      	lsrs	r3, r3, #4
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4904      	ldr	r1, [pc, #16]	@ (8003490 <HAL_RCC_GetPCLK1Freq+0x28>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003488:	4618      	mov	r0, r3
 800348a:	bd80      	pop	{r7, pc}
 800348c:	58024400 	.word	0x58024400
 8003490:	08007bbc 	.word	0x08007bbc

08003494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003498:	f7ff ffb6 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4904      	ldr	r1, [pc, #16]	@ (80034bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	58024400 	.word	0x58024400
 80034bc:	08007bbc 	.word	0x08007bbc

080034c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c4:	b0ca      	sub	sp, #296	@ 0x128
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034cc:	2300      	movs	r3, #0
 80034ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034d2:	2300      	movs	r3, #0
 80034d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80034e4:	2500      	movs	r5, #0
 80034e6:	ea54 0305 	orrs.w	r3, r4, r5
 80034ea:	d049      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80034ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034f6:	d02f      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80034f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034fc:	d828      	bhi.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003502:	d01a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003504:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003508:	d822      	bhi.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800350e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003512:	d007      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003514:	e01c      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003516:	4bb8      	ldr	r3, [pc, #736]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	4ab7      	ldr	r2, [pc, #732]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800351c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003520:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003522:	e01a      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003528:	3308      	adds	r3, #8
 800352a:	2102      	movs	r1, #2
 800352c:	4618      	mov	r0, r3
 800352e:	f001 fc8f 	bl	8004e50 <RCCEx_PLL2_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003538:	e00f      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800353a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353e:	3328      	adds	r3, #40	@ 0x28
 8003540:	2102      	movs	r1, #2
 8003542:	4618      	mov	r0, r3
 8003544:	f001 fd36 	bl	8004fb4 <RCCEx_PLL3_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800354e:	e004      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003556:	e000      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800355a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10a      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003562:	4ba5      	ldr	r3, [pc, #660]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003566:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800356a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003570:	4aa1      	ldr	r2, [pc, #644]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003572:	430b      	orrs	r3, r1
 8003574:	6513      	str	r3, [r2, #80]	@ 0x50
 8003576:	e003      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003578:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800357c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800358c:	f04f 0900 	mov.w	r9, #0
 8003590:	ea58 0309 	orrs.w	r3, r8, r9
 8003594:	d047      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359c:	2b04      	cmp	r3, #4
 800359e:	d82a      	bhi.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80035a0:	a201      	add	r2, pc, #4	@ (adr r2, 80035a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80035a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a6:	bf00      	nop
 80035a8:	080035bd 	.word	0x080035bd
 80035ac:	080035cb 	.word	0x080035cb
 80035b0:	080035e1 	.word	0x080035e1
 80035b4:	080035ff 	.word	0x080035ff
 80035b8:	080035ff 	.word	0x080035ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035bc:	4b8e      	ldr	r3, [pc, #568]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c0:	4a8d      	ldr	r2, [pc, #564]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035c8:	e01a      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ce:	3308      	adds	r3, #8
 80035d0:	2100      	movs	r1, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 fc3c 	bl	8004e50 <RCCEx_PLL2_Config>
 80035d8:	4603      	mov	r3, r0
 80035da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035de:	e00f      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e4:	3328      	adds	r3, #40	@ 0x28
 80035e6:	2100      	movs	r1, #0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f001 fce3 	bl	8004fb4 <RCCEx_PLL3_Config>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035f4:	e004      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035fc:	e000      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80035fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003608:	4b7b      	ldr	r3, [pc, #492]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800360a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800360c:	f023 0107 	bic.w	r1, r3, #7
 8003610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003616:	4a78      	ldr	r2, [pc, #480]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003618:	430b      	orrs	r3, r1
 800361a:	6513      	str	r3, [r2, #80]	@ 0x50
 800361c:	e003      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003622:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003632:	f04f 0b00 	mov.w	fp, #0
 8003636:	ea5a 030b 	orrs.w	r3, sl, fp
 800363a:	d04c      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800363c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003646:	d030      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800364c:	d829      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800364e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003650:	d02d      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003652:	2bc0      	cmp	r3, #192	@ 0xc0
 8003654:	d825      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003656:	2b80      	cmp	r3, #128	@ 0x80
 8003658:	d018      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800365a:	2b80      	cmp	r3, #128	@ 0x80
 800365c:	d821      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003662:	2b40      	cmp	r3, #64	@ 0x40
 8003664:	d007      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003666:	e01c      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003668:	4b63      	ldr	r3, [pc, #396]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800366a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366c:	4a62      	ldr	r2, [pc, #392]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800366e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003672:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003674:	e01c      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367a:	3308      	adds	r3, #8
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f001 fbe6 	bl	8004e50 <RCCEx_PLL2_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800368a:	e011      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003690:	3328      	adds	r3, #40	@ 0x28
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f001 fc8d 	bl	8004fb4 <RCCEx_PLL3_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036a0:	e006      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036a8:	e002      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036aa:	bf00      	nop
 80036ac:	e000      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10a      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80036b8:	4b4f      	ldr	r3, [pc, #316]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036bc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c6:	4a4c      	ldr	r2, [pc, #304]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036c8:	430b      	orrs	r3, r1
 80036ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80036cc:	e003      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036de:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80036e2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80036e6:	2300      	movs	r3, #0
 80036e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80036ec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80036f0:	460b      	mov	r3, r1
 80036f2:	4313      	orrs	r3, r2
 80036f4:	d053      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80036f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80036fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003702:	d035      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003704:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003708:	d82e      	bhi.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800370a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800370e:	d031      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003710:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003714:	d828      	bhi.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003716:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800371a:	d01a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800371c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003720:	d822      	bhi.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003726:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800372a:	d007      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800372c:	e01c      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800372e:	4b32      	ldr	r3, [pc, #200]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003732:	4a31      	ldr	r2, [pc, #196]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003738:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800373a:	e01c      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800373c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003740:	3308      	adds	r3, #8
 8003742:	2100      	movs	r1, #0
 8003744:	4618      	mov	r0, r3
 8003746:	f001 fb83 	bl	8004e50 <RCCEx_PLL2_Config>
 800374a:	4603      	mov	r3, r0
 800374c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003750:	e011      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003756:	3328      	adds	r3, #40	@ 0x28
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f001 fc2a 	bl	8004fb4 <RCCEx_PLL3_Config>
 8003760:	4603      	mov	r3, r0
 8003762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003766:	e006      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800376e:	e002      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003770:	bf00      	nop
 8003772:	e000      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10b      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800377e:	4b1e      	ldr	r3, [pc, #120]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003782:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800378e:	4a1a      	ldr	r2, [pc, #104]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003790:	430b      	orrs	r3, r1
 8003792:	6593      	str	r3, [r2, #88]	@ 0x58
 8003794:	e003      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800379a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80037aa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80037ae:	2300      	movs	r3, #0
 80037b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80037b4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80037b8:	460b      	mov	r3, r1
 80037ba:	4313      	orrs	r3, r2
 80037bc:	d056      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037ca:	d038      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80037cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037d0:	d831      	bhi.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037d6:	d034      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80037d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037dc:	d82b      	bhi.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037e2:	d01d      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80037e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037e8:	d825      	bhi.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d006      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80037ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037f2:	d00a      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80037f4:	e01f      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037f6:	bf00      	nop
 80037f8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037fc:	4ba2      	ldr	r3, [pc, #648]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	4aa1      	ldr	r2, [pc, #644]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003806:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003808:	e01c      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800380a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380e:	3308      	adds	r3, #8
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f001 fb1c 	bl	8004e50 <RCCEx_PLL2_Config>
 8003818:	4603      	mov	r3, r0
 800381a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800381e:	e011      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003824:	3328      	adds	r3, #40	@ 0x28
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f001 fbc3 	bl	8004fb4 <RCCEx_PLL3_Config>
 800382e:	4603      	mov	r3, r0
 8003830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003834:	e006      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800383c:	e002      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800383e:	bf00      	nop
 8003840:	e000      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10b      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800384c:	4b8e      	ldr	r3, [pc, #568]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800384e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003850:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003858:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800385c:	4a8a      	ldr	r2, [pc, #552]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800385e:	430b      	orrs	r3, r1
 8003860:	6593      	str	r3, [r2, #88]	@ 0x58
 8003862:	e003      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003864:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003868:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003878:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800387c:	2300      	movs	r3, #0
 800387e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003882:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003886:	460b      	mov	r3, r1
 8003888:	4313      	orrs	r3, r2
 800388a:	d03a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003892:	2b30      	cmp	r3, #48	@ 0x30
 8003894:	d01f      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003896:	2b30      	cmp	r3, #48	@ 0x30
 8003898:	d819      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800389a:	2b20      	cmp	r3, #32
 800389c:	d00c      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d815      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d019      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	d111      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038aa:	4b77      	ldr	r3, [pc, #476]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ae:	4a76      	ldr	r2, [pc, #472]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038b6:	e011      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038bc:	3308      	adds	r3, #8
 80038be:	2102      	movs	r1, #2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 fac5 	bl	8004e50 <RCCEx_PLL2_Config>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038cc:	e006      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038d4:	e002      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038d6:	bf00      	nop
 80038d8:	e000      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80038e4:	4b68      	ldr	r3, [pc, #416]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80038ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f2:	4a65      	ldr	r2, [pc, #404]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038f4:	430b      	orrs	r3, r1
 80038f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038f8:	e003      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800390e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003912:	2300      	movs	r3, #0
 8003914:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003918:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800391c:	460b      	mov	r3, r1
 800391e:	4313      	orrs	r3, r2
 8003920:	d051      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003928:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800392c:	d035      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800392e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003932:	d82e      	bhi.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003934:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003938:	d031      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800393a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800393e:	d828      	bhi.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003940:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003944:	d01a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800394a:	d822      	bhi.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003950:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003954:	d007      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003956:	e01c      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003958:	4b4b      	ldr	r3, [pc, #300]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800395a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395c:	4a4a      	ldr	r2, [pc, #296]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800395e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003964:	e01c      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396a:	3308      	adds	r3, #8
 800396c:	2100      	movs	r1, #0
 800396e:	4618      	mov	r0, r3
 8003970:	f001 fa6e 	bl	8004e50 <RCCEx_PLL2_Config>
 8003974:	4603      	mov	r3, r0
 8003976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800397a:	e011      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800397c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003980:	3328      	adds	r3, #40	@ 0x28
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f001 fb15 	bl	8004fb4 <RCCEx_PLL3_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003990:	e006      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003998:	e002      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800399a:	bf00      	nop
 800399c:	e000      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800399e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039a8:	4b37      	ldr	r3, [pc, #220]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b6:	4a34      	ldr	r2, [pc, #208]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80039bc:	e003      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80039d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80039dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80039e0:	460b      	mov	r3, r1
 80039e2:	4313      	orrs	r3, r2
 80039e4:	d056      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039f0:	d033      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80039f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039f6:	d82c      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039fc:	d02f      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80039fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a02:	d826      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a08:	d02b      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a0e:	d820      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a14:	d012      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a1a:	d81a      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d022      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a24:	d115      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 fa0e 	bl	8004e50 <RCCEx_PLL2_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a3a:	e015      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a40:	3328      	adds	r3, #40	@ 0x28
 8003a42:	2101      	movs	r1, #1
 8003a44:	4618      	mov	r0, r3
 8003a46:	f001 fab5 	bl	8004fb4 <RCCEx_PLL3_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a50:	e00a      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a58:	e006      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a5a:	bf00      	nop
 8003a5c:	e004      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a5e:	bf00      	nop
 8003a60:	e002      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a62:	bf00      	nop
 8003a64:	e000      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10d      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a70:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a74:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a7e:	4a02      	ldr	r2, [pc, #8]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a80:	430b      	orrs	r3, r1
 8003a82:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a84:	e006      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a86:	bf00      	nop
 8003a88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003aaa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	d055      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ac0:	d033      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ac6:	d82c      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003acc:	d02f      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad2:	d826      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ad4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ad8:	d02b      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003ada:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ade:	d820      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ae0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ae4:	d012      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003ae6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aea:	d81a      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d022      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003af0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003af4:	d115      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afa:	3308      	adds	r3, #8
 8003afc:	2101      	movs	r1, #1
 8003afe:	4618      	mov	r0, r3
 8003b00:	f001 f9a6 	bl	8004e50 <RCCEx_PLL2_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b0a:	e015      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b10:	3328      	adds	r3, #40	@ 0x28
 8003b12:	2101      	movs	r1, #1
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 fa4d 	bl	8004fb4 <RCCEx_PLL3_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b20:	e00a      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b28:	e006      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b2a:	bf00      	nop
 8003b2c:	e004      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b2e:	bf00      	nop
 8003b30:	e002      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b32:	bf00      	nop
 8003b34:	e000      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10b      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b40:	4ba3      	ldr	r3, [pc, #652]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b44:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b50:	4a9f      	ldr	r2, [pc, #636]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b52:	430b      	orrs	r3, r1
 8003b54:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b56:	e003      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b68:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003b76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	d037      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b8a:	d00e      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003b8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b90:	d816      	bhi.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d018      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003b96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b9a:	d111      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b9c:	4b8c      	ldr	r3, [pc, #560]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba0:	4a8b      	ldr	r2, [pc, #556]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ba6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ba8:	e00f      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bae:	3308      	adds	r3, #8
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f001 f94c 	bl	8004e50 <RCCEx_PLL2_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bbe:	e004      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bc6:	e000      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be0:	4a7b      	ldr	r2, [pc, #492]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be2:	430b      	orrs	r3, r1
 8003be4:	6513      	str	r3, [r2, #80]	@ 0x50
 8003be6:	e003      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c00:	2300      	movs	r3, #0
 8003c02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c06:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	d039      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d81c      	bhi.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c20 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c20:	08003c5d 	.word	0x08003c5d
 8003c24:	08003c31 	.word	0x08003c31
 8003c28:	08003c3f 	.word	0x08003c3f
 8003c2c:	08003c5d 	.word	0x08003c5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c30:	4b67      	ldr	r3, [pc, #412]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c34:	4a66      	ldr	r2, [pc, #408]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c3c:	e00f      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c42:	3308      	adds	r3, #8
 8003c44:	2102      	movs	r1, #2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f001 f902 	bl	8004e50 <RCCEx_PLL2_Config>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c52:	e004      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c5a:	e000      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10a      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c66:	4b5a      	ldr	r3, [pc, #360]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6a:	f023 0103 	bic.w	r1, r3, #3
 8003c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c74:	4a56      	ldr	r2, [pc, #344]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c76:	430b      	orrs	r3, r1
 8003c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c7a:	e003      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003c90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c94:	2300      	movs	r3, #0
 8003c96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f000 809f 	beq.w	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a4a      	ldr	r2, [pc, #296]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cb2:	f7fd fb73 	bl	800139c <HAL_GetTick>
 8003cb6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbc:	f7fd fb6e 	bl	800139c <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b64      	cmp	r3, #100	@ 0x64
 8003cca:	d903      	bls.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cd2:	e005      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0ed      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d179      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ce8:	4b39      	ldr	r3, [pc, #228]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cf4:	4053      	eors	r3, r2
 8003cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d015      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cfe:	4b34      	ldr	r3, [pc, #208]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d06:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d0a:	4b31      	ldr	r3, [pc, #196]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0e:	4a30      	ldr	r2, [pc, #192]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d14:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d16:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d20:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d22:	4a2b      	ldr	r2, [pc, #172]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d28:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d36:	d118      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d38:	f7fd fb30 	bl	800139c <HAL_GetTick>
 8003d3c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d40:	e00d      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d42:	f7fd fb2b 	bl	800139c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d4c:	1ad2      	subs	r2, r2, r3
 8003d4e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d903      	bls.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003d5c:	e005      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0eb      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d129      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d82:	d10e      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003d84:	4b12      	ldr	r3, [pc, #72]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d94:	091a      	lsrs	r2, r3, #4
 8003d96:	4b10      	ldr	r3, [pc, #64]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	6113      	str	r3, [r2, #16]
 8003da0:	e005      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003da2:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003dac:	6113      	str	r3, [r2, #16]
 8003dae:	4b08      	ldr	r3, [pc, #32]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003db0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbe:	4a04      	ldr	r2, [pc, #16]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc4:	e00e      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003dce:	e009      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003dd0:	58024400 	.word	0x58024400
 8003dd4:	58024800 	.word	0x58024800
 8003dd8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003de0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dec:	f002 0301 	and.w	r3, r2, #1
 8003df0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003df4:	2300      	movs	r3, #0
 8003df6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003dfa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f000 8089 	beq.w	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e0c:	2b28      	cmp	r3, #40	@ 0x28
 8003e0e:	d86b      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e10:	a201      	add	r2, pc, #4	@ (adr r2, 8003e18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003ef1 	.word	0x08003ef1
 8003e1c:	08003ee9 	.word	0x08003ee9
 8003e20:	08003ee9 	.word	0x08003ee9
 8003e24:	08003ee9 	.word	0x08003ee9
 8003e28:	08003ee9 	.word	0x08003ee9
 8003e2c:	08003ee9 	.word	0x08003ee9
 8003e30:	08003ee9 	.word	0x08003ee9
 8003e34:	08003ee9 	.word	0x08003ee9
 8003e38:	08003ebd 	.word	0x08003ebd
 8003e3c:	08003ee9 	.word	0x08003ee9
 8003e40:	08003ee9 	.word	0x08003ee9
 8003e44:	08003ee9 	.word	0x08003ee9
 8003e48:	08003ee9 	.word	0x08003ee9
 8003e4c:	08003ee9 	.word	0x08003ee9
 8003e50:	08003ee9 	.word	0x08003ee9
 8003e54:	08003ee9 	.word	0x08003ee9
 8003e58:	08003ed3 	.word	0x08003ed3
 8003e5c:	08003ee9 	.word	0x08003ee9
 8003e60:	08003ee9 	.word	0x08003ee9
 8003e64:	08003ee9 	.word	0x08003ee9
 8003e68:	08003ee9 	.word	0x08003ee9
 8003e6c:	08003ee9 	.word	0x08003ee9
 8003e70:	08003ee9 	.word	0x08003ee9
 8003e74:	08003ee9 	.word	0x08003ee9
 8003e78:	08003ef1 	.word	0x08003ef1
 8003e7c:	08003ee9 	.word	0x08003ee9
 8003e80:	08003ee9 	.word	0x08003ee9
 8003e84:	08003ee9 	.word	0x08003ee9
 8003e88:	08003ee9 	.word	0x08003ee9
 8003e8c:	08003ee9 	.word	0x08003ee9
 8003e90:	08003ee9 	.word	0x08003ee9
 8003e94:	08003ee9 	.word	0x08003ee9
 8003e98:	08003ef1 	.word	0x08003ef1
 8003e9c:	08003ee9 	.word	0x08003ee9
 8003ea0:	08003ee9 	.word	0x08003ee9
 8003ea4:	08003ee9 	.word	0x08003ee9
 8003ea8:	08003ee9 	.word	0x08003ee9
 8003eac:	08003ee9 	.word	0x08003ee9
 8003eb0:	08003ee9 	.word	0x08003ee9
 8003eb4:	08003ee9 	.word	0x08003ee9
 8003eb8:	08003ef1 	.word	0x08003ef1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec0:	3308      	adds	r3, #8
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 ffc3 	bl	8004e50 <RCCEx_PLL2_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ed0:	e00f      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed6:	3328      	adds	r3, #40	@ 0x28
 8003ed8:	2101      	movs	r1, #1
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 f86a 	bl	8004fb4 <RCCEx_PLL3_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ee6:	e004      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eee:	e000      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10a      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003efa:	4bbf      	ldr	r3, [pc, #764]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f08:	4abb      	ldr	r2, [pc, #748]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f0e:	e003      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	f002 0302 	and.w	r3, r2, #2
 8003f24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f2e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f32:	460b      	mov	r3, r1
 8003f34:	4313      	orrs	r3, r2
 8003f36:	d041      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f3e:	2b05      	cmp	r3, #5
 8003f40:	d824      	bhi.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003f42:	a201      	add	r2, pc, #4	@ (adr r2, 8003f48 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f48:	08003f95 	.word	0x08003f95
 8003f4c:	08003f61 	.word	0x08003f61
 8003f50:	08003f77 	.word	0x08003f77
 8003f54:	08003f95 	.word	0x08003f95
 8003f58:	08003f95 	.word	0x08003f95
 8003f5c:	08003f95 	.word	0x08003f95
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f64:	3308      	adds	r3, #8
 8003f66:	2101      	movs	r1, #1
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 ff71 	bl	8004e50 <RCCEx_PLL2_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f74:	e00f      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7a:	3328      	adds	r3, #40	@ 0x28
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 f818 	bl	8004fb4 <RCCEx_PLL3_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f8a:	e004      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f92:	e000      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10a      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f9e:	4b96      	ldr	r3, [pc, #600]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa2:	f023 0107 	bic.w	r1, r3, #7
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003faa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fac:	4a92      	ldr	r2, [pc, #584]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fb2:	e003      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc4:	f002 0304 	and.w	r3, r2, #4
 8003fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fd2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	d044      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fe4:	2b05      	cmp	r3, #5
 8003fe6:	d825      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	0800403d 	.word	0x0800403d
 8003ff4:	08004009 	.word	0x08004009
 8003ff8:	0800401f 	.word	0x0800401f
 8003ffc:	0800403d 	.word	0x0800403d
 8004000:	0800403d 	.word	0x0800403d
 8004004:	0800403d 	.word	0x0800403d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400c:	3308      	adds	r3, #8
 800400e:	2101      	movs	r1, #1
 8004010:	4618      	mov	r0, r3
 8004012:	f000 ff1d 	bl	8004e50 <RCCEx_PLL2_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800401c:	e00f      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004022:	3328      	adds	r3, #40	@ 0x28
 8004024:	2101      	movs	r1, #1
 8004026:	4618      	mov	r0, r3
 8004028:	f000 ffc4 	bl	8004fb4 <RCCEx_PLL3_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004032:	e004      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800403a:	e000      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800403c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800403e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10b      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004046:	4b6c      	ldr	r3, [pc, #432]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404a:	f023 0107 	bic.w	r1, r3, #7
 800404e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004056:	4a68      	ldr	r2, [pc, #416]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004058:	430b      	orrs	r3, r1
 800405a:	6593      	str	r3, [r2, #88]	@ 0x58
 800405c:	e003      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406e:	f002 0320 	and.w	r3, r2, #32
 8004072:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004076:	2300      	movs	r3, #0
 8004078:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800407c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004080:	460b      	mov	r3, r1
 8004082:	4313      	orrs	r3, r2
 8004084:	d055      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004092:	d033      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004094:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004098:	d82c      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800409e:	d02f      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80040a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a4:	d826      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040aa:	d02b      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80040ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040b0:	d820      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040b6:	d012      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80040b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040bc:	d81a      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d022      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80040c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040c6:	d115      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040cc:	3308      	adds	r3, #8
 80040ce:	2100      	movs	r1, #0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 febd 	bl	8004e50 <RCCEx_PLL2_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040dc:	e015      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e2:	3328      	adds	r3, #40	@ 0x28
 80040e4:	2102      	movs	r1, #2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 ff64 	bl	8004fb4 <RCCEx_PLL3_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040f2:	e00a      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040fa:	e006      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040fc:	bf00      	nop
 80040fe:	e004      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004100:	bf00      	nop
 8004102:	e002      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004104:	bf00      	nop
 8004106:	e000      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800410a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10b      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004112:	4b39      	ldr	r3, [pc, #228]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004116:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800411a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004122:	4a35      	ldr	r2, [pc, #212]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004124:	430b      	orrs	r3, r1
 8004126:	6553      	str	r3, [r2, #84]	@ 0x54
 8004128:	e003      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800412e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800413e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004142:	2300      	movs	r3, #0
 8004144:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004148:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800414c:	460b      	mov	r3, r1
 800414e:	4313      	orrs	r3, r2
 8004150:	d058      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004156:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800415a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800415e:	d033      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004160:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004164:	d82c      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800416a:	d02f      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800416c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004170:	d826      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004172:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004176:	d02b      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004178:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800417c:	d820      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800417e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004182:	d012      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004184:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004188:	d81a      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d022      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800418e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004192:	d115      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004198:	3308      	adds	r3, #8
 800419a:	2100      	movs	r1, #0
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fe57 	bl	8004e50 <RCCEx_PLL2_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041a8:	e015      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ae:	3328      	adds	r3, #40	@ 0x28
 80041b0:	2102      	movs	r1, #2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fefe 	bl	8004fb4 <RCCEx_PLL3_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041be:	e00a      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041c6:	e006      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041c8:	bf00      	nop
 80041ca:	e004      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041cc:	bf00      	nop
 80041ce:	e002      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041d0:	bf00      	nop
 80041d2:	e000      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10e      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041de:	4b06      	ldr	r3, [pc, #24]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80041e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041ee:	4a02      	ldr	r2, [pc, #8]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041f0:	430b      	orrs	r3, r1
 80041f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80041f4:	e006      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80041f6:	bf00      	nop
 80041f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004200:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004210:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800421a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800421e:	460b      	mov	r3, r1
 8004220:	4313      	orrs	r3, r2
 8004222:	d055      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004228:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800422c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004230:	d033      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004232:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004236:	d82c      	bhi.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004238:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800423c:	d02f      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800423e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004242:	d826      	bhi.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004244:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004248:	d02b      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800424a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800424e:	d820      	bhi.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004250:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004254:	d012      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004256:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800425a:	d81a      	bhi.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d022      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004260:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004264:	d115      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426a:	3308      	adds	r3, #8
 800426c:	2100      	movs	r1, #0
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fdee 	bl	8004e50 <RCCEx_PLL2_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800427a:	e015      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800427c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004280:	3328      	adds	r3, #40	@ 0x28
 8004282:	2102      	movs	r1, #2
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fe95 	bl	8004fb4 <RCCEx_PLL3_Config>
 800428a:	4603      	mov	r3, r0
 800428c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004290:	e00a      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004298:	e006      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800429a:	bf00      	nop
 800429c:	e004      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800429e:	bf00      	nop
 80042a0:	e002      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042a2:	bf00      	nop
 80042a4:	e000      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042b0:	4ba1      	ldr	r3, [pc, #644]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80042b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042c0:	4a9d      	ldr	r2, [pc, #628]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042c2:	430b      	orrs	r3, r1
 80042c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80042c6:	e003      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d8:	f002 0308 	and.w	r3, r2, #8
 80042dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042e0:	2300      	movs	r3, #0
 80042e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80042e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80042ea:	460b      	mov	r3, r1
 80042ec:	4313      	orrs	r3, r2
 80042ee:	d01e      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80042f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042fc:	d10c      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004302:	3328      	adds	r3, #40	@ 0x28
 8004304:	2102      	movs	r1, #2
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fe54 	bl	8004fb4 <RCCEx_PLL3_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004318:	4b87      	ldr	r3, [pc, #540]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800431a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800431c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004324:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004328:	4a83      	ldr	r2, [pc, #524]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800432a:	430b      	orrs	r3, r1
 800432c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	f002 0310 	and.w	r3, r2, #16
 800433a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800433e:	2300      	movs	r3, #0
 8004340:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004344:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004348:	460b      	mov	r3, r1
 800434a:	4313      	orrs	r3, r2
 800434c:	d01e      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004352:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800435a:	d10c      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004360:	3328      	adds	r3, #40	@ 0x28
 8004362:	2102      	movs	r1, #2
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fe25 	bl	8004fb4 <RCCEx_PLL3_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004376:	4b70      	ldr	r3, [pc, #448]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004382:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004386:	4a6c      	ldr	r2, [pc, #432]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004388:	430b      	orrs	r3, r1
 800438a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800438c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004398:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800439c:	2300      	movs	r3, #0
 800439e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80043a6:	460b      	mov	r3, r1
 80043a8:	4313      	orrs	r3, r2
 80043aa:	d03e      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80043ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043b8:	d022      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80043ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043be:	d81b      	bhi.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80043c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c8:	d00b      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80043ca:	e015      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d0:	3308      	adds	r3, #8
 80043d2:	2100      	movs	r1, #0
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fd3b 	bl	8004e50 <RCCEx_PLL2_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043e0:	e00f      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e6:	3328      	adds	r3, #40	@ 0x28
 80043e8:	2102      	movs	r1, #2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fde2 	bl	8004fb4 <RCCEx_PLL3_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043f6:	e004      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043fe:	e000      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10b      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800440a:	4b4b      	ldr	r3, [pc, #300]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800440c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800440e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004416:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800441a:	4a47      	ldr	r2, [pc, #284]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800441c:	430b      	orrs	r3, r1
 800441e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004420:	e003      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004426:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800442a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004436:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004438:	2300      	movs	r3, #0
 800443a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800443c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004440:	460b      	mov	r3, r1
 8004442:	4313      	orrs	r3, r2
 8004444:	d03b      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004452:	d01f      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004454:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004458:	d818      	bhi.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800445a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800445e:	d003      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004460:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004464:	d007      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004466:	e011      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004468:	4b33      	ldr	r3, [pc, #204]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	4a32      	ldr	r2, [pc, #200]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800446e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004472:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004474:	e00f      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447a:	3328      	adds	r3, #40	@ 0x28
 800447c:	2101      	movs	r1, #1
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fd98 	bl	8004fb4 <RCCEx_PLL3_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800448a:	e004      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004492:	e000      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10b      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800449e:	4b26      	ldr	r3, [pc, #152]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80044a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ae:	4a22      	ldr	r2, [pc, #136]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044b0:	430b      	orrs	r3, r1
 80044b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80044b4:	e003      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80044ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80044cc:	2300      	movs	r3, #0
 80044ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80044d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80044d4:	460b      	mov	r3, r1
 80044d6:	4313      	orrs	r3, r2
 80044d8:	d034      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80044da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e8:	d007      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80044ea:	e011      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ec:	4b12      	ldr	r3, [pc, #72]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f0:	4a11      	ldr	r2, [pc, #68]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044f8:	e00e      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fe:	3308      	adds	r3, #8
 8004500:	2102      	movs	r1, #2
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fca4 	bl	8004e50 <RCCEx_PLL2_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800450e:	e003      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004516:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10d      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004520:	4b05      	ldr	r3, [pc, #20]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004524:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800452e:	4a02      	ldr	r2, [pc, #8]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004530:	430b      	orrs	r3, r1
 8004532:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004534:	e006      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004536:	bf00      	nop
 8004538:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004540:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004550:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004552:	2300      	movs	r3, #0
 8004554:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004556:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800455a:	460b      	mov	r3, r1
 800455c:	4313      	orrs	r3, r2
 800455e:	d00c      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004564:	3328      	adds	r3, #40	@ 0x28
 8004566:	2102      	movs	r1, #2
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fd23 	bl	8004fb4 <RCCEx_PLL3_Config>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004586:	663b      	str	r3, [r7, #96]	@ 0x60
 8004588:	2300      	movs	r3, #0
 800458a:	667b      	str	r3, [r7, #100]	@ 0x64
 800458c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004590:	460b      	mov	r3, r1
 8004592:	4313      	orrs	r3, r2
 8004594:	d038      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800459e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045a2:	d018      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80045a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045a8:	d811      	bhi.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ae:	d014      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80045b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045b4:	d80b      	bhi.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d011      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80045ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045be:	d106      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c0:	4bc3      	ldr	r3, [pc, #780]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c4:	4ac2      	ldr	r2, [pc, #776]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80045cc:	e008      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045d4:	e004      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045d6:	bf00      	nop
 80045d8:	e002      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045da:	bf00      	nop
 80045dc:	e000      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10b      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045e8:	4bb9      	ldr	r3, [pc, #740]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045f8:	4ab5      	ldr	r2, [pc, #724]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045fa:	430b      	orrs	r3, r1
 80045fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80045fe:	e003      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004604:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004610:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004614:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004616:	2300      	movs	r3, #0
 8004618:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800461a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800461e:	460b      	mov	r3, r1
 8004620:	4313      	orrs	r3, r2
 8004622:	d009      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004624:	4baa      	ldr	r3, [pc, #680]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004628:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800462c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004632:	4aa7      	ldr	r2, [pc, #668]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004634:	430b      	orrs	r3, r1
 8004636:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004644:	653b      	str	r3, [r7, #80]	@ 0x50
 8004646:	2300      	movs	r3, #0
 8004648:	657b      	str	r3, [r7, #84]	@ 0x54
 800464a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800464e:	460b      	mov	r3, r1
 8004650:	4313      	orrs	r3, r2
 8004652:	d00a      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004654:	4b9e      	ldr	r3, [pc, #632]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800465c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004660:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004664:	4a9a      	ldr	r2, [pc, #616]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004666:	430b      	orrs	r3, r1
 8004668:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800466a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004676:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004678:	2300      	movs	r3, #0
 800467a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800467c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004680:	460b      	mov	r3, r1
 8004682:	4313      	orrs	r3, r2
 8004684:	d009      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004686:	4b92      	ldr	r3, [pc, #584]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800468a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004694:	4a8e      	ldr	r2, [pc, #568]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004696:	430b      	orrs	r3, r1
 8004698:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80046a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80046a8:	2300      	movs	r3, #0
 80046aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80046b0:	460b      	mov	r3, r1
 80046b2:	4313      	orrs	r3, r2
 80046b4:	d00e      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046b6:	4b86      	ldr	r3, [pc, #536]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	4a85      	ldr	r2, [pc, #532]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046c0:	6113      	str	r3, [r2, #16]
 80046c2:	4b83      	ldr	r3, [pc, #524]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c4:	6919      	ldr	r1, [r3, #16]
 80046c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80046ce:	4a80      	ldr	r2, [pc, #512]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80046e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046e2:	2300      	movs	r3, #0
 80046e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80046ea:	460b      	mov	r3, r1
 80046ec:	4313      	orrs	r3, r2
 80046ee:	d009      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046f0:	4b77      	ldr	r3, [pc, #476]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046f4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80046f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fe:	4a74      	ldr	r2, [pc, #464]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004700:	430b      	orrs	r3, r1
 8004702:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004710:	633b      	str	r3, [r7, #48]	@ 0x30
 8004712:	2300      	movs	r3, #0
 8004714:	637b      	str	r3, [r7, #52]	@ 0x34
 8004716:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800471a:	460b      	mov	r3, r1
 800471c:	4313      	orrs	r3, r2
 800471e:	d00a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004720:	4b6b      	ldr	r3, [pc, #428]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004724:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004730:	4a67      	ldr	r2, [pc, #412]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004732:	430b      	orrs	r3, r1
 8004734:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	2100      	movs	r1, #0
 8004740:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004748:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800474c:	460b      	mov	r3, r1
 800474e:	4313      	orrs	r3, r2
 8004750:	d011      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004756:	3308      	adds	r3, #8
 8004758:	2100      	movs	r1, #0
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fb78 	bl	8004e50 <RCCEx_PLL2_Config>
 8004760:	4603      	mov	r3, r0
 8004762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004772:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	2100      	movs	r1, #0
 8004780:	6239      	str	r1, [r7, #32]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	627b      	str	r3, [r7, #36]	@ 0x24
 8004788:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800478c:	460b      	mov	r3, r1
 800478e:	4313      	orrs	r3, r2
 8004790:	d011      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004796:	3308      	adds	r3, #8
 8004798:	2101      	movs	r1, #1
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fb58 	bl	8004e50 <RCCEx_PLL2_Config>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80047b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	2100      	movs	r1, #0
 80047c0:	61b9      	str	r1, [r7, #24]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	61fb      	str	r3, [r7, #28]
 80047c8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80047cc:	460b      	mov	r3, r1
 80047ce:	4313      	orrs	r3, r2
 80047d0:	d011      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d6:	3308      	adds	r3, #8
 80047d8:	2102      	movs	r1, #2
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fb38 	bl	8004e50 <RCCEx_PLL2_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	2100      	movs	r1, #0
 8004800:	6139      	str	r1, [r7, #16]
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800480c:	460b      	mov	r3, r1
 800480e:	4313      	orrs	r3, r2
 8004810:	d011      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004816:	3328      	adds	r3, #40	@ 0x28
 8004818:	2100      	movs	r1, #0
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fbca 	bl	8004fb4 <RCCEx_PLL3_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004832:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	2100      	movs	r1, #0
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800484c:	460b      	mov	r3, r1
 800484e:	4313      	orrs	r3, r2
 8004850:	d011      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004856:	3328      	adds	r3, #40	@ 0x28
 8004858:	2101      	movs	r1, #1
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fbaa 	bl	8004fb4 <RCCEx_PLL3_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004872:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	2100      	movs	r1, #0
 8004880:	6039      	str	r1, [r7, #0]
 8004882:	f003 0320 	and.w	r3, r3, #32
 8004886:	607b      	str	r3, [r7, #4]
 8004888:	e9d7 1200 	ldrd	r1, r2, [r7]
 800488c:	460b      	mov	r3, r1
 800488e:	4313      	orrs	r3, r2
 8004890:	d011      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004896:	3328      	adds	r3, #40	@ 0x28
 8004898:	2102      	movs	r1, #2
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fb8a 	bl	8004fb4 <RCCEx_PLL3_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80048b6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	e000      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80048ca:	46bd      	mov	sp, r7
 80048cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048d0:	58024400 	.word	0x58024400

080048d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80048d8:	f7fe fd96 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 80048dc:	4602      	mov	r2, r0
 80048de:	4b06      	ldr	r3, [pc, #24]	@ (80048f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	091b      	lsrs	r3, r3, #4
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	4904      	ldr	r1, [pc, #16]	@ (80048fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80048ea:	5ccb      	ldrb	r3, [r1, r3]
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	58024400 	.word	0x58024400
 80048fc:	08007bbc 	.word	0x08007bbc

08004900 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004900:	b480      	push	{r7}
 8004902:	b089      	sub	sp, #36	@ 0x24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004908:	4ba1      	ldr	r3, [pc, #644]	@ (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800490a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490c:	f003 0303 	and.w	r3, r3, #3
 8004910:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004912:	4b9f      	ldr	r3, [pc, #636]	@ (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004916:	0b1b      	lsrs	r3, r3, #12
 8004918:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800491c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800491e:	4b9c      	ldr	r3, [pc, #624]	@ (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004922:	091b      	lsrs	r3, r3, #4
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800492a:	4b99      	ldr	r3, [pc, #612]	@ (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800492c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492e:	08db      	lsrs	r3, r3, #3
 8004930:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004942:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 8111 	beq.w	8004b70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b02      	cmp	r3, #2
 8004952:	f000 8083 	beq.w	8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b02      	cmp	r3, #2
 800495a:	f200 80a1 	bhi.w	8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d056      	beq.n	8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800496a:	e099      	b.n	8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800496c:	4b88      	ldr	r3, [pc, #544]	@ (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b00      	cmp	r3, #0
 8004976:	d02d      	beq.n	80049d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004978:	4b85      	ldr	r3, [pc, #532]	@ (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	08db      	lsrs	r3, r3, #3
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	4a84      	ldr	r2, [pc, #528]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
 8004988:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	ee07 3a90 	vmov	s15, r3
 8004990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049a2:	4b7b      	ldr	r3, [pc, #492]	@ (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049d2:	e087      	b.n	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80049e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a16:	e065      	b.n	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a2a:	4b59      	ldr	r3, [pc, #356]	@ (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a5a:	e043      	b.n	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6e:	4b48      	ldr	r3, [pc, #288]	@ (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a9e:	e021      	b.n	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aaa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab2:	4b37      	ldr	r3, [pc, #220]	@ (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ac6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ae2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae8:	0a5b      	lsrs	r3, r3, #9
 8004aea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004afa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004afe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b0a:	ee17 2a90 	vmov	r2, s15
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b12:	4b1f      	ldr	r3, [pc, #124]	@ (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b16:	0c1b      	lsrs	r3, r3, #16
 8004b18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b1c:	ee07 3a90 	vmov	s15, r3
 8004b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b38:	ee17 2a90 	vmov	r2, s15
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b40:	4b13      	ldr	r3, [pc, #76]	@ (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b44:	0e1b      	lsrs	r3, r3, #24
 8004b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b66:	ee17 2a90 	vmov	r2, s15
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b6e:	e008      	b.n	8004b82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	609a      	str	r2, [r3, #8]
}
 8004b82:	bf00      	nop
 8004b84:	3724      	adds	r7, #36	@ 0x24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	58024400 	.word	0x58024400
 8004b94:	03d09000 	.word	0x03d09000
 8004b98:	46000000 	.word	0x46000000
 8004b9c:	4c742400 	.word	0x4c742400
 8004ba0:	4a742400 	.word	0x4a742400
 8004ba4:	4af42400 	.word	0x4af42400

08004ba8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b089      	sub	sp, #36	@ 0x24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bb0:	4ba1      	ldr	r3, [pc, #644]	@ (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004bba:	4b9f      	ldr	r3, [pc, #636]	@ (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbe:	0d1b      	lsrs	r3, r3, #20
 8004bc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004bc6:	4b9c      	ldr	r3, [pc, #624]	@ (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004bd2:	4b99      	ldr	r3, [pc, #612]	@ (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd6:	08db      	lsrs	r3, r3, #3
 8004bd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	fb02 f303 	mul.w	r3, r2, r3
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 8111 	beq.w	8004e18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	f000 8083 	beq.w	8004d04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	f200 80a1 	bhi.w	8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d056      	beq.n	8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c12:	e099      	b.n	8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c14:	4b88      	ldr	r3, [pc, #544]	@ (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d02d      	beq.n	8004c7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c20:	4b85      	ldr	r3, [pc, #532]	@ (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	08db      	lsrs	r3, r3, #3
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	4a84      	ldr	r2, [pc, #528]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c30:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	ee07 3a90 	vmov	s15, r3
 8004c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c4a:	4b7b      	ldr	r3, [pc, #492]	@ (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c7a:	e087      	b.n	8004d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8e:	4b6a      	ldr	r3, [pc, #424]	@ (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ca2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cbe:	e065      	b.n	8004d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd2:	4b59      	ldr	r3, [pc, #356]	@ (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ce6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d02:	e043      	b.n	8004d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d16:	4b48      	ldr	r3, [pc, #288]	@ (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d46:	e021      	b.n	8004d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d5a:	4b37      	ldr	r3, [pc, #220]	@ (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d90:	0a5b      	lsrs	r3, r3, #9
 8004d92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004da2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004db2:	ee17 2a90 	vmov	r2, s15
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004dba:	4b1f      	ldr	r3, [pc, #124]	@ (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbe:	0c1b      	lsrs	r3, r3, #16
 8004dc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dc4:	ee07 3a90 	vmov	s15, r3
 8004dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de0:	ee17 2a90 	vmov	r2, s15
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004de8:	4b13      	ldr	r3, [pc, #76]	@ (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dec:	0e1b      	lsrs	r3, r3, #24
 8004dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e02:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e0e:	ee17 2a90 	vmov	r2, s15
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e16:	e008      	b.n	8004e2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	609a      	str	r2, [r3, #8]
}
 8004e2a:	bf00      	nop
 8004e2c:	3724      	adds	r7, #36	@ 0x24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	58024400 	.word	0x58024400
 8004e3c:	03d09000 	.word	0x03d09000
 8004e40:	46000000 	.word	0x46000000
 8004e44:	4c742400 	.word	0x4c742400
 8004e48:	4a742400 	.word	0x4a742400
 8004e4c:	4af42400 	.word	0x4af42400

08004e50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e5e:	4b53      	ldr	r3, [pc, #332]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d101      	bne.n	8004e6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e099      	b.n	8004fa2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a4e      	ldr	r2, [pc, #312]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004e74:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7a:	f7fc fa8f 	bl	800139c <HAL_GetTick>
 8004e7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e80:	e008      	b.n	8004e94 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e82:	f7fc fa8b 	bl	800139c <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e086      	b.n	8004fa2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e94:	4b45      	ldr	r3, [pc, #276]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f0      	bne.n	8004e82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ea0:	4b42      	ldr	r3, [pc, #264]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	031b      	lsls	r3, r3, #12
 8004eae:	493f      	ldr	r1, [pc, #252]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	025b      	lsls	r3, r3, #9
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	041b      	lsls	r3, r3, #16
 8004ed2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	061b      	lsls	r3, r3, #24
 8004ee0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ee4:	4931      	ldr	r1, [pc, #196]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004eea:	4b30      	ldr	r3, [pc, #192]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	492d      	ldr	r1, [pc, #180]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004efc:	4b2b      	ldr	r3, [pc, #172]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f00:	f023 0220 	bic.w	r2, r3, #32
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	4928      	ldr	r1, [pc, #160]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f0e:	4b27      	ldr	r3, [pc, #156]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f12:	4a26      	ldr	r2, [pc, #152]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f14:	f023 0310 	bic.w	r3, r3, #16
 8004f18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f1a:	4b24      	ldr	r3, [pc, #144]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f1e:	4b24      	ldr	r3, [pc, #144]	@ (8004fb0 <RCCEx_PLL2_Config+0x160>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	69d2      	ldr	r2, [r2, #28]
 8004f26:	00d2      	lsls	r2, r2, #3
 8004f28:	4920      	ldr	r1, [pc, #128]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f32:	4a1e      	ldr	r2, [pc, #120]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f34:	f043 0310 	orr.w	r3, r3, #16
 8004f38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d106      	bne.n	8004f4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f40:	4b1a      	ldr	r3, [pc, #104]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f44:	4a19      	ldr	r2, [pc, #100]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f46:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f4c:	e00f      	b.n	8004f6e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d106      	bne.n	8004f62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f54:	4b15      	ldr	r3, [pc, #84]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f58:	4a14      	ldr	r2, [pc, #80]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f60:	e005      	b.n	8004f6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f62:	4b12      	ldr	r3, [pc, #72]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f66:	4a11      	ldr	r2, [pc, #68]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a0e      	ldr	r2, [pc, #56]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7a:	f7fc fa0f 	bl	800139c <HAL_GetTick>
 8004f7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f80:	e008      	b.n	8004f94 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f82:	f7fc fa0b 	bl	800139c <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e006      	b.n	8004fa2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f94:	4b05      	ldr	r3, [pc, #20]	@ (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f0      	beq.n	8004f82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	58024400 	.word	0x58024400
 8004fb0:	ffff0007 	.word	0xffff0007

08004fb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fc2:	4b53      	ldr	r3, [pc, #332]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d101      	bne.n	8004fd2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e099      	b.n	8005106 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004fd2:	4b4f      	ldr	r3, [pc, #316]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a4e      	ldr	r2, [pc, #312]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 8004fd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fde:	f7fc f9dd 	bl	800139c <HAL_GetTick>
 8004fe2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fe4:	e008      	b.n	8004ff8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fe6:	f7fc f9d9 	bl	800139c <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e086      	b.n	8005106 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ff8:	4b45      	ldr	r3, [pc, #276]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1f0      	bne.n	8004fe6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005004:	4b42      	ldr	r3, [pc, #264]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 8005006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005008:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	051b      	lsls	r3, r3, #20
 8005012:	493f      	ldr	r1, [pc, #252]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 8005014:	4313      	orrs	r3, r2
 8005016:	628b      	str	r3, [r1, #40]	@ 0x28
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	3b01      	subs	r3, #1
 800501e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	3b01      	subs	r3, #1
 8005028:	025b      	lsls	r3, r3, #9
 800502a:	b29b      	uxth	r3, r3
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	3b01      	subs	r3, #1
 8005034:	041b      	lsls	r3, r3, #16
 8005036:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	3b01      	subs	r3, #1
 8005042:	061b      	lsls	r3, r3, #24
 8005044:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005048:	4931      	ldr	r1, [pc, #196]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 800504a:	4313      	orrs	r3, r2
 800504c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800504e:	4b30      	ldr	r3, [pc, #192]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 8005050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005052:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	492d      	ldr	r1, [pc, #180]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 800505c:	4313      	orrs	r3, r2
 800505e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005060:	4b2b      	ldr	r3, [pc, #172]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 8005062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005064:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	4928      	ldr	r1, [pc, #160]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 800506e:	4313      	orrs	r3, r2
 8005070:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005072:	4b27      	ldr	r3, [pc, #156]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 8005074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005076:	4a26      	ldr	r2, [pc, #152]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 8005078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800507c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800507e:	4b24      	ldr	r3, [pc, #144]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 8005080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005082:	4b24      	ldr	r3, [pc, #144]	@ (8005114 <RCCEx_PLL3_Config+0x160>)
 8005084:	4013      	ands	r3, r2
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	69d2      	ldr	r2, [r2, #28]
 800508a:	00d2      	lsls	r2, r2, #3
 800508c:	4920      	ldr	r1, [pc, #128]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 800508e:	4313      	orrs	r3, r2
 8005090:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005092:	4b1f      	ldr	r3, [pc, #124]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 8005094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005096:	4a1e      	ldr	r2, [pc, #120]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 8005098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800509c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d106      	bne.n	80050b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 80050a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a8:	4a19      	ldr	r2, [pc, #100]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 80050aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050b0:	e00f      	b.n	80050d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d106      	bne.n	80050c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050b8:	4b15      	ldr	r3, [pc, #84]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 80050ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050bc:	4a14      	ldr	r2, [pc, #80]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 80050be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050c4:	e005      	b.n	80050d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050c6:	4b12      	ldr	r3, [pc, #72]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 80050c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ca:	4a11      	ldr	r2, [pc, #68]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 80050cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a0e      	ldr	r2, [pc, #56]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 80050d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050de:	f7fc f95d 	bl	800139c <HAL_GetTick>
 80050e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050e4:	e008      	b.n	80050f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050e6:	f7fc f959 	bl	800139c <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e006      	b.n	8005106 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050f8:	4b05      	ldr	r3, [pc, #20]	@ (8005110 <RCCEx_PLL3_Config+0x15c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0f0      	beq.n	80050e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005104:	7bfb      	ldrb	r3, [r7, #15]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	58024400 	.word	0x58024400
 8005114:	ffff0007 	.word	0xffff0007

08005118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e049      	b.n	80051be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fb fe82 	bl	8000e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3304      	adds	r3, #4
 8005154:	4619      	mov	r1, r3
 8005156:	4610      	mov	r0, r2
 8005158:	f000 fc46 	bl	80059e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e049      	b.n	800526c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d106      	bne.n	80051f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f841 	bl	8005274 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2202      	movs	r2, #2
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3304      	adds	r3, #4
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f000 fbef 	bl	80059e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d109      	bne.n	80052ac <HAL_TIM_PWM_Start+0x24>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	bf14      	ite	ne
 80052a4:	2301      	movne	r3, #1
 80052a6:	2300      	moveq	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	e03c      	b.n	8005326 <HAL_TIM_PWM_Start+0x9e>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d109      	bne.n	80052c6 <HAL_TIM_PWM_Start+0x3e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	bf14      	ite	ne
 80052be:	2301      	movne	r3, #1
 80052c0:	2300      	moveq	r3, #0
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	e02f      	b.n	8005326 <HAL_TIM_PWM_Start+0x9e>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d109      	bne.n	80052e0 <HAL_TIM_PWM_Start+0x58>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	bf14      	ite	ne
 80052d8:	2301      	movne	r3, #1
 80052da:	2300      	moveq	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	e022      	b.n	8005326 <HAL_TIM_PWM_Start+0x9e>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b0c      	cmp	r3, #12
 80052e4:	d109      	bne.n	80052fa <HAL_TIM_PWM_Start+0x72>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	bf14      	ite	ne
 80052f2:	2301      	movne	r3, #1
 80052f4:	2300      	moveq	r3, #0
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	e015      	b.n	8005326 <HAL_TIM_PWM_Start+0x9e>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	d109      	bne.n	8005314 <HAL_TIM_PWM_Start+0x8c>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	bf14      	ite	ne
 800530c:	2301      	movne	r3, #1
 800530e:	2300      	moveq	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	e008      	b.n	8005326 <HAL_TIM_PWM_Start+0x9e>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b01      	cmp	r3, #1
 800531e:	bf14      	ite	ne
 8005320:	2301      	movne	r3, #1
 8005322:	2300      	moveq	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e0a1      	b.n	8005472 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d104      	bne.n	800533e <HAL_TIM_PWM_Start+0xb6>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800533c:	e023      	b.n	8005386 <HAL_TIM_PWM_Start+0xfe>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b04      	cmp	r3, #4
 8005342:	d104      	bne.n	800534e <HAL_TIM_PWM_Start+0xc6>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800534c:	e01b      	b.n	8005386 <HAL_TIM_PWM_Start+0xfe>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b08      	cmp	r3, #8
 8005352:	d104      	bne.n	800535e <HAL_TIM_PWM_Start+0xd6>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800535c:	e013      	b.n	8005386 <HAL_TIM_PWM_Start+0xfe>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b0c      	cmp	r3, #12
 8005362:	d104      	bne.n	800536e <HAL_TIM_PWM_Start+0xe6>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800536c:	e00b      	b.n	8005386 <HAL_TIM_PWM_Start+0xfe>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b10      	cmp	r3, #16
 8005372:	d104      	bne.n	800537e <HAL_TIM_PWM_Start+0xf6>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800537c:	e003      	b.n	8005386 <HAL_TIM_PWM_Start+0xfe>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2202      	movs	r2, #2
 8005382:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2201      	movs	r2, #1
 800538c:	6839      	ldr	r1, [r7, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f000 ff44 	bl	800621c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a38      	ldr	r2, [pc, #224]	@ (800547c <HAL_TIM_PWM_Start+0x1f4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d013      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x13e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a37      	ldr	r2, [pc, #220]	@ (8005480 <HAL_TIM_PWM_Start+0x1f8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00e      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x13e>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a35      	ldr	r2, [pc, #212]	@ (8005484 <HAL_TIM_PWM_Start+0x1fc>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d009      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x13e>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a34      	ldr	r2, [pc, #208]	@ (8005488 <HAL_TIM_PWM_Start+0x200>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d004      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x13e>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a32      	ldr	r2, [pc, #200]	@ (800548c <HAL_TIM_PWM_Start+0x204>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d101      	bne.n	80053ca <HAL_TIM_PWM_Start+0x142>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <HAL_TIM_PWM_Start+0x144>
 80053ca:	2300      	movs	r3, #0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d007      	beq.n	80053e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a25      	ldr	r2, [pc, #148]	@ (800547c <HAL_TIM_PWM_Start+0x1f4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d022      	beq.n	8005430 <HAL_TIM_PWM_Start+0x1a8>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f2:	d01d      	beq.n	8005430 <HAL_TIM_PWM_Start+0x1a8>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a25      	ldr	r2, [pc, #148]	@ (8005490 <HAL_TIM_PWM_Start+0x208>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d018      	beq.n	8005430 <HAL_TIM_PWM_Start+0x1a8>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a24      	ldr	r2, [pc, #144]	@ (8005494 <HAL_TIM_PWM_Start+0x20c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d013      	beq.n	8005430 <HAL_TIM_PWM_Start+0x1a8>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a22      	ldr	r2, [pc, #136]	@ (8005498 <HAL_TIM_PWM_Start+0x210>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00e      	beq.n	8005430 <HAL_TIM_PWM_Start+0x1a8>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a1a      	ldr	r2, [pc, #104]	@ (8005480 <HAL_TIM_PWM_Start+0x1f8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d009      	beq.n	8005430 <HAL_TIM_PWM_Start+0x1a8>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a1e      	ldr	r2, [pc, #120]	@ (800549c <HAL_TIM_PWM_Start+0x214>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d004      	beq.n	8005430 <HAL_TIM_PWM_Start+0x1a8>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a16      	ldr	r2, [pc, #88]	@ (8005484 <HAL_TIM_PWM_Start+0x1fc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d115      	bne.n	800545c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	4b1a      	ldr	r3, [pc, #104]	@ (80054a0 <HAL_TIM_PWM_Start+0x218>)
 8005438:	4013      	ands	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b06      	cmp	r3, #6
 8005440:	d015      	beq.n	800546e <HAL_TIM_PWM_Start+0x1e6>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005448:	d011      	beq.n	800546e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0201 	orr.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545a:	e008      	b.n	800546e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	e000      	b.n	8005470 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40010000 	.word	0x40010000
 8005480:	40010400 	.word	0x40010400
 8005484:	40014000 	.word	0x40014000
 8005488:	40014400 	.word	0x40014400
 800548c:	40014800 	.word	0x40014800
 8005490:	40000400 	.word	0x40000400
 8005494:	40000800 	.word	0x40000800
 8005498:	40000c00 	.word	0x40000c00
 800549c:	40001800 	.word	0x40001800
 80054a0:	00010007 	.word	0x00010007

080054a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2200      	movs	r2, #0
 80054b4:	6839      	ldr	r1, [r7, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 feb0 	bl	800621c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a3e      	ldr	r2, [pc, #248]	@ (80055bc <HAL_TIM_PWM_Stop+0x118>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d013      	beq.n	80054ee <HAL_TIM_PWM_Stop+0x4a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a3d      	ldr	r2, [pc, #244]	@ (80055c0 <HAL_TIM_PWM_Stop+0x11c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00e      	beq.n	80054ee <HAL_TIM_PWM_Stop+0x4a>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a3b      	ldr	r2, [pc, #236]	@ (80055c4 <HAL_TIM_PWM_Stop+0x120>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d009      	beq.n	80054ee <HAL_TIM_PWM_Stop+0x4a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a3a      	ldr	r2, [pc, #232]	@ (80055c8 <HAL_TIM_PWM_Stop+0x124>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d004      	beq.n	80054ee <HAL_TIM_PWM_Stop+0x4a>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a38      	ldr	r2, [pc, #224]	@ (80055cc <HAL_TIM_PWM_Stop+0x128>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d101      	bne.n	80054f2 <HAL_TIM_PWM_Stop+0x4e>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <HAL_TIM_PWM_Stop+0x50>
 80054f2:	2300      	movs	r3, #0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d017      	beq.n	8005528 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6a1a      	ldr	r2, [r3, #32]
 80054fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005502:	4013      	ands	r3, r2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10f      	bne.n	8005528 <HAL_TIM_PWM_Stop+0x84>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6a1a      	ldr	r2, [r3, #32]
 800550e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005512:	4013      	ands	r3, r2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d107      	bne.n	8005528 <HAL_TIM_PWM_Stop+0x84>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005526:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6a1a      	ldr	r2, [r3, #32]
 800552e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10f      	bne.n	8005558 <HAL_TIM_PWM_Stop+0xb4>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6a1a      	ldr	r2, [r3, #32]
 800553e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005542:	4013      	ands	r3, r2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d107      	bne.n	8005558 <HAL_TIM_PWM_Stop+0xb4>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0201 	bic.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <HAL_TIM_PWM_Stop+0xc4>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005566:	e023      	b.n	80055b0 <HAL_TIM_PWM_Stop+0x10c>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	2b04      	cmp	r3, #4
 800556c:	d104      	bne.n	8005578 <HAL_TIM_PWM_Stop+0xd4>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005576:	e01b      	b.n	80055b0 <HAL_TIM_PWM_Stop+0x10c>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2b08      	cmp	r3, #8
 800557c:	d104      	bne.n	8005588 <HAL_TIM_PWM_Stop+0xe4>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005586:	e013      	b.n	80055b0 <HAL_TIM_PWM_Stop+0x10c>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b0c      	cmp	r3, #12
 800558c:	d104      	bne.n	8005598 <HAL_TIM_PWM_Stop+0xf4>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005596:	e00b      	b.n	80055b0 <HAL_TIM_PWM_Stop+0x10c>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b10      	cmp	r3, #16
 800559c:	d104      	bne.n	80055a8 <HAL_TIM_PWM_Stop+0x104>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055a6:	e003      	b.n	80055b0 <HAL_TIM_PWM_Stop+0x10c>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40010000 	.word	0x40010000
 80055c0:	40010400 	.word	0x40010400
 80055c4:	40014000 	.word	0x40014000
 80055c8:	40014400 	.word	0x40014400
 80055cc:	40014800 	.word	0x40014800

080055d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055dc:	2300      	movs	r3, #0
 80055de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e0ff      	b.n	80057ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b14      	cmp	r3, #20
 80055fa:	f200 80f0 	bhi.w	80057de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80055fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005604 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005604:	08005659 	.word	0x08005659
 8005608:	080057df 	.word	0x080057df
 800560c:	080057df 	.word	0x080057df
 8005610:	080057df 	.word	0x080057df
 8005614:	08005699 	.word	0x08005699
 8005618:	080057df 	.word	0x080057df
 800561c:	080057df 	.word	0x080057df
 8005620:	080057df 	.word	0x080057df
 8005624:	080056db 	.word	0x080056db
 8005628:	080057df 	.word	0x080057df
 800562c:	080057df 	.word	0x080057df
 8005630:	080057df 	.word	0x080057df
 8005634:	0800571b 	.word	0x0800571b
 8005638:	080057df 	.word	0x080057df
 800563c:	080057df 	.word	0x080057df
 8005640:	080057df 	.word	0x080057df
 8005644:	0800575d 	.word	0x0800575d
 8005648:	080057df 	.word	0x080057df
 800564c:	080057df 	.word	0x080057df
 8005650:	080057df 	.word	0x080057df
 8005654:	0800579d 	.word	0x0800579d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fa68 	bl	8005b34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0208 	orr.w	r2, r2, #8
 8005672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0204 	bic.w	r2, r2, #4
 8005682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6999      	ldr	r1, [r3, #24]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	691a      	ldr	r2, [r3, #16]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	619a      	str	r2, [r3, #24]
      break;
 8005696:	e0a5      	b.n	80057e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fad8 	bl	8005c54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699a      	ldr	r2, [r3, #24]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6999      	ldr	r1, [r3, #24]
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	021a      	lsls	r2, r3, #8
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	619a      	str	r2, [r3, #24]
      break;
 80056d8:	e084      	b.n	80057e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68b9      	ldr	r1, [r7, #8]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fb41 	bl	8005d68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69da      	ldr	r2, [r3, #28]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f042 0208 	orr.w	r2, r2, #8
 80056f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0204 	bic.w	r2, r2, #4
 8005704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69d9      	ldr	r1, [r3, #28]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	61da      	str	r2, [r3, #28]
      break;
 8005718:	e064      	b.n	80057e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68b9      	ldr	r1, [r7, #8]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fba9 	bl	8005e78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69da      	ldr	r2, [r3, #28]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69d9      	ldr	r1, [r3, #28]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	021a      	lsls	r2, r3, #8
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	61da      	str	r2, [r3, #28]
      break;
 800575a:	e043      	b.n	80057e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68b9      	ldr	r1, [r7, #8]
 8005762:	4618      	mov	r0, r3
 8005764:	f000 fbf2 	bl	8005f4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0208 	orr.w	r2, r2, #8
 8005776:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0204 	bic.w	r2, r2, #4
 8005786:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	691a      	ldr	r2, [r3, #16]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800579a:	e023      	b.n	80057e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fc36 	bl	8006014 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	021a      	lsls	r2, r3, #8
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80057dc:	e002      	b.n	80057e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	75fb      	strb	r3, [r7, #23]
      break;
 80057e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop

080057f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_TIM_ConfigClockSource+0x1c>
 8005810:	2302      	movs	r3, #2
 8005812:	e0dc      	b.n	80059ce <HAL_TIM_ConfigClockSource+0x1d6>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	4b6a      	ldr	r3, [pc, #424]	@ (80059d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005830:	4013      	ands	r3, r2
 8005832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800583a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a64      	ldr	r2, [pc, #400]	@ (80059dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800584a:	4293      	cmp	r3, r2
 800584c:	f000 80a9 	beq.w	80059a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005850:	4a62      	ldr	r2, [pc, #392]	@ (80059dc <HAL_TIM_ConfigClockSource+0x1e4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	f200 80ae 	bhi.w	80059b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005858:	4a61      	ldr	r2, [pc, #388]	@ (80059e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	f000 80a1 	beq.w	80059a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005860:	4a5f      	ldr	r2, [pc, #380]	@ (80059e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	f200 80a6 	bhi.w	80059b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005868:	4a5e      	ldr	r2, [pc, #376]	@ (80059e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800586a:	4293      	cmp	r3, r2
 800586c:	f000 8099 	beq.w	80059a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005870:	4a5c      	ldr	r2, [pc, #368]	@ (80059e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005872:	4293      	cmp	r3, r2
 8005874:	f200 809e 	bhi.w	80059b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005878:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800587c:	f000 8091 	beq.w	80059a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005880:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005884:	f200 8096 	bhi.w	80059b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005888:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800588c:	f000 8089 	beq.w	80059a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005890:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005894:	f200 808e 	bhi.w	80059b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800589c:	d03e      	beq.n	800591c <HAL_TIM_ConfigClockSource+0x124>
 800589e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058a2:	f200 8087 	bhi.w	80059b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80058a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058aa:	f000 8086 	beq.w	80059ba <HAL_TIM_ConfigClockSource+0x1c2>
 80058ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058b2:	d87f      	bhi.n	80059b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80058b4:	2b70      	cmp	r3, #112	@ 0x70
 80058b6:	d01a      	beq.n	80058ee <HAL_TIM_ConfigClockSource+0xf6>
 80058b8:	2b70      	cmp	r3, #112	@ 0x70
 80058ba:	d87b      	bhi.n	80059b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80058bc:	2b60      	cmp	r3, #96	@ 0x60
 80058be:	d050      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x16a>
 80058c0:	2b60      	cmp	r3, #96	@ 0x60
 80058c2:	d877      	bhi.n	80059b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80058c4:	2b50      	cmp	r3, #80	@ 0x50
 80058c6:	d03c      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x14a>
 80058c8:	2b50      	cmp	r3, #80	@ 0x50
 80058ca:	d873      	bhi.n	80059b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80058cc:	2b40      	cmp	r3, #64	@ 0x40
 80058ce:	d058      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x18a>
 80058d0:	2b40      	cmp	r3, #64	@ 0x40
 80058d2:	d86f      	bhi.n	80059b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80058d4:	2b30      	cmp	r3, #48	@ 0x30
 80058d6:	d064      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80058d8:	2b30      	cmp	r3, #48	@ 0x30
 80058da:	d86b      	bhi.n	80059b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80058dc:	2b20      	cmp	r3, #32
 80058de:	d060      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80058e0:	2b20      	cmp	r3, #32
 80058e2:	d867      	bhi.n	80059b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d05c      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80058e8:	2b10      	cmp	r3, #16
 80058ea:	d05a      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80058ec:	e062      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058fe:	f000 fc6d 	bl	80061dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005910:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	609a      	str	r2, [r3, #8]
      break;
 800591a:	e04f      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800592c:	f000 fc56 	bl	80061dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689a      	ldr	r2, [r3, #8]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800593e:	609a      	str	r2, [r3, #8]
      break;
 8005940:	e03c      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800594e:	461a      	mov	r2, r3
 8005950:	f000 fbc6 	bl	80060e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2150      	movs	r1, #80	@ 0x50
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fc20 	bl	80061a0 <TIM_ITRx_SetConfig>
      break;
 8005960:	e02c      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800596e:	461a      	mov	r2, r3
 8005970:	f000 fbe5 	bl	800613e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2160      	movs	r1, #96	@ 0x60
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fc10 	bl	80061a0 <TIM_ITRx_SetConfig>
      break;
 8005980:	e01c      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800598e:	461a      	mov	r2, r3
 8005990:	f000 fba6 	bl	80060e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2140      	movs	r1, #64	@ 0x40
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fc00 	bl	80061a0 <TIM_ITRx_SetConfig>
      break;
 80059a0:	e00c      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4619      	mov	r1, r3
 80059ac:	4610      	mov	r0, r2
 80059ae:	f000 fbf7 	bl	80061a0 <TIM_ITRx_SetConfig>
      break;
 80059b2:	e003      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	73fb      	strb	r3, [r7, #15]
      break;
 80059b8:	e000      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80059ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	ffceff88 	.word	0xffceff88
 80059dc:	00100040 	.word	0x00100040
 80059e0:	00100030 	.word	0x00100030
 80059e4:	00100020 	.word	0x00100020

080059e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a46      	ldr	r2, [pc, #280]	@ (8005b14 <TIM_Base_SetConfig+0x12c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d013      	beq.n	8005a28 <TIM_Base_SetConfig+0x40>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a06:	d00f      	beq.n	8005a28 <TIM_Base_SetConfig+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a43      	ldr	r2, [pc, #268]	@ (8005b18 <TIM_Base_SetConfig+0x130>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00b      	beq.n	8005a28 <TIM_Base_SetConfig+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a42      	ldr	r2, [pc, #264]	@ (8005b1c <TIM_Base_SetConfig+0x134>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d007      	beq.n	8005a28 <TIM_Base_SetConfig+0x40>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a41      	ldr	r2, [pc, #260]	@ (8005b20 <TIM_Base_SetConfig+0x138>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d003      	beq.n	8005a28 <TIM_Base_SetConfig+0x40>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a40      	ldr	r2, [pc, #256]	@ (8005b24 <TIM_Base_SetConfig+0x13c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d108      	bne.n	8005a3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a35      	ldr	r2, [pc, #212]	@ (8005b14 <TIM_Base_SetConfig+0x12c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d01f      	beq.n	8005a82 <TIM_Base_SetConfig+0x9a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a48:	d01b      	beq.n	8005a82 <TIM_Base_SetConfig+0x9a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a32      	ldr	r2, [pc, #200]	@ (8005b18 <TIM_Base_SetConfig+0x130>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d017      	beq.n	8005a82 <TIM_Base_SetConfig+0x9a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a31      	ldr	r2, [pc, #196]	@ (8005b1c <TIM_Base_SetConfig+0x134>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d013      	beq.n	8005a82 <TIM_Base_SetConfig+0x9a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a30      	ldr	r2, [pc, #192]	@ (8005b20 <TIM_Base_SetConfig+0x138>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00f      	beq.n	8005a82 <TIM_Base_SetConfig+0x9a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a2f      	ldr	r2, [pc, #188]	@ (8005b24 <TIM_Base_SetConfig+0x13c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00b      	beq.n	8005a82 <TIM_Base_SetConfig+0x9a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a2e      	ldr	r2, [pc, #184]	@ (8005b28 <TIM_Base_SetConfig+0x140>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d007      	beq.n	8005a82 <TIM_Base_SetConfig+0x9a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a2d      	ldr	r2, [pc, #180]	@ (8005b2c <TIM_Base_SetConfig+0x144>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d003      	beq.n	8005a82 <TIM_Base_SetConfig+0x9a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a2c      	ldr	r2, [pc, #176]	@ (8005b30 <TIM_Base_SetConfig+0x148>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d108      	bne.n	8005a94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a16      	ldr	r2, [pc, #88]	@ (8005b14 <TIM_Base_SetConfig+0x12c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00f      	beq.n	8005ae0 <TIM_Base_SetConfig+0xf8>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a18      	ldr	r2, [pc, #96]	@ (8005b24 <TIM_Base_SetConfig+0x13c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00b      	beq.n	8005ae0 <TIM_Base_SetConfig+0xf8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a17      	ldr	r2, [pc, #92]	@ (8005b28 <TIM_Base_SetConfig+0x140>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d007      	beq.n	8005ae0 <TIM_Base_SetConfig+0xf8>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a16      	ldr	r2, [pc, #88]	@ (8005b2c <TIM_Base_SetConfig+0x144>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_Base_SetConfig+0xf8>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a15      	ldr	r2, [pc, #84]	@ (8005b30 <TIM_Base_SetConfig+0x148>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d103      	bne.n	8005ae8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d105      	bne.n	8005b06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f023 0201 	bic.w	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	611a      	str	r2, [r3, #16]
  }
}
 8005b06:	bf00      	nop
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40010000 	.word	0x40010000
 8005b18:	40000400 	.word	0x40000400
 8005b1c:	40000800 	.word	0x40000800
 8005b20:	40000c00 	.word	0x40000c00
 8005b24:	40010400 	.word	0x40010400
 8005b28:	40014000 	.word	0x40014000
 8005b2c:	40014400 	.word	0x40014400
 8005b30:	40014800 	.word	0x40014800

08005b34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	f023 0201 	bic.w	r2, r3, #1
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4b37      	ldr	r3, [pc, #220]	@ (8005c3c <TIM_OC1_SetConfig+0x108>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0303 	bic.w	r3, r3, #3
 8005b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f023 0302 	bic.w	r3, r3, #2
 8005b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a2d      	ldr	r2, [pc, #180]	@ (8005c40 <TIM_OC1_SetConfig+0x10c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00f      	beq.n	8005bb0 <TIM_OC1_SetConfig+0x7c>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a2c      	ldr	r2, [pc, #176]	@ (8005c44 <TIM_OC1_SetConfig+0x110>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00b      	beq.n	8005bb0 <TIM_OC1_SetConfig+0x7c>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a2b      	ldr	r2, [pc, #172]	@ (8005c48 <TIM_OC1_SetConfig+0x114>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d007      	beq.n	8005bb0 <TIM_OC1_SetConfig+0x7c>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a2a      	ldr	r2, [pc, #168]	@ (8005c4c <TIM_OC1_SetConfig+0x118>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d003      	beq.n	8005bb0 <TIM_OC1_SetConfig+0x7c>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a29      	ldr	r2, [pc, #164]	@ (8005c50 <TIM_OC1_SetConfig+0x11c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d10c      	bne.n	8005bca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f023 0308 	bic.w	r3, r3, #8
 8005bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f023 0304 	bic.w	r3, r3, #4
 8005bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8005c40 <TIM_OC1_SetConfig+0x10c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d00f      	beq.n	8005bf2 <TIM_OC1_SetConfig+0xbe>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c44 <TIM_OC1_SetConfig+0x110>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00b      	beq.n	8005bf2 <TIM_OC1_SetConfig+0xbe>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8005c48 <TIM_OC1_SetConfig+0x114>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d007      	beq.n	8005bf2 <TIM_OC1_SetConfig+0xbe>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a19      	ldr	r2, [pc, #100]	@ (8005c4c <TIM_OC1_SetConfig+0x118>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d003      	beq.n	8005bf2 <TIM_OC1_SetConfig+0xbe>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a18      	ldr	r2, [pc, #96]	@ (8005c50 <TIM_OC1_SetConfig+0x11c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d111      	bne.n	8005c16 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	621a      	str	r2, [r3, #32]
}
 8005c30:	bf00      	nop
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	fffeff8f 	.word	0xfffeff8f
 8005c40:	40010000 	.word	0x40010000
 8005c44:	40010400 	.word	0x40010400
 8005c48:	40014000 	.word	0x40014000
 8005c4c:	40014400 	.word	0x40014400
 8005c50:	40014800 	.word	0x40014800

08005c54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	f023 0210 	bic.w	r2, r3, #16
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4b34      	ldr	r3, [pc, #208]	@ (8005d50 <TIM_OC2_SetConfig+0xfc>)
 8005c80:	4013      	ands	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	021b      	lsls	r3, r3, #8
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f023 0320 	bic.w	r3, r3, #32
 8005c9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a29      	ldr	r2, [pc, #164]	@ (8005d54 <TIM_OC2_SetConfig+0x100>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d003      	beq.n	8005cbc <TIM_OC2_SetConfig+0x68>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a28      	ldr	r2, [pc, #160]	@ (8005d58 <TIM_OC2_SetConfig+0x104>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d10d      	bne.n	8005cd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a1e      	ldr	r2, [pc, #120]	@ (8005d54 <TIM_OC2_SetConfig+0x100>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00f      	beq.n	8005d00 <TIM_OC2_SetConfig+0xac>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8005d58 <TIM_OC2_SetConfig+0x104>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00b      	beq.n	8005d00 <TIM_OC2_SetConfig+0xac>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a1c      	ldr	r2, [pc, #112]	@ (8005d5c <TIM_OC2_SetConfig+0x108>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d007      	beq.n	8005d00 <TIM_OC2_SetConfig+0xac>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d60 <TIM_OC2_SetConfig+0x10c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d003      	beq.n	8005d00 <TIM_OC2_SetConfig+0xac>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8005d64 <TIM_OC2_SetConfig+0x110>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d113      	bne.n	8005d28 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	621a      	str	r2, [r3, #32]
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	feff8fff 	.word	0xfeff8fff
 8005d54:	40010000 	.word	0x40010000
 8005d58:	40010400 	.word	0x40010400
 8005d5c:	40014000 	.word	0x40014000
 8005d60:	40014400 	.word	0x40014400
 8005d64:	40014800 	.word	0x40014800

08005d68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4b33      	ldr	r3, [pc, #204]	@ (8005e60 <TIM_OC3_SetConfig+0xf8>)
 8005d94:	4013      	ands	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0303 	bic.w	r3, r3, #3
 8005d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a28      	ldr	r2, [pc, #160]	@ (8005e64 <TIM_OC3_SetConfig+0xfc>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d003      	beq.n	8005dce <TIM_OC3_SetConfig+0x66>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a27      	ldr	r2, [pc, #156]	@ (8005e68 <TIM_OC3_SetConfig+0x100>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d10d      	bne.n	8005dea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a1d      	ldr	r2, [pc, #116]	@ (8005e64 <TIM_OC3_SetConfig+0xfc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00f      	beq.n	8005e12 <TIM_OC3_SetConfig+0xaa>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a1c      	ldr	r2, [pc, #112]	@ (8005e68 <TIM_OC3_SetConfig+0x100>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00b      	beq.n	8005e12 <TIM_OC3_SetConfig+0xaa>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8005e6c <TIM_OC3_SetConfig+0x104>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d007      	beq.n	8005e12 <TIM_OC3_SetConfig+0xaa>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a1a      	ldr	r2, [pc, #104]	@ (8005e70 <TIM_OC3_SetConfig+0x108>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d003      	beq.n	8005e12 <TIM_OC3_SetConfig+0xaa>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a19      	ldr	r2, [pc, #100]	@ (8005e74 <TIM_OC3_SetConfig+0x10c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d113      	bne.n	8005e3a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	621a      	str	r2, [r3, #32]
}
 8005e54:	bf00      	nop
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	fffeff8f 	.word	0xfffeff8f
 8005e64:	40010000 	.word	0x40010000
 8005e68:	40010400 	.word	0x40010400
 8005e6c:	40014000 	.word	0x40014000
 8005e70:	40014400 	.word	0x40014400
 8005e74:	40014800 	.word	0x40014800

08005e78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4b24      	ldr	r3, [pc, #144]	@ (8005f34 <TIM_OC4_SetConfig+0xbc>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	021b      	lsls	r3, r3, #8
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	031b      	lsls	r3, r3, #12
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a19      	ldr	r2, [pc, #100]	@ (8005f38 <TIM_OC4_SetConfig+0xc0>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d00f      	beq.n	8005ef8 <TIM_OC4_SetConfig+0x80>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a18      	ldr	r2, [pc, #96]	@ (8005f3c <TIM_OC4_SetConfig+0xc4>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00b      	beq.n	8005ef8 <TIM_OC4_SetConfig+0x80>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a17      	ldr	r2, [pc, #92]	@ (8005f40 <TIM_OC4_SetConfig+0xc8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d007      	beq.n	8005ef8 <TIM_OC4_SetConfig+0x80>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a16      	ldr	r2, [pc, #88]	@ (8005f44 <TIM_OC4_SetConfig+0xcc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d003      	beq.n	8005ef8 <TIM_OC4_SetConfig+0x80>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a15      	ldr	r2, [pc, #84]	@ (8005f48 <TIM_OC4_SetConfig+0xd0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d109      	bne.n	8005f0c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005efe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	019b      	lsls	r3, r3, #6
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	621a      	str	r2, [r3, #32]
}
 8005f26:	bf00      	nop
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	feff8fff 	.word	0xfeff8fff
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40010400 	.word	0x40010400
 8005f40:	40014000 	.word	0x40014000
 8005f44:	40014400 	.word	0x40014400
 8005f48:	40014800 	.word	0x40014800

08005f4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4b21      	ldr	r3, [pc, #132]	@ (8005ffc <TIM_OC5_SetConfig+0xb0>)
 8005f78:	4013      	ands	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005f8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	041b      	lsls	r3, r3, #16
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a18      	ldr	r2, [pc, #96]	@ (8006000 <TIM_OC5_SetConfig+0xb4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00f      	beq.n	8005fc2 <TIM_OC5_SetConfig+0x76>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a17      	ldr	r2, [pc, #92]	@ (8006004 <TIM_OC5_SetConfig+0xb8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00b      	beq.n	8005fc2 <TIM_OC5_SetConfig+0x76>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a16      	ldr	r2, [pc, #88]	@ (8006008 <TIM_OC5_SetConfig+0xbc>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d007      	beq.n	8005fc2 <TIM_OC5_SetConfig+0x76>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a15      	ldr	r2, [pc, #84]	@ (800600c <TIM_OC5_SetConfig+0xc0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d003      	beq.n	8005fc2 <TIM_OC5_SetConfig+0x76>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a14      	ldr	r2, [pc, #80]	@ (8006010 <TIM_OC5_SetConfig+0xc4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d109      	bne.n	8005fd6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	621a      	str	r2, [r3, #32]
}
 8005ff0:	bf00      	nop
 8005ff2:	371c      	adds	r7, #28
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	fffeff8f 	.word	0xfffeff8f
 8006000:	40010000 	.word	0x40010000
 8006004:	40010400 	.word	0x40010400
 8006008:	40014000 	.word	0x40014000
 800600c:	40014400 	.word	0x40014400
 8006010:	40014800 	.word	0x40014800

08006014 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4b22      	ldr	r3, [pc, #136]	@ (80060c8 <TIM_OC6_SetConfig+0xb4>)
 8006040:	4013      	ands	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	021b      	lsls	r3, r3, #8
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	4313      	orrs	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	051b      	lsls	r3, r3, #20
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a19      	ldr	r2, [pc, #100]	@ (80060cc <TIM_OC6_SetConfig+0xb8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00f      	beq.n	800608c <TIM_OC6_SetConfig+0x78>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a18      	ldr	r2, [pc, #96]	@ (80060d0 <TIM_OC6_SetConfig+0xbc>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00b      	beq.n	800608c <TIM_OC6_SetConfig+0x78>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a17      	ldr	r2, [pc, #92]	@ (80060d4 <TIM_OC6_SetConfig+0xc0>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <TIM_OC6_SetConfig+0x78>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a16      	ldr	r2, [pc, #88]	@ (80060d8 <TIM_OC6_SetConfig+0xc4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_OC6_SetConfig+0x78>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a15      	ldr	r2, [pc, #84]	@ (80060dc <TIM_OC6_SetConfig+0xc8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d109      	bne.n	80060a0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006092:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	029b      	lsls	r3, r3, #10
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	621a      	str	r2, [r3, #32]
}
 80060ba:	bf00      	nop
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	feff8fff 	.word	0xfeff8fff
 80060cc:	40010000 	.word	0x40010000
 80060d0:	40010400 	.word	0x40010400
 80060d4:	40014000 	.word	0x40014000
 80060d8:	40014400 	.word	0x40014400
 80060dc:	40014800 	.word	0x40014800

080060e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f023 0201 	bic.w	r2, r3, #1
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800610a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f023 030a 	bic.w	r3, r3, #10
 800611c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	621a      	str	r2, [r3, #32]
}
 8006132:	bf00      	nop
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613e:	b480      	push	{r7}
 8006140:	b087      	sub	sp, #28
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	f023 0210 	bic.w	r2, r3, #16
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006168:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	031b      	lsls	r3, r3, #12
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800617a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	621a      	str	r2, [r3, #32]
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4b09      	ldr	r3, [pc, #36]	@ (80061d8 <TIM_ITRx_SetConfig+0x38>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4313      	orrs	r3, r2
 80061be:	f043 0307 	orr.w	r3, r3, #7
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	609a      	str	r2, [r3, #8]
}
 80061ca:	bf00      	nop
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	ffcfff8f 	.word	0xffcfff8f

080061dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	021a      	lsls	r2, r3, #8
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	431a      	orrs	r2, r3
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	4313      	orrs	r3, r2
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	609a      	str	r2, [r3, #8]
}
 8006210:	bf00      	nop
 8006212:	371c      	adds	r7, #28
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f003 031f 	and.w	r3, r3, #31
 800622e:	2201      	movs	r2, #1
 8006230:	fa02 f303 	lsl.w	r3, r2, r3
 8006234:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a1a      	ldr	r2, [r3, #32]
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	43db      	mvns	r3, r3
 800623e:	401a      	ands	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a1a      	ldr	r2, [r3, #32]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f003 031f 	and.w	r3, r3, #31
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	fa01 f303 	lsl.w	r3, r1, r3
 8006254:	431a      	orrs	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	621a      	str	r2, [r3, #32]
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
	...

08006268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800627c:	2302      	movs	r3, #2
 800627e:	e06d      	b.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a30      	ldr	r2, [pc, #192]	@ (8006368 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d004      	beq.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a2f      	ldr	r2, [pc, #188]	@ (800636c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d108      	bne.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80062ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a20      	ldr	r2, [pc, #128]	@ (8006368 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d022      	beq.n	8006330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f2:	d01d      	beq.n	8006330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006370 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d018      	beq.n	8006330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a1c      	ldr	r2, [pc, #112]	@ (8006374 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d013      	beq.n	8006330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a1a      	ldr	r2, [pc, #104]	@ (8006378 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00e      	beq.n	8006330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a15      	ldr	r2, [pc, #84]	@ (800636c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d009      	beq.n	8006330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a16      	ldr	r2, [pc, #88]	@ (800637c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d004      	beq.n	8006330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a15      	ldr	r2, [pc, #84]	@ (8006380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d10c      	bne.n	800634a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006336:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	4313      	orrs	r3, r2
 8006340:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	40010000 	.word	0x40010000
 800636c:	40010400 	.word	0x40010400
 8006370:	40000400 	.word	0x40000400
 8006374:	40000800 	.word	0x40000800
 8006378:	40000c00 	.word	0x40000c00
 800637c:	40001800 	.word	0x40001800
 8006380:	40014000 	.word	0x40014000

08006384 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e042      	b.n	800641c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800639c:	2b00      	cmp	r3, #0
 800639e:	d106      	bne.n	80063ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7fa fda9 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2224      	movs	r2, #36	@ 0x24
 80063b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fd90 	bl	8006ef4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f825 	bl	8006424 <UART_SetConfig>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e01b      	b.n	800641c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006402:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fe0f 	bl	8007038 <UART_CheckIdleState>
 800641a:	4603      	mov	r3, r0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006428:	b092      	sub	sp, #72	@ 0x48
 800642a:	af00      	add	r7, sp, #0
 800642c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	431a      	orrs	r2, r3
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	431a      	orrs	r2, r3
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	4313      	orrs	r3, r2
 800644a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	4bbe      	ldr	r3, [pc, #760]	@ (800674c <UART_SetConfig+0x328>)
 8006454:	4013      	ands	r3, r2
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800645c:	430b      	orrs	r3, r1
 800645e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4ab3      	ldr	r2, [pc, #716]	@ (8006750 <UART_SetConfig+0x32c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d004      	beq.n	8006490 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800648c:	4313      	orrs	r3, r2
 800648e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	4baf      	ldr	r3, [pc, #700]	@ (8006754 <UART_SetConfig+0x330>)
 8006498:	4013      	ands	r3, r2
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	6812      	ldr	r2, [r2, #0]
 800649e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80064a0:	430b      	orrs	r3, r1
 80064a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064aa:	f023 010f 	bic.w	r1, r3, #15
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4aa6      	ldr	r2, [pc, #664]	@ (8006758 <UART_SetConfig+0x334>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d177      	bne.n	80065b4 <UART_SetConfig+0x190>
 80064c4:	4ba5      	ldr	r3, [pc, #660]	@ (800675c <UART_SetConfig+0x338>)
 80064c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064cc:	2b28      	cmp	r3, #40	@ 0x28
 80064ce:	d86d      	bhi.n	80065ac <UART_SetConfig+0x188>
 80064d0:	a201      	add	r2, pc, #4	@ (adr r2, 80064d8 <UART_SetConfig+0xb4>)
 80064d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d6:	bf00      	nop
 80064d8:	0800657d 	.word	0x0800657d
 80064dc:	080065ad 	.word	0x080065ad
 80064e0:	080065ad 	.word	0x080065ad
 80064e4:	080065ad 	.word	0x080065ad
 80064e8:	080065ad 	.word	0x080065ad
 80064ec:	080065ad 	.word	0x080065ad
 80064f0:	080065ad 	.word	0x080065ad
 80064f4:	080065ad 	.word	0x080065ad
 80064f8:	08006585 	.word	0x08006585
 80064fc:	080065ad 	.word	0x080065ad
 8006500:	080065ad 	.word	0x080065ad
 8006504:	080065ad 	.word	0x080065ad
 8006508:	080065ad 	.word	0x080065ad
 800650c:	080065ad 	.word	0x080065ad
 8006510:	080065ad 	.word	0x080065ad
 8006514:	080065ad 	.word	0x080065ad
 8006518:	0800658d 	.word	0x0800658d
 800651c:	080065ad 	.word	0x080065ad
 8006520:	080065ad 	.word	0x080065ad
 8006524:	080065ad 	.word	0x080065ad
 8006528:	080065ad 	.word	0x080065ad
 800652c:	080065ad 	.word	0x080065ad
 8006530:	080065ad 	.word	0x080065ad
 8006534:	080065ad 	.word	0x080065ad
 8006538:	08006595 	.word	0x08006595
 800653c:	080065ad 	.word	0x080065ad
 8006540:	080065ad 	.word	0x080065ad
 8006544:	080065ad 	.word	0x080065ad
 8006548:	080065ad 	.word	0x080065ad
 800654c:	080065ad 	.word	0x080065ad
 8006550:	080065ad 	.word	0x080065ad
 8006554:	080065ad 	.word	0x080065ad
 8006558:	0800659d 	.word	0x0800659d
 800655c:	080065ad 	.word	0x080065ad
 8006560:	080065ad 	.word	0x080065ad
 8006564:	080065ad 	.word	0x080065ad
 8006568:	080065ad 	.word	0x080065ad
 800656c:	080065ad 	.word	0x080065ad
 8006570:	080065ad 	.word	0x080065ad
 8006574:	080065ad 	.word	0x080065ad
 8006578:	080065a5 	.word	0x080065a5
 800657c:	2301      	movs	r3, #1
 800657e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006582:	e222      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006584:	2304      	movs	r3, #4
 8006586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800658a:	e21e      	b.n	80069ca <UART_SetConfig+0x5a6>
 800658c:	2308      	movs	r3, #8
 800658e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006592:	e21a      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006594:	2310      	movs	r3, #16
 8006596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659a:	e216      	b.n	80069ca <UART_SetConfig+0x5a6>
 800659c:	2320      	movs	r3, #32
 800659e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a2:	e212      	b.n	80069ca <UART_SetConfig+0x5a6>
 80065a4:	2340      	movs	r3, #64	@ 0x40
 80065a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065aa:	e20e      	b.n	80069ca <UART_SetConfig+0x5a6>
 80065ac:	2380      	movs	r3, #128	@ 0x80
 80065ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b2:	e20a      	b.n	80069ca <UART_SetConfig+0x5a6>
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a69      	ldr	r2, [pc, #420]	@ (8006760 <UART_SetConfig+0x33c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d130      	bne.n	8006620 <UART_SetConfig+0x1fc>
 80065be:	4b67      	ldr	r3, [pc, #412]	@ (800675c <UART_SetConfig+0x338>)
 80065c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	2b05      	cmp	r3, #5
 80065c8:	d826      	bhi.n	8006618 <UART_SetConfig+0x1f4>
 80065ca:	a201      	add	r2, pc, #4	@ (adr r2, 80065d0 <UART_SetConfig+0x1ac>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	080065e9 	.word	0x080065e9
 80065d4:	080065f1 	.word	0x080065f1
 80065d8:	080065f9 	.word	0x080065f9
 80065dc:	08006601 	.word	0x08006601
 80065e0:	08006609 	.word	0x08006609
 80065e4:	08006611 	.word	0x08006611
 80065e8:	2300      	movs	r3, #0
 80065ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ee:	e1ec      	b.n	80069ca <UART_SetConfig+0x5a6>
 80065f0:	2304      	movs	r3, #4
 80065f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f6:	e1e8      	b.n	80069ca <UART_SetConfig+0x5a6>
 80065f8:	2308      	movs	r3, #8
 80065fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fe:	e1e4      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006600:	2310      	movs	r3, #16
 8006602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006606:	e1e0      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006608:	2320      	movs	r3, #32
 800660a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800660e:	e1dc      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006610:	2340      	movs	r3, #64	@ 0x40
 8006612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006616:	e1d8      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006618:	2380      	movs	r3, #128	@ 0x80
 800661a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800661e:	e1d4      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a4f      	ldr	r2, [pc, #316]	@ (8006764 <UART_SetConfig+0x340>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d130      	bne.n	800668c <UART_SetConfig+0x268>
 800662a:	4b4c      	ldr	r3, [pc, #304]	@ (800675c <UART_SetConfig+0x338>)
 800662c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662e:	f003 0307 	and.w	r3, r3, #7
 8006632:	2b05      	cmp	r3, #5
 8006634:	d826      	bhi.n	8006684 <UART_SetConfig+0x260>
 8006636:	a201      	add	r2, pc, #4	@ (adr r2, 800663c <UART_SetConfig+0x218>)
 8006638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663c:	08006655 	.word	0x08006655
 8006640:	0800665d 	.word	0x0800665d
 8006644:	08006665 	.word	0x08006665
 8006648:	0800666d 	.word	0x0800666d
 800664c:	08006675 	.word	0x08006675
 8006650:	0800667d 	.word	0x0800667d
 8006654:	2300      	movs	r3, #0
 8006656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800665a:	e1b6      	b.n	80069ca <UART_SetConfig+0x5a6>
 800665c:	2304      	movs	r3, #4
 800665e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006662:	e1b2      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006664:	2308      	movs	r3, #8
 8006666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800666a:	e1ae      	b.n	80069ca <UART_SetConfig+0x5a6>
 800666c:	2310      	movs	r3, #16
 800666e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006672:	e1aa      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006674:	2320      	movs	r3, #32
 8006676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667a:	e1a6      	b.n	80069ca <UART_SetConfig+0x5a6>
 800667c:	2340      	movs	r3, #64	@ 0x40
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006682:	e1a2      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006684:	2380      	movs	r3, #128	@ 0x80
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800668a:	e19e      	b.n	80069ca <UART_SetConfig+0x5a6>
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a35      	ldr	r2, [pc, #212]	@ (8006768 <UART_SetConfig+0x344>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d130      	bne.n	80066f8 <UART_SetConfig+0x2d4>
 8006696:	4b31      	ldr	r3, [pc, #196]	@ (800675c <UART_SetConfig+0x338>)
 8006698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	2b05      	cmp	r3, #5
 80066a0:	d826      	bhi.n	80066f0 <UART_SetConfig+0x2cc>
 80066a2:	a201      	add	r2, pc, #4	@ (adr r2, 80066a8 <UART_SetConfig+0x284>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	080066c1 	.word	0x080066c1
 80066ac:	080066c9 	.word	0x080066c9
 80066b0:	080066d1 	.word	0x080066d1
 80066b4:	080066d9 	.word	0x080066d9
 80066b8:	080066e1 	.word	0x080066e1
 80066bc:	080066e9 	.word	0x080066e9
 80066c0:	2300      	movs	r3, #0
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c6:	e180      	b.n	80069ca <UART_SetConfig+0x5a6>
 80066c8:	2304      	movs	r3, #4
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ce:	e17c      	b.n	80069ca <UART_SetConfig+0x5a6>
 80066d0:	2308      	movs	r3, #8
 80066d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d6:	e178      	b.n	80069ca <UART_SetConfig+0x5a6>
 80066d8:	2310      	movs	r3, #16
 80066da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066de:	e174      	b.n	80069ca <UART_SetConfig+0x5a6>
 80066e0:	2320      	movs	r3, #32
 80066e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e6:	e170      	b.n	80069ca <UART_SetConfig+0x5a6>
 80066e8:	2340      	movs	r3, #64	@ 0x40
 80066ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ee:	e16c      	b.n	80069ca <UART_SetConfig+0x5a6>
 80066f0:	2380      	movs	r3, #128	@ 0x80
 80066f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f6:	e168      	b.n	80069ca <UART_SetConfig+0x5a6>
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a1b      	ldr	r2, [pc, #108]	@ (800676c <UART_SetConfig+0x348>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d142      	bne.n	8006788 <UART_SetConfig+0x364>
 8006702:	4b16      	ldr	r3, [pc, #88]	@ (800675c <UART_SetConfig+0x338>)
 8006704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	2b05      	cmp	r3, #5
 800670c:	d838      	bhi.n	8006780 <UART_SetConfig+0x35c>
 800670e:	a201      	add	r2, pc, #4	@ (adr r2, 8006714 <UART_SetConfig+0x2f0>)
 8006710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006714:	0800672d 	.word	0x0800672d
 8006718:	08006735 	.word	0x08006735
 800671c:	0800673d 	.word	0x0800673d
 8006720:	08006745 	.word	0x08006745
 8006724:	08006771 	.word	0x08006771
 8006728:	08006779 	.word	0x08006779
 800672c:	2300      	movs	r3, #0
 800672e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006732:	e14a      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006734:	2304      	movs	r3, #4
 8006736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673a:	e146      	b.n	80069ca <UART_SetConfig+0x5a6>
 800673c:	2308      	movs	r3, #8
 800673e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006742:	e142      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006744:	2310      	movs	r3, #16
 8006746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674a:	e13e      	b.n	80069ca <UART_SetConfig+0x5a6>
 800674c:	cfff69f3 	.word	0xcfff69f3
 8006750:	58000c00 	.word	0x58000c00
 8006754:	11fff4ff 	.word	0x11fff4ff
 8006758:	40011000 	.word	0x40011000
 800675c:	58024400 	.word	0x58024400
 8006760:	40004400 	.word	0x40004400
 8006764:	40004800 	.word	0x40004800
 8006768:	40004c00 	.word	0x40004c00
 800676c:	40005000 	.word	0x40005000
 8006770:	2320      	movs	r3, #32
 8006772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006776:	e128      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006778:	2340      	movs	r3, #64	@ 0x40
 800677a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677e:	e124      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006780:	2380      	movs	r3, #128	@ 0x80
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006786:	e120      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4acb      	ldr	r2, [pc, #812]	@ (8006abc <UART_SetConfig+0x698>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d176      	bne.n	8006880 <UART_SetConfig+0x45c>
 8006792:	4bcb      	ldr	r3, [pc, #812]	@ (8006ac0 <UART_SetConfig+0x69c>)
 8006794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006796:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800679a:	2b28      	cmp	r3, #40	@ 0x28
 800679c:	d86c      	bhi.n	8006878 <UART_SetConfig+0x454>
 800679e:	a201      	add	r2, pc, #4	@ (adr r2, 80067a4 <UART_SetConfig+0x380>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	08006849 	.word	0x08006849
 80067a8:	08006879 	.word	0x08006879
 80067ac:	08006879 	.word	0x08006879
 80067b0:	08006879 	.word	0x08006879
 80067b4:	08006879 	.word	0x08006879
 80067b8:	08006879 	.word	0x08006879
 80067bc:	08006879 	.word	0x08006879
 80067c0:	08006879 	.word	0x08006879
 80067c4:	08006851 	.word	0x08006851
 80067c8:	08006879 	.word	0x08006879
 80067cc:	08006879 	.word	0x08006879
 80067d0:	08006879 	.word	0x08006879
 80067d4:	08006879 	.word	0x08006879
 80067d8:	08006879 	.word	0x08006879
 80067dc:	08006879 	.word	0x08006879
 80067e0:	08006879 	.word	0x08006879
 80067e4:	08006859 	.word	0x08006859
 80067e8:	08006879 	.word	0x08006879
 80067ec:	08006879 	.word	0x08006879
 80067f0:	08006879 	.word	0x08006879
 80067f4:	08006879 	.word	0x08006879
 80067f8:	08006879 	.word	0x08006879
 80067fc:	08006879 	.word	0x08006879
 8006800:	08006879 	.word	0x08006879
 8006804:	08006861 	.word	0x08006861
 8006808:	08006879 	.word	0x08006879
 800680c:	08006879 	.word	0x08006879
 8006810:	08006879 	.word	0x08006879
 8006814:	08006879 	.word	0x08006879
 8006818:	08006879 	.word	0x08006879
 800681c:	08006879 	.word	0x08006879
 8006820:	08006879 	.word	0x08006879
 8006824:	08006869 	.word	0x08006869
 8006828:	08006879 	.word	0x08006879
 800682c:	08006879 	.word	0x08006879
 8006830:	08006879 	.word	0x08006879
 8006834:	08006879 	.word	0x08006879
 8006838:	08006879 	.word	0x08006879
 800683c:	08006879 	.word	0x08006879
 8006840:	08006879 	.word	0x08006879
 8006844:	08006871 	.word	0x08006871
 8006848:	2301      	movs	r3, #1
 800684a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800684e:	e0bc      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006850:	2304      	movs	r3, #4
 8006852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006856:	e0b8      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006858:	2308      	movs	r3, #8
 800685a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800685e:	e0b4      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006860:	2310      	movs	r3, #16
 8006862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006866:	e0b0      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006868:	2320      	movs	r3, #32
 800686a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686e:	e0ac      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006870:	2340      	movs	r3, #64	@ 0x40
 8006872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006876:	e0a8      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006878:	2380      	movs	r3, #128	@ 0x80
 800687a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800687e:	e0a4      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a8f      	ldr	r2, [pc, #572]	@ (8006ac4 <UART_SetConfig+0x6a0>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d130      	bne.n	80068ec <UART_SetConfig+0x4c8>
 800688a:	4b8d      	ldr	r3, [pc, #564]	@ (8006ac0 <UART_SetConfig+0x69c>)
 800688c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800688e:	f003 0307 	and.w	r3, r3, #7
 8006892:	2b05      	cmp	r3, #5
 8006894:	d826      	bhi.n	80068e4 <UART_SetConfig+0x4c0>
 8006896:	a201      	add	r2, pc, #4	@ (adr r2, 800689c <UART_SetConfig+0x478>)
 8006898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689c:	080068b5 	.word	0x080068b5
 80068a0:	080068bd 	.word	0x080068bd
 80068a4:	080068c5 	.word	0x080068c5
 80068a8:	080068cd 	.word	0x080068cd
 80068ac:	080068d5 	.word	0x080068d5
 80068b0:	080068dd 	.word	0x080068dd
 80068b4:	2300      	movs	r3, #0
 80068b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ba:	e086      	b.n	80069ca <UART_SetConfig+0x5a6>
 80068bc:	2304      	movs	r3, #4
 80068be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068c2:	e082      	b.n	80069ca <UART_SetConfig+0x5a6>
 80068c4:	2308      	movs	r3, #8
 80068c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ca:	e07e      	b.n	80069ca <UART_SetConfig+0x5a6>
 80068cc:	2310      	movs	r3, #16
 80068ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068d2:	e07a      	b.n	80069ca <UART_SetConfig+0x5a6>
 80068d4:	2320      	movs	r3, #32
 80068d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068da:	e076      	b.n	80069ca <UART_SetConfig+0x5a6>
 80068dc:	2340      	movs	r3, #64	@ 0x40
 80068de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068e2:	e072      	b.n	80069ca <UART_SetConfig+0x5a6>
 80068e4:	2380      	movs	r3, #128	@ 0x80
 80068e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ea:	e06e      	b.n	80069ca <UART_SetConfig+0x5a6>
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a75      	ldr	r2, [pc, #468]	@ (8006ac8 <UART_SetConfig+0x6a4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d130      	bne.n	8006958 <UART_SetConfig+0x534>
 80068f6:	4b72      	ldr	r3, [pc, #456]	@ (8006ac0 <UART_SetConfig+0x69c>)
 80068f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	2b05      	cmp	r3, #5
 8006900:	d826      	bhi.n	8006950 <UART_SetConfig+0x52c>
 8006902:	a201      	add	r2, pc, #4	@ (adr r2, 8006908 <UART_SetConfig+0x4e4>)
 8006904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006908:	08006921 	.word	0x08006921
 800690c:	08006929 	.word	0x08006929
 8006910:	08006931 	.word	0x08006931
 8006914:	08006939 	.word	0x08006939
 8006918:	08006941 	.word	0x08006941
 800691c:	08006949 	.word	0x08006949
 8006920:	2300      	movs	r3, #0
 8006922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006926:	e050      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006928:	2304      	movs	r3, #4
 800692a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800692e:	e04c      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006930:	2308      	movs	r3, #8
 8006932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006936:	e048      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006938:	2310      	movs	r3, #16
 800693a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693e:	e044      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006940:	2320      	movs	r3, #32
 8006942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006946:	e040      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006948:	2340      	movs	r3, #64	@ 0x40
 800694a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800694e:	e03c      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006950:	2380      	movs	r3, #128	@ 0x80
 8006952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006956:	e038      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a5b      	ldr	r2, [pc, #364]	@ (8006acc <UART_SetConfig+0x6a8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d130      	bne.n	80069c4 <UART_SetConfig+0x5a0>
 8006962:	4b57      	ldr	r3, [pc, #348]	@ (8006ac0 <UART_SetConfig+0x69c>)
 8006964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	2b05      	cmp	r3, #5
 800696c:	d826      	bhi.n	80069bc <UART_SetConfig+0x598>
 800696e:	a201      	add	r2, pc, #4	@ (adr r2, 8006974 <UART_SetConfig+0x550>)
 8006970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006974:	0800698d 	.word	0x0800698d
 8006978:	08006995 	.word	0x08006995
 800697c:	0800699d 	.word	0x0800699d
 8006980:	080069a5 	.word	0x080069a5
 8006984:	080069ad 	.word	0x080069ad
 8006988:	080069b5 	.word	0x080069b5
 800698c:	2302      	movs	r3, #2
 800698e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006992:	e01a      	b.n	80069ca <UART_SetConfig+0x5a6>
 8006994:	2304      	movs	r3, #4
 8006996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699a:	e016      	b.n	80069ca <UART_SetConfig+0x5a6>
 800699c:	2308      	movs	r3, #8
 800699e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a2:	e012      	b.n	80069ca <UART_SetConfig+0x5a6>
 80069a4:	2310      	movs	r3, #16
 80069a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069aa:	e00e      	b.n	80069ca <UART_SetConfig+0x5a6>
 80069ac:	2320      	movs	r3, #32
 80069ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069b2:	e00a      	b.n	80069ca <UART_SetConfig+0x5a6>
 80069b4:	2340      	movs	r3, #64	@ 0x40
 80069b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ba:	e006      	b.n	80069ca <UART_SetConfig+0x5a6>
 80069bc:	2380      	movs	r3, #128	@ 0x80
 80069be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069c2:	e002      	b.n	80069ca <UART_SetConfig+0x5a6>
 80069c4:	2380      	movs	r3, #128	@ 0x80
 80069c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a3f      	ldr	r2, [pc, #252]	@ (8006acc <UART_SetConfig+0x6a8>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	f040 80f8 	bne.w	8006bc6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80069da:	2b20      	cmp	r3, #32
 80069dc:	dc46      	bgt.n	8006a6c <UART_SetConfig+0x648>
 80069de:	2b02      	cmp	r3, #2
 80069e0:	f2c0 8082 	blt.w	8006ae8 <UART_SetConfig+0x6c4>
 80069e4:	3b02      	subs	r3, #2
 80069e6:	2b1e      	cmp	r3, #30
 80069e8:	d87e      	bhi.n	8006ae8 <UART_SetConfig+0x6c4>
 80069ea:	a201      	add	r2, pc, #4	@ (adr r2, 80069f0 <UART_SetConfig+0x5cc>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a73 	.word	0x08006a73
 80069f4:	08006ae9 	.word	0x08006ae9
 80069f8:	08006a7b 	.word	0x08006a7b
 80069fc:	08006ae9 	.word	0x08006ae9
 8006a00:	08006ae9 	.word	0x08006ae9
 8006a04:	08006ae9 	.word	0x08006ae9
 8006a08:	08006a8b 	.word	0x08006a8b
 8006a0c:	08006ae9 	.word	0x08006ae9
 8006a10:	08006ae9 	.word	0x08006ae9
 8006a14:	08006ae9 	.word	0x08006ae9
 8006a18:	08006ae9 	.word	0x08006ae9
 8006a1c:	08006ae9 	.word	0x08006ae9
 8006a20:	08006ae9 	.word	0x08006ae9
 8006a24:	08006ae9 	.word	0x08006ae9
 8006a28:	08006a9b 	.word	0x08006a9b
 8006a2c:	08006ae9 	.word	0x08006ae9
 8006a30:	08006ae9 	.word	0x08006ae9
 8006a34:	08006ae9 	.word	0x08006ae9
 8006a38:	08006ae9 	.word	0x08006ae9
 8006a3c:	08006ae9 	.word	0x08006ae9
 8006a40:	08006ae9 	.word	0x08006ae9
 8006a44:	08006ae9 	.word	0x08006ae9
 8006a48:	08006ae9 	.word	0x08006ae9
 8006a4c:	08006ae9 	.word	0x08006ae9
 8006a50:	08006ae9 	.word	0x08006ae9
 8006a54:	08006ae9 	.word	0x08006ae9
 8006a58:	08006ae9 	.word	0x08006ae9
 8006a5c:	08006ae9 	.word	0x08006ae9
 8006a60:	08006ae9 	.word	0x08006ae9
 8006a64:	08006ae9 	.word	0x08006ae9
 8006a68:	08006adb 	.word	0x08006adb
 8006a6c:	2b40      	cmp	r3, #64	@ 0x40
 8006a6e:	d037      	beq.n	8006ae0 <UART_SetConfig+0x6bc>
 8006a70:	e03a      	b.n	8006ae8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006a72:	f7fd ff2f 	bl	80048d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006a76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a78:	e03c      	b.n	8006af4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fd ff3e 	bl	8004900 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a88:	e034      	b.n	8006af4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a8a:	f107 0318 	add.w	r3, r7, #24
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fe f88a 	bl	8004ba8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a98:	e02c      	b.n	8006af4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a9a:	4b09      	ldr	r3, [pc, #36]	@ (8006ac0 <UART_SetConfig+0x69c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0320 	and.w	r3, r3, #32
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d016      	beq.n	8006ad4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006aa6:	4b06      	ldr	r3, [pc, #24]	@ (8006ac0 <UART_SetConfig+0x69c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	08db      	lsrs	r3, r3, #3
 8006aac:	f003 0303 	and.w	r3, r3, #3
 8006ab0:	4a07      	ldr	r2, [pc, #28]	@ (8006ad0 <UART_SetConfig+0x6ac>)
 8006ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ab8:	e01c      	b.n	8006af4 <UART_SetConfig+0x6d0>
 8006aba:	bf00      	nop
 8006abc:	40011400 	.word	0x40011400
 8006ac0:	58024400 	.word	0x58024400
 8006ac4:	40007800 	.word	0x40007800
 8006ac8:	40007c00 	.word	0x40007c00
 8006acc:	58000c00 	.word	0x58000c00
 8006ad0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006ad4:	4b9d      	ldr	r3, [pc, #628]	@ (8006d4c <UART_SetConfig+0x928>)
 8006ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ad8:	e00c      	b.n	8006af4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ada:	4b9d      	ldr	r3, [pc, #628]	@ (8006d50 <UART_SetConfig+0x92c>)
 8006adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ade:	e009      	b.n	8006af4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ae0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ae6:	e005      	b.n	8006af4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006af2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 81de 	beq.w	8006eb8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b00:	4a94      	ldr	r2, [pc, #592]	@ (8006d54 <UART_SetConfig+0x930>)
 8006b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b06:	461a      	mov	r2, r3
 8006b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b0e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	4613      	mov	r3, r2
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	4413      	add	r3, r2
 8006b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d305      	bcc.n	8006b2c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d903      	bls.n	8006b34 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006b32:	e1c1      	b.n	8006eb8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b36:	2200      	movs	r2, #0
 8006b38:	60bb      	str	r3, [r7, #8]
 8006b3a:	60fa      	str	r2, [r7, #12]
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b40:	4a84      	ldr	r2, [pc, #528]	@ (8006d54 <UART_SetConfig+0x930>)
 8006b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	2200      	movs	r2, #0
 8006b4a:	603b      	str	r3, [r7, #0]
 8006b4c:	607a      	str	r2, [r7, #4]
 8006b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b56:	f7f9 fbbf 	bl	80002d8 <__aeabi_uldivmod>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4610      	mov	r0, r2
 8006b60:	4619      	mov	r1, r3
 8006b62:	f04f 0200 	mov.w	r2, #0
 8006b66:	f04f 0300 	mov.w	r3, #0
 8006b6a:	020b      	lsls	r3, r1, #8
 8006b6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b70:	0202      	lsls	r2, r0, #8
 8006b72:	6979      	ldr	r1, [r7, #20]
 8006b74:	6849      	ldr	r1, [r1, #4]
 8006b76:	0849      	lsrs	r1, r1, #1
 8006b78:	2000      	movs	r0, #0
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	eb12 0804 	adds.w	r8, r2, r4
 8006b82:	eb43 0905 	adc.w	r9, r3, r5
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	469a      	mov	sl, r3
 8006b8e:	4693      	mov	fp, r2
 8006b90:	4652      	mov	r2, sl
 8006b92:	465b      	mov	r3, fp
 8006b94:	4640      	mov	r0, r8
 8006b96:	4649      	mov	r1, r9
 8006b98:	f7f9 fb9e 	bl	80002d8 <__aeabi_uldivmod>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006baa:	d308      	bcc.n	8006bbe <UART_SetConfig+0x79a>
 8006bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bb2:	d204      	bcs.n	8006bbe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bba:	60da      	str	r2, [r3, #12]
 8006bbc:	e17c      	b.n	8006eb8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006bc4:	e178      	b.n	8006eb8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bce:	f040 80c5 	bne.w	8006d5c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006bd2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	dc48      	bgt.n	8006c6c <UART_SetConfig+0x848>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	db7b      	blt.n	8006cd6 <UART_SetConfig+0x8b2>
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	d879      	bhi.n	8006cd6 <UART_SetConfig+0x8b2>
 8006be2:	a201      	add	r2, pc, #4	@ (adr r2, 8006be8 <UART_SetConfig+0x7c4>)
 8006be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be8:	08006c73 	.word	0x08006c73
 8006bec:	08006c7b 	.word	0x08006c7b
 8006bf0:	08006cd7 	.word	0x08006cd7
 8006bf4:	08006cd7 	.word	0x08006cd7
 8006bf8:	08006c83 	.word	0x08006c83
 8006bfc:	08006cd7 	.word	0x08006cd7
 8006c00:	08006cd7 	.word	0x08006cd7
 8006c04:	08006cd7 	.word	0x08006cd7
 8006c08:	08006c93 	.word	0x08006c93
 8006c0c:	08006cd7 	.word	0x08006cd7
 8006c10:	08006cd7 	.word	0x08006cd7
 8006c14:	08006cd7 	.word	0x08006cd7
 8006c18:	08006cd7 	.word	0x08006cd7
 8006c1c:	08006cd7 	.word	0x08006cd7
 8006c20:	08006cd7 	.word	0x08006cd7
 8006c24:	08006cd7 	.word	0x08006cd7
 8006c28:	08006ca3 	.word	0x08006ca3
 8006c2c:	08006cd7 	.word	0x08006cd7
 8006c30:	08006cd7 	.word	0x08006cd7
 8006c34:	08006cd7 	.word	0x08006cd7
 8006c38:	08006cd7 	.word	0x08006cd7
 8006c3c:	08006cd7 	.word	0x08006cd7
 8006c40:	08006cd7 	.word	0x08006cd7
 8006c44:	08006cd7 	.word	0x08006cd7
 8006c48:	08006cd7 	.word	0x08006cd7
 8006c4c:	08006cd7 	.word	0x08006cd7
 8006c50:	08006cd7 	.word	0x08006cd7
 8006c54:	08006cd7 	.word	0x08006cd7
 8006c58:	08006cd7 	.word	0x08006cd7
 8006c5c:	08006cd7 	.word	0x08006cd7
 8006c60:	08006cd7 	.word	0x08006cd7
 8006c64:	08006cd7 	.word	0x08006cd7
 8006c68:	08006cc9 	.word	0x08006cc9
 8006c6c:	2b40      	cmp	r3, #64	@ 0x40
 8006c6e:	d02e      	beq.n	8006cce <UART_SetConfig+0x8aa>
 8006c70:	e031      	b.n	8006cd6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c72:	f7fc fbf9 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8006c76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c78:	e033      	b.n	8006ce2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c7a:	f7fc fc0b 	bl	8003494 <HAL_RCC_GetPCLK2Freq>
 8006c7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c80:	e02f      	b.n	8006ce2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fd fe3a 	bl	8004900 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c90:	e027      	b.n	8006ce2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c92:	f107 0318 	add.w	r3, r7, #24
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fd ff86 	bl	8004ba8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ca0:	e01f      	b.n	8006ce2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8006d58 <UART_SetConfig+0x934>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0320 	and.w	r3, r3, #32
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d009      	beq.n	8006cc2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cae:	4b2a      	ldr	r3, [pc, #168]	@ (8006d58 <UART_SetConfig+0x934>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	08db      	lsrs	r3, r3, #3
 8006cb4:	f003 0303 	and.w	r3, r3, #3
 8006cb8:	4a24      	ldr	r2, [pc, #144]	@ (8006d4c <UART_SetConfig+0x928>)
 8006cba:	fa22 f303 	lsr.w	r3, r2, r3
 8006cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cc0:	e00f      	b.n	8006ce2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006cc2:	4b22      	ldr	r3, [pc, #136]	@ (8006d4c <UART_SetConfig+0x928>)
 8006cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cc6:	e00c      	b.n	8006ce2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cc8:	4b21      	ldr	r3, [pc, #132]	@ (8006d50 <UART_SetConfig+0x92c>)
 8006cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ccc:	e009      	b.n	8006ce2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cd4:	e005      	b.n	8006ce2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006ce0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 80e7 	beq.w	8006eb8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cee:	4a19      	ldr	r2, [pc, #100]	@ (8006d54 <UART_SetConfig+0x930>)
 8006cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cfc:	005a      	lsls	r2, r3, #1
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	441a      	add	r2, r3
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d12:	2b0f      	cmp	r3, #15
 8006d14:	d916      	bls.n	8006d44 <UART_SetConfig+0x920>
 8006d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d1c:	d212      	bcs.n	8006d44 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f023 030f 	bic.w	r3, r3, #15
 8006d26:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2a:	085b      	lsrs	r3, r3, #1
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006d36:	4313      	orrs	r3, r2
 8006d38:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006d40:	60da      	str	r2, [r3, #12]
 8006d42:	e0b9      	b.n	8006eb8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006d4a:	e0b5      	b.n	8006eb8 <UART_SetConfig+0xa94>
 8006d4c:	03d09000 	.word	0x03d09000
 8006d50:	003d0900 	.word	0x003d0900
 8006d54:	08007bcc 	.word	0x08007bcc
 8006d58:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d5c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	dc49      	bgt.n	8006df8 <UART_SetConfig+0x9d4>
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	db7c      	blt.n	8006e62 <UART_SetConfig+0xa3e>
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d87a      	bhi.n	8006e62 <UART_SetConfig+0xa3e>
 8006d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d74 <UART_SetConfig+0x950>)
 8006d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d72:	bf00      	nop
 8006d74:	08006dff 	.word	0x08006dff
 8006d78:	08006e07 	.word	0x08006e07
 8006d7c:	08006e63 	.word	0x08006e63
 8006d80:	08006e63 	.word	0x08006e63
 8006d84:	08006e0f 	.word	0x08006e0f
 8006d88:	08006e63 	.word	0x08006e63
 8006d8c:	08006e63 	.word	0x08006e63
 8006d90:	08006e63 	.word	0x08006e63
 8006d94:	08006e1f 	.word	0x08006e1f
 8006d98:	08006e63 	.word	0x08006e63
 8006d9c:	08006e63 	.word	0x08006e63
 8006da0:	08006e63 	.word	0x08006e63
 8006da4:	08006e63 	.word	0x08006e63
 8006da8:	08006e63 	.word	0x08006e63
 8006dac:	08006e63 	.word	0x08006e63
 8006db0:	08006e63 	.word	0x08006e63
 8006db4:	08006e2f 	.word	0x08006e2f
 8006db8:	08006e63 	.word	0x08006e63
 8006dbc:	08006e63 	.word	0x08006e63
 8006dc0:	08006e63 	.word	0x08006e63
 8006dc4:	08006e63 	.word	0x08006e63
 8006dc8:	08006e63 	.word	0x08006e63
 8006dcc:	08006e63 	.word	0x08006e63
 8006dd0:	08006e63 	.word	0x08006e63
 8006dd4:	08006e63 	.word	0x08006e63
 8006dd8:	08006e63 	.word	0x08006e63
 8006ddc:	08006e63 	.word	0x08006e63
 8006de0:	08006e63 	.word	0x08006e63
 8006de4:	08006e63 	.word	0x08006e63
 8006de8:	08006e63 	.word	0x08006e63
 8006dec:	08006e63 	.word	0x08006e63
 8006df0:	08006e63 	.word	0x08006e63
 8006df4:	08006e55 	.word	0x08006e55
 8006df8:	2b40      	cmp	r3, #64	@ 0x40
 8006dfa:	d02e      	beq.n	8006e5a <UART_SetConfig+0xa36>
 8006dfc:	e031      	b.n	8006e62 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dfe:	f7fc fb33 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8006e02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e04:	e033      	b.n	8006e6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e06:	f7fc fb45 	bl	8003494 <HAL_RCC_GetPCLK2Freq>
 8006e0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e0c:	e02f      	b.n	8006e6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fd fd74 	bl	8004900 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e1c:	e027      	b.n	8006e6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e1e:	f107 0318 	add.w	r3, r7, #24
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fd fec0 	bl	8004ba8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e2c:	e01f      	b.n	8006e6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e2e:	4b2d      	ldr	r3, [pc, #180]	@ (8006ee4 <UART_SetConfig+0xac0>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0320 	and.w	r3, r3, #32
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d009      	beq.n	8006e4e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ee4 <UART_SetConfig+0xac0>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	08db      	lsrs	r3, r3, #3
 8006e40:	f003 0303 	and.w	r3, r3, #3
 8006e44:	4a28      	ldr	r2, [pc, #160]	@ (8006ee8 <UART_SetConfig+0xac4>)
 8006e46:	fa22 f303 	lsr.w	r3, r2, r3
 8006e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e4c:	e00f      	b.n	8006e6e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006e4e:	4b26      	ldr	r3, [pc, #152]	@ (8006ee8 <UART_SetConfig+0xac4>)
 8006e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e52:	e00c      	b.n	8006e6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e54:	4b25      	ldr	r3, [pc, #148]	@ (8006eec <UART_SetConfig+0xac8>)
 8006e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e58:	e009      	b.n	8006e6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e60:	e005      	b.n	8006e6e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006e6c:	bf00      	nop
    }

    if (pclk != 0U)
 8006e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d021      	beq.n	8006eb8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e78:	4a1d      	ldr	r2, [pc, #116]	@ (8006ef0 <UART_SetConfig+0xacc>)
 8006e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e82:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	085b      	lsrs	r3, r3, #1
 8006e8c:	441a      	add	r2, r3
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e96:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9a:	2b0f      	cmp	r3, #15
 8006e9c:	d909      	bls.n	8006eb2 <UART_SetConfig+0xa8e>
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ea4:	d205      	bcs.n	8006eb2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	60da      	str	r2, [r3, #12]
 8006eb0:	e002      	b.n	8006eb8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006ed4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3748      	adds	r7, #72	@ 0x48
 8006edc:	46bd      	mov	sp, r7
 8006ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ee2:	bf00      	nop
 8006ee4:	58024400 	.word	0x58024400
 8006ee8:	03d09000 	.word	0x03d09000
 8006eec:	003d0900 	.word	0x003d0900
 8006ef0:	08007bcc 	.word	0x08007bcc

08006ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f00:	f003 0308 	and.w	r3, r3, #8
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00a      	beq.n	8006f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f88:	f003 0310 	and.w	r3, r3, #16
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00a      	beq.n	8006fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d01a      	beq.n	800700a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ff2:	d10a      	bne.n	800700a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	605a      	str	r2, [r3, #4]
  }
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b098      	sub	sp, #96	@ 0x60
 800703c:	af02      	add	r7, sp, #8
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007048:	f7fa f9a8 	bl	800139c <HAL_GetTick>
 800704c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b08      	cmp	r3, #8
 800705a:	d12f      	bne.n	80070bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800705c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007064:	2200      	movs	r2, #0
 8007066:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f88e 	bl	800718c <UART_WaitOnFlagUntilTimeout>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d022      	beq.n	80070bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707e:	e853 3f00 	ldrex	r3, [r3]
 8007082:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800708a:	653b      	str	r3, [r7, #80]	@ 0x50
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	461a      	mov	r2, r3
 8007092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007094:	647b      	str	r3, [r7, #68]	@ 0x44
 8007096:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800709a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800709c:	e841 2300 	strex	r3, r2, [r1]
 80070a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e6      	bne.n	8007076 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e063      	b.n	8007184 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0304 	and.w	r3, r3, #4
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	d149      	bne.n	800715e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070d2:	2200      	movs	r2, #0
 80070d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f857 	bl	800718c <UART_WaitOnFlagUntilTimeout>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d03c      	beq.n	800715e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	623b      	str	r3, [r7, #32]
   return(result);
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007102:	633b      	str	r3, [r7, #48]	@ 0x30
 8007104:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800710a:	e841 2300 	strex	r3, r2, [r1]
 800710e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1e6      	bne.n	80070e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3308      	adds	r3, #8
 800711c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	e853 3f00 	ldrex	r3, [r3]
 8007124:	60fb      	str	r3, [r7, #12]
   return(result);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f023 0301 	bic.w	r3, r3, #1
 800712c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3308      	adds	r3, #8
 8007134:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007136:	61fa      	str	r2, [r7, #28]
 8007138:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713a:	69b9      	ldr	r1, [r7, #24]
 800713c:	69fa      	ldr	r2, [r7, #28]
 800713e:	e841 2300 	strex	r3, r2, [r1]
 8007142:	617b      	str	r3, [r7, #20]
   return(result);
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1e5      	bne.n	8007116 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2220      	movs	r2, #32
 800714e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e012      	b.n	8007184 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2220      	movs	r2, #32
 8007162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3758      	adds	r7, #88	@ 0x58
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	603b      	str	r3, [r7, #0]
 8007198:	4613      	mov	r3, r2
 800719a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800719c:	e04f      	b.n	800723e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a4:	d04b      	beq.n	800723e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071a6:	f7fa f8f9 	bl	800139c <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d302      	bcc.n	80071bc <UART_WaitOnFlagUntilTimeout+0x30>
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e04e      	b.n	800725e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0304 	and.w	r3, r3, #4
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d037      	beq.n	800723e <UART_WaitOnFlagUntilTimeout+0xb2>
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2b80      	cmp	r3, #128	@ 0x80
 80071d2:	d034      	beq.n	800723e <UART_WaitOnFlagUntilTimeout+0xb2>
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2b40      	cmp	r3, #64	@ 0x40
 80071d8:	d031      	beq.n	800723e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	f003 0308 	and.w	r3, r3, #8
 80071e4:	2b08      	cmp	r3, #8
 80071e6:	d110      	bne.n	800720a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2208      	movs	r2, #8
 80071ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 f839 	bl	8007268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2208      	movs	r2, #8
 80071fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e029      	b.n	800725e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007214:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007218:	d111      	bne.n	800723e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007222:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 f81f 	bl	8007268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2220      	movs	r2, #32
 800722e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e00f      	b.n	800725e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	69da      	ldr	r2, [r3, #28]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	4013      	ands	r3, r2
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	429a      	cmp	r2, r3
 800724c:	bf0c      	ite	eq
 800724e:	2301      	moveq	r3, #1
 8007250:	2300      	movne	r3, #0
 8007252:	b2db      	uxtb	r3, r3
 8007254:	461a      	mov	r2, r3
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	429a      	cmp	r2, r3
 800725a:	d0a0      	beq.n	800719e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
	...

08007268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007268:	b480      	push	{r7}
 800726a:	b095      	sub	sp, #84	@ 0x54
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007278:	e853 3f00 	ldrex	r3, [r3]
 800727c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800727e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007280:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007284:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	461a      	mov	r2, r3
 800728c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800728e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007290:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007292:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007294:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800729c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1e6      	bne.n	8007270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3308      	adds	r3, #8
 80072a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	4b1e      	ldr	r3, [pc, #120]	@ (8007330 <UART_EndRxTransfer+0xc8>)
 80072b6:	4013      	ands	r3, r2
 80072b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3308      	adds	r3, #8
 80072c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072ca:	e841 2300 	strex	r3, r2, [r1]
 80072ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1e5      	bne.n	80072a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d118      	bne.n	8007310 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	e853 3f00 	ldrex	r3, [r3]
 80072ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f023 0310 	bic.w	r3, r3, #16
 80072f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072fc:	61bb      	str	r3, [r7, #24]
 80072fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007300:	6979      	ldr	r1, [r7, #20]
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	e841 2300 	strex	r3, r2, [r1]
 8007308:	613b      	str	r3, [r7, #16]
   return(result);
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e6      	bne.n	80072de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2220      	movs	r2, #32
 8007314:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007324:	bf00      	nop
 8007326:	3754      	adds	r7, #84	@ 0x54
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	effffffe 	.word	0xeffffffe

08007334 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007342:	2b01      	cmp	r3, #1
 8007344:	d101      	bne.n	800734a <HAL_UARTEx_DisableFifoMode+0x16>
 8007346:	2302      	movs	r3, #2
 8007348:	e027      	b.n	800739a <HAL_UARTEx_DisableFifoMode+0x66>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2224      	movs	r2, #36	@ 0x24
 8007356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0201 	bic.w	r2, r2, #1
 8007370:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007378:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2220      	movs	r2, #32
 800738c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d101      	bne.n	80073be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073ba:	2302      	movs	r3, #2
 80073bc:	e02d      	b.n	800741a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2224      	movs	r2, #36	@ 0x24
 80073ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0201 	bic.w	r2, r2, #1
 80073e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f850 	bl	80074a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2220      	movs	r2, #32
 800740c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007432:	2b01      	cmp	r3, #1
 8007434:	d101      	bne.n	800743a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007436:	2302      	movs	r3, #2
 8007438:	e02d      	b.n	8007496 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2224      	movs	r2, #36	@ 0x24
 8007446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f022 0201 	bic.w	r2, r2, #1
 8007460:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f812 	bl	80074a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2220      	movs	r2, #32
 8007488:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d108      	bne.n	80074c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074c0:	e031      	b.n	8007526 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074c2:	2310      	movs	r3, #16
 80074c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074c6:	2310      	movs	r3, #16
 80074c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	0e5b      	lsrs	r3, r3, #25
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	f003 0307 	and.w	r3, r3, #7
 80074d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	0f5b      	lsrs	r3, r3, #29
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	f003 0307 	and.w	r3, r3, #7
 80074e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
 80074ec:	7b3a      	ldrb	r2, [r7, #12]
 80074ee:	4911      	ldr	r1, [pc, #68]	@ (8007534 <UARTEx_SetNbDataToProcess+0x94>)
 80074f0:	5c8a      	ldrb	r2, [r1, r2]
 80074f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074f6:	7b3a      	ldrb	r2, [r7, #12]
 80074f8:	490f      	ldr	r1, [pc, #60]	@ (8007538 <UARTEx_SetNbDataToProcess+0x98>)
 80074fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007500:	b29a      	uxth	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	7b7a      	ldrb	r2, [r7, #13]
 800750c:	4909      	ldr	r1, [pc, #36]	@ (8007534 <UARTEx_SetNbDataToProcess+0x94>)
 800750e:	5c8a      	ldrb	r2, [r1, r2]
 8007510:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007514:	7b7a      	ldrb	r2, [r7, #13]
 8007516:	4908      	ldr	r1, [pc, #32]	@ (8007538 <UARTEx_SetNbDataToProcess+0x98>)
 8007518:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800751a:	fb93 f3f2 	sdiv	r3, r3, r2
 800751e:	b29a      	uxth	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007526:	bf00      	nop
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	08007be4 	.word	0x08007be4
 8007538:	08007bec 	.word	0x08007bec

0800753c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800753c:	b084      	sub	sp, #16
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	f107 001c 	add.w	r0, r7, #28
 800754a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800754e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007552:	2b01      	cmp	r3, #1
 8007554:	d121      	bne.n	800759a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68da      	ldr	r2, [r3, #12]
 8007566:	4b2c      	ldr	r3, [pc, #176]	@ (8007618 <USB_CoreInit+0xdc>)
 8007568:	4013      	ands	r3, r2
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800757a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800757e:	2b01      	cmp	r3, #1
 8007580:	d105      	bne.n	800758e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 faaa 	bl	8007ae8 <USB_CoreReset>
 8007594:	4603      	mov	r3, r0
 8007596:	73fb      	strb	r3, [r7, #15]
 8007598:	e01b      	b.n	80075d2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa9e 	bl	8007ae8 <USB_CoreReset>
 80075ac:	4603      	mov	r3, r0
 80075ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80075b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d106      	bne.n	80075c6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80075c4:	e005      	b.n	80075d2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80075d2:	7fbb      	ldrb	r3, [r7, #30]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d116      	bne.n	8007606 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075dc:	b29a      	uxth	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80075e6:	4b0d      	ldr	r3, [pc, #52]	@ (800761c <USB_CoreInit+0xe0>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f043 0206 	orr.w	r2, r3, #6
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f043 0220 	orr.w	r2, r3, #32
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007606:	7bfb      	ldrb	r3, [r7, #15]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007612:	b004      	add	sp, #16
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	ffbdffbf 	.word	0xffbdffbf
 800761c:	03ee0000 	.word	0x03ee0000

08007620 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f023 0201 	bic.w	r2, r3, #1
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	460b      	mov	r3, r1
 800764c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800765e:	78fb      	ldrb	r3, [r7, #3]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d115      	bne.n	8007690 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007670:	200a      	movs	r0, #10
 8007672:	f7f9 fe9f 	bl	80013b4 <HAL_Delay>
      ms += 10U;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	330a      	adds	r3, #10
 800767a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fa25 	bl	8007acc <USB_GetMode>
 8007682:	4603      	mov	r3, r0
 8007684:	2b01      	cmp	r3, #1
 8007686:	d01e      	beq.n	80076c6 <USB_SetCurrentMode+0x84>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2bc7      	cmp	r3, #199	@ 0xc7
 800768c:	d9f0      	bls.n	8007670 <USB_SetCurrentMode+0x2e>
 800768e:	e01a      	b.n	80076c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d115      	bne.n	80076c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80076a2:	200a      	movs	r0, #10
 80076a4:	f7f9 fe86 	bl	80013b4 <HAL_Delay>
      ms += 10U;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	330a      	adds	r3, #10
 80076ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fa0c 	bl	8007acc <USB_GetMode>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d005      	beq.n	80076c6 <USB_SetCurrentMode+0x84>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80076be:	d9f0      	bls.n	80076a2 <USB_SetCurrentMode+0x60>
 80076c0:	e001      	b.n	80076c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e005      	b.n	80076d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2bc8      	cmp	r3, #200	@ 0xc8
 80076ca:	d101      	bne.n	80076d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e000      	b.n	80076d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076dc:	b084      	sub	sp, #16
 80076de:	b580      	push	{r7, lr}
 80076e0:	b086      	sub	sp, #24
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80076ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80076f6:	2300      	movs	r3, #0
 80076f8:	613b      	str	r3, [r7, #16]
 80076fa:	e009      	b.n	8007710 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	3340      	adds	r3, #64	@ 0x40
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	2200      	movs	r2, #0
 8007708:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	3301      	adds	r3, #1
 800770e:	613b      	str	r3, [r7, #16]
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	2b0e      	cmp	r3, #14
 8007714:	d9f2      	bls.n	80076fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007716:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800771a:	2b00      	cmp	r3, #0
 800771c:	d11c      	bne.n	8007758 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800772c:	f043 0302 	orr.w	r3, r3, #2
 8007730:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007736:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	e005      	b.n	8007764 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800776a:	461a      	mov	r2, r3
 800776c:	2300      	movs	r3, #0
 800776e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007770:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007774:	2b01      	cmp	r3, #1
 8007776:	d10d      	bne.n	8007794 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800777c:	2b00      	cmp	r3, #0
 800777e:	d104      	bne.n	800778a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007780:	2100      	movs	r1, #0
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f968 	bl	8007a58 <USB_SetDevSpeed>
 8007788:	e008      	b.n	800779c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800778a:	2101      	movs	r1, #1
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f963 	bl	8007a58 <USB_SetDevSpeed>
 8007792:	e003      	b.n	800779c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007794:	2103      	movs	r1, #3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f95e 	bl	8007a58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800779c:	2110      	movs	r1, #16
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f8fa 	bl	8007998 <USB_FlushTxFifo>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f924 	bl	80079fc <USB_FlushRxFifo>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c4:	461a      	mov	r2, r3
 80077c6:	2300      	movs	r3, #0
 80077c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077d0:	461a      	mov	r2, r3
 80077d2:	2300      	movs	r3, #0
 80077d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077dc:	461a      	mov	r2, r3
 80077de:	2300      	movs	r3, #0
 80077e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077e2:	2300      	movs	r3, #0
 80077e4:	613b      	str	r3, [r7, #16]
 80077e6:	e043      	b.n	8007870 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077fe:	d118      	bne.n	8007832 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10a      	bne.n	800781c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007812:	461a      	mov	r2, r3
 8007814:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007818:	6013      	str	r3, [r2, #0]
 800781a:	e013      	b.n	8007844 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007828:	461a      	mov	r2, r3
 800782a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	e008      	b.n	8007844 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800783e:	461a      	mov	r2, r3
 8007840:	2300      	movs	r3, #0
 8007842:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007850:	461a      	mov	r2, r3
 8007852:	2300      	movs	r3, #0
 8007854:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4413      	add	r3, r2
 800785e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007862:	461a      	mov	r2, r3
 8007864:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007868:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	3301      	adds	r3, #1
 800786e:	613b      	str	r3, [r7, #16]
 8007870:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007874:	461a      	mov	r2, r3
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	4293      	cmp	r3, r2
 800787a:	d3b5      	bcc.n	80077e8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800787c:	2300      	movs	r3, #0
 800787e:	613b      	str	r3, [r7, #16]
 8007880:	e043      	b.n	800790a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	4413      	add	r3, r2
 800788a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007894:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007898:	d118      	bne.n	80078cc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10a      	bne.n	80078b6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ac:	461a      	mov	r2, r3
 80078ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80078b2:	6013      	str	r3, [r2, #0]
 80078b4:	e013      	b.n	80078de <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078c2:	461a      	mov	r2, r3
 80078c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	e008      	b.n	80078de <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d8:	461a      	mov	r2, r3
 80078da:	2300      	movs	r3, #0
 80078dc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ea:	461a      	mov	r2, r3
 80078ec:	2300      	movs	r3, #0
 80078ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078fc:	461a      	mov	r2, r3
 80078fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007902:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	3301      	adds	r3, #1
 8007908:	613b      	str	r3, [r7, #16]
 800790a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800790e:	461a      	mov	r2, r3
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	4293      	cmp	r3, r2
 8007914:	d3b5      	bcc.n	8007882 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007928:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007936:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007938:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800793c:	2b00      	cmp	r3, #0
 800793e:	d105      	bne.n	800794c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	f043 0210 	orr.w	r2, r3, #16
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	699a      	ldr	r2, [r3, #24]
 8007950:	4b0f      	ldr	r3, [pc, #60]	@ (8007990 <USB_DevInit+0x2b4>)
 8007952:	4313      	orrs	r3, r2
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007958:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	f043 0208 	orr.w	r2, r3, #8
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800796c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007970:	2b01      	cmp	r3, #1
 8007972:	d105      	bne.n	8007980 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	699a      	ldr	r2, [r3, #24]
 8007978:	4b06      	ldr	r3, [pc, #24]	@ (8007994 <USB_DevInit+0x2b8>)
 800797a:	4313      	orrs	r3, r2
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007980:	7dfb      	ldrb	r3, [r7, #23]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800798c:	b004      	add	sp, #16
 800798e:	4770      	bx	lr
 8007990:	803c3800 	.word	0x803c3800
 8007994:	40000004 	.word	0x40000004

08007998 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3301      	adds	r3, #1
 80079aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079b2:	d901      	bls.n	80079b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e01b      	b.n	80079f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	daf2      	bge.n	80079a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	019b      	lsls	r3, r3, #6
 80079c8:	f043 0220 	orr.w	r2, r3, #32
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3301      	adds	r3, #1
 80079d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079dc:	d901      	bls.n	80079e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e006      	b.n	80079f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d0f0      	beq.n	80079d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a14:	d901      	bls.n	8007a1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e018      	b.n	8007a4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	daf2      	bge.n	8007a08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2210      	movs	r2, #16
 8007a2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a38:	d901      	bls.n	8007a3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e006      	b.n	8007a4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	f003 0310 	and.w	r3, r3, #16
 8007a46:	2b10      	cmp	r3, #16
 8007a48:	d0f0      	beq.n	8007a2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	68f9      	ldr	r1, [r7, #12]
 8007a74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b085      	sub	sp, #20
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007aa4:	f023 0303 	bic.w	r3, r3, #3
 8007aa8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ab8:	f043 0302 	orr.w	r3, r3, #2
 8007abc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	3301      	adds	r3, #1
 8007af8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b00:	d901      	bls.n	8007b06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e01b      	b.n	8007b3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	daf2      	bge.n	8007af4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	f043 0201 	orr.w	r2, r3, #1
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3301      	adds	r3, #1
 8007b22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b2a:	d901      	bls.n	8007b30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e006      	b.n	8007b3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d0f0      	beq.n	8007b1e <USB_CoreReset+0x36>

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <memset>:
 8007b4a:	4402      	add	r2, r0
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d100      	bne.n	8007b54 <memset+0xa>
 8007b52:	4770      	bx	lr
 8007b54:	f803 1b01 	strb.w	r1, [r3], #1
 8007b58:	e7f9      	b.n	8007b4e <memset+0x4>
	...

08007b5c <__libc_init_array>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	4d0d      	ldr	r5, [pc, #52]	@ (8007b94 <__libc_init_array+0x38>)
 8007b60:	4c0d      	ldr	r4, [pc, #52]	@ (8007b98 <__libc_init_array+0x3c>)
 8007b62:	1b64      	subs	r4, r4, r5
 8007b64:	10a4      	asrs	r4, r4, #2
 8007b66:	2600      	movs	r6, #0
 8007b68:	42a6      	cmp	r6, r4
 8007b6a:	d109      	bne.n	8007b80 <__libc_init_array+0x24>
 8007b6c:	4d0b      	ldr	r5, [pc, #44]	@ (8007b9c <__libc_init_array+0x40>)
 8007b6e:	4c0c      	ldr	r4, [pc, #48]	@ (8007ba0 <__libc_init_array+0x44>)
 8007b70:	f000 f818 	bl	8007ba4 <_init>
 8007b74:	1b64      	subs	r4, r4, r5
 8007b76:	10a4      	asrs	r4, r4, #2
 8007b78:	2600      	movs	r6, #0
 8007b7a:	42a6      	cmp	r6, r4
 8007b7c:	d105      	bne.n	8007b8a <__libc_init_array+0x2e>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b84:	4798      	blx	r3
 8007b86:	3601      	adds	r6, #1
 8007b88:	e7ee      	b.n	8007b68 <__libc_init_array+0xc>
 8007b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b8e:	4798      	blx	r3
 8007b90:	3601      	adds	r6, #1
 8007b92:	e7f2      	b.n	8007b7a <__libc_init_array+0x1e>
 8007b94:	08007bfc 	.word	0x08007bfc
 8007b98:	08007bfc 	.word	0x08007bfc
 8007b9c:	08007bfc 	.word	0x08007bfc
 8007ba0:	08007c00 	.word	0x08007c00

08007ba4 <_init>:
 8007ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba6:	bf00      	nop
 8007ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007baa:	bc08      	pop	{r3}
 8007bac:	469e      	mov	lr, r3
 8007bae:	4770      	bx	lr

08007bb0 <_fini>:
 8007bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb2:	bf00      	nop
 8007bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb6:	bc08      	pop	{r3}
 8007bb8:	469e      	mov	lr, r3
 8007bba:	4770      	bx	lr
