
Stepper_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079f4  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007c8c  08007c8c  00008c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007cc4  08007cc4  00008cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007ccc  08007ccc  00008ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007cd0  08007cd0  00008cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08007cd4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08007ce4  00009010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08007d44  00009070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  240000d0  08007da4  000090d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240007a4  08007da4  000097a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000090d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1f8  00000000  00000000  000090fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f2a  00000000  00000000  000262f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  00029220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001072  00000000  00000000  0002a720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000390dd  00000000  00000000  0002b792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c348  00000000  00000000  0006486f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016c808  00000000  00000000  00080bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ed3bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b00  00000000  00000000  001ed404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001f2f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007c74 	.word	0x08007c74

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08007c74 	.word	0x08007c74

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fec8 	bl	8001360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f838 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f9f8 	bl	80009c8 <MX_GPIO_Init>
  MX_ETH_Init();
 80005d8:	f000 f8b4 	bl	8000744 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005dc:	f000 f976 	bl	80008cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e0:	f000 f9c0 	bl	8000964 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80005e4:	f000 f8fa 	bl	80007dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005e8:	2100      	movs	r1, #0
 80005ea:	4814      	ldr	r0, [pc, #80]	@ (800063c <main+0x74>)
 80005ec:	f004 feb4 	bl	8005358 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2120      	movs	r1, #32
 80005f4:	4812      	ldr	r0, [pc, #72]	@ (8000640 <main+0x78>)
 80005f6:	f001 fe51 	bl	800229c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		accelerate_RPM(430);
 80005fa:	f44f 70d7 	mov.w	r0, #430	@ 0x1ae
 80005fe:	f000 fadb 	bl	8000bb8 <accelerate_RPM>
		HAL_Delay(3000);
 8000602:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000606:	f000 ff3d 	bl	8001484 <HAL_Delay>

		decelerate_to_RPM(200);
 800060a:	20c8      	movs	r0, #200	@ 0xc8
 800060c:	f000 fb38 	bl	8000c80 <decelerate_to_RPM>
		HAL_Delay(3000);
 8000610:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000614:	f000 ff36 	bl	8001484 <HAL_Delay>

		accelerate_RPM(330);
 8000618:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 800061c:	f000 facc 	bl	8000bb8 <accelerate_RPM>
		HAL_Delay(3000);
 8000620:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000624:	f000 ff2e 	bl	8001484 <HAL_Delay>

		decelerate_to_RPM(0);
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fb29 	bl	8000c80 <decelerate_to_RPM>
		HAL_Delay(3000);
 800062e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000632:	f000 ff27 	bl	8001484 <HAL_Delay>
		accelerate_RPM(430);
 8000636:	bf00      	nop
 8000638:	e7df      	b.n	80005fa <main+0x32>
 800063a:	bf00      	nop
 800063c:	240001d4 	.word	0x240001d4
 8000640:	58020000 	.word	0x58020000

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b09c      	sub	sp, #112	@ 0x70
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800064e:	224c      	movs	r2, #76	@ 0x4c
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f007 fae1 	bl	8007c1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2220      	movs	r2, #32
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f007 fadb 	bl	8007c1a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000664:	2002      	movs	r0, #2
 8000666:	f001 ff63 	bl	8002530 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066a:	2300      	movs	r3, #0
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	4b33      	ldr	r3, [pc, #204]	@ (800073c <SystemClock_Config+0xf8>)
 8000670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000672:	4a32      	ldr	r2, [pc, #200]	@ (800073c <SystemClock_Config+0xf8>)
 8000674:	f023 0301 	bic.w	r3, r3, #1
 8000678:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800067a:	4b30      	ldr	r3, [pc, #192]	@ (800073c <SystemClock_Config+0xf8>)
 800067c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	4b2e      	ldr	r3, [pc, #184]	@ (8000740 <SystemClock_Config+0xfc>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800068c:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <SystemClock_Config+0xfc>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <SystemClock_Config+0xfc>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a0:	bf00      	nop
 80006a2:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <SystemClock_Config+0xfc>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006ae:	d1f8      	bne.n	80006a2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006b0:	2303      	movs	r3, #3
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006be:	2340      	movs	r3, #64	@ 0x40
 80006c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	2302      	movs	r3, #2
 80006c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006ce:	2318      	movs	r3, #24
 80006d0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006de:	230c      	movs	r3, #12
 80006e0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 ff68 	bl	80025c4 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006fa:	f000 fa55 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	233f      	movs	r3, #63	@ 0x3f
 8000700:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000712:	2340      	movs	r3, #64	@ 0x40
 8000714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2101      	movs	r1, #1
 8000722:	4618      	mov	r0, r3
 8000724:	f002 fba8 	bl	8002e78 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800072e:	f000 fa3b 	bl	8000ba8 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3770      	adds	r7, #112	@ 0x70
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	58000400 	.word	0x58000400
 8000740:	58024800 	.word	0x58024800

08000744 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000748:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <MX_ETH_Init+0x80>)
 800074a:	4a1f      	ldr	r2, [pc, #124]	@ (80007c8 <MX_ETH_Init+0x84>)
 800074c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800074e:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <MX_ETH_Init+0x88>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000754:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <MX_ETH_Init+0x88>)
 8000756:	2280      	movs	r2, #128	@ 0x80
 8000758:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800075a:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <MX_ETH_Init+0x88>)
 800075c:	22e1      	movs	r2, #225	@ 0xe1
 800075e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000760:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <MX_ETH_Init+0x88>)
 8000762:	2200      	movs	r2, #0
 8000764:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000766:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <MX_ETH_Init+0x88>)
 8000768:	2200      	movs	r2, #0
 800076a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800076c:	4b17      	ldr	r3, [pc, #92]	@ (80007cc <MX_ETH_Init+0x88>)
 800076e:	2200      	movs	r2, #0
 8000770:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000772:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <MX_ETH_Init+0x80>)
 8000774:	4a15      	ldr	r2, [pc, #84]	@ (80007cc <MX_ETH_Init+0x88>)
 8000776:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_ETH_Init+0x80>)
 800077a:	2201      	movs	r2, #1
 800077c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_ETH_Init+0x80>)
 8000780:	4a13      	ldr	r2, [pc, #76]	@ (80007d0 <MX_ETH_Init+0x8c>)
 8000782:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_ETH_Init+0x80>)
 8000786:	4a13      	ldr	r2, [pc, #76]	@ (80007d4 <MX_ETH_Init+0x90>)
 8000788:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_ETH_Init+0x80>)
 800078c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000790:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000792:	480c      	ldr	r0, [pc, #48]	@ (80007c4 <MX_ETH_Init+0x80>)
 8000794:	f000 ff9e 	bl	80016d4 <HAL_ETH_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800079e:	f000 fa03 	bl	8000ba8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007a2:	2238      	movs	r2, #56	@ 0x38
 80007a4:	2100      	movs	r1, #0
 80007a6:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <MX_ETH_Init+0x94>)
 80007a8:	f007 fa37 	bl	8007c1a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <MX_ETH_Init+0x94>)
 80007ae:	2221      	movs	r2, #33	@ 0x21
 80007b0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_ETH_Init+0x94>)
 80007b4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007b8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007ba:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <MX_ETH_Init+0x94>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	24000124 	.word	0x24000124
 80007c8:	40028000 	.word	0x40028000
 80007cc:	24000798 	.word	0x24000798
 80007d0:	24000070 	.word	0x24000070
 80007d4:	24000010 	.word	0x24000010
 80007d8:	240000ec 	.word	0x240000ec

080007dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	@ 0x38
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800080e:	4b2d      	ldr	r3, [pc, #180]	@ (80008c4 <MX_TIM3_Init+0xe8>)
 8000810:	4a2d      	ldr	r2, [pc, #180]	@ (80008c8 <MX_TIM3_Init+0xec>)
 8000812:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8000814:	4b2b      	ldr	r3, [pc, #172]	@ (80008c4 <MX_TIM3_Init+0xe8>)
 8000816:	223f      	movs	r2, #63	@ 0x3f
 8000818:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081a:	4b2a      	ldr	r3, [pc, #168]	@ (80008c4 <MX_TIM3_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 62500-1;
 8000820:	4b28      	ldr	r3, [pc, #160]	@ (80008c4 <MX_TIM3_Init+0xe8>)
 8000822:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8000826:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000828:	4b26      	ldr	r3, [pc, #152]	@ (80008c4 <MX_TIM3_Init+0xe8>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800082e:	4b25      	ldr	r3, [pc, #148]	@ (80008c4 <MX_TIM3_Init+0xe8>)
 8000830:	2280      	movs	r2, #128	@ 0x80
 8000832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000834:	4823      	ldr	r0, [pc, #140]	@ (80008c4 <MX_TIM3_Init+0xe8>)
 8000836:	f004 fcd7 	bl	80051e8 <HAL_TIM_Base_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000840:	f000 f9b2 	bl	8000ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000844:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800084a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800084e:	4619      	mov	r1, r3
 8000850:	481c      	ldr	r0, [pc, #112]	@ (80008c4 <MX_TIM3_Init+0xe8>)
 8000852:	f005 f839 	bl	80058c8 <HAL_TIM_ConfigClockSource>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800085c:	f000 f9a4 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000860:	4818      	ldr	r0, [pc, #96]	@ (80008c4 <MX_TIM3_Init+0xe8>)
 8000862:	f004 fd18 	bl	8005296 <HAL_TIM_PWM_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800086c:	f000 f99c 	bl	8000ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4811      	ldr	r0, [pc, #68]	@ (80008c4 <MX_TIM3_Init+0xe8>)
 8000880:	f005 fd5a 	bl	8006338 <HAL_TIMEx_MasterConfigSynchronization>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800088a:	f000 f98d 	bl	8000ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800088e:	2360      	movs	r3, #96	@ 0x60
 8000890:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 250;
 8000892:	23fa      	movs	r3, #250	@ 0xfa
 8000894:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800089e:	463b      	mov	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	4619      	mov	r1, r3
 80008a4:	4807      	ldr	r0, [pc, #28]	@ (80008c4 <MX_TIM3_Init+0xe8>)
 80008a6:	f004 fefb 	bl	80056a0 <HAL_TIM_PWM_ConfigChannel>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80008b0:	f000 f97a 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008b4:	4803      	ldr	r0, [pc, #12]	@ (80008c4 <MX_TIM3_Init+0xe8>)
 80008b6:	f000 fb51 	bl	8000f5c <HAL_TIM_MspPostInit>

}
 80008ba:	bf00      	nop
 80008bc:	3738      	adds	r7, #56	@ 0x38
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	240001d4 	.word	0x240001d4
 80008c8:	40000400 	.word	0x40000400

080008cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d0:	4b22      	ldr	r3, [pc, #136]	@ (800095c <MX_USART3_UART_Init+0x90>)
 80008d2:	4a23      	ldr	r2, [pc, #140]	@ (8000960 <MX_USART3_UART_Init+0x94>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008d6:	4b21      	ldr	r3, [pc, #132]	@ (800095c <MX_USART3_UART_Init+0x90>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b1f      	ldr	r3, [pc, #124]	@ (800095c <MX_USART3_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	@ (800095c <MX_USART3_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <MX_USART3_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <MX_USART3_UART_Init+0x90>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b19      	ldr	r3, [pc, #100]	@ (800095c <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b17      	ldr	r3, [pc, #92]	@ (800095c <MX_USART3_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b16      	ldr	r3, [pc, #88]	@ (800095c <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000908:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_USART3_UART_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090e:	4b13      	ldr	r3, [pc, #76]	@ (800095c <MX_USART3_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000914:	4811      	ldr	r0, [pc, #68]	@ (800095c <MX_USART3_UART_Init+0x90>)
 8000916:	f005 fd9d 	bl	8006454 <HAL_UART_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000920:	f000 f942 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000924:	2100      	movs	r1, #0
 8000926:	480d      	ldr	r0, [pc, #52]	@ (800095c <MX_USART3_UART_Init+0x90>)
 8000928:	f006 fda5 	bl	8007476 <HAL_UARTEx_SetTxFifoThreshold>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000932:	f000 f939 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000936:	2100      	movs	r1, #0
 8000938:	4808      	ldr	r0, [pc, #32]	@ (800095c <MX_USART3_UART_Init+0x90>)
 800093a:	f006 fdda 	bl	80074f2 <HAL_UARTEx_SetRxFifoThreshold>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000944:	f000 f930 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	@ (800095c <MX_USART3_UART_Init+0x90>)
 800094a:	f006 fd5b 	bl	8007404 <HAL_UARTEx_DisableFifoMode>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000954:	f000 f928 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	24000220 	.word	0x24000220
 8000960:	40004800 	.word	0x40004800

08000964 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000968:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800096a:	4a16      	ldr	r2, [pc, #88]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800096c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800096e:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000970:	2209      	movs	r2, #9
 8000972:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000976:	2202      	movs	r2, #2
 8000978:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800097c:	2200      	movs	r2, #0
 800097e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000982:	2202      	movs	r2, #2
 8000984:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000988:	2201      	movs	r2, #1
 800098a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800098e:	2200      	movs	r2, #0
 8000990:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000994:	2200      	movs	r2, #0
 8000996:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800099a:	2201      	movs	r2, #1
 800099c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ac:	f001 fc8f 	bl	80022ce <HAL_PCD_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80009b6:	f000 f8f7 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	240002b4 	.word	0x240002b4
 80009c4:	40080000 	.word	0x40080000

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08c      	sub	sp, #48	@ 0x30
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b6b      	ldr	r3, [pc, #428]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e4:	4a69      	ldr	r2, [pc, #420]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ee:	4b67      	ldr	r3, [pc, #412]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fc:	4b63      	ldr	r3, [pc, #396]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a02:	4a62      	ldr	r2, [pc, #392]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a0c:	4b5f      	ldr	r3, [pc, #380]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b5c      	ldr	r3, [pc, #368]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a20:	4a5a      	ldr	r2, [pc, #360]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a2a:	4b58      	ldr	r3, [pc, #352]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a38:	4b54      	ldr	r3, [pc, #336]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 8000a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a3e:	4a53      	ldr	r2, [pc, #332]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a48:	4b50      	ldr	r3, [pc, #320]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a56:	4b4d      	ldr	r3, [pc, #308]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5c:	4a4b      	ldr	r2, [pc, #300]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 8000a5e:	f043 0308 	orr.w	r3, r3, #8
 8000a62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a66:	4b49      	ldr	r3, [pc, #292]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6c:	f003 0308 	and.w	r3, r3, #8
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a74:	4b45      	ldr	r3, [pc, #276]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7a:	4a44      	ldr	r2, [pc, #272]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 8000a7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a84:	4b41      	ldr	r3, [pc, #260]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	4b3e      	ldr	r3, [pc, #248]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a98:	4a3c      	ldr	r2, [pc, #240]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8000b8c <MX_GPIO_Init+0x1c4>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	4836      	ldr	r0, [pc, #216]	@ (8000b90 <MX_GPIO_Init+0x1c8>)
 8000ab6:	f001 fbf1 	bl	800229c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ac0:	4834      	ldr	r0, [pc, #208]	@ (8000b94 <MX_GPIO_Init+0x1cc>)
 8000ac2:	f001 fbeb 	bl	800229c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000acc:	4832      	ldr	r0, [pc, #200]	@ (8000b98 <MX_GPIO_Init+0x1d0>)
 8000ace:	f001 fbe5 	bl	800229c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	4831      	ldr	r0, [pc, #196]	@ (8000b9c <MX_GPIO_Init+0x1d4>)
 8000ad8:	f001 fbe0 	bl	800229c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000adc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	482b      	ldr	r0, [pc, #172]	@ (8000ba0 <MX_GPIO_Init+0x1d8>)
 8000af2:	f001 fa23 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000af6:	2320      	movs	r3, #32
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4820      	ldr	r0, [pc, #128]	@ (8000b90 <MX_GPIO_Init+0x1c8>)
 8000b0e:	f001 fa15 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b12:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	481a      	ldr	r0, [pc, #104]	@ (8000b94 <MX_GPIO_Init+0x1cc>)
 8000b2c:	f001 fa06 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	4813      	ldr	r0, [pc, #76]	@ (8000b98 <MX_GPIO_Init+0x1d0>)
 8000b4a:	f001 f9f7 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b4e:	2380      	movs	r3, #128	@ 0x80
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b52:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	4810      	ldr	r0, [pc, #64]	@ (8000ba4 <MX_GPIO_Init+0x1dc>)
 8000b64:	f001 f9ea 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4807      	ldr	r0, [pc, #28]	@ (8000b9c <MX_GPIO_Init+0x1d4>)
 8000b80:	f001 f9dc 	bl	8001f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b84:	bf00      	nop
 8000b86:	3730      	adds	r7, #48	@ 0x30
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	58024400 	.word	0x58024400
 8000b90:	58020000 	.word	0x58020000
 8000b94:	58020400 	.word	0x58020400
 8000b98:	58020c00 	.word	0x58020c00
 8000b9c:	58021000 	.word	0x58021000
 8000ba0:	58020800 	.word	0x58020800
 8000ba4:	58021800 	.word	0x58021800

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <Error_Handler+0x8>
 8000bb4:	0000      	movs	r0, r0
	...

08000bb8 <accelerate_RPM>:
#include "motor_control.h"
#include "stm32h7xx_hal.h"

extern TIM_HandleTypeDef htim3;

void accelerate_RPM(int target_speed_RPM) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

	//Porneste generarea de semnal PWM
	int target_frequency = (target_speed_RPM / 60.0) * 200;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	ee07 3a90 	vmov	s15, r3
 8000bc6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bca:	ed9f 5b27 	vldr	d5, [pc, #156]	@ 8000c68 <accelerate_RPM+0xb0>
 8000bce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bd2:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 8000c70 <accelerate_RPM+0xb8>
 8000bd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bda:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000bde:	ee17 3a90 	vmov	r3, s15
 8000be2:	60fb      	str	r3, [r7, #12]

	if(target_frequency > MAX_FREQUENCY){
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000bea:	4293      	cmp	r3, r2
 8000bec:	dd03      	ble.n	8000bf6 <accelerate_RPM+0x3e>
		target_frequency = MAX_FREQUENCY;
 8000bee:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	e004      	b.n	8000c00 <accelerate_RPM+0x48>
	}
	else if(target_frequency < MIN_FREQUENCY){
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b0f      	cmp	r3, #15
 8000bfa:	dc01      	bgt.n	8000c00 <accelerate_RPM+0x48>
		target_frequency = MIN_FREQUENCY;
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	60fb      	str	r3, [r7, #12]
	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c00:	2100      	movs	r1, #0
 8000c02:	481d      	ldr	r0, [pc, #116]	@ (8000c78 <accelerate_RPM+0xc0>)
 8000c04:	f004 fba8 	bl	8005358 <HAL_TIM_PWM_Start>

	int current_frequency  = 1000000 / (__HAL_TIM_GET_AUTORELOAD(&htim3)) +1;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <accelerate_RPM+0xc0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c7c <accelerate_RPM+0xc4>)
 8000c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c14:	3301      	adds	r3, #1
 8000c16:	60bb      	str	r3, [r7, #8]

	while (current_frequency < target_frequency) {
 8000c18:	e01b      	b.n	8000c52 <accelerate_RPM+0x9a>

		current_frequency += ACCELERATION_STEP;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]

		if (current_frequency > target_frequency) {
 8000c20:	68ba      	ldr	r2, [r7, #8]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dd01      	ble.n	8000c2c <accelerate_RPM+0x74>
			current_frequency = target_frequency;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	60bb      	str	r3, [r7, #8]
		}

		//Actualizeaza ARR cu noua valoare (1000000 este frecventa ceasului folosita pentru pwm -64mhz cu prescalar de 64)
		__HAL_TIM_SET_AUTORELOAD(&htim3, (1000000 / current_frequency) - 1);
 8000c2c:	4a13      	ldr	r2, [pc, #76]	@ (8000c7c <accelerate_RPM+0xc4>)
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c34:	1e5a      	subs	r2, r3, #1
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <accelerate_RPM+0xc0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000c7c <accelerate_RPM+0xc4>)
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c44:	3b01      	subs	r3, #1
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <accelerate_RPM+0xc0>)
 8000c4a:	60da      	str	r2, [r3, #12]
		HAL_Delay(10);
 8000c4c:	200a      	movs	r0, #10
 8000c4e:	f000 fc19 	bl	8001484 <HAL_Delay>
	while (current_frequency < target_frequency) {
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	dbdf      	blt.n	8000c1a <accelerate_RPM+0x62>
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	f3af 8000 	nop.w
 8000c68:	00000000 	.word	0x00000000
 8000c6c:	404e0000 	.word	0x404e0000
 8000c70:	00000000 	.word	0x00000000
 8000c74:	40690000 	.word	0x40690000
 8000c78:	240001d4 	.word	0x240001d4
 8000c7c:	000f4240 	.word	0x000f4240

08000c80 <decelerate_to_RPM>:

void decelerate_to_RPM(int target_speed_RPM) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	int target_frequency = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
	int current_frequency  = 1000000 / (__HAL_TIM_GET_AUTORELOAD(&htim3)) +1;
 8000c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d40 <decelerate_to_RPM+0xc0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c92:	4a2c      	ldr	r2, [pc, #176]	@ (8000d44 <decelerate_to_RPM+0xc4>)
 8000c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c98:	3301      	adds	r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]

	if (target_speed_RPM == 0) {
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d102      	bne.n	8000ca8 <decelerate_to_RPM+0x28>
		target_frequency = MIN_FREQUENCY;
 8000ca2:	2310      	movs	r3, #16
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	e02e      	b.n	8000d06 <decelerate_to_RPM+0x86>
	} else {
		target_frequency = (target_speed_RPM / 60.0) * 200;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	ee07 3a90 	vmov	s15, r3
 8000cae:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000cb2:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 8000d30 <decelerate_to_RPM+0xb0>
 8000cb6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cba:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8000d38 <decelerate_to_RPM+0xb8>
 8000cbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cc2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cc6:	ee17 3a90 	vmov	r3, s15
 8000cca:	60fb      	str	r3, [r7, #12]
	}



	while (current_frequency > target_frequency) {
 8000ccc:	e01b      	b.n	8000d06 <decelerate_to_RPM+0x86>

		current_frequency -= DECELERATION_STEP;
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]

		if (current_frequency < target_frequency) {
 8000cd4:	68ba      	ldr	r2, [r7, #8]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	da01      	bge.n	8000ce0 <decelerate_to_RPM+0x60>
			current_frequency = target_frequency;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	60bb      	str	r3, [r7, #8]
		}

		//Actualizeaza ARR cu noua valoare (1000000 este frecventa ceasului folosita pentru pwm -64mhz cu prescalar de 64)
		__HAL_TIM_SET_AUTORELOAD(&htim3, (1000000 / current_frequency) - 1);
 8000ce0:	4a18      	ldr	r2, [pc, #96]	@ (8000d44 <decelerate_to_RPM+0xc4>)
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ce8:	1e5a      	subs	r2, r3, #1
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <decelerate_to_RPM+0xc0>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cf0:	4a14      	ldr	r2, [pc, #80]	@ (8000d44 <decelerate_to_RPM+0xc4>)
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <decelerate_to_RPM+0xc0>)
 8000cfe:	60da      	str	r2, [r3, #12]
		HAL_Delay(10);
 8000d00:	200a      	movs	r0, #10
 8000d02:	f000 fbbf 	bl	8001484 <HAL_Delay>
	while (current_frequency > target_frequency) {
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	dcdf      	bgt.n	8000cce <decelerate_to_RPM+0x4e>
	}
	if (target_speed_RPM == 0 && target_frequency == 16) {
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d106      	bne.n	8000d22 <decelerate_to_RPM+0xa2>
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b10      	cmp	r3, #16
 8000d18:	d103      	bne.n	8000d22 <decelerate_to_RPM+0xa2>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4808      	ldr	r0, [pc, #32]	@ (8000d40 <decelerate_to_RPM+0xc0>)
 8000d1e:	f004 fc29 	bl	8005574 <HAL_TIM_PWM_Stop>
	}
}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	f3af 8000 	nop.w
 8000d30:	00000000 	.word	0x00000000
 8000d34:	404e0000 	.word	0x404e0000
 8000d38:	00000000 	.word	0x00000000
 8000d3c:	40690000 	.word	0x40690000
 8000d40:	240001d4 	.word	0x240001d4
 8000d44:	000f4240 	.word	0x000f4240

08000d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <HAL_MspInit+0x30>)
 8000d50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d54:	4a08      	ldr	r2, [pc, #32]	@ (8000d78 <HAL_MspInit+0x30>)
 8000d56:	f043 0302 	orr.w	r3, r3, #2
 8000d5a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d5e:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <HAL_MspInit+0x30>)
 8000d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	58024400 	.word	0x58024400

08000d7c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08e      	sub	sp, #56	@ 0x38
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a59      	ldr	r2, [pc, #356]	@ (8000f00 <HAL_ETH_MspInit+0x184>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	f040 80ab 	bne.w	8000ef6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000da0:	4b58      	ldr	r3, [pc, #352]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000da2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000da6:	4a57      	ldr	r2, [pc, #348]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000da8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dac:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000db0:	4b54      	ldr	r3, [pc, #336]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000db2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000db6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dba:	623b      	str	r3, [r7, #32]
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000dbe:	4b51      	ldr	r3, [pc, #324]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000dc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dc4:	4a4f      	ldr	r2, [pc, #316]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dce:	4b4d      	ldr	r3, [pc, #308]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000dd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ddc:	4b49      	ldr	r3, [pc, #292]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000dde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000de2:	4a48      	ldr	r2, [pc, #288]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dec:	4b45      	ldr	r3, [pc, #276]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000dee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	4b42      	ldr	r3, [pc, #264]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e00:	4a40      	ldr	r2, [pc, #256]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b3a      	ldr	r3, [pc, #232]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1e:	4a39      	ldr	r2, [pc, #228]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e28:	4b36      	ldr	r3, [pc, #216]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	4b33      	ldr	r3, [pc, #204]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3c:	4a31      	ldr	r2, [pc, #196]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e3e:	f043 0302 	orr.w	r3, r3, #2
 8000e42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e46:	4b2f      	ldr	r3, [pc, #188]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e54:	4b2b      	ldr	r3, [pc, #172]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5a:	4a2a      	ldr	r2, [pc, #168]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e64:	4b27      	ldr	r3, [pc, #156]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e72:	2332      	movs	r3, #50	@ 0x32
 8000e74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e82:	230b      	movs	r3, #11
 8000e84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	481e      	ldr	r0, [pc, #120]	@ (8000f08 <HAL_ETH_MspInit+0x18c>)
 8000e8e:	f001 f855 	bl	8001f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e92:	2386      	movs	r3, #134	@ 0x86
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea2:	230b      	movs	r3, #11
 8000ea4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4817      	ldr	r0, [pc, #92]	@ (8000f0c <HAL_ETH_MspInit+0x190>)
 8000eae:	f001 f845 	bl	8001f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec4:	230b      	movs	r3, #11
 8000ec6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4810      	ldr	r0, [pc, #64]	@ (8000f10 <HAL_ETH_MspInit+0x194>)
 8000ed0:	f001 f834 	bl	8001f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ed4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4808      	ldr	r0, [pc, #32]	@ (8000f14 <HAL_ETH_MspInit+0x198>)
 8000ef2:	f001 f823 	bl	8001f3c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3738      	adds	r7, #56	@ 0x38
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40028000 	.word	0x40028000
 8000f04:	58024400 	.word	0x58024400
 8000f08:	58020800 	.word	0x58020800
 8000f0c:	58020000 	.word	0x58020000
 8000f10:	58020400 	.word	0x58020400
 8000f14:	58021800 	.word	0x58021800

08000f18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0b      	ldr	r2, [pc, #44]	@ (8000f54 <HAL_TIM_Base_MspInit+0x3c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d10e      	bne.n	8000f48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <HAL_TIM_Base_MspInit+0x40>)
 8000f2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f30:	4a09      	ldr	r2, [pc, #36]	@ (8000f58 <HAL_TIM_Base_MspInit+0x40>)
 8000f32:	f043 0302 	orr.w	r3, r3, #2
 8000f36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f3a:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <HAL_TIM_Base_MspInit+0x40>)
 8000f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	40000400 	.word	0x40000400
 8000f58:	58024400 	.word	0x58024400

08000f5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <HAL_TIM_MspPostInit+0x68>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d11e      	bne.n	8000fbc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <HAL_TIM_MspPostInit+0x6c>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f84:	4a10      	ldr	r2, [pc, #64]	@ (8000fc8 <HAL_TIM_MspPostInit+0x6c>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <HAL_TIM_MspPostInit+0x6c>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f9c:	2340      	movs	r3, #64	@ 0x40
 8000f9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <HAL_TIM_MspPostInit+0x70>)
 8000fb8:	f000 ffc0 	bl	8001f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3720      	adds	r7, #32
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40000400 	.word	0x40000400
 8000fc8:	58024400 	.word	0x58024400
 8000fcc:	58020000 	.word	0x58020000

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0ba      	sub	sp, #232	@ 0xe8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	22c0      	movs	r2, #192	@ 0xc0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f006 fe12 	bl	8007c1a <memset>
  if(huart->Instance==USART3)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a27      	ldr	r2, [pc, #156]	@ (8001098 <HAL_UART_MspInit+0xc8>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d146      	bne.n	800108e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001000:	f04f 0202 	mov.w	r2, #2
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	4618      	mov	r0, r3
 8001018:	f002 faba 	bl	8003590 <HAL_RCCEx_PeriphCLKConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001022:	f7ff fdc1 	bl	8000ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001026:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <HAL_UART_MspInit+0xcc>)
 8001028:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800102c:	4a1b      	ldr	r2, [pc, #108]	@ (800109c <HAL_UART_MspInit+0xcc>)
 800102e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001032:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001036:	4b19      	ldr	r3, [pc, #100]	@ (800109c <HAL_UART_MspInit+0xcc>)
 8001038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800103c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001044:	4b15      	ldr	r3, [pc, #84]	@ (800109c <HAL_UART_MspInit+0xcc>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104a:	4a14      	ldr	r2, [pc, #80]	@ (800109c <HAL_UART_MspInit+0xcc>)
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001054:	4b11      	ldr	r3, [pc, #68]	@ (800109c <HAL_UART_MspInit+0xcc>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001062:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001066:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800107c:	2307      	movs	r3, #7
 800107e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001082:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <HAL_UART_MspInit+0xd0>)
 800108a:	f000 ff57 	bl	8001f3c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800108e:	bf00      	nop
 8001090:	37e8      	adds	r7, #232	@ 0xe8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40004800 	.word	0x40004800
 800109c:	58024400 	.word	0x58024400
 80010a0:	58020c00 	.word	0x58020c00

080010a4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0ba      	sub	sp, #232	@ 0xe8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	22c0      	movs	r2, #192	@ 0xc0
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f006 fda8 	bl	8007c1a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a30      	ldr	r2, [pc, #192]	@ (8001190 <HAL_PCD_MspInit+0xec>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d159      	bne.n	8001188 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010d4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80010e0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80010e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 fa4f 	bl	8003590 <HAL_RCCEx_PeriphCLKConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80010f8:	f7ff fd56 	bl	8000ba8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80010fc:	f001 fa52 	bl	80025a4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	4b24      	ldr	r3, [pc, #144]	@ (8001194 <HAL_PCD_MspInit+0xf0>)
 8001102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001106:	4a23      	ldr	r2, [pc, #140]	@ (8001194 <HAL_PCD_MspInit+0xf0>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001110:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <HAL_PCD_MspInit+0xf0>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800111e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001122:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001138:	230a      	movs	r3, #10
 800113a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001142:	4619      	mov	r1, r3
 8001144:	4814      	ldr	r0, [pc, #80]	@ (8001198 <HAL_PCD_MspInit+0xf4>)
 8001146:	f000 fef9 	bl	8001f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800114a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800114e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001162:	4619      	mov	r1, r3
 8001164:	480c      	ldr	r0, [pc, #48]	@ (8001198 <HAL_PCD_MspInit+0xf4>)
 8001166:	f000 fee9 	bl	8001f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800116a:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <HAL_PCD_MspInit+0xf0>)
 800116c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001170:	4a08      	ldr	r2, [pc, #32]	@ (8001194 <HAL_PCD_MspInit+0xf0>)
 8001172:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001176:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_PCD_MspInit+0xf0>)
 800117c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001180:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001188:	bf00      	nop
 800118a:	37e8      	adds	r7, #232	@ 0xe8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40080000 	.word	0x40080000
 8001194:	58024400 	.word	0x58024400
 8001198:	58020000 	.word	0x58020000

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <NMI_Handler+0x4>

080011a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <HardFault_Handler+0x4>

080011ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <MemManage_Handler+0x4>

080011b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f2:	f000 f927 	bl	8001444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001200:	4b37      	ldr	r3, [pc, #220]	@ (80012e0 <SystemInit+0xe4>)
 8001202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001206:	4a36      	ldr	r2, [pc, #216]	@ (80012e0 <SystemInit+0xe4>)
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001210:	4b34      	ldr	r3, [pc, #208]	@ (80012e4 <SystemInit+0xe8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	2b06      	cmp	r3, #6
 800121a:	d807      	bhi.n	800122c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800121c:	4b31      	ldr	r3, [pc, #196]	@ (80012e4 <SystemInit+0xe8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f023 030f 	bic.w	r3, r3, #15
 8001224:	4a2f      	ldr	r2, [pc, #188]	@ (80012e4 <SystemInit+0xe8>)
 8001226:	f043 0307 	orr.w	r3, r3, #7
 800122a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800122c:	4b2e      	ldr	r3, [pc, #184]	@ (80012e8 <SystemInit+0xec>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a2d      	ldr	r2, [pc, #180]	@ (80012e8 <SystemInit+0xec>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001238:	4b2b      	ldr	r3, [pc, #172]	@ (80012e8 <SystemInit+0xec>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800123e:	4b2a      	ldr	r3, [pc, #168]	@ (80012e8 <SystemInit+0xec>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4929      	ldr	r1, [pc, #164]	@ (80012e8 <SystemInit+0xec>)
 8001244:	4b29      	ldr	r3, [pc, #164]	@ (80012ec <SystemInit+0xf0>)
 8001246:	4013      	ands	r3, r2
 8001248:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800124a:	4b26      	ldr	r3, [pc, #152]	@ (80012e4 <SystemInit+0xe8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	d007      	beq.n	8001266 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001256:	4b23      	ldr	r3, [pc, #140]	@ (80012e4 <SystemInit+0xe8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f023 030f 	bic.w	r3, r3, #15
 800125e:	4a21      	ldr	r2, [pc, #132]	@ (80012e4 <SystemInit+0xe8>)
 8001260:	f043 0307 	orr.w	r3, r3, #7
 8001264:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001266:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <SystemInit+0xec>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800126c:	4b1e      	ldr	r3, [pc, #120]	@ (80012e8 <SystemInit+0xec>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001272:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <SystemInit+0xec>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001278:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <SystemInit+0xec>)
 800127a:	4a1d      	ldr	r2, [pc, #116]	@ (80012f0 <SystemInit+0xf4>)
 800127c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800127e:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <SystemInit+0xec>)
 8001280:	4a1c      	ldr	r2, [pc, #112]	@ (80012f4 <SystemInit+0xf8>)
 8001282:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001284:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <SystemInit+0xec>)
 8001286:	4a1c      	ldr	r2, [pc, #112]	@ (80012f8 <SystemInit+0xfc>)
 8001288:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800128a:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <SystemInit+0xec>)
 800128c:	2200      	movs	r2, #0
 800128e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001290:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <SystemInit+0xec>)
 8001292:	4a19      	ldr	r2, [pc, #100]	@ (80012f8 <SystemInit+0xfc>)
 8001294:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001296:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <SystemInit+0xec>)
 8001298:	2200      	movs	r2, #0
 800129a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <SystemInit+0xec>)
 800129e:	4a16      	ldr	r2, [pc, #88]	@ (80012f8 <SystemInit+0xfc>)
 80012a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <SystemInit+0xec>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <SystemInit+0xec>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0e      	ldr	r2, [pc, #56]	@ (80012e8 <SystemInit+0xec>)
 80012ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <SystemInit+0xec>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <SystemInit+0x100>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <SystemInit+0x104>)
 80012c0:	4013      	ands	r3, r2
 80012c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012c6:	d202      	bcs.n	80012ce <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <SystemInit+0x108>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <SystemInit+0x10c>)
 80012d0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80012d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00
 80012e4:	52002000 	.word	0x52002000
 80012e8:	58024400 	.word	0x58024400
 80012ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80012f0:	02020200 	.word	0x02020200
 80012f4:	01ff0000 	.word	0x01ff0000
 80012f8:	01010280 	.word	0x01010280
 80012fc:	5c001000 	.word	0x5c001000
 8001300:	ffff0000 	.word	0xffff0000
 8001304:	51008108 	.word	0x51008108
 8001308:	52004000 	.word	0x52004000

0800130c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800130c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001344 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001310:	f7ff ff74 	bl	80011fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001314:	480c      	ldr	r0, [pc, #48]	@ (8001348 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001316:	490d      	ldr	r1, [pc, #52]	@ (800134c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001318:	4a0d      	ldr	r2, [pc, #52]	@ (8001350 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800131c:	e002      	b.n	8001324 <LoopCopyDataInit>

0800131e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001322:	3304      	adds	r3, #4

08001324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001328:	d3f9      	bcc.n	800131e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132a:	4a0a      	ldr	r2, [pc, #40]	@ (8001354 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800132c:	4c0a      	ldr	r4, [pc, #40]	@ (8001358 <LoopFillZerobss+0x22>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001330:	e001      	b.n	8001336 <LoopFillZerobss>

08001332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001334:	3204      	adds	r2, #4

08001336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001338:	d3fb      	bcc.n	8001332 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800133a:	f006 fc77 	bl	8007c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133e:	f7ff f943 	bl	80005c8 <main>
  bx  lr
 8001342:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001344:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001348:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800134c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001350:	08007cd4 	.word	0x08007cd4
  ldr r2, =_sbss
 8001354:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001358:	240007a4 	.word	0x240007a4

0800135c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC3_IRQHandler>
	...

08001360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001366:	2003      	movs	r0, #3
 8001368:	f000 f982 	bl	8001670 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800136c:	f001 ff3a 	bl	80031e4 <HAL_RCC_GetSysClockFreq>
 8001370:	4602      	mov	r2, r0
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <HAL_Init+0x68>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	4913      	ldr	r1, [pc, #76]	@ (80013cc <HAL_Init+0x6c>)
 800137e:	5ccb      	ldrb	r3, [r1, r3]
 8001380:	f003 031f 	and.w	r3, r3, #31
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
 8001388:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <HAL_Init+0x68>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	4a0e      	ldr	r2, [pc, #56]	@ (80013cc <HAL_Init+0x6c>)
 8001394:	5cd3      	ldrb	r3, [r2, r3]
 8001396:	f003 031f 	and.w	r3, r3, #31
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	fa22 f303 	lsr.w	r3, r2, r3
 80013a0:	4a0b      	ldr	r2, [pc, #44]	@ (80013d0 <HAL_Init+0x70>)
 80013a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013a4:	4a0b      	ldr	r2, [pc, #44]	@ (80013d4 <HAL_Init+0x74>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013aa:	2000      	movs	r0, #0
 80013ac:	f000 f814 	bl	80013d8 <HAL_InitTick>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e002      	b.n	80013c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013ba:	f7ff fcc5 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	58024400 	.word	0x58024400
 80013cc:	08007c8c 	.word	0x08007c8c
 80013d0:	24000004 	.word	0x24000004
 80013d4:	24000000 	.word	0x24000000

080013d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013e0:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <HAL_InitTick+0x60>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e021      	b.n	8001430 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <HAL_InitTick+0x64>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <HAL_InitTick+0x60>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4619      	mov	r1, r3
 80013f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f959 	bl	80016ba <HAL_SYSTICK_Config>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e00e      	b.n	8001430 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	d80a      	bhi.n	800142e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001418:	2200      	movs	r2, #0
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f000 f931 	bl	8001686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001424:	4a06      	ldr	r2, [pc, #24]	@ (8001440 <HAL_InitTick+0x68>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2400000c 	.word	0x2400000c
 800143c:	24000000 	.word	0x24000000
 8001440:	24000008 	.word	0x24000008

08001444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <HAL_IncTick+0x20>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <HAL_IncTick+0x24>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	4a04      	ldr	r2, [pc, #16]	@ (8001468 <HAL_IncTick+0x24>)
 8001456:	6013      	str	r3, [r2, #0]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	2400000c 	.word	0x2400000c
 8001468:	240007a0 	.word	0x240007a0

0800146c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b03      	ldr	r3, [pc, #12]	@ (8001480 <HAL_GetTick+0x14>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	240007a0 	.word	0x240007a0

08001484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800148c:	f7ff ffee 	bl	800146c <HAL_GetTick>
 8001490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149c:	d005      	beq.n	80014aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149e:	4b0a      	ldr	r3, [pc, #40]	@ (80014c8 <HAL_Delay+0x44>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4413      	add	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014aa:	bf00      	nop
 80014ac:	f7ff ffde 	bl	800146c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d8f7      	bhi.n	80014ac <HAL_Delay+0x28>
  {
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2400000c 	.word	0x2400000c

080014cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014d0:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <HAL_GetREVID+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	0c1b      	lsrs	r3, r3, #16
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	5c001000 	.word	0x5c001000

080014e4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80014f4:	4904      	ldr	r1, [pc, #16]	@ (8001508 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	58000400 	.word	0x58000400

0800150c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800151c:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <__NVIC_SetPriorityGrouping+0x40>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001528:	4013      	ands	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <__NVIC_SetPriorityGrouping+0x44>)
 8001536:	4313      	orrs	r3, r2
 8001538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153a:	4a04      	ldr	r2, [pc, #16]	@ (800154c <__NVIC_SetPriorityGrouping+0x40>)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	60d3      	str	r3, [r2, #12]
}
 8001540:	bf00      	nop
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00
 8001550:	05fa0000 	.word	0x05fa0000

08001554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001558:	4b04      	ldr	r3, [pc, #16]	@ (800156c <__NVIC_GetPriorityGrouping+0x18>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	f003 0307 	and.w	r3, r3, #7
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800157c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001580:	2b00      	cmp	r3, #0
 8001582:	db0a      	blt.n	800159a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	490c      	ldr	r1, [pc, #48]	@ (80015bc <__NVIC_SetPriority+0x4c>)
 800158a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158e:	0112      	lsls	r2, r2, #4
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	440b      	add	r3, r1
 8001594:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001598:	e00a      	b.n	80015b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4908      	ldr	r1, [pc, #32]	@ (80015c0 <__NVIC_SetPriority+0x50>)
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	3b04      	subs	r3, #4
 80015a8:	0112      	lsls	r2, r2, #4
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	440b      	add	r3, r1
 80015ae:	761a      	strb	r2, [r3, #24]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000e100 	.word	0xe000e100
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	@ 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f1c3 0307 	rsb	r3, r3, #7
 80015de:	2b04      	cmp	r3, #4
 80015e0:	bf28      	it	cs
 80015e2:	2304      	movcs	r3, #4
 80015e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3304      	adds	r3, #4
 80015ea:	2b06      	cmp	r3, #6
 80015ec:	d902      	bls.n	80015f4 <NVIC_EncodePriority+0x30>
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3b03      	subs	r3, #3
 80015f2:	e000      	b.n	80015f6 <NVIC_EncodePriority+0x32>
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	f04f 32ff 	mov.w	r2, #4294967295
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800160c:	f04f 31ff 	mov.w	r1, #4294967295
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43d9      	mvns	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	4313      	orrs	r3, r2
         );
}
 800161e:	4618      	mov	r0, r3
 8001620:	3724      	adds	r7, #36	@ 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800163c:	d301      	bcc.n	8001642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163e:	2301      	movs	r3, #1
 8001640:	e00f      	b.n	8001662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001642:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <SysTick_Config+0x40>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164a:	210f      	movs	r1, #15
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f7ff ff8e 	bl	8001570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <SysTick_Config+0x40>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165a:	4b04      	ldr	r3, [pc, #16]	@ (800166c <SysTick_Config+0x40>)
 800165c:	2207      	movs	r2, #7
 800165e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	e000e010 	.word	0xe000e010

08001670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff47 	bl	800150c <__NVIC_SetPriorityGrouping>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001694:	f7ff ff5e 	bl	8001554 <__NVIC_GetPriorityGrouping>
 8001698:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	6978      	ldr	r0, [r7, #20]
 80016a0:	f7ff ff90 	bl	80015c4 <NVIC_EncodePriority>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff5f 	bl	8001570 <__NVIC_SetPriority>
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffb2 	bl	800162c <SysTick_Config>
 80016c8:	4603      	mov	r3, r0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0e3      	b.n	80018ae <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d106      	bne.n	80016fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2223      	movs	r2, #35	@ 0x23
 80016f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fb3f 	bl	8000d7c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	4b6e      	ldr	r3, [pc, #440]	@ (80018b8 <HAL_ETH_Init+0x1e4>)
 8001700:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001704:	4a6c      	ldr	r2, [pc, #432]	@ (80018b8 <HAL_ETH_Init+0x1e4>)
 8001706:	f043 0302 	orr.w	r3, r3, #2
 800170a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800170e:	4b6a      	ldr	r3, [pc, #424]	@ (80018b8 <HAL_ETH_Init+0x1e4>)
 8001710:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7a1b      	ldrb	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d103      	bne.n	800172c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001724:	2000      	movs	r0, #0
 8001726:	f7ff fedd 	bl	80014e4 <HAL_SYSCFG_ETHInterfaceSelect>
 800172a:	e003      	b.n	8001734 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800172c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001730:	f7ff fed8 	bl	80014e4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001734:	4b61      	ldr	r3, [pc, #388]	@ (80018bc <HAL_ETH_Init+0x1e8>)
 8001736:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800174e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001750:	f7ff fe8c 	bl	800146c <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001756:	e011      	b.n	800177c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001758:	f7ff fe88 	bl	800146c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001766:	d909      	bls.n	800177c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2204      	movs	r2, #4
 800176c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	22e0      	movs	r2, #224	@ 0xe0
 8001774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e098      	b.n	80018ae <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1e4      	bne.n	8001758 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f89e 	bl	80018d0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001794:	f001 fea0 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 8001798:	4603      	mov	r3, r0
 800179a:	4a49      	ldr	r2, [pc, #292]	@ (80018c0 <HAL_ETH_Init+0x1ec>)
 800179c:	fba2 2303 	umull	r2, r3, r2, r3
 80017a0:	0c9a      	lsrs	r2, r3, #18
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3a01      	subs	r2, #1
 80017a8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fa81 	bl	8001cb4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80017be:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017ce:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	22e0      	movs	r2, #224	@ 0xe0
 80017ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e05d      	b.n	80018ae <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017fa:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80017fe:	4b31      	ldr	r3, [pc, #196]	@ (80018c4 <HAL_ETH_Init+0x1f0>)
 8001800:	4013      	ands	r3, r2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6952      	ldr	r2, [r2, #20]
 8001806:	0051      	lsls	r1, r2, #1
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	430b      	orrs	r3, r1
 800180e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001812:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fae9 	bl	8001dee <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 fb2f 	bl	8001e80 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	3305      	adds	r3, #5
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	021a      	lsls	r2, r3, #8
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	3304      	adds	r3, #4
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	3303      	adds	r3, #3
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	061a      	lsls	r2, r3, #24
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	3302      	adds	r3, #2
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	041b      	lsls	r3, r3, #16
 8001854:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	3301      	adds	r3, #1
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001860:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800186e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001870:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <HAL_ETH_Init+0x1f4>)
 8001882:	430b      	orrs	r3, r1
 8001884:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <HAL_ETH_Init+0x1f8>)
 8001896:	430b      	orrs	r3, r1
 8001898:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2210      	movs	r2, #16
 80018a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	58024400 	.word	0x58024400
 80018bc:	58000400 	.word	0x58000400
 80018c0:	431bde83 	.word	0x431bde83
 80018c4:	ffff8001 	.word	0xffff8001
 80018c8:	0c020060 	.word	0x0c020060
 80018cc:	0c20c000 	.word	0x0c20c000

080018d0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018e8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80018ea:	f001 fdf5 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 80018ee:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4a1a      	ldr	r2, [pc, #104]	@ (800195c <HAL_ETH_SetMDIOClockRange+0x8c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d804      	bhi.n	8001902 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	e022      	b.n	8001948 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	4a16      	ldr	r2, [pc, #88]	@ (8001960 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d204      	bcs.n	8001914 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	e019      	b.n	8001948 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	4a13      	ldr	r2, [pc, #76]	@ (8001964 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d915      	bls.n	8001948 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4a12      	ldr	r2, [pc, #72]	@ (8001968 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d804      	bhi.n	800192e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	e00c      	b.n	8001948 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	4a0e      	ldr	r2, [pc, #56]	@ (800196c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d804      	bhi.n	8001940 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	e003      	b.n	8001948 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001946:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	02160ebf 	.word	0x02160ebf
 8001960:	03938700 	.word	0x03938700
 8001964:	05f5e0ff 	.word	0x05f5e0ff
 8001968:	08f0d17f 	.word	0x08f0d17f
 800196c:	0ee6b27f 	.word	0x0ee6b27f

08001970 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001982:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	791b      	ldrb	r3, [r3, #4]
 8001988:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800198a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	7b1b      	ldrb	r3, [r3, #12]
 8001990:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001992:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	7b5b      	ldrb	r3, [r3, #13]
 8001998:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800199a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	7b9b      	ldrb	r3, [r3, #14]
 80019a0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80019a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	7bdb      	ldrb	r3, [r3, #15]
 80019a8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019aa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	7c12      	ldrb	r2, [r2, #16]
 80019b0:	2a00      	cmp	r2, #0
 80019b2:	d102      	bne.n	80019ba <ETH_SetMACConfig+0x4a>
 80019b4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80019b8:	e000      	b.n	80019bc <ETH_SetMACConfig+0x4c>
 80019ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80019bc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	7c52      	ldrb	r2, [r2, #17]
 80019c2:	2a00      	cmp	r2, #0
 80019c4:	d102      	bne.n	80019cc <ETH_SetMACConfig+0x5c>
 80019c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019ca:	e000      	b.n	80019ce <ETH_SetMACConfig+0x5e>
 80019cc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80019ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	7c9b      	ldrb	r3, [r3, #18]
 80019d4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80019d6:	431a      	orrs	r2, r3
               macconf->Speed |
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80019dc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80019e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	7f1b      	ldrb	r3, [r3, #28]
 80019e8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80019ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	7f5b      	ldrb	r3, [r3, #29]
 80019f0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80019f2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	7f92      	ldrb	r2, [r2, #30]
 80019f8:	2a00      	cmp	r2, #0
 80019fa:	d102      	bne.n	8001a02 <ETH_SetMACConfig+0x92>
 80019fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a00:	e000      	b.n	8001a04 <ETH_SetMACConfig+0x94>
 8001a02:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a04:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	7fdb      	ldrb	r3, [r3, #31]
 8001a0a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a0c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a14:	2a00      	cmp	r2, #0
 8001a16:	d102      	bne.n	8001a1e <ETH_SetMACConfig+0xae>
 8001a18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a1c:	e000      	b.n	8001a20 <ETH_SetMACConfig+0xb0>
 8001a1e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a20:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001a2e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001a30:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b56      	ldr	r3, [pc, #344]	@ (8001b9c <ETH_SetMACConfig+0x22c>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	68f9      	ldr	r1, [r7, #12]
 8001a4a:	430b      	orrs	r3, r1
 8001a4c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a52:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a5a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a5c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a64:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001a6e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a70:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001a78:	2a00      	cmp	r2, #0
 8001a7a:	d102      	bne.n	8001a82 <ETH_SetMACConfig+0x112>
 8001a7c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a80:	e000      	b.n	8001a84 <ETH_SetMACConfig+0x114>
 8001a82:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a84:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	4b42      	ldr	r3, [pc, #264]	@ (8001ba0 <ETH_SetMACConfig+0x230>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	68f9      	ldr	r1, [r7, #12]
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001aa8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba4 <ETH_SetMACConfig+0x234>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	68f9      	ldr	r1, [r7, #12]
 8001ac2:	430b      	orrs	r3, r1
 8001ac4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001acc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ad2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001ada:	2a00      	cmp	r2, #0
 8001adc:	d101      	bne.n	8001ae2 <ETH_SetMACConfig+0x172>
 8001ade:	2280      	movs	r2, #128	@ 0x80
 8001ae0:	e000      	b.n	8001ae4 <ETH_SetMACConfig+0x174>
 8001ae2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001ae4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aea:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001af6:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001afa:	4013      	ands	r3, r2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	68f9      	ldr	r1, [r7, #12]
 8001b02:	430b      	orrs	r3, r1
 8001b04:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001b0c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001b14:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b22:	f023 0103 	bic.w	r1, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001b3a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001b56:	2a00      	cmp	r2, #0
 8001b58:	d101      	bne.n	8001b5e <ETH_SetMACConfig+0x1ee>
 8001b5a:	2240      	movs	r2, #64	@ 0x40
 8001b5c:	e000      	b.n	8001b60 <ETH_SetMACConfig+0x1f0>
 8001b5e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001b60:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001b68:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001b72:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001b74:	4313      	orrs	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001b80:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	00048083 	.word	0x00048083
 8001ba0:	c0f88000 	.word	0xc0f88000
 8001ba4:	fffffef0 	.word	0xfffffef0

08001ba8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b38      	ldr	r3, [pc, #224]	@ (8001ca0 <ETH_SetDMAConfig+0xf8>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	6811      	ldr	r1, [r2, #0]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bce:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	791b      	ldrb	r3, [r3, #4]
 8001bd4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bda:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	7b1b      	ldrb	r3, [r3, #12]
 8001be0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca4 <ETH_SetDMAConfig+0xfc>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	68f9      	ldr	r1, [r7, #12]
 8001bfa:	430b      	orrs	r3, r1
 8001bfc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c00:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	7b5b      	ldrb	r3, [r3, #13]
 8001c06:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c18:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001c1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <ETH_SetDMAConfig+0x100>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	68f9      	ldr	r1, [r7, #12]
 8001c26:	430b      	orrs	r3, r1
 8001c28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c2c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	7d1b      	ldrb	r3, [r3, #20]
 8001c38:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c3a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	7f5b      	ldrb	r3, [r3, #29]
 8001c40:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c4e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001c52:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <ETH_SetDMAConfig+0x104>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	68f9      	ldr	r1, [r7, #12]
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c62:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	7f1b      	ldrb	r3, [r3, #28]
 8001c6a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c7c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001c80:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <ETH_SetDMAConfig+0x108>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	68f9      	ldr	r1, [r7, #12]
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c90:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	ffff87fd 	.word	0xffff87fd
 8001ca4:	ffff2ffe 	.word	0xffff2ffe
 8001ca8:	fffec000 	.word	0xfffec000
 8001cac:	ffc0efef 	.word	0xffc0efef
 8001cb0:	7fc0ffff 	.word	0x7fc0ffff

08001cb4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b0a4      	sub	sp, #144	@ 0x90
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001cea:	2301      	movs	r3, #1
 8001cec:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001cf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cf4:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001d0c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001d10:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001d36:	2300      	movs	r3, #0
 8001d38:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001d5e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d64:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d68:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001d70:	2302      	movs	r3, #2
 8001d72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001d92:	2301      	movs	r3, #1
 8001d94:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff fde6 	bl	8001970 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001da4:	2301      	movs	r3, #1
 8001da6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001da8:	2301      	movs	r3, #1
 8001daa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001dbe:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001dc2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001dc8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001dcc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001dd4:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001dd8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001dda:	f107 0308 	add.w	r3, r7, #8
 8001dde:	4619      	mov	r1, r3
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff fee1 	bl	8001ba8 <ETH_SetDMAConfig>
}
 8001de6:	bf00      	nop
 8001de8:	3790      	adds	r7, #144	@ 0x90
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	e01d      	b.n	8001e38 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68d9      	ldr	r1, [r3, #12]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2200      	movs	r2, #0
 8001e18:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e26:	68b9      	ldr	r1, [r7, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	3206      	adds	r2, #6
 8001e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3301      	adds	r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d9de      	bls.n	8001dfc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	2303      	movs	r3, #3
 8001e50:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e60:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e70:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	e023      	b.n	8001ed6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6919      	ldr	r1, [r3, #16]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	3212      	adds	r2, #18
 8001ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d9d8      	bls.n	8001e8e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f02:	461a      	mov	r2, r3
 8001f04:	2303      	movs	r3, #3
 8001f06:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f16:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f2a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	@ 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f4a:	4b89      	ldr	r3, [pc, #548]	@ (8002170 <HAL_GPIO_Init+0x234>)
 8001f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f4e:	e194      	b.n	800227a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	2101      	movs	r1, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8186 	beq.w	8002274 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d005      	beq.n	8001f80 <HAL_GPIO_Init+0x44>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d130      	bne.n	8001fe2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	091b      	lsrs	r3, r3, #4
 8001fcc:	f003 0201 	and.w	r2, r3, #1
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d017      	beq.n	800201e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d123      	bne.n	8002072 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	08da      	lsrs	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3208      	adds	r2, #8
 8002032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	220f      	movs	r2, #15
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	08da      	lsrs	r2, r3, #3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3208      	adds	r2, #8
 800206c:	69b9      	ldr	r1, [r7, #24]
 800206e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	2203      	movs	r2, #3
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0203 	and.w	r2, r3, #3
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80e0 	beq.w	8002274 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002174 <HAL_GPIO_Init+0x238>)
 80020b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002174 <HAL_GPIO_Init+0x238>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80020c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002174 <HAL_GPIO_Init+0x238>)
 80020c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020d2:	4a29      	ldr	r2, [pc, #164]	@ (8002178 <HAL_GPIO_Init+0x23c>)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	3302      	adds	r3, #2
 80020da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	220f      	movs	r2, #15
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a20      	ldr	r2, [pc, #128]	@ (800217c <HAL_GPIO_Init+0x240>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d052      	beq.n	80021a4 <HAL_GPIO_Init+0x268>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a1f      	ldr	r2, [pc, #124]	@ (8002180 <HAL_GPIO_Init+0x244>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d031      	beq.n	800216a <HAL_GPIO_Init+0x22e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a1e      	ldr	r2, [pc, #120]	@ (8002184 <HAL_GPIO_Init+0x248>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d02b      	beq.n	8002166 <HAL_GPIO_Init+0x22a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a1d      	ldr	r2, [pc, #116]	@ (8002188 <HAL_GPIO_Init+0x24c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d025      	beq.n	8002162 <HAL_GPIO_Init+0x226>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a1c      	ldr	r2, [pc, #112]	@ (800218c <HAL_GPIO_Init+0x250>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d01f      	beq.n	800215e <HAL_GPIO_Init+0x222>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a1b      	ldr	r2, [pc, #108]	@ (8002190 <HAL_GPIO_Init+0x254>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d019      	beq.n	800215a <HAL_GPIO_Init+0x21e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a1a      	ldr	r2, [pc, #104]	@ (8002194 <HAL_GPIO_Init+0x258>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d013      	beq.n	8002156 <HAL_GPIO_Init+0x21a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a19      	ldr	r2, [pc, #100]	@ (8002198 <HAL_GPIO_Init+0x25c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00d      	beq.n	8002152 <HAL_GPIO_Init+0x216>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a18      	ldr	r2, [pc, #96]	@ (800219c <HAL_GPIO_Init+0x260>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d007      	beq.n	800214e <HAL_GPIO_Init+0x212>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a17      	ldr	r2, [pc, #92]	@ (80021a0 <HAL_GPIO_Init+0x264>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d101      	bne.n	800214a <HAL_GPIO_Init+0x20e>
 8002146:	2309      	movs	r3, #9
 8002148:	e02d      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 800214a:	230a      	movs	r3, #10
 800214c:	e02b      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 800214e:	2308      	movs	r3, #8
 8002150:	e029      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 8002152:	2307      	movs	r3, #7
 8002154:	e027      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 8002156:	2306      	movs	r3, #6
 8002158:	e025      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 800215a:	2305      	movs	r3, #5
 800215c:	e023      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 800215e:	2304      	movs	r3, #4
 8002160:	e021      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 8002162:	2303      	movs	r3, #3
 8002164:	e01f      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 8002166:	2302      	movs	r3, #2
 8002168:	e01d      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 800216a:	2301      	movs	r3, #1
 800216c:	e01b      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 800216e:	bf00      	nop
 8002170:	58000080 	.word	0x58000080
 8002174:	58024400 	.word	0x58024400
 8002178:	58000400 	.word	0x58000400
 800217c:	58020000 	.word	0x58020000
 8002180:	58020400 	.word	0x58020400
 8002184:	58020800 	.word	0x58020800
 8002188:	58020c00 	.word	0x58020c00
 800218c:	58021000 	.word	0x58021000
 8002190:	58021400 	.word	0x58021400
 8002194:	58021800 	.word	0x58021800
 8002198:	58021c00 	.word	0x58021c00
 800219c:	58022000 	.word	0x58022000
 80021a0:	58022400 	.word	0x58022400
 80021a4:	2300      	movs	r3, #0
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	f002 0203 	and.w	r2, r2, #3
 80021ac:	0092      	lsls	r2, r2, #2
 80021ae:	4093      	lsls	r3, r2
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021b6:	4938      	ldr	r1, [pc, #224]	@ (8002298 <HAL_GPIO_Init+0x35c>)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	3302      	adds	r3, #2
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002218:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	3301      	adds	r3, #1
 8002278:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	f47f ae63 	bne.w	8001f50 <HAL_GPIO_Init+0x14>
  }
}
 800228a:	bf00      	nop
 800228c:	bf00      	nop
 800228e:	3724      	adds	r7, #36	@ 0x24
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	58000400 	.word	0x58000400

0800229c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	807b      	strh	r3, [r7, #2]
 80022a8:	4613      	mov	r3, r2
 80022aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022ac:	787b      	ldrb	r3, [r7, #1]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022b2:	887a      	ldrh	r2, [r7, #2]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80022b8:	e003      	b.n	80022c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022ba:	887b      	ldrh	r3, [r7, #2]
 80022bc:	041a      	lsls	r2, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	619a      	str	r2, [r3, #24]
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af02      	add	r7, sp, #8
 80022d4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0fe      	b.n	80024de <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d106      	bne.n	80022fa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7fe fed5 	bl	80010a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2203      	movs	r2, #3
 80022fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f005 f9f2 	bl	80076f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	7c1a      	ldrb	r2, [r3, #16]
 8002314:	f88d 2000 	strb.w	r2, [sp]
 8002318:	3304      	adds	r3, #4
 800231a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800231c:	f005 f976 	bl	800760c <USB_CoreInit>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2202      	movs	r2, #2
 800232a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0d5      	b.n	80024de <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f005 f9ea 	bl	8007712 <USB_SetCurrentMode>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0c6      	b.n	80024de <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	e04a      	b.n	80023ec <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	3315      	adds	r3, #21
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	3314      	adds	r3, #20
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	b298      	uxth	r0, r3
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4413      	add	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	332e      	adds	r3, #46	@ 0x2e
 8002392:	4602      	mov	r2, r0
 8002394:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4413      	add	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	3318      	adds	r3, #24
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	331c      	adds	r3, #28
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023be:	7bfa      	ldrb	r2, [r7, #15]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	3320      	adds	r3, #32
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	3324      	adds	r3, #36	@ 0x24
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	3301      	adds	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	791b      	ldrb	r3, [r3, #4]
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d3af      	bcc.n	8002356 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
 80023fa:	e044      	b.n	8002486 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002412:	7bfa      	ldrb	r2, [r7, #15]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002428:	7bfa      	ldrb	r2, [r7, #15]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	3301      	adds	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	791b      	ldrb	r3, [r3, #4]
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	429a      	cmp	r2, r3
 800248e:	d3b5      	bcc.n	80023fc <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	7c1a      	ldrb	r2, [r3, #16]
 8002498:	f88d 2000 	strb.w	r2, [sp]
 800249c:	3304      	adds	r3, #4
 800249e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024a0:	f005 f984 	bl	80077ac <USB_DevInit>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2202      	movs	r2, #2
 80024ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e013      	b.n	80024de <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	7b1b      	ldrb	r3, [r3, #12]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d102      	bne.n	80024d2 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f80b 	bl	80024e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f005 fb3f 	bl	8007b5a <USB_DevDisconnect>

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002516:	4b05      	ldr	r3, [pc, #20]	@ (800252c <HAL_PCDEx_ActivateLPM+0x44>)
 8002518:	4313      	orrs	r3, r2
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	10000003 	.word	0x10000003

08002530 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002538:	4b19      	ldr	r3, [pc, #100]	@ (80025a0 <HAL_PWREx_ConfigSupply+0x70>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b04      	cmp	r3, #4
 8002542:	d00a      	beq.n	800255a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002544:	4b16      	ldr	r3, [pc, #88]	@ (80025a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	429a      	cmp	r2, r3
 8002550:	d001      	beq.n	8002556 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e01f      	b.n	8002596 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e01d      	b.n	8002596 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800255a:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <HAL_PWREx_ConfigSupply+0x70>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f023 0207 	bic.w	r2, r3, #7
 8002562:	490f      	ldr	r1, [pc, #60]	@ (80025a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4313      	orrs	r3, r2
 8002568:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800256a:	f7fe ff7f 	bl	800146c <HAL_GetTick>
 800256e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002570:	e009      	b.n	8002586 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002572:	f7fe ff7b 	bl	800146c <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002580:	d901      	bls.n	8002586 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e007      	b.n	8002596 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002586:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800258e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002592:	d1ee      	bne.n	8002572 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	58024800 	.word	0x58024800

080025a4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80025a8:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a04      	ldr	r2, [pc, #16]	@ (80025c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025b2:	60d3      	str	r3, [r2, #12]
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	58024800 	.word	0x58024800

080025c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08c      	sub	sp, #48	@ 0x30
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d102      	bne.n	80025d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	f000 bc48 	b.w	8002e68 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 8088 	beq.w	80026f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e6:	4b99      	ldr	r3, [pc, #612]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025f0:	4b96      	ldr	r3, [pc, #600]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 80025f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f8:	2b10      	cmp	r3, #16
 80025fa:	d007      	beq.n	800260c <HAL_RCC_OscConfig+0x48>
 80025fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025fe:	2b18      	cmp	r3, #24
 8002600:	d111      	bne.n	8002626 <HAL_RCC_OscConfig+0x62>
 8002602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d10c      	bne.n	8002626 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	4b8f      	ldr	r3, [pc, #572]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d06d      	beq.n	80026f4 <HAL_RCC_OscConfig+0x130>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d169      	bne.n	80026f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	f000 bc21 	b.w	8002e68 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800262e:	d106      	bne.n	800263e <HAL_RCC_OscConfig+0x7a>
 8002630:	4b86      	ldr	r3, [pc, #536]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a85      	ldr	r2, [pc, #532]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002636:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	e02e      	b.n	800269c <HAL_RCC_OscConfig+0xd8>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0x9c>
 8002646:	4b81      	ldr	r3, [pc, #516]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a80      	ldr	r2, [pc, #512]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 800264c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	4b7e      	ldr	r3, [pc, #504]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a7d      	ldr	r2, [pc, #500]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002658:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e01d      	b.n	800269c <HAL_RCC_OscConfig+0xd8>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0xc0>
 800266a:	4b78      	ldr	r3, [pc, #480]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a77      	ldr	r2, [pc, #476]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b75      	ldr	r3, [pc, #468]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a74      	ldr	r2, [pc, #464]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0xd8>
 8002684:	4b71      	ldr	r3, [pc, #452]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a70      	ldr	r2, [pc, #448]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 800268a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b6e      	ldr	r3, [pc, #440]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a6d      	ldr	r2, [pc, #436]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800269a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d013      	beq.n	80026cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe fee2 	bl	800146c <HAL_GetTick>
 80026a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ac:	f7fe fede 	bl	800146c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	@ 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e3d4      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026be:	4b63      	ldr	r3, [pc, #396]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0xe8>
 80026ca:	e014      	b.n	80026f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7fe fece 	bl	800146c <HAL_GetTick>
 80026d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d4:	f7fe feca 	bl	800146c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	@ 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e3c0      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026e6:	4b59      	ldr	r3, [pc, #356]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x110>
 80026f2:	e000      	b.n	80026f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 80ca 	beq.w	8002898 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002704:	4b51      	ldr	r3, [pc, #324]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800270c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800270e:	4b4f      	ldr	r3, [pc, #316]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002712:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_RCC_OscConfig+0x166>
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	2b18      	cmp	r3, #24
 800271e:	d156      	bne.n	80027ce <HAL_RCC_OscConfig+0x20a>
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d151      	bne.n	80027ce <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800272a:	4b48      	ldr	r3, [pc, #288]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_RCC_OscConfig+0x17e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e392      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002742:	4b42      	ldr	r3, [pc, #264]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 0219 	bic.w	r2, r3, #25
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	493f      	ldr	r1, [pc, #252]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fe8a 	bl	800146c <HAL_GetTick>
 8002758:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275c:	f7fe fe86 	bl	800146c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e37c      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800276e:	4b37      	ldr	r3, [pc, #220]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277a:	f7fe fea7 	bl	80014cc <HAL_GetREVID>
 800277e:	4603      	mov	r3, r0
 8002780:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002784:	4293      	cmp	r3, r2
 8002786:	d817      	bhi.n	80027b8 <HAL_RCC_OscConfig+0x1f4>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	2b40      	cmp	r3, #64	@ 0x40
 800278e:	d108      	bne.n	80027a2 <HAL_RCC_OscConfig+0x1de>
 8002790:	4b2e      	ldr	r3, [pc, #184]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002798:	4a2c      	ldr	r2, [pc, #176]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 800279a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800279e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a0:	e07a      	b.n	8002898 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a2:	4b2a      	ldr	r3, [pc, #168]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	031b      	lsls	r3, r3, #12
 80027b0:	4926      	ldr	r1, [pc, #152]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b6:	e06f      	b.n	8002898 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b8:	4b24      	ldr	r3, [pc, #144]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	061b      	lsls	r3, r3, #24
 80027c6:	4921      	ldr	r1, [pc, #132]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027cc:	e064      	b.n	8002898 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d047      	beq.n	8002866 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027d6:	4b1d      	ldr	r3, [pc, #116]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 0219 	bic.w	r2, r3, #25
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	491a      	ldr	r1, [pc, #104]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe fe40 	bl	800146c <HAL_GetTick>
 80027ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f0:	f7fe fe3c 	bl	800146c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e332      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002802:	4b12      	ldr	r3, [pc, #72]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280e:	f7fe fe5d 	bl	80014cc <HAL_GetREVID>
 8002812:	4603      	mov	r3, r0
 8002814:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002818:	4293      	cmp	r3, r2
 800281a:	d819      	bhi.n	8002850 <HAL_RCC_OscConfig+0x28c>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	2b40      	cmp	r3, #64	@ 0x40
 8002822:	d108      	bne.n	8002836 <HAL_RCC_OscConfig+0x272>
 8002824:	4b09      	ldr	r3, [pc, #36]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800282c:	4a07      	ldr	r2, [pc, #28]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 800282e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002832:	6053      	str	r3, [r2, #4]
 8002834:	e030      	b.n	8002898 <HAL_RCC_OscConfig+0x2d4>
 8002836:	4b05      	ldr	r3, [pc, #20]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	031b      	lsls	r3, r3, #12
 8002844:	4901      	ldr	r1, [pc, #4]	@ (800284c <HAL_RCC_OscConfig+0x288>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
 800284a:	e025      	b.n	8002898 <HAL_RCC_OscConfig+0x2d4>
 800284c:	58024400 	.word	0x58024400
 8002850:	4b9a      	ldr	r3, [pc, #616]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	061b      	lsls	r3, r3, #24
 800285e:	4997      	ldr	r1, [pc, #604]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002860:	4313      	orrs	r3, r2
 8002862:	604b      	str	r3, [r1, #4]
 8002864:	e018      	b.n	8002898 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002866:	4b95      	ldr	r3, [pc, #596]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a94      	ldr	r2, [pc, #592]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 800286c:	f023 0301 	bic.w	r3, r3, #1
 8002870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002872:	f7fe fdfb 	bl	800146c <HAL_GetTick>
 8002876:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287a:	f7fe fdf7 	bl	800146c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e2ed      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800288c:	4b8b      	ldr	r3, [pc, #556]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f0      	bne.n	800287a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80a9 	beq.w	80029f8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a6:	4b85      	ldr	r3, [pc, #532]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028b0:	4b82      	ldr	r3, [pc, #520]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 80028b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d007      	beq.n	80028cc <HAL_RCC_OscConfig+0x308>
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b18      	cmp	r3, #24
 80028c0:	d13a      	bne.n	8002938 <HAL_RCC_OscConfig+0x374>
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d135      	bne.n	8002938 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028cc:	4b7b      	ldr	r3, [pc, #492]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_OscConfig+0x320>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	2b80      	cmp	r3, #128	@ 0x80
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e2c1      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028e4:	f7fe fdf2 	bl	80014cc <HAL_GetREVID>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d817      	bhi.n	8002922 <HAL_RCC_OscConfig+0x35e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	d108      	bne.n	800290c <HAL_RCC_OscConfig+0x348>
 80028fa:	4b70      	ldr	r3, [pc, #448]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002902:	4a6e      	ldr	r2, [pc, #440]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002904:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002908:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800290a:	e075      	b.n	80029f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800290c:	4b6b      	ldr	r3, [pc, #428]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	069b      	lsls	r3, r3, #26
 800291a:	4968      	ldr	r1, [pc, #416]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002920:	e06a      	b.n	80029f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002922:	4b66      	ldr	r3, [pc, #408]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	061b      	lsls	r3, r3, #24
 8002930:	4962      	ldr	r1, [pc, #392]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002932:	4313      	orrs	r3, r2
 8002934:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002936:	e05f      	b.n	80029f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d042      	beq.n	80029c6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002940:	4b5e      	ldr	r3, [pc, #376]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a5d      	ldr	r2, [pc, #372]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800294a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fe fd8e 	bl	800146c <HAL_GetTick>
 8002950:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002954:	f7fe fd8a 	bl	800146c <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e280      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002966:	4b55      	ldr	r3, [pc, #340]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002972:	f7fe fdab 	bl	80014cc <HAL_GetREVID>
 8002976:	4603      	mov	r3, r0
 8002978:	f241 0203 	movw	r2, #4099	@ 0x1003
 800297c:	4293      	cmp	r3, r2
 800297e:	d817      	bhi.n	80029b0 <HAL_RCC_OscConfig+0x3ec>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	2b20      	cmp	r3, #32
 8002986:	d108      	bne.n	800299a <HAL_RCC_OscConfig+0x3d6>
 8002988:	4b4c      	ldr	r3, [pc, #304]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002990:	4a4a      	ldr	r2, [pc, #296]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002992:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002996:	6053      	str	r3, [r2, #4]
 8002998:	e02e      	b.n	80029f8 <HAL_RCC_OscConfig+0x434>
 800299a:	4b48      	ldr	r3, [pc, #288]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	069b      	lsls	r3, r3, #26
 80029a8:	4944      	ldr	r1, [pc, #272]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
 80029ae:	e023      	b.n	80029f8 <HAL_RCC_OscConfig+0x434>
 80029b0:	4b42      	ldr	r3, [pc, #264]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	061b      	lsls	r3, r3, #24
 80029be:	493f      	ldr	r1, [pc, #252]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60cb      	str	r3, [r1, #12]
 80029c4:	e018      	b.n	80029f8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029c6:	4b3d      	ldr	r3, [pc, #244]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a3c      	ldr	r2, [pc, #240]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 80029cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d2:	f7fe fd4b 	bl	800146c <HAL_GetTick>
 80029d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029da:	f7fe fd47 	bl	800146c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e23d      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029ec:	4b33      	ldr	r3, [pc, #204]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d036      	beq.n	8002a72 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d019      	beq.n	8002a40 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a10:	4a2a      	ldr	r2, [pc, #168]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7fe fd28 	bl	800146c <HAL_GetTick>
 8002a1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a20:	f7fe fd24 	bl	800146c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e21a      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a32:	4b22      	ldr	r3, [pc, #136]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x45c>
 8002a3e:	e018      	b.n	8002a72 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a40:	4b1e      	ldr	r3, [pc, #120]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a44:	4a1d      	ldr	r2, [pc, #116]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7fe fd0e 	bl	800146c <HAL_GetTick>
 8002a50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a54:	f7fe fd0a 	bl	800146c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e200      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a66:	4b15      	ldr	r3, [pc, #84]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d039      	beq.n	8002af2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d01c      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a86:	4b0d      	ldr	r3, [pc, #52]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002a8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a92:	f7fe fceb 	bl	800146c <HAL_GetTick>
 8002a96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a9a:	f7fe fce7 	bl	800146c <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e1dd      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002aac:	4b03      	ldr	r3, [pc, #12]	@ (8002abc <HAL_RCC_OscConfig+0x4f8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x4d6>
 8002ab8:	e01b      	b.n	8002af2 <HAL_RCC_OscConfig+0x52e>
 8002aba:	bf00      	nop
 8002abc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ac0:	4b9b      	ldr	r3, [pc, #620]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a9a      	ldr	r2, [pc, #616]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002ac6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002aca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002acc:	f7fe fcce 	bl	800146c <HAL_GetTick>
 8002ad0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ad4:	f7fe fcca 	bl	800146c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e1c0      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ae6:	4b92      	ldr	r3, [pc, #584]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 8081 	beq.w	8002c02 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b00:	4b8c      	ldr	r3, [pc, #560]	@ (8002d34 <HAL_RCC_OscConfig+0x770>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a8b      	ldr	r2, [pc, #556]	@ (8002d34 <HAL_RCC_OscConfig+0x770>)
 8002b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b0c:	f7fe fcae 	bl	800146c <HAL_GetTick>
 8002b10:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b14:	f7fe fcaa 	bl	800146c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	@ 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e1a0      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b26:	4b83      	ldr	r3, [pc, #524]	@ (8002d34 <HAL_RCC_OscConfig+0x770>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d106      	bne.n	8002b48 <HAL_RCC_OscConfig+0x584>
 8002b3a:	4b7d      	ldr	r3, [pc, #500]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3e:	4a7c      	ldr	r2, [pc, #496]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b46:	e02d      	b.n	8002ba4 <HAL_RCC_OscConfig+0x5e0>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10c      	bne.n	8002b6a <HAL_RCC_OscConfig+0x5a6>
 8002b50:	4b77      	ldr	r3, [pc, #476]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b54:	4a76      	ldr	r2, [pc, #472]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b5c:	4b74      	ldr	r3, [pc, #464]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b60:	4a73      	ldr	r2, [pc, #460]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002b62:	f023 0304 	bic.w	r3, r3, #4
 8002b66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b68:	e01c      	b.n	8002ba4 <HAL_RCC_OscConfig+0x5e0>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b05      	cmp	r3, #5
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x5c8>
 8002b72:	4b6f      	ldr	r3, [pc, #444]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b76:	4a6e      	ldr	r2, [pc, #440]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7e:	4b6c      	ldr	r3, [pc, #432]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b82:	4a6b      	ldr	r2, [pc, #428]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCC_OscConfig+0x5e0>
 8002b8c:	4b68      	ldr	r3, [pc, #416]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b90:	4a67      	ldr	r2, [pc, #412]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b98:	4b65      	ldr	r3, [pc, #404]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9c:	4a64      	ldr	r2, [pc, #400]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002b9e:	f023 0304 	bic.w	r3, r3, #4
 8002ba2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d015      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bac:	f7fe fc5e 	bl	800146c <HAL_GetTick>
 8002bb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb4:	f7fe fc5a 	bl	800146c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e14e      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bca:	4b59      	ldr	r3, [pc, #356]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0ee      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x5f0>
 8002bd6:	e014      	b.n	8002c02 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd8:	f7fe fc48 	bl	800146c <HAL_GetTick>
 8002bdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be0:	f7fe fc44 	bl	800146c <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e138      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bf6:	4b4e      	ldr	r3, [pc, #312]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1ee      	bne.n	8002be0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 812d 	beq.w	8002e66 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c0c:	4b48      	ldr	r3, [pc, #288]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c14:	2b18      	cmp	r3, #24
 8002c16:	f000 80bd 	beq.w	8002d94 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	f040 809e 	bne.w	8002d60 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c24:	4b42      	ldr	r3, [pc, #264]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a41      	ldr	r2, [pc, #260]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002c2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7fe fc1c 	bl	800146c <HAL_GetTick>
 8002c34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe fc18 	bl	800146c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e10e      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c4a:	4b39      	ldr	r3, [pc, #228]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c56:	4b36      	ldr	r3, [pc, #216]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002c58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c5a:	4b37      	ldr	r3, [pc, #220]	@ (8002d38 <HAL_RCC_OscConfig+0x774>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c66:	0112      	lsls	r2, r2, #4
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	4931      	ldr	r1, [pc, #196]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c74:	3b01      	subs	r3, #1
 8002c76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	025b      	lsls	r3, r3, #9
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	041b      	lsls	r3, r3, #16
 8002c8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	061b      	lsls	r3, r3, #24
 8002c9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ca0:	4923      	ldr	r1, [pc, #140]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ca6:	4b22      	ldr	r3, [pc, #136]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002caa:	4a21      	ldr	r2, [pc, #132]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002cac:	f023 0301 	bic.w	r3, r3, #1
 8002cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cb6:	4b21      	ldr	r3, [pc, #132]	@ (8002d3c <HAL_RCC_OscConfig+0x778>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002cbe:	00d2      	lsls	r2, r2, #3
 8002cc0:	491b      	ldr	r1, [pc, #108]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cca:	f023 020c 	bic.w	r2, r3, #12
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	4917      	ldr	r1, [pc, #92]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002cd8:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cdc:	f023 0202 	bic.w	r2, r3, #2
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce4:	4912      	ldr	r1, [pc, #72]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cea:	4b11      	ldr	r3, [pc, #68]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cee:	4a10      	ldr	r2, [pc, #64]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d02:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d06:	4a0a      	ldr	r2, [pc, #40]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d0e:	4b08      	ldr	r3, [pc, #32]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d12:	4a07      	ldr	r2, [pc, #28]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d1a:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a04      	ldr	r2, [pc, #16]	@ (8002d30 <HAL_RCC_OscConfig+0x76c>)
 8002d20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7fe fba1 	bl	800146c <HAL_GetTick>
 8002d2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d2c:	e011      	b.n	8002d52 <HAL_RCC_OscConfig+0x78e>
 8002d2e:	bf00      	nop
 8002d30:	58024400 	.word	0x58024400
 8002d34:	58024800 	.word	0x58024800
 8002d38:	fffffc0c 	.word	0xfffffc0c
 8002d3c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d40:	f7fe fb94 	bl	800146c <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e08a      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d52:	4b47      	ldr	r3, [pc, #284]	@ (8002e70 <HAL_RCC_OscConfig+0x8ac>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x77c>
 8002d5e:	e082      	b.n	8002e66 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d60:	4b43      	ldr	r3, [pc, #268]	@ (8002e70 <HAL_RCC_OscConfig+0x8ac>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a42      	ldr	r2, [pc, #264]	@ (8002e70 <HAL_RCC_OscConfig+0x8ac>)
 8002d66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fb7e 	bl	800146c <HAL_GetTick>
 8002d70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d74:	f7fe fb7a 	bl	800146c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e070      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d86:	4b3a      	ldr	r3, [pc, #232]	@ (8002e70 <HAL_RCC_OscConfig+0x8ac>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x7b0>
 8002d92:	e068      	b.n	8002e66 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d94:	4b36      	ldr	r3, [pc, #216]	@ (8002e70 <HAL_RCC_OscConfig+0x8ac>)
 8002d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d9a:	4b35      	ldr	r3, [pc, #212]	@ (8002e70 <HAL_RCC_OscConfig+0x8ac>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d031      	beq.n	8002e0c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f003 0203 	and.w	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d12a      	bne.n	8002e0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d122      	bne.n	8002e0c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d11a      	bne.n	8002e0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	0a5b      	lsrs	r3, r3, #9
 8002dda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d111      	bne.n	8002e0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	0c1b      	lsrs	r3, r3, #16
 8002dec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d108      	bne.n	8002e0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	0e1b      	lsrs	r3, r3, #24
 8002dfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e02b      	b.n	8002e68 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e10:	4b17      	ldr	r3, [pc, #92]	@ (8002e70 <HAL_RCC_OscConfig+0x8ac>)
 8002e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e14:	08db      	lsrs	r3, r3, #3
 8002e16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e1a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d01f      	beq.n	8002e66 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e26:	4b12      	ldr	r3, [pc, #72]	@ (8002e70 <HAL_RCC_OscConfig+0x8ac>)
 8002e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2a:	4a11      	ldr	r2, [pc, #68]	@ (8002e70 <HAL_RCC_OscConfig+0x8ac>)
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e32:	f7fe fb1b 	bl	800146c <HAL_GetTick>
 8002e36:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e38:	bf00      	nop
 8002e3a:	f7fe fb17 	bl	800146c <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d0f9      	beq.n	8002e3a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e46:	4b0a      	ldr	r3, [pc, #40]	@ (8002e70 <HAL_RCC_OscConfig+0x8ac>)
 8002e48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e74 <HAL_RCC_OscConfig+0x8b0>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e52:	00d2      	lsls	r2, r2, #3
 8002e54:	4906      	ldr	r1, [pc, #24]	@ (8002e70 <HAL_RCC_OscConfig+0x8ac>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e5a:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <HAL_RCC_OscConfig+0x8ac>)
 8002e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5e:	4a04      	ldr	r2, [pc, #16]	@ (8002e70 <HAL_RCC_OscConfig+0x8ac>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3730      	adds	r7, #48	@ 0x30
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	58024400 	.word	0x58024400
 8002e74:	ffff0007 	.word	0xffff0007

08002e78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e19c      	b.n	80031c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b8a      	ldr	r3, [pc, #552]	@ (80030b8 <HAL_RCC_ClockConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d910      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b87      	ldr	r3, [pc, #540]	@ (80030b8 <HAL_RCC_ClockConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 020f 	bic.w	r2, r3, #15
 8002ea2:	4985      	ldr	r1, [pc, #532]	@ (80030b8 <HAL_RCC_ClockConfig+0x240>)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eaa:	4b83      	ldr	r3, [pc, #524]	@ (80030b8 <HAL_RCC_ClockConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e184      	b.n	80031c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d010      	beq.n	8002eea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	4b7b      	ldr	r3, [pc, #492]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d908      	bls.n	8002eea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ed8:	4b78      	ldr	r3, [pc, #480]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	4975      	ldr	r1, [pc, #468]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d010      	beq.n	8002f18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695a      	ldr	r2, [r3, #20]
 8002efa:	4b70      	ldr	r3, [pc, #448]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d908      	bls.n	8002f18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f06:	4b6d      	ldr	r3, [pc, #436]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	496a      	ldr	r1, [pc, #424]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d010      	beq.n	8002f46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699a      	ldr	r2, [r3, #24]
 8002f28:	4b64      	ldr	r3, [pc, #400]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d908      	bls.n	8002f46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f34:	4b61      	ldr	r3, [pc, #388]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	495e      	ldr	r1, [pc, #376]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0320 	and.w	r3, r3, #32
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d010      	beq.n	8002f74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69da      	ldr	r2, [r3, #28]
 8002f56:	4b59      	ldr	r3, [pc, #356]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d908      	bls.n	8002f74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f62:	4b56      	ldr	r3, [pc, #344]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	4953      	ldr	r1, [pc, #332]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d010      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	4b4d      	ldr	r3, [pc, #308]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d908      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b4a      	ldr	r3, [pc, #296]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f023 020f 	bic.w	r2, r3, #15
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4947      	ldr	r1, [pc, #284]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d055      	beq.n	800305a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fae:	4b43      	ldr	r3, [pc, #268]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	4940      	ldr	r1, [pc, #256]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d107      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fc8:	4b3c      	ldr	r3, [pc, #240]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d121      	bne.n	8003018 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0f6      	b.n	80031c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d107      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fe0:	4b36      	ldr	r3, [pc, #216]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d115      	bne.n	8003018 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0ea      	b.n	80031c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d107      	bne.n	8003008 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ff8:	4b30      	ldr	r3, [pc, #192]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003000:	2b00      	cmp	r3, #0
 8003002:	d109      	bne.n	8003018 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0de      	b.n	80031c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003008:	4b2c      	ldr	r3, [pc, #176]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0d6      	b.n	80031c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003018:	4b28      	ldr	r3, [pc, #160]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f023 0207 	bic.w	r2, r3, #7
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4925      	ldr	r1, [pc, #148]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8003026:	4313      	orrs	r3, r2
 8003028:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302a:	f7fe fa1f 	bl	800146c <HAL_GetTick>
 800302e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003030:	e00a      	b.n	8003048 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003032:	f7fe fa1b 	bl	800146c <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003040:	4293      	cmp	r3, r2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e0be      	b.n	80031c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003048:	4b1c      	ldr	r3, [pc, #112]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	429a      	cmp	r2, r3
 8003058:	d1eb      	bne.n	8003032 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d010      	beq.n	8003088 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	4b14      	ldr	r3, [pc, #80]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	429a      	cmp	r2, r3
 8003074:	d208      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003076:	4b11      	ldr	r3, [pc, #68]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f023 020f 	bic.w	r2, r3, #15
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	490e      	ldr	r1, [pc, #56]	@ (80030bc <HAL_RCC_ClockConfig+0x244>)
 8003084:	4313      	orrs	r3, r2
 8003086:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003088:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <HAL_RCC_ClockConfig+0x240>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d214      	bcs.n	80030c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b08      	ldr	r3, [pc, #32]	@ (80030b8 <HAL_RCC_ClockConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 020f 	bic.w	r2, r3, #15
 800309e:	4906      	ldr	r1, [pc, #24]	@ (80030b8 <HAL_RCC_ClockConfig+0x240>)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b04      	ldr	r3, [pc, #16]	@ (80030b8 <HAL_RCC_ClockConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e086      	b.n	80031c6 <HAL_RCC_ClockConfig+0x34e>
 80030b8:	52002000 	.word	0x52002000
 80030bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d010      	beq.n	80030ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	4b3f      	ldr	r3, [pc, #252]	@ (80031d0 <HAL_RCC_ClockConfig+0x358>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030d8:	429a      	cmp	r2, r3
 80030da:	d208      	bcs.n	80030ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030dc:	4b3c      	ldr	r3, [pc, #240]	@ (80031d0 <HAL_RCC_ClockConfig+0x358>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	4939      	ldr	r1, [pc, #228]	@ (80031d0 <HAL_RCC_ClockConfig+0x358>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d010      	beq.n	800311c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	4b34      	ldr	r3, [pc, #208]	@ (80031d0 <HAL_RCC_ClockConfig+0x358>)
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003106:	429a      	cmp	r2, r3
 8003108:	d208      	bcs.n	800311c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800310a:	4b31      	ldr	r3, [pc, #196]	@ (80031d0 <HAL_RCC_ClockConfig+0x358>)
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	492e      	ldr	r1, [pc, #184]	@ (80031d0 <HAL_RCC_ClockConfig+0x358>)
 8003118:	4313      	orrs	r3, r2
 800311a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	d010      	beq.n	800314a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699a      	ldr	r2, [r3, #24]
 800312c:	4b28      	ldr	r3, [pc, #160]	@ (80031d0 <HAL_RCC_ClockConfig+0x358>)
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003134:	429a      	cmp	r2, r3
 8003136:	d208      	bcs.n	800314a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003138:	4b25      	ldr	r3, [pc, #148]	@ (80031d0 <HAL_RCC_ClockConfig+0x358>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	4922      	ldr	r1, [pc, #136]	@ (80031d0 <HAL_RCC_ClockConfig+0x358>)
 8003146:	4313      	orrs	r3, r2
 8003148:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	d010      	beq.n	8003178 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	4b1d      	ldr	r3, [pc, #116]	@ (80031d0 <HAL_RCC_ClockConfig+0x358>)
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003162:	429a      	cmp	r2, r3
 8003164:	d208      	bcs.n	8003178 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003166:	4b1a      	ldr	r3, [pc, #104]	@ (80031d0 <HAL_RCC_ClockConfig+0x358>)
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	4917      	ldr	r1, [pc, #92]	@ (80031d0 <HAL_RCC_ClockConfig+0x358>)
 8003174:	4313      	orrs	r3, r2
 8003176:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003178:	f000 f834 	bl	80031e4 <HAL_RCC_GetSysClockFreq>
 800317c:	4602      	mov	r2, r0
 800317e:	4b14      	ldr	r3, [pc, #80]	@ (80031d0 <HAL_RCC_ClockConfig+0x358>)
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	0a1b      	lsrs	r3, r3, #8
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	4912      	ldr	r1, [pc, #72]	@ (80031d4 <HAL_RCC_ClockConfig+0x35c>)
 800318a:	5ccb      	ldrb	r3, [r1, r3]
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
 8003194:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003196:	4b0e      	ldr	r3, [pc, #56]	@ (80031d0 <HAL_RCC_ClockConfig+0x358>)
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	4a0d      	ldr	r2, [pc, #52]	@ (80031d4 <HAL_RCC_ClockConfig+0x35c>)
 80031a0:	5cd3      	ldrb	r3, [r2, r3]
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ac:	4a0a      	ldr	r2, [pc, #40]	@ (80031d8 <HAL_RCC_ClockConfig+0x360>)
 80031ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031b0:	4a0a      	ldr	r2, [pc, #40]	@ (80031dc <HAL_RCC_ClockConfig+0x364>)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80031b6:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <HAL_RCC_ClockConfig+0x368>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe f90c 	bl	80013d8 <HAL_InitTick>
 80031c0:	4603      	mov	r3, r0
 80031c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	58024400 	.word	0x58024400
 80031d4:	08007c8c 	.word	0x08007c8c
 80031d8:	24000004 	.word	0x24000004
 80031dc:	24000000 	.word	0x24000000
 80031e0:	24000008 	.word	0x24000008

080031e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	@ 0x24
 80031e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ea:	4bb3      	ldr	r3, [pc, #716]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031f2:	2b18      	cmp	r3, #24
 80031f4:	f200 8155 	bhi.w	80034a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80031f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003200 <HAL_RCC_GetSysClockFreq+0x1c>)
 80031fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fe:	bf00      	nop
 8003200:	08003265 	.word	0x08003265
 8003204:	080034a3 	.word	0x080034a3
 8003208:	080034a3 	.word	0x080034a3
 800320c:	080034a3 	.word	0x080034a3
 8003210:	080034a3 	.word	0x080034a3
 8003214:	080034a3 	.word	0x080034a3
 8003218:	080034a3 	.word	0x080034a3
 800321c:	080034a3 	.word	0x080034a3
 8003220:	0800328b 	.word	0x0800328b
 8003224:	080034a3 	.word	0x080034a3
 8003228:	080034a3 	.word	0x080034a3
 800322c:	080034a3 	.word	0x080034a3
 8003230:	080034a3 	.word	0x080034a3
 8003234:	080034a3 	.word	0x080034a3
 8003238:	080034a3 	.word	0x080034a3
 800323c:	080034a3 	.word	0x080034a3
 8003240:	08003291 	.word	0x08003291
 8003244:	080034a3 	.word	0x080034a3
 8003248:	080034a3 	.word	0x080034a3
 800324c:	080034a3 	.word	0x080034a3
 8003250:	080034a3 	.word	0x080034a3
 8003254:	080034a3 	.word	0x080034a3
 8003258:	080034a3 	.word	0x080034a3
 800325c:	080034a3 	.word	0x080034a3
 8003260:	08003297 	.word	0x08003297
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003264:	4b94      	ldr	r3, [pc, #592]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	2b00      	cmp	r3, #0
 800326e:	d009      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003270:	4b91      	ldr	r3, [pc, #580]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	08db      	lsrs	r3, r3, #3
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	4a90      	ldr	r2, [pc, #576]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
 8003280:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003282:	e111      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003284:	4b8d      	ldr	r3, [pc, #564]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003286:	61bb      	str	r3, [r7, #24]
      break;
 8003288:	e10e      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800328a:	4b8d      	ldr	r3, [pc, #564]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800328c:	61bb      	str	r3, [r7, #24]
      break;
 800328e:	e10b      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003290:	4b8c      	ldr	r3, [pc, #560]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003292:	61bb      	str	r3, [r7, #24]
      break;
 8003294:	e108      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003296:	4b88      	ldr	r3, [pc, #544]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80032a0:	4b85      	ldr	r3, [pc, #532]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032ac:	4b82      	ldr	r3, [pc, #520]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80032b6:	4b80      	ldr	r3, [pc, #512]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ba:	08db      	lsrs	r3, r3, #3
 80032bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80e1 	beq.w	800349c <HAL_RCC_GetSysClockFreq+0x2b8>
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	f000 8083 	beq.w	80033e8 <HAL_RCC_GetSysClockFreq+0x204>
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	f200 80a1 	bhi.w	800342c <HAL_RCC_GetSysClockFreq+0x248>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x114>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d056      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80032f6:	e099      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032f8:	4b6f      	ldr	r3, [pc, #444]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b00      	cmp	r3, #0
 8003302:	d02d      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003304:	4b6c      	ldr	r3, [pc, #432]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	08db      	lsrs	r3, r3, #3
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	4a6b      	ldr	r2, [pc, #428]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
 8003314:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	ee07 3a90 	vmov	s15, r3
 800331c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	ee07 3a90 	vmov	s15, r3
 8003326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332e:	4b62      	ldr	r3, [pc, #392]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800333e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003342:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80034c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800334a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800334e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800335e:	e087      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	ee07 3a90 	vmov	s15, r3
 8003366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80034cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800336e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003372:	4b51      	ldr	r3, [pc, #324]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337a:	ee07 3a90 	vmov	s15, r3
 800337e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003382:	ed97 6a02 	vldr	s12, [r7, #8]
 8003386:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80034c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800338a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800338e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800339a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033a2:	e065      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	ee07 3a90 	vmov	s15, r3
 80033aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80034d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033b6:	4b40      	ldr	r3, [pc, #256]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80034c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033e6:	e043      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80034d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80033f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033fa:	4b2f      	ldr	r3, [pc, #188]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800340a:	ed97 6a02 	vldr	s12, [r7, #8]
 800340e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80034c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800341a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800341e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003426:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800342a:	e021      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003436:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80034d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800343a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800343e:	4b1e      	ldr	r3, [pc, #120]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800344e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003452:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80034c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800345a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800345e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800346e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003470:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003474:	0a5b      	lsrs	r3, r3, #9
 8003476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800347a:	3301      	adds	r3, #1
 800347c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	ee07 3a90 	vmov	s15, r3
 8003484:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003488:	edd7 6a07 	vldr	s13, [r7, #28]
 800348c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003494:	ee17 3a90 	vmov	r3, s15
 8003498:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800349a:	e005      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	61bb      	str	r3, [r7, #24]
      break;
 80034a0:	e002      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80034a2:	4b07      	ldr	r3, [pc, #28]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034a4:	61bb      	str	r3, [r7, #24]
      break;
 80034a6:	bf00      	nop
  }

  return sysclockfreq;
 80034a8:	69bb      	ldr	r3, [r7, #24]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3724      	adds	r7, #36	@ 0x24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	58024400 	.word	0x58024400
 80034bc:	03d09000 	.word	0x03d09000
 80034c0:	003d0900 	.word	0x003d0900
 80034c4:	007a1200 	.word	0x007a1200
 80034c8:	46000000 	.word	0x46000000
 80034cc:	4c742400 	.word	0x4c742400
 80034d0:	4a742400 	.word	0x4a742400
 80034d4:	4af42400 	.word	0x4af42400

080034d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034de:	f7ff fe81 	bl	80031e4 <HAL_RCC_GetSysClockFreq>
 80034e2:	4602      	mov	r2, r0
 80034e4:	4b10      	ldr	r3, [pc, #64]	@ (8003528 <HAL_RCC_GetHCLKFreq+0x50>)
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	0a1b      	lsrs	r3, r3, #8
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	490f      	ldr	r1, [pc, #60]	@ (800352c <HAL_RCC_GetHCLKFreq+0x54>)
 80034f0:	5ccb      	ldrb	r3, [r1, r3]
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	fa22 f303 	lsr.w	r3, r2, r3
 80034fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003528 <HAL_RCC_GetHCLKFreq+0x50>)
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	4a09      	ldr	r2, [pc, #36]	@ (800352c <HAL_RCC_GetHCLKFreq+0x54>)
 8003506:	5cd3      	ldrb	r3, [r2, r3]
 8003508:	f003 031f 	and.w	r3, r3, #31
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	fa22 f303 	lsr.w	r3, r2, r3
 8003512:	4a07      	ldr	r2, [pc, #28]	@ (8003530 <HAL_RCC_GetHCLKFreq+0x58>)
 8003514:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003516:	4a07      	ldr	r2, [pc, #28]	@ (8003534 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800351c:	4b04      	ldr	r3, [pc, #16]	@ (8003530 <HAL_RCC_GetHCLKFreq+0x58>)
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	58024400 	.word	0x58024400
 800352c:	08007c8c 	.word	0x08007c8c
 8003530:	24000004 	.word	0x24000004
 8003534:	24000000 	.word	0x24000000

08003538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800353c:	f7ff ffcc 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 8003540:	4602      	mov	r2, r0
 8003542:	4b06      	ldr	r3, [pc, #24]	@ (800355c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	091b      	lsrs	r3, r3, #4
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	4904      	ldr	r1, [pc, #16]	@ (8003560 <HAL_RCC_GetPCLK1Freq+0x28>)
 800354e:	5ccb      	ldrb	r3, [r1, r3]
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd80      	pop	{r7, pc}
 800355c:	58024400 	.word	0x58024400
 8003560:	08007c8c 	.word	0x08007c8c

08003564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003568:	f7ff ffb6 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 800356c:	4602      	mov	r2, r0
 800356e:	4b06      	ldr	r3, [pc, #24]	@ (8003588 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	0a1b      	lsrs	r3, r3, #8
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	4904      	ldr	r1, [pc, #16]	@ (800358c <HAL_RCC_GetPCLK2Freq+0x28>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003584:	4618      	mov	r0, r3
 8003586:	bd80      	pop	{r7, pc}
 8003588:	58024400 	.word	0x58024400
 800358c:	08007c8c 	.word	0x08007c8c

08003590 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003594:	b0ca      	sub	sp, #296	@ 0x128
 8003596:	af00      	add	r7, sp, #0
 8003598:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800359c:	2300      	movs	r3, #0
 800359e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035a2:	2300      	movs	r3, #0
 80035a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80035b4:	2500      	movs	r5, #0
 80035b6:	ea54 0305 	orrs.w	r3, r4, r5
 80035ba:	d049      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80035bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035c6:	d02f      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80035c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035cc:	d828      	bhi.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035d2:	d01a      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80035d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035d8:	d822      	bhi.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80035de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035e2:	d007      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035e4:	e01c      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e6:	4bb8      	ldr	r3, [pc, #736]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ea:	4ab7      	ldr	r2, [pc, #732]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035f2:	e01a      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f8:	3308      	adds	r3, #8
 80035fa:	2102      	movs	r1, #2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f001 fc8f 	bl	8004f20 <RCCEx_PLL2_Config>
 8003602:	4603      	mov	r3, r0
 8003604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003608:	e00f      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800360a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360e:	3328      	adds	r3, #40	@ 0x28
 8003610:	2102      	movs	r1, #2
 8003612:	4618      	mov	r0, r3
 8003614:	f001 fd36 	bl	8005084 <RCCEx_PLL3_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800361e:	e004      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003626:	e000      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800362a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003632:	4ba5      	ldr	r3, [pc, #660]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003636:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800363a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003640:	4aa1      	ldr	r2, [pc, #644]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003642:	430b      	orrs	r3, r1
 8003644:	6513      	str	r3, [r2, #80]	@ 0x50
 8003646:	e003      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003648:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800364c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003658:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800365c:	f04f 0900 	mov.w	r9, #0
 8003660:	ea58 0309 	orrs.w	r3, r8, r9
 8003664:	d047      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366c:	2b04      	cmp	r3, #4
 800366e:	d82a      	bhi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003670:	a201      	add	r2, pc, #4	@ (adr r2, 8003678 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003676:	bf00      	nop
 8003678:	0800368d 	.word	0x0800368d
 800367c:	0800369b 	.word	0x0800369b
 8003680:	080036b1 	.word	0x080036b1
 8003684:	080036cf 	.word	0x080036cf
 8003688:	080036cf 	.word	0x080036cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800368c:	4b8e      	ldr	r3, [pc, #568]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800368e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003690:	4a8d      	ldr	r2, [pc, #564]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003696:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003698:	e01a      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800369a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369e:	3308      	adds	r3, #8
 80036a0:	2100      	movs	r1, #0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f001 fc3c 	bl	8004f20 <RCCEx_PLL2_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036ae:	e00f      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b4:	3328      	adds	r3, #40	@ 0x28
 80036b6:	2100      	movs	r1, #0
 80036b8:	4618      	mov	r0, r3
 80036ba:	f001 fce3 	bl	8005084 <RCCEx_PLL3_Config>
 80036be:	4603      	mov	r3, r0
 80036c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036c4:	e004      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036cc:	e000      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80036ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036d8:	4b7b      	ldr	r3, [pc, #492]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036dc:	f023 0107 	bic.w	r1, r3, #7
 80036e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e6:	4a78      	ldr	r2, [pc, #480]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80036ec:	e003      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80036f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003702:	f04f 0b00 	mov.w	fp, #0
 8003706:	ea5a 030b 	orrs.w	r3, sl, fp
 800370a:	d04c      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800370c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003716:	d030      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003718:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800371c:	d829      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800371e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003720:	d02d      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003722:	2bc0      	cmp	r3, #192	@ 0xc0
 8003724:	d825      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003726:	2b80      	cmp	r3, #128	@ 0x80
 8003728:	d018      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800372a:	2b80      	cmp	r3, #128	@ 0x80
 800372c:	d821      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003732:	2b40      	cmp	r3, #64	@ 0x40
 8003734:	d007      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003736:	e01c      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003738:	4b63      	ldr	r3, [pc, #396]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800373a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373c:	4a62      	ldr	r2, [pc, #392]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800373e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003744:	e01c      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374a:	3308      	adds	r3, #8
 800374c:	2100      	movs	r1, #0
 800374e:	4618      	mov	r0, r3
 8003750:	f001 fbe6 	bl	8004f20 <RCCEx_PLL2_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800375a:	e011      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800375c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003760:	3328      	adds	r3, #40	@ 0x28
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f001 fc8d 	bl	8005084 <RCCEx_PLL3_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003770:	e006      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003778:	e002      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800377a:	bf00      	nop
 800377c:	e000      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800377e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10a      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003788:	4b4f      	ldr	r3, [pc, #316]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800378a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800378c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003796:	4a4c      	ldr	r2, [pc, #304]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003798:	430b      	orrs	r3, r1
 800379a:	6513      	str	r3, [r2, #80]	@ 0x50
 800379c:	e003      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ae:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80037b2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80037b6:	2300      	movs	r3, #0
 80037b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80037bc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80037c0:	460b      	mov	r3, r1
 80037c2:	4313      	orrs	r3, r2
 80037c4:	d053      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80037c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037d2:	d035      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80037d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037d8:	d82e      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037da:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80037de:	d031      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80037e0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80037e4:	d828      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037ea:	d01a      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80037ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037f0:	d822      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80037f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037fa:	d007      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80037fc:	e01c      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037fe:	4b32      	ldr	r3, [pc, #200]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003802:	4a31      	ldr	r2, [pc, #196]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003808:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800380a:	e01c      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800380c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003810:	3308      	adds	r3, #8
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f001 fb83 	bl	8004f20 <RCCEx_PLL2_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003820:	e011      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003826:	3328      	adds	r3, #40	@ 0x28
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f001 fc2a 	bl	8005084 <RCCEx_PLL3_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003836:	e006      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800383e:	e002      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003840:	bf00      	nop
 8003842:	e000      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10b      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800384e:	4b1e      	ldr	r3, [pc, #120]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003852:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800385e:	4a1a      	ldr	r2, [pc, #104]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003860:	430b      	orrs	r3, r1
 8003862:	6593      	str	r3, [r2, #88]	@ 0x58
 8003864:	e003      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800386a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800386e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800387a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800387e:	2300      	movs	r3, #0
 8003880:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003884:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003888:	460b      	mov	r3, r1
 800388a:	4313      	orrs	r3, r2
 800388c:	d056      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800388e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003892:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003896:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800389a:	d038      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800389c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038a0:	d831      	bhi.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038a6:	d034      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80038a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038ac:	d82b      	bhi.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038b2:	d01d      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80038b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038b8:	d825      	bhi.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d006      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80038be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038c2:	d00a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80038c4:	e01f      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038c6:	bf00      	nop
 80038c8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038cc:	4ba2      	ldr	r3, [pc, #648]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d0:	4aa1      	ldr	r2, [pc, #644]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038d8:	e01c      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038de:	3308      	adds	r3, #8
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 fb1c 	bl	8004f20 <RCCEx_PLL2_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038ee:	e011      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f4:	3328      	adds	r3, #40	@ 0x28
 80038f6:	2100      	movs	r1, #0
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 fbc3 	bl	8005084 <RCCEx_PLL3_Config>
 80038fe:	4603      	mov	r3, r0
 8003900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003904:	e006      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800390c:	e002      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800390e:	bf00      	nop
 8003910:	e000      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10b      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800391c:	4b8e      	ldr	r3, [pc, #568]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003920:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003928:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800392c:	4a8a      	ldr	r2, [pc, #552]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800392e:	430b      	orrs	r3, r1
 8003930:	6593      	str	r3, [r2, #88]	@ 0x58
 8003932:	e003      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003938:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003948:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800394c:	2300      	movs	r3, #0
 800394e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003952:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003956:	460b      	mov	r3, r1
 8003958:	4313      	orrs	r3, r2
 800395a:	d03a      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800395c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003962:	2b30      	cmp	r3, #48	@ 0x30
 8003964:	d01f      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003966:	2b30      	cmp	r3, #48	@ 0x30
 8003968:	d819      	bhi.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800396a:	2b20      	cmp	r3, #32
 800396c:	d00c      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800396e:	2b20      	cmp	r3, #32
 8003970:	d815      	bhi.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003972:	2b00      	cmp	r3, #0
 8003974:	d019      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003976:	2b10      	cmp	r3, #16
 8003978:	d111      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800397a:	4b77      	ldr	r3, [pc, #476]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800397c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397e:	4a76      	ldr	r2, [pc, #472]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003984:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003986:	e011      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398c:	3308      	adds	r3, #8
 800398e:	2102      	movs	r1, #2
 8003990:	4618      	mov	r0, r3
 8003992:	f001 fac5 	bl	8004f20 <RCCEx_PLL2_Config>
 8003996:	4603      	mov	r3, r0
 8003998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800399c:	e006      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039a4:	e002      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039a6:	bf00      	nop
 80039a8:	e000      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039b4:	4b68      	ldr	r3, [pc, #416]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c2:	4a65      	ldr	r2, [pc, #404]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039c4:	430b      	orrs	r3, r1
 80039c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039c8:	e003      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039da:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80039de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80039e2:	2300      	movs	r3, #0
 80039e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80039e8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4313      	orrs	r3, r2
 80039f0:	d051      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80039f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039fc:	d035      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80039fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a02:	d82e      	bhi.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a08:	d031      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003a0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a0e:	d828      	bhi.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a14:	d01a      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a1a:	d822      	bhi.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a24:	d007      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a26:	e01c      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a28:	4b4b      	ldr	r3, [pc, #300]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2c:	4a4a      	ldr	r2, [pc, #296]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a34:	e01c      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 fa6e 	bl	8004f20 <RCCEx_PLL2_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a4a:	e011      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a50:	3328      	adds	r3, #40	@ 0x28
 8003a52:	2100      	movs	r1, #0
 8003a54:	4618      	mov	r0, r3
 8003a56:	f001 fb15 	bl	8005084 <RCCEx_PLL3_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a60:	e006      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a68:	e002      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a6a:	bf00      	nop
 8003a6c:	e000      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10a      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a78:	4b37      	ldr	r3, [pc, #220]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a7c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a86:	4a34      	ldr	r2, [pc, #208]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a8c:	e003      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003aac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	d056      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ac0:	d033      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003ac2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ac6:	d82c      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ac8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003acc:	d02f      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003ace:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ad2:	d826      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ad4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ad8:	d02b      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003ada:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ade:	d820      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ae0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ae4:	d012      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003ae6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aea:	d81a      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d022      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af4:	d115      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afa:	3308      	adds	r3, #8
 8003afc:	2101      	movs	r1, #1
 8003afe:	4618      	mov	r0, r3
 8003b00:	f001 fa0e 	bl	8004f20 <RCCEx_PLL2_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b0a:	e015      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b10:	3328      	adds	r3, #40	@ 0x28
 8003b12:	2101      	movs	r1, #1
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 fab5 	bl	8005084 <RCCEx_PLL3_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b20:	e00a      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b28:	e006      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b2a:	bf00      	nop
 8003b2c:	e004      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b2e:	bf00      	nop
 8003b30:	e002      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b32:	bf00      	nop
 8003b34:	e000      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10d      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b40:	4b05      	ldr	r3, [pc, #20]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b44:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b4e:	4a02      	ldr	r2, [pc, #8]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b50:	430b      	orrs	r3, r1
 8003b52:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b54:	e006      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b56:	bf00      	nop
 8003b58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b74:	2300      	movs	r3, #0
 8003b76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b7a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4313      	orrs	r3, r2
 8003b82:	d055      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b90:	d033      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b96:	d82c      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b9c:	d02f      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ba2:	d826      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ba4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ba8:	d02b      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003baa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bae:	d820      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bb4:	d012      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003bb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bba:	d81a      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d022      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003bc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bc4:	d115      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bca:	3308      	adds	r3, #8
 8003bcc:	2101      	movs	r1, #1
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f001 f9a6 	bl	8004f20 <RCCEx_PLL2_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bda:	e015      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be0:	3328      	adds	r3, #40	@ 0x28
 8003be2:	2101      	movs	r1, #1
 8003be4:	4618      	mov	r0, r3
 8003be6:	f001 fa4d 	bl	8005084 <RCCEx_PLL3_Config>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bf0:	e00a      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bf8:	e006      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bfa:	bf00      	nop
 8003bfc:	e004      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bfe:	bf00      	nop
 8003c00:	e002      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c02:	bf00      	nop
 8003c04:	e000      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10b      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c10:	4ba3      	ldr	r3, [pc, #652]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c14:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c20:	4a9f      	ldr	r2, [pc, #636]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c22:	430b      	orrs	r3, r1
 8003c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c26:	e003      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c38:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c40:	2300      	movs	r3, #0
 8003c42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003c46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	d037      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c5a:	d00e      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003c5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c60:	d816      	bhi.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d018      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003c66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c6a:	d111      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c6c:	4b8c      	ldr	r3, [pc, #560]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c70:	4a8b      	ldr	r2, [pc, #556]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c78:	e00f      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7e:	3308      	adds	r3, #8
 8003c80:	2101      	movs	r1, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 f94c 	bl	8004f20 <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c8e:	e004      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c96:	e000      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10a      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb0:	4a7b      	ldr	r2, [pc, #492]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cb2:	430b      	orrs	r3, r1
 8003cb4:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cb6:	e003      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003cd6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	d039      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d81c      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003cea:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf0:	08003d2d 	.word	0x08003d2d
 8003cf4:	08003d01 	.word	0x08003d01
 8003cf8:	08003d0f 	.word	0x08003d0f
 8003cfc:	08003d2d 	.word	0x08003d2d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d00:	4b67      	ldr	r3, [pc, #412]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d04:	4a66      	ldr	r2, [pc, #408]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d0c:	e00f      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d12:	3308      	adds	r3, #8
 8003d14:	2102      	movs	r1, #2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f001 f902 	bl	8004f20 <RCCEx_PLL2_Config>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d22:	e004      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d2a:	e000      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10a      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d36:	4b5a      	ldr	r3, [pc, #360]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3a:	f023 0103 	bic.w	r1, r3, #3
 8003d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d44:	4a56      	ldr	r2, [pc, #344]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d46:	430b      	orrs	r3, r1
 8003d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d4a:	e003      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003d60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d64:	2300      	movs	r3, #0
 8003d66:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d6a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f000 809f 	beq.w	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d76:	4b4b      	ldr	r3, [pc, #300]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a4a      	ldr	r2, [pc, #296]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d82:	f7fd fb73 	bl	800146c <HAL_GetTick>
 8003d86:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d8a:	e00b      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8c:	f7fd fb6e 	bl	800146c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b64      	cmp	r3, #100	@ 0x64
 8003d9a:	d903      	bls.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003da2:	e005      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003da4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0ed      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003db0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d179      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003db8:	4b39      	ldr	r3, [pc, #228]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dc4:	4053      	eors	r3, r2
 8003dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d015      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dce:	4b34      	ldr	r3, [pc, #208]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dd6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dda:	4b31      	ldr	r3, [pc, #196]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dde:	4a30      	ldr	r2, [pc, #192]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003de6:	4b2e      	ldr	r3, [pc, #184]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dea:	4a2d      	ldr	r2, [pc, #180]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003df0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003df2:	4a2b      	ldr	r2, [pc, #172]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003df8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e06:	d118      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fd fb30 	bl	800146c <HAL_GetTick>
 8003e0c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e10:	e00d      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e12:	f7fd fb2b 	bl	800146c <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e1c:	1ad2      	subs	r2, r2, r3
 8003e1e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d903      	bls.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003e2c:	e005      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0eb      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d129      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e52:	d10e      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003e54:	4b12      	ldr	r3, [pc, #72]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e64:	091a      	lsrs	r2, r3, #4
 8003e66:	4b10      	ldr	r3, [pc, #64]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	6113      	str	r3, [r2, #16]
 8003e70:	e005      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	4a0a      	ldr	r2, [pc, #40]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e78:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e7c:	6113      	str	r3, [r2, #16]
 8003e7e:	4b08      	ldr	r3, [pc, #32]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e80:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e8e:	4a04      	ldr	r2, [pc, #16]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e90:	430b      	orrs	r3, r1
 8003e92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e94:	e00e      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003e9e:	e009      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003ea0:	58024400 	.word	0x58024400
 8003ea4:	58024800 	.word	0x58024800
 8003ea8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebc:	f002 0301 	and.w	r3, r2, #1
 8003ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003eca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f000 8089 	beq.w	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003edc:	2b28      	cmp	r3, #40	@ 0x28
 8003ede:	d86b      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003fc1 	.word	0x08003fc1
 8003eec:	08003fb9 	.word	0x08003fb9
 8003ef0:	08003fb9 	.word	0x08003fb9
 8003ef4:	08003fb9 	.word	0x08003fb9
 8003ef8:	08003fb9 	.word	0x08003fb9
 8003efc:	08003fb9 	.word	0x08003fb9
 8003f00:	08003fb9 	.word	0x08003fb9
 8003f04:	08003fb9 	.word	0x08003fb9
 8003f08:	08003f8d 	.word	0x08003f8d
 8003f0c:	08003fb9 	.word	0x08003fb9
 8003f10:	08003fb9 	.word	0x08003fb9
 8003f14:	08003fb9 	.word	0x08003fb9
 8003f18:	08003fb9 	.word	0x08003fb9
 8003f1c:	08003fb9 	.word	0x08003fb9
 8003f20:	08003fb9 	.word	0x08003fb9
 8003f24:	08003fb9 	.word	0x08003fb9
 8003f28:	08003fa3 	.word	0x08003fa3
 8003f2c:	08003fb9 	.word	0x08003fb9
 8003f30:	08003fb9 	.word	0x08003fb9
 8003f34:	08003fb9 	.word	0x08003fb9
 8003f38:	08003fb9 	.word	0x08003fb9
 8003f3c:	08003fb9 	.word	0x08003fb9
 8003f40:	08003fb9 	.word	0x08003fb9
 8003f44:	08003fb9 	.word	0x08003fb9
 8003f48:	08003fc1 	.word	0x08003fc1
 8003f4c:	08003fb9 	.word	0x08003fb9
 8003f50:	08003fb9 	.word	0x08003fb9
 8003f54:	08003fb9 	.word	0x08003fb9
 8003f58:	08003fb9 	.word	0x08003fb9
 8003f5c:	08003fb9 	.word	0x08003fb9
 8003f60:	08003fb9 	.word	0x08003fb9
 8003f64:	08003fb9 	.word	0x08003fb9
 8003f68:	08003fc1 	.word	0x08003fc1
 8003f6c:	08003fb9 	.word	0x08003fb9
 8003f70:	08003fb9 	.word	0x08003fb9
 8003f74:	08003fb9 	.word	0x08003fb9
 8003f78:	08003fb9 	.word	0x08003fb9
 8003f7c:	08003fb9 	.word	0x08003fb9
 8003f80:	08003fb9 	.word	0x08003fb9
 8003f84:	08003fb9 	.word	0x08003fb9
 8003f88:	08003fc1 	.word	0x08003fc1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f90:	3308      	adds	r3, #8
 8003f92:	2101      	movs	r1, #1
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 ffc3 	bl	8004f20 <RCCEx_PLL2_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fa0:	e00f      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa6:	3328      	adds	r3, #40	@ 0x28
 8003fa8:	2101      	movs	r1, #1
 8003faa:	4618      	mov	r0, r3
 8003fac:	f001 f86a 	bl	8005084 <RCCEx_PLL3_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fb6:	e004      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10a      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003fca:	4bbf      	ldr	r3, [pc, #764]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fd8:	4abb      	ldr	r2, [pc, #748]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fde:	e003      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	f002 0302 	and.w	r3, r2, #2
 8003ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003ffe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004002:	460b      	mov	r3, r1
 8004004:	4313      	orrs	r3, r2
 8004006:	d041      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800400e:	2b05      	cmp	r3, #5
 8004010:	d824      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004012:	a201      	add	r2, pc, #4	@ (adr r2, 8004018 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004018:	08004065 	.word	0x08004065
 800401c:	08004031 	.word	0x08004031
 8004020:	08004047 	.word	0x08004047
 8004024:	08004065 	.word	0x08004065
 8004028:	08004065 	.word	0x08004065
 800402c:	08004065 	.word	0x08004065
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004034:	3308      	adds	r3, #8
 8004036:	2101      	movs	r1, #1
 8004038:	4618      	mov	r0, r3
 800403a:	f000 ff71 	bl	8004f20 <RCCEx_PLL2_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004044:	e00f      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404a:	3328      	adds	r3, #40	@ 0x28
 800404c:	2101      	movs	r1, #1
 800404e:	4618      	mov	r0, r3
 8004050:	f001 f818 	bl	8005084 <RCCEx_PLL3_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800405a:	e004      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004062:	e000      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10a      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800406e:	4b96      	ldr	r3, [pc, #600]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004072:	f023 0107 	bic.w	r1, r3, #7
 8004076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800407c:	4a92      	ldr	r2, [pc, #584]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800407e:	430b      	orrs	r3, r1
 8004080:	6553      	str	r3, [r2, #84]	@ 0x54
 8004082:	e003      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800408c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	f002 0304 	and.w	r3, r2, #4
 8004098:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800409c:	2300      	movs	r3, #0
 800409e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040a2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4313      	orrs	r3, r2
 80040aa:	d044      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80040ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040b4:	2b05      	cmp	r3, #5
 80040b6:	d825      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80040b8:	a201      	add	r2, pc, #4	@ (adr r2, 80040c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	0800410d 	.word	0x0800410d
 80040c4:	080040d9 	.word	0x080040d9
 80040c8:	080040ef 	.word	0x080040ef
 80040cc:	0800410d 	.word	0x0800410d
 80040d0:	0800410d 	.word	0x0800410d
 80040d4:	0800410d 	.word	0x0800410d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040dc:	3308      	adds	r3, #8
 80040de:	2101      	movs	r1, #1
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 ff1d 	bl	8004f20 <RCCEx_PLL2_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040ec:	e00f      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f2:	3328      	adds	r3, #40	@ 0x28
 80040f4:	2101      	movs	r1, #1
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 ffc4 	bl	8005084 <RCCEx_PLL3_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004102:	e004      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800410a:	e000      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800410c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800410e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10b      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004116:	4b6c      	ldr	r3, [pc, #432]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411a:	f023 0107 	bic.w	r1, r3, #7
 800411e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004126:	4a68      	ldr	r2, [pc, #416]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004128:	430b      	orrs	r3, r1
 800412a:	6593      	str	r3, [r2, #88]	@ 0x58
 800412c:	e003      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004132:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	f002 0320 	and.w	r3, r2, #32
 8004142:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004146:	2300      	movs	r3, #0
 8004148:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800414c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004150:	460b      	mov	r3, r1
 8004152:	4313      	orrs	r3, r2
 8004154:	d055      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004162:	d033      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004164:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004168:	d82c      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800416a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800416e:	d02f      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004174:	d826      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004176:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800417a:	d02b      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800417c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004180:	d820      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004182:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004186:	d012      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004188:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800418c:	d81a      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800418e:	2b00      	cmp	r3, #0
 8004190:	d022      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004192:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004196:	d115      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419c:	3308      	adds	r3, #8
 800419e:	2100      	movs	r1, #0
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 febd 	bl	8004f20 <RCCEx_PLL2_Config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041ac:	e015      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b2:	3328      	adds	r3, #40	@ 0x28
 80041b4:	2102      	movs	r1, #2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 ff64 	bl	8005084 <RCCEx_PLL3_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041c2:	e00a      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041ca:	e006      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041cc:	bf00      	nop
 80041ce:	e004      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041d0:	bf00      	nop
 80041d2:	e002      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041d4:	bf00      	nop
 80041d6:	e000      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10b      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041e2:	4b39      	ldr	r3, [pc, #228]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f2:	4a35      	ldr	r2, [pc, #212]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041f4:	430b      	orrs	r3, r1
 80041f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80041f8:	e003      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800420e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004212:	2300      	movs	r3, #0
 8004214:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004218:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800421c:	460b      	mov	r3, r1
 800421e:	4313      	orrs	r3, r2
 8004220:	d058      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004226:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800422a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800422e:	d033      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004230:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004234:	d82c      	bhi.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800423a:	d02f      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800423c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004240:	d826      	bhi.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004242:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004246:	d02b      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004248:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800424c:	d820      	bhi.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800424e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004252:	d012      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004254:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004258:	d81a      	bhi.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d022      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800425e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004262:	d115      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004268:	3308      	adds	r3, #8
 800426a:	2100      	movs	r1, #0
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fe57 	bl	8004f20 <RCCEx_PLL2_Config>
 8004272:	4603      	mov	r3, r0
 8004274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004278:	e015      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800427a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427e:	3328      	adds	r3, #40	@ 0x28
 8004280:	2102      	movs	r1, #2
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fefe 	bl	8005084 <RCCEx_PLL3_Config>
 8004288:	4603      	mov	r3, r0
 800428a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800428e:	e00a      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004296:	e006      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004298:	bf00      	nop
 800429a:	e004      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800429c:	bf00      	nop
 800429e:	e002      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042a0:	bf00      	nop
 80042a2:	e000      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10e      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042ae:	4b06      	ldr	r3, [pc, #24]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042be:	4a02      	ldr	r2, [pc, #8]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042c0:	430b      	orrs	r3, r1
 80042c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80042c4:	e006      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80042c6:	bf00      	nop
 80042c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042dc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80042e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042e4:	2300      	movs	r3, #0
 80042e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80042ee:	460b      	mov	r3, r1
 80042f0:	4313      	orrs	r3, r2
 80042f2:	d055      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80042f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042fc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004300:	d033      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004302:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004306:	d82c      	bhi.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004308:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800430c:	d02f      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800430e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004312:	d826      	bhi.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004314:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004318:	d02b      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800431a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800431e:	d820      	bhi.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004320:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004324:	d012      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004326:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800432a:	d81a      	bhi.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800432c:	2b00      	cmp	r3, #0
 800432e:	d022      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004334:	d115      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433a:	3308      	adds	r3, #8
 800433c:	2100      	movs	r1, #0
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fdee 	bl	8004f20 <RCCEx_PLL2_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800434a:	e015      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800434c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004350:	3328      	adds	r3, #40	@ 0x28
 8004352:	2102      	movs	r1, #2
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fe95 	bl	8005084 <RCCEx_PLL3_Config>
 800435a:	4603      	mov	r3, r0
 800435c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004360:	e00a      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004368:	e006      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800436a:	bf00      	nop
 800436c:	e004      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800436e:	bf00      	nop
 8004370:	e002      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004372:	bf00      	nop
 8004374:	e000      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10b      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004380:	4ba1      	ldr	r3, [pc, #644]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004384:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004390:	4a9d      	ldr	r2, [pc, #628]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004392:	430b      	orrs	r3, r1
 8004394:	6593      	str	r3, [r2, #88]	@ 0x58
 8004396:	e003      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800439c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a8:	f002 0308 	and.w	r3, r2, #8
 80043ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043b0:	2300      	movs	r3, #0
 80043b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80043ba:	460b      	mov	r3, r1
 80043bc:	4313      	orrs	r3, r2
 80043be:	d01e      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80043c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d2:	3328      	adds	r3, #40	@ 0x28
 80043d4:	2102      	movs	r1, #2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fe54 	bl	8005084 <RCCEx_PLL3_Config>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80043e8:	4b87      	ldr	r3, [pc, #540]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043f8:	4a83      	ldr	r2, [pc, #524]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043fa:	430b      	orrs	r3, r1
 80043fc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004406:	f002 0310 	and.w	r3, r2, #16
 800440a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800440e:	2300      	movs	r3, #0
 8004410:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004414:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004418:	460b      	mov	r3, r1
 800441a:	4313      	orrs	r3, r2
 800441c:	d01e      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800441e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004422:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800442a:	d10c      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800442c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004430:	3328      	adds	r3, #40	@ 0x28
 8004432:	2102      	movs	r1, #2
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fe25 	bl	8005084 <RCCEx_PLL3_Config>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004446:	4b70      	ldr	r3, [pc, #448]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800444e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004452:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004456:	4a6c      	ldr	r2, [pc, #432]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004458:	430b      	orrs	r3, r1
 800445a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800445c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004468:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800446c:	2300      	movs	r3, #0
 800446e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004472:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004476:	460b      	mov	r3, r1
 8004478:	4313      	orrs	r3, r2
 800447a:	d03e      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800447c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004480:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004484:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004488:	d022      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800448a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800448e:	d81b      	bhi.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004498:	d00b      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800449a:	e015      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800449c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a0:	3308      	adds	r3, #8
 80044a2:	2100      	movs	r1, #0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fd3b 	bl	8004f20 <RCCEx_PLL2_Config>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044b0:	e00f      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b6:	3328      	adds	r3, #40	@ 0x28
 80044b8:	2102      	movs	r1, #2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fde2 	bl	8005084 <RCCEx_PLL3_Config>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044c6:	e004      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044ce:	e000      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80044d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10b      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044da:	4b4b      	ldr	r3, [pc, #300]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044de:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80044e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044ea:	4a47      	ldr	r2, [pc, #284]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ec:	430b      	orrs	r3, r1
 80044ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80044f0:	e003      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004506:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004508:	2300      	movs	r3, #0
 800450a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800450c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004510:	460b      	mov	r3, r1
 8004512:	4313      	orrs	r3, r2
 8004514:	d03b      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004522:	d01f      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004524:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004528:	d818      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800452a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800452e:	d003      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004530:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004534:	d007      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004536:	e011      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004538:	4b33      	ldr	r3, [pc, #204]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	4a32      	ldr	r2, [pc, #200]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800453e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004544:	e00f      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454a:	3328      	adds	r3, #40	@ 0x28
 800454c:	2101      	movs	r1, #1
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fd98 	bl	8005084 <RCCEx_PLL3_Config>
 8004554:	4603      	mov	r3, r0
 8004556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800455a:	e004      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004562:	e000      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10b      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800456e:	4b26      	ldr	r3, [pc, #152]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004572:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457e:	4a22      	ldr	r2, [pc, #136]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004580:	430b      	orrs	r3, r1
 8004582:	6553      	str	r3, [r2, #84]	@ 0x54
 8004584:	e003      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800458a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800458e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800459a:	673b      	str	r3, [r7, #112]	@ 0x70
 800459c:	2300      	movs	r3, #0
 800459e:	677b      	str	r3, [r7, #116]	@ 0x74
 80045a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80045a4:	460b      	mov	r3, r1
 80045a6:	4313      	orrs	r3, r2
 80045a8:	d034      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80045aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80045b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b8:	d007      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80045ba:	e011      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045bc:	4b12      	ldr	r3, [pc, #72]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c0:	4a11      	ldr	r2, [pc, #68]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045c8:	e00e      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ce:	3308      	adds	r3, #8
 80045d0:	2102      	movs	r1, #2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fca4 	bl	8004f20 <RCCEx_PLL2_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045de:	e003      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10d      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80045f0:	4b05      	ldr	r3, [pc, #20]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045fe:	4a02      	ldr	r2, [pc, #8]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004600:	430b      	orrs	r3, r1
 8004602:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004604:	e006      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004606:	bf00      	nop
 8004608:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004620:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004622:	2300      	movs	r3, #0
 8004624:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004626:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800462a:	460b      	mov	r3, r1
 800462c:	4313      	orrs	r3, r2
 800462e:	d00c      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004634:	3328      	adds	r3, #40	@ 0x28
 8004636:	2102      	movs	r1, #2
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fd23 	bl	8005084 <RCCEx_PLL3_Config>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004656:	663b      	str	r3, [r7, #96]	@ 0x60
 8004658:	2300      	movs	r3, #0
 800465a:	667b      	str	r3, [r7, #100]	@ 0x64
 800465c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004660:	460b      	mov	r3, r1
 8004662:	4313      	orrs	r3, r2
 8004664:	d038      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800466e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004672:	d018      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004674:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004678:	d811      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800467a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800467e:	d014      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004684:	d80b      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d011      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800468a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800468e:	d106      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004690:	4bc3      	ldr	r3, [pc, #780]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004694:	4ac2      	ldr	r2, [pc, #776]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800469a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800469c:	e008      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046a4:	e004      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046a6:	bf00      	nop
 80046a8:	e002      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046aa:	bf00      	nop
 80046ac:	e000      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10b      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046b8:	4bb9      	ldr	r3, [pc, #740]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046bc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80046c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046c8:	4ab5      	ldr	r2, [pc, #724]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ca:	430b      	orrs	r3, r1
 80046cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80046ce:	e003      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80046e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046e6:	2300      	movs	r3, #0
 80046e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046ea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80046ee:	460b      	mov	r3, r1
 80046f0:	4313      	orrs	r3, r2
 80046f2:	d009      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046f4:	4baa      	ldr	r3, [pc, #680]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80046fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004702:	4aa7      	ldr	r2, [pc, #668]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004704:	430b      	orrs	r3, r1
 8004706:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004714:	653b      	str	r3, [r7, #80]	@ 0x50
 8004716:	2300      	movs	r3, #0
 8004718:	657b      	str	r3, [r7, #84]	@ 0x54
 800471a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800471e:	460b      	mov	r3, r1
 8004720:	4313      	orrs	r3, r2
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004724:	4b9e      	ldr	r3, [pc, #632]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004730:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004734:	4a9a      	ldr	r2, [pc, #616]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004736:	430b      	orrs	r3, r1
 8004738:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800473a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004742:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004746:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004748:	2300      	movs	r3, #0
 800474a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800474c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004750:	460b      	mov	r3, r1
 8004752:	4313      	orrs	r3, r2
 8004754:	d009      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004756:	4b92      	ldr	r3, [pc, #584]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800475a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800475e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004764:	4a8e      	ldr	r2, [pc, #568]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004766:	430b      	orrs	r3, r1
 8004768:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800476a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004776:	643b      	str	r3, [r7, #64]	@ 0x40
 8004778:	2300      	movs	r3, #0
 800477a:	647b      	str	r3, [r7, #68]	@ 0x44
 800477c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004780:	460b      	mov	r3, r1
 8004782:	4313      	orrs	r3, r2
 8004784:	d00e      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004786:	4b86      	ldr	r3, [pc, #536]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	4a85      	ldr	r2, [pc, #532]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800478c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004790:	6113      	str	r3, [r2, #16]
 8004792:	4b83      	ldr	r3, [pc, #524]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004794:	6919      	ldr	r1, [r3, #16]
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800479e:	4a80      	ldr	r2, [pc, #512]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80047b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047b2:	2300      	movs	r3, #0
 80047b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047b6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80047ba:	460b      	mov	r3, r1
 80047bc:	4313      	orrs	r3, r2
 80047be:	d009      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047c0:	4b77      	ldr	r3, [pc, #476]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80047c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ce:	4a74      	ldr	r2, [pc, #464]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047d0:	430b      	orrs	r3, r1
 80047d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80047e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80047e2:	2300      	movs	r3, #0
 80047e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80047e6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80047ea:	460b      	mov	r3, r1
 80047ec:	4313      	orrs	r3, r2
 80047ee:	d00a      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047f0:	4b6b      	ldr	r3, [pc, #428]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80047f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004800:	4a67      	ldr	r2, [pc, #412]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004802:	430b      	orrs	r3, r1
 8004804:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	2100      	movs	r1, #0
 8004810:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004818:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800481c:	460b      	mov	r3, r1
 800481e:	4313      	orrs	r3, r2
 8004820:	d011      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004826:	3308      	adds	r3, #8
 8004828:	2100      	movs	r1, #0
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fb78 	bl	8004f20 <RCCEx_PLL2_Config>
 8004830:	4603      	mov	r3, r0
 8004832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004842:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	2100      	movs	r1, #0
 8004850:	6239      	str	r1, [r7, #32]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	627b      	str	r3, [r7, #36]	@ 0x24
 8004858:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800485c:	460b      	mov	r3, r1
 800485e:	4313      	orrs	r3, r2
 8004860:	d011      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004866:	3308      	adds	r3, #8
 8004868:	2101      	movs	r1, #1
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fb58 	bl	8004f20 <RCCEx_PLL2_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004882:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488e:	2100      	movs	r1, #0
 8004890:	61b9      	str	r1, [r7, #24]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	61fb      	str	r3, [r7, #28]
 8004898:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800489c:	460b      	mov	r3, r1
 800489e:	4313      	orrs	r3, r2
 80048a0:	d011      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a6:	3308      	adds	r3, #8
 80048a8:	2102      	movs	r1, #2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fb38 	bl	8004f20 <RCCEx_PLL2_Config>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80048c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ce:	2100      	movs	r1, #0
 80048d0:	6139      	str	r1, [r7, #16]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048dc:	460b      	mov	r3, r1
 80048de:	4313      	orrs	r3, r2
 80048e0:	d011      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e6:	3328      	adds	r3, #40	@ 0x28
 80048e8:	2100      	movs	r1, #0
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fbca 	bl	8005084 <RCCEx_PLL3_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80048f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004902:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	2100      	movs	r1, #0
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800491c:	460b      	mov	r3, r1
 800491e:	4313      	orrs	r3, r2
 8004920:	d011      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004926:	3328      	adds	r3, #40	@ 0x28
 8004928:	2101      	movs	r1, #1
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fbaa 	bl	8005084 <RCCEx_PLL3_Config>
 8004930:	4603      	mov	r3, r0
 8004932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004942:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494e:	2100      	movs	r1, #0
 8004950:	6039      	str	r1, [r7, #0]
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	607b      	str	r3, [r7, #4]
 8004958:	e9d7 1200 	ldrd	r1, r2, [r7]
 800495c:	460b      	mov	r3, r1
 800495e:	4313      	orrs	r3, r2
 8004960:	d011      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004966:	3328      	adds	r3, #40	@ 0x28
 8004968:	2102      	movs	r1, #2
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fb8a 	bl	8005084 <RCCEx_PLL3_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004986:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	e000      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
}
 8004994:	4618      	mov	r0, r3
 8004996:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800499a:	46bd      	mov	sp, r7
 800499c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a0:	58024400 	.word	0x58024400

080049a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80049a8:	f7fe fd96 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 80049ac:	4602      	mov	r2, r0
 80049ae:	4b06      	ldr	r3, [pc, #24]	@ (80049c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	091b      	lsrs	r3, r3, #4
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	4904      	ldr	r1, [pc, #16]	@ (80049cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80049ba:	5ccb      	ldrb	r3, [r1, r3]
 80049bc:	f003 031f 	and.w	r3, r3, #31
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	58024400 	.word	0x58024400
 80049cc:	08007c8c 	.word	0x08007c8c

080049d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b089      	sub	sp, #36	@ 0x24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049d8:	4ba1      	ldr	r3, [pc, #644]	@ (8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80049e2:	4b9f      	ldr	r3, [pc, #636]	@ (8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e6:	0b1b      	lsrs	r3, r3, #12
 80049e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80049ee:	4b9c      	ldr	r3, [pc, #624]	@ (8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f2:	091b      	lsrs	r3, r3, #4
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80049fa:	4b99      	ldr	r3, [pc, #612]	@ (8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fe:	08db      	lsrs	r3, r3, #3
 8004a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	fb02 f303 	mul.w	r3, r2, r3
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8111 	beq.w	8004c40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	f000 8083 	beq.w	8004b2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	f200 80a1 	bhi.w	8004b70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d056      	beq.n	8004ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a3a:	e099      	b.n	8004b70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a3c:	4b88      	ldr	r3, [pc, #544]	@ (8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d02d      	beq.n	8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a48:	4b85      	ldr	r3, [pc, #532]	@ (8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	08db      	lsrs	r3, r3, #3
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	4a84      	ldr	r2, [pc, #528]	@ (8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
 8004a58:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	ee07 3a90 	vmov	s15, r3
 8004a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a72:	4b7b      	ldr	r3, [pc, #492]	@ (8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a86:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004aa2:	e087      	b.n	8004bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ae6:	e065      	b.n	8004bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004afa:	4b59      	ldr	r3, [pc, #356]	@ (8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b0e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b2a:	e043      	b.n	8004bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b36:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3e:	4b48      	ldr	r3, [pc, #288]	@ (8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b52:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b6e:	e021      	b.n	8004bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b82:	4b37      	ldr	r3, [pc, #220]	@ (8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b96:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bb2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb8:	0a5b      	lsrs	r3, r3, #9
 8004bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bce:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bda:	ee17 2a90 	vmov	r2, s15
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004be2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be6:	0c1b      	lsrs	r3, r3, #16
 8004be8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bec:	ee07 3a90 	vmov	s15, r3
 8004bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c08:	ee17 2a90 	vmov	r2, s15
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004c10:	4b13      	ldr	r3, [pc, #76]	@ (8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c14:	0e1b      	lsrs	r3, r3, #24
 8004c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c36:	ee17 2a90 	vmov	r2, s15
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c3e:	e008      	b.n	8004c52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	609a      	str	r2, [r3, #8]
}
 8004c52:	bf00      	nop
 8004c54:	3724      	adds	r7, #36	@ 0x24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	58024400 	.word	0x58024400
 8004c64:	03d09000 	.word	0x03d09000
 8004c68:	46000000 	.word	0x46000000
 8004c6c:	4c742400 	.word	0x4c742400
 8004c70:	4a742400 	.word	0x4a742400
 8004c74:	4af42400 	.word	0x4af42400

08004c78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b089      	sub	sp, #36	@ 0x24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c80:	4ba1      	ldr	r3, [pc, #644]	@ (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c84:	f003 0303 	and.w	r3, r3, #3
 8004c88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c8a:	4b9f      	ldr	r3, [pc, #636]	@ (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8e:	0d1b      	lsrs	r3, r3, #20
 8004c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c96:	4b9c      	ldr	r3, [pc, #624]	@ (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9a:	0a1b      	lsrs	r3, r3, #8
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004ca2:	4b99      	ldr	r3, [pc, #612]	@ (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca6:	08db      	lsrs	r3, r3, #3
 8004ca8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8111 	beq.w	8004ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	f000 8083 	beq.w	8004dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	f200 80a1 	bhi.w	8004e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d056      	beq.n	8004d90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004ce2:	e099      	b.n	8004e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ce4:	4b88      	ldr	r3, [pc, #544]	@ (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d02d      	beq.n	8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cf0:	4b85      	ldr	r3, [pc, #532]	@ (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	08db      	lsrs	r3, r3, #3
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	4a84      	ldr	r2, [pc, #528]	@ (8004f0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004d00:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	ee07 3a90 	vmov	s15, r3
 8004d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	ee07 3a90 	vmov	s15, r3
 8004d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d1a:	4b7b      	ldr	r3, [pc, #492]	@ (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d4a:	e087      	b.n	8004e5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004f14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d8e:	e065      	b.n	8004e5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004f18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004da2:	4b59      	ldr	r3, [pc, #356]	@ (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004db6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dd2:	e043      	b.n	8004e5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dde:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de6:	4b48      	ldr	r3, [pc, #288]	@ (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dfa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e16:	e021      	b.n	8004e5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e22:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004f18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2a:	4b37      	ldr	r3, [pc, #220]	@ (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e3e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e60:	0a5b      	lsrs	r3, r3, #9
 8004e62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e76:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e82:	ee17 2a90 	vmov	r2, s15
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8e:	0c1b      	lsrs	r3, r3, #16
 8004e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e94:	ee07 3a90 	vmov	s15, r3
 8004e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ea0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ea4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eb0:	ee17 2a90 	vmov	r2, s15
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004eb8:	4b13      	ldr	r3, [pc, #76]	@ (8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebc:	0e1b      	lsrs	r3, r3, #24
 8004ebe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ece:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ed2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ede:	ee17 2a90 	vmov	r2, s15
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004ee6:	e008      	b.n	8004efa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	609a      	str	r2, [r3, #8]
}
 8004efa:	bf00      	nop
 8004efc:	3724      	adds	r7, #36	@ 0x24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	58024400 	.word	0x58024400
 8004f0c:	03d09000 	.word	0x03d09000
 8004f10:	46000000 	.word	0x46000000
 8004f14:	4c742400 	.word	0x4c742400
 8004f18:	4a742400 	.word	0x4a742400
 8004f1c:	4af42400 	.word	0x4af42400

08004f20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f2e:	4b53      	ldr	r3, [pc, #332]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8004f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d101      	bne.n	8004f3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e099      	b.n	8005072 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f3e:	4b4f      	ldr	r3, [pc, #316]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a4e      	ldr	r2, [pc, #312]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8004f44:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f4a:	f7fc fa8f 	bl	800146c <HAL_GetTick>
 8004f4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f50:	e008      	b.n	8004f64 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f52:	f7fc fa8b 	bl	800146c <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e086      	b.n	8005072 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f64:	4b45      	ldr	r3, [pc, #276]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1f0      	bne.n	8004f52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f70:	4b42      	ldr	r3, [pc, #264]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8004f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f74:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	031b      	lsls	r3, r3, #12
 8004f7e:	493f      	ldr	r1, [pc, #252]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	025b      	lsls	r3, r3, #9
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	041b      	lsls	r3, r3, #16
 8004fa2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	061b      	lsls	r3, r3, #24
 8004fb0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004fb4:	4931      	ldr	r1, [pc, #196]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004fba:	4b30      	ldr	r3, [pc, #192]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8004fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	492d      	ldr	r1, [pc, #180]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8004fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd0:	f023 0220 	bic.w	r2, r3, #32
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	4928      	ldr	r1, [pc, #160]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004fde:	4b27      	ldr	r3, [pc, #156]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8004fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe2:	4a26      	ldr	r2, [pc, #152]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8004fe4:	f023 0310 	bic.w	r3, r3, #16
 8004fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004fea:	4b24      	ldr	r3, [pc, #144]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8004fec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fee:	4b24      	ldr	r3, [pc, #144]	@ (8005080 <RCCEx_PLL2_Config+0x160>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	69d2      	ldr	r2, [r2, #28]
 8004ff6:	00d2      	lsls	r2, r2, #3
 8004ff8:	4920      	ldr	r1, [pc, #128]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8005000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005002:	4a1e      	ldr	r2, [pc, #120]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8005004:	f043 0310 	orr.w	r3, r3, #16
 8005008:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005010:	4b1a      	ldr	r3, [pc, #104]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8005012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005014:	4a19      	ldr	r2, [pc, #100]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8005016:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800501a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800501c:	e00f      	b.n	800503e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d106      	bne.n	8005032 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005024:	4b15      	ldr	r3, [pc, #84]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8005026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005028:	4a14      	ldr	r2, [pc, #80]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 800502a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800502e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005030:	e005      	b.n	800503e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005032:	4b12      	ldr	r3, [pc, #72]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8005034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005036:	4a11      	ldr	r2, [pc, #68]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8005038:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800503c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800503e:	4b0f      	ldr	r3, [pc, #60]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a0e      	ldr	r2, [pc, #56]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8005044:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800504a:	f7fc fa0f 	bl	800146c <HAL_GetTick>
 800504e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005050:	e008      	b.n	8005064 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005052:	f7fc fa0b 	bl	800146c <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e006      	b.n	8005072 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005064:	4b05      	ldr	r3, [pc, #20]	@ (800507c <RCCEx_PLL2_Config+0x15c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005070:	7bfb      	ldrb	r3, [r7, #15]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	58024400 	.word	0x58024400
 8005080:	ffff0007 	.word	0xffff0007

08005084 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005092:	4b53      	ldr	r3, [pc, #332]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b03      	cmp	r3, #3
 800509c:	d101      	bne.n	80050a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e099      	b.n	80051d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80050a2:	4b4f      	ldr	r3, [pc, #316]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a4e      	ldr	r2, [pc, #312]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 80050a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ae:	f7fc f9dd 	bl	800146c <HAL_GetTick>
 80050b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050b4:	e008      	b.n	80050c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050b6:	f7fc f9d9 	bl	800146c <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d901      	bls.n	80050c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e086      	b.n	80051d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050c8:	4b45      	ldr	r3, [pc, #276]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f0      	bne.n	80050b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80050d4:	4b42      	ldr	r3, [pc, #264]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 80050d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	051b      	lsls	r3, r3, #20
 80050e2:	493f      	ldr	r1, [pc, #252]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	025b      	lsls	r3, r3, #9
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	3b01      	subs	r3, #1
 8005104:	041b      	lsls	r3, r3, #16
 8005106:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	3b01      	subs	r3, #1
 8005112:	061b      	lsls	r3, r3, #24
 8005114:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005118:	4931      	ldr	r1, [pc, #196]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 800511a:	4313      	orrs	r3, r2
 800511c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800511e:	4b30      	ldr	r3, [pc, #192]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005122:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	492d      	ldr	r1, [pc, #180]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 800512c:	4313      	orrs	r3, r2
 800512e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005130:	4b2b      	ldr	r3, [pc, #172]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005134:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	4928      	ldr	r1, [pc, #160]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 800513e:	4313      	orrs	r3, r2
 8005140:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005142:	4b27      	ldr	r3, [pc, #156]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005146:	4a26      	ldr	r2, [pc, #152]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800514c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800514e:	4b24      	ldr	r3, [pc, #144]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005152:	4b24      	ldr	r3, [pc, #144]	@ (80051e4 <RCCEx_PLL3_Config+0x160>)
 8005154:	4013      	ands	r3, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	69d2      	ldr	r2, [r2, #28]
 800515a:	00d2      	lsls	r2, r2, #3
 800515c:	4920      	ldr	r1, [pc, #128]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 800515e:	4313      	orrs	r3, r2
 8005160:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005162:	4b1f      	ldr	r3, [pc, #124]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005166:	4a1e      	ldr	r2, [pc, #120]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800516c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d106      	bne.n	8005182 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005174:	4b1a      	ldr	r3, [pc, #104]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005178:	4a19      	ldr	r2, [pc, #100]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 800517a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800517e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005180:	e00f      	b.n	80051a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d106      	bne.n	8005196 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005188:	4b15      	ldr	r3, [pc, #84]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 800518a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518c:	4a14      	ldr	r2, [pc, #80]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 800518e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005192:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005194:	e005      	b.n	80051a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005196:	4b12      	ldr	r3, [pc, #72]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 8005198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519a:	4a11      	ldr	r2, [pc, #68]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 800519c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80051a2:	4b0f      	ldr	r3, [pc, #60]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a0e      	ldr	r2, [pc, #56]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 80051a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ae:	f7fc f95d 	bl	800146c <HAL_GetTick>
 80051b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051b4:	e008      	b.n	80051c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051b6:	f7fc f959 	bl	800146c <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e006      	b.n	80051d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051c8:	4b05      	ldr	r3, [pc, #20]	@ (80051e0 <RCCEx_PLL3_Config+0x15c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	58024400 	.word	0x58024400
 80051e4:	ffff0007 	.word	0xffff0007

080051e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e049      	b.n	800528e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d106      	bne.n	8005214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7fb fe82 	bl	8000f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3304      	adds	r3, #4
 8005224:	4619      	mov	r1, r3
 8005226:	4610      	mov	r0, r2
 8005228:	f000 fc46 	bl	8005ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b082      	sub	sp, #8
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e049      	b.n	800533c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d106      	bne.n	80052c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f841 	bl	8005344 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2202      	movs	r2, #2
 80052c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3304      	adds	r3, #4
 80052d2:	4619      	mov	r1, r3
 80052d4:	4610      	mov	r0, r2
 80052d6:	f000 fbef 	bl	8005ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d109      	bne.n	800537c <HAL_TIM_PWM_Start+0x24>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	bf14      	ite	ne
 8005374:	2301      	movne	r3, #1
 8005376:	2300      	moveq	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	e03c      	b.n	80053f6 <HAL_TIM_PWM_Start+0x9e>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b04      	cmp	r3, #4
 8005380:	d109      	bne.n	8005396 <HAL_TIM_PWM_Start+0x3e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b01      	cmp	r3, #1
 800538c:	bf14      	ite	ne
 800538e:	2301      	movne	r3, #1
 8005390:	2300      	moveq	r3, #0
 8005392:	b2db      	uxtb	r3, r3
 8005394:	e02f      	b.n	80053f6 <HAL_TIM_PWM_Start+0x9e>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b08      	cmp	r3, #8
 800539a:	d109      	bne.n	80053b0 <HAL_TIM_PWM_Start+0x58>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	bf14      	ite	ne
 80053a8:	2301      	movne	r3, #1
 80053aa:	2300      	moveq	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	e022      	b.n	80053f6 <HAL_TIM_PWM_Start+0x9e>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b0c      	cmp	r3, #12
 80053b4:	d109      	bne.n	80053ca <HAL_TIM_PWM_Start+0x72>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b01      	cmp	r3, #1
 80053c0:	bf14      	ite	ne
 80053c2:	2301      	movne	r3, #1
 80053c4:	2300      	moveq	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	e015      	b.n	80053f6 <HAL_TIM_PWM_Start+0x9e>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	d109      	bne.n	80053e4 <HAL_TIM_PWM_Start+0x8c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b01      	cmp	r3, #1
 80053da:	bf14      	ite	ne
 80053dc:	2301      	movne	r3, #1
 80053de:	2300      	moveq	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	e008      	b.n	80053f6 <HAL_TIM_PWM_Start+0x9e>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	bf14      	ite	ne
 80053f0:	2301      	movne	r3, #1
 80053f2:	2300      	moveq	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e0a1      	b.n	8005542 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <HAL_TIM_PWM_Start+0xb6>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800540c:	e023      	b.n	8005456 <HAL_TIM_PWM_Start+0xfe>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b04      	cmp	r3, #4
 8005412:	d104      	bne.n	800541e <HAL_TIM_PWM_Start+0xc6>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800541c:	e01b      	b.n	8005456 <HAL_TIM_PWM_Start+0xfe>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b08      	cmp	r3, #8
 8005422:	d104      	bne.n	800542e <HAL_TIM_PWM_Start+0xd6>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800542c:	e013      	b.n	8005456 <HAL_TIM_PWM_Start+0xfe>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b0c      	cmp	r3, #12
 8005432:	d104      	bne.n	800543e <HAL_TIM_PWM_Start+0xe6>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800543c:	e00b      	b.n	8005456 <HAL_TIM_PWM_Start+0xfe>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b10      	cmp	r3, #16
 8005442:	d104      	bne.n	800544e <HAL_TIM_PWM_Start+0xf6>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800544c:	e003      	b.n	8005456 <HAL_TIM_PWM_Start+0xfe>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2202      	movs	r2, #2
 8005452:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2201      	movs	r2, #1
 800545c:	6839      	ldr	r1, [r7, #0]
 800545e:	4618      	mov	r0, r3
 8005460:	f000 ff44 	bl	80062ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a38      	ldr	r2, [pc, #224]	@ (800554c <HAL_TIM_PWM_Start+0x1f4>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d013      	beq.n	8005496 <HAL_TIM_PWM_Start+0x13e>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a37      	ldr	r2, [pc, #220]	@ (8005550 <HAL_TIM_PWM_Start+0x1f8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00e      	beq.n	8005496 <HAL_TIM_PWM_Start+0x13e>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a35      	ldr	r2, [pc, #212]	@ (8005554 <HAL_TIM_PWM_Start+0x1fc>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d009      	beq.n	8005496 <HAL_TIM_PWM_Start+0x13e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a34      	ldr	r2, [pc, #208]	@ (8005558 <HAL_TIM_PWM_Start+0x200>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d004      	beq.n	8005496 <HAL_TIM_PWM_Start+0x13e>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a32      	ldr	r2, [pc, #200]	@ (800555c <HAL_TIM_PWM_Start+0x204>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d101      	bne.n	800549a <HAL_TIM_PWM_Start+0x142>
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <HAL_TIM_PWM_Start+0x144>
 800549a:	2300      	movs	r3, #0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d007      	beq.n	80054b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a25      	ldr	r2, [pc, #148]	@ (800554c <HAL_TIM_PWM_Start+0x1f4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d022      	beq.n	8005500 <HAL_TIM_PWM_Start+0x1a8>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c2:	d01d      	beq.n	8005500 <HAL_TIM_PWM_Start+0x1a8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a25      	ldr	r2, [pc, #148]	@ (8005560 <HAL_TIM_PWM_Start+0x208>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d018      	beq.n	8005500 <HAL_TIM_PWM_Start+0x1a8>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a24      	ldr	r2, [pc, #144]	@ (8005564 <HAL_TIM_PWM_Start+0x20c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d013      	beq.n	8005500 <HAL_TIM_PWM_Start+0x1a8>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a22      	ldr	r2, [pc, #136]	@ (8005568 <HAL_TIM_PWM_Start+0x210>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00e      	beq.n	8005500 <HAL_TIM_PWM_Start+0x1a8>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005550 <HAL_TIM_PWM_Start+0x1f8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d009      	beq.n	8005500 <HAL_TIM_PWM_Start+0x1a8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1e      	ldr	r2, [pc, #120]	@ (800556c <HAL_TIM_PWM_Start+0x214>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d004      	beq.n	8005500 <HAL_TIM_PWM_Start+0x1a8>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a16      	ldr	r2, [pc, #88]	@ (8005554 <HAL_TIM_PWM_Start+0x1fc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d115      	bne.n	800552c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	4b1a      	ldr	r3, [pc, #104]	@ (8005570 <HAL_TIM_PWM_Start+0x218>)
 8005508:	4013      	ands	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b06      	cmp	r3, #6
 8005510:	d015      	beq.n	800553e <HAL_TIM_PWM_Start+0x1e6>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005518:	d011      	beq.n	800553e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0201 	orr.w	r2, r2, #1
 8005528:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552a:	e008      	b.n	800553e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0201 	orr.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	e000      	b.n	8005540 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40010000 	.word	0x40010000
 8005550:	40010400 	.word	0x40010400
 8005554:	40014000 	.word	0x40014000
 8005558:	40014400 	.word	0x40014400
 800555c:	40014800 	.word	0x40014800
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800
 8005568:	40000c00 	.word	0x40000c00
 800556c:	40001800 	.word	0x40001800
 8005570:	00010007 	.word	0x00010007

08005574 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2200      	movs	r2, #0
 8005584:	6839      	ldr	r1, [r7, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f000 feb0 	bl	80062ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a3e      	ldr	r2, [pc, #248]	@ (800568c <HAL_TIM_PWM_Stop+0x118>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d013      	beq.n	80055be <HAL_TIM_PWM_Stop+0x4a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a3d      	ldr	r2, [pc, #244]	@ (8005690 <HAL_TIM_PWM_Stop+0x11c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00e      	beq.n	80055be <HAL_TIM_PWM_Stop+0x4a>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a3b      	ldr	r2, [pc, #236]	@ (8005694 <HAL_TIM_PWM_Stop+0x120>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d009      	beq.n	80055be <HAL_TIM_PWM_Stop+0x4a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a3a      	ldr	r2, [pc, #232]	@ (8005698 <HAL_TIM_PWM_Stop+0x124>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d004      	beq.n	80055be <HAL_TIM_PWM_Stop+0x4a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a38      	ldr	r2, [pc, #224]	@ (800569c <HAL_TIM_PWM_Stop+0x128>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d101      	bne.n	80055c2 <HAL_TIM_PWM_Stop+0x4e>
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <HAL_TIM_PWM_Stop+0x50>
 80055c2:	2300      	movs	r3, #0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d017      	beq.n	80055f8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6a1a      	ldr	r2, [r3, #32]
 80055ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80055d2:	4013      	ands	r3, r2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10f      	bne.n	80055f8 <HAL_TIM_PWM_Stop+0x84>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6a1a      	ldr	r2, [r3, #32]
 80055de:	f240 4344 	movw	r3, #1092	@ 0x444
 80055e2:	4013      	ands	r3, r2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d107      	bne.n	80055f8 <HAL_TIM_PWM_Stop+0x84>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6a1a      	ldr	r2, [r3, #32]
 80055fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005602:	4013      	ands	r3, r2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10f      	bne.n	8005628 <HAL_TIM_PWM_Stop+0xb4>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6a1a      	ldr	r2, [r3, #32]
 800560e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005612:	4013      	ands	r3, r2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d107      	bne.n	8005628 <HAL_TIM_PWM_Stop+0xb4>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0201 	bic.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d104      	bne.n	8005638 <HAL_TIM_PWM_Stop+0xc4>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005636:	e023      	b.n	8005680 <HAL_TIM_PWM_Stop+0x10c>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2b04      	cmp	r3, #4
 800563c:	d104      	bne.n	8005648 <HAL_TIM_PWM_Stop+0xd4>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005646:	e01b      	b.n	8005680 <HAL_TIM_PWM_Stop+0x10c>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b08      	cmp	r3, #8
 800564c:	d104      	bne.n	8005658 <HAL_TIM_PWM_Stop+0xe4>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005656:	e013      	b.n	8005680 <HAL_TIM_PWM_Stop+0x10c>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b0c      	cmp	r3, #12
 800565c:	d104      	bne.n	8005668 <HAL_TIM_PWM_Stop+0xf4>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005666:	e00b      	b.n	8005680 <HAL_TIM_PWM_Stop+0x10c>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2b10      	cmp	r3, #16
 800566c:	d104      	bne.n	8005678 <HAL_TIM_PWM_Stop+0x104>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005676:	e003      	b.n	8005680 <HAL_TIM_PWM_Stop+0x10c>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	40010000 	.word	0x40010000
 8005690:	40010400 	.word	0x40010400
 8005694:	40014000 	.word	0x40014000
 8005698:	40014400 	.word	0x40014400
 800569c:	40014800 	.word	0x40014800

080056a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e0ff      	b.n	80058be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b14      	cmp	r3, #20
 80056ca:	f200 80f0 	bhi.w	80058ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80056ce:	a201      	add	r2, pc, #4	@ (adr r2, 80056d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d4:	08005729 	.word	0x08005729
 80056d8:	080058af 	.word	0x080058af
 80056dc:	080058af 	.word	0x080058af
 80056e0:	080058af 	.word	0x080058af
 80056e4:	08005769 	.word	0x08005769
 80056e8:	080058af 	.word	0x080058af
 80056ec:	080058af 	.word	0x080058af
 80056f0:	080058af 	.word	0x080058af
 80056f4:	080057ab 	.word	0x080057ab
 80056f8:	080058af 	.word	0x080058af
 80056fc:	080058af 	.word	0x080058af
 8005700:	080058af 	.word	0x080058af
 8005704:	080057eb 	.word	0x080057eb
 8005708:	080058af 	.word	0x080058af
 800570c:	080058af 	.word	0x080058af
 8005710:	080058af 	.word	0x080058af
 8005714:	0800582d 	.word	0x0800582d
 8005718:	080058af 	.word	0x080058af
 800571c:	080058af 	.word	0x080058af
 8005720:	080058af 	.word	0x080058af
 8005724:	0800586d 	.word	0x0800586d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	4618      	mov	r0, r3
 8005730:	f000 fa68 	bl	8005c04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	699a      	ldr	r2, [r3, #24]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0208 	orr.w	r2, r2, #8
 8005742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0204 	bic.w	r2, r2, #4
 8005752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6999      	ldr	r1, [r3, #24]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	619a      	str	r2, [r3, #24]
      break;
 8005766:	e0a5      	b.n	80058b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68b9      	ldr	r1, [r7, #8]
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fad8 	bl	8005d24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699a      	ldr	r2, [r3, #24]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6999      	ldr	r1, [r3, #24]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	021a      	lsls	r2, r3, #8
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	619a      	str	r2, [r3, #24]
      break;
 80057a8:	e084      	b.n	80058b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fb41 	bl	8005e38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69da      	ldr	r2, [r3, #28]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0208 	orr.w	r2, r2, #8
 80057c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69da      	ldr	r2, [r3, #28]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0204 	bic.w	r2, r2, #4
 80057d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69d9      	ldr	r1, [r3, #28]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	61da      	str	r2, [r3, #28]
      break;
 80057e8:	e064      	b.n	80058b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 fba9 	bl	8005f48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69da      	ldr	r2, [r3, #28]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	69da      	ldr	r2, [r3, #28]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69d9      	ldr	r1, [r3, #28]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	021a      	lsls	r2, r3, #8
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	61da      	str	r2, [r3, #28]
      break;
 800582a:	e043      	b.n	80058b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	4618      	mov	r0, r3
 8005834:	f000 fbf2 	bl	800601c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0208 	orr.w	r2, r2, #8
 8005846:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0204 	bic.w	r2, r2, #4
 8005856:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	691a      	ldr	r2, [r3, #16]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800586a:	e023      	b.n	80058b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fc36 	bl	80060e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005886:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005896:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	021a      	lsls	r2, r3, #8
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80058ac:	e002      	b.n	80058b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	75fb      	strb	r3, [r7, #23]
      break;
 80058b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop

080058c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_TIM_ConfigClockSource+0x1c>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e0dc      	b.n	8005a9e <HAL_TIM_ConfigClockSource+0x1d6>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	4b6a      	ldr	r3, [pc, #424]	@ (8005aa8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005900:	4013      	ands	r3, r2
 8005902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800590a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a64      	ldr	r2, [pc, #400]	@ (8005aac <HAL_TIM_ConfigClockSource+0x1e4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	f000 80a9 	beq.w	8005a72 <HAL_TIM_ConfigClockSource+0x1aa>
 8005920:	4a62      	ldr	r2, [pc, #392]	@ (8005aac <HAL_TIM_ConfigClockSource+0x1e4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	f200 80ae 	bhi.w	8005a84 <HAL_TIM_ConfigClockSource+0x1bc>
 8005928:	4a61      	ldr	r2, [pc, #388]	@ (8005ab0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	f000 80a1 	beq.w	8005a72 <HAL_TIM_ConfigClockSource+0x1aa>
 8005930:	4a5f      	ldr	r2, [pc, #380]	@ (8005ab0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005932:	4293      	cmp	r3, r2
 8005934:	f200 80a6 	bhi.w	8005a84 <HAL_TIM_ConfigClockSource+0x1bc>
 8005938:	4a5e      	ldr	r2, [pc, #376]	@ (8005ab4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800593a:	4293      	cmp	r3, r2
 800593c:	f000 8099 	beq.w	8005a72 <HAL_TIM_ConfigClockSource+0x1aa>
 8005940:	4a5c      	ldr	r2, [pc, #368]	@ (8005ab4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005942:	4293      	cmp	r3, r2
 8005944:	f200 809e 	bhi.w	8005a84 <HAL_TIM_ConfigClockSource+0x1bc>
 8005948:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800594c:	f000 8091 	beq.w	8005a72 <HAL_TIM_ConfigClockSource+0x1aa>
 8005950:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005954:	f200 8096 	bhi.w	8005a84 <HAL_TIM_ConfigClockSource+0x1bc>
 8005958:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800595c:	f000 8089 	beq.w	8005a72 <HAL_TIM_ConfigClockSource+0x1aa>
 8005960:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005964:	f200 808e 	bhi.w	8005a84 <HAL_TIM_ConfigClockSource+0x1bc>
 8005968:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800596c:	d03e      	beq.n	80059ec <HAL_TIM_ConfigClockSource+0x124>
 800596e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005972:	f200 8087 	bhi.w	8005a84 <HAL_TIM_ConfigClockSource+0x1bc>
 8005976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800597a:	f000 8086 	beq.w	8005a8a <HAL_TIM_ConfigClockSource+0x1c2>
 800597e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005982:	d87f      	bhi.n	8005a84 <HAL_TIM_ConfigClockSource+0x1bc>
 8005984:	2b70      	cmp	r3, #112	@ 0x70
 8005986:	d01a      	beq.n	80059be <HAL_TIM_ConfigClockSource+0xf6>
 8005988:	2b70      	cmp	r3, #112	@ 0x70
 800598a:	d87b      	bhi.n	8005a84 <HAL_TIM_ConfigClockSource+0x1bc>
 800598c:	2b60      	cmp	r3, #96	@ 0x60
 800598e:	d050      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x16a>
 8005990:	2b60      	cmp	r3, #96	@ 0x60
 8005992:	d877      	bhi.n	8005a84 <HAL_TIM_ConfigClockSource+0x1bc>
 8005994:	2b50      	cmp	r3, #80	@ 0x50
 8005996:	d03c      	beq.n	8005a12 <HAL_TIM_ConfigClockSource+0x14a>
 8005998:	2b50      	cmp	r3, #80	@ 0x50
 800599a:	d873      	bhi.n	8005a84 <HAL_TIM_ConfigClockSource+0x1bc>
 800599c:	2b40      	cmp	r3, #64	@ 0x40
 800599e:	d058      	beq.n	8005a52 <HAL_TIM_ConfigClockSource+0x18a>
 80059a0:	2b40      	cmp	r3, #64	@ 0x40
 80059a2:	d86f      	bhi.n	8005a84 <HAL_TIM_ConfigClockSource+0x1bc>
 80059a4:	2b30      	cmp	r3, #48	@ 0x30
 80059a6:	d064      	beq.n	8005a72 <HAL_TIM_ConfigClockSource+0x1aa>
 80059a8:	2b30      	cmp	r3, #48	@ 0x30
 80059aa:	d86b      	bhi.n	8005a84 <HAL_TIM_ConfigClockSource+0x1bc>
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d060      	beq.n	8005a72 <HAL_TIM_ConfigClockSource+0x1aa>
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	d867      	bhi.n	8005a84 <HAL_TIM_ConfigClockSource+0x1bc>
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d05c      	beq.n	8005a72 <HAL_TIM_ConfigClockSource+0x1aa>
 80059b8:	2b10      	cmp	r3, #16
 80059ba:	d05a      	beq.n	8005a72 <HAL_TIM_ConfigClockSource+0x1aa>
 80059bc:	e062      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059ce:	f000 fc6d 	bl	80062ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80059e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	609a      	str	r2, [r3, #8]
      break;
 80059ea:	e04f      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059fc:	f000 fc56 	bl	80062ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a0e:	609a      	str	r2, [r3, #8]
      break;
 8005a10:	e03c      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f000 fbc6 	bl	80061b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2150      	movs	r1, #80	@ 0x50
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fc20 	bl	8006270 <TIM_ITRx_SetConfig>
      break;
 8005a30:	e02c      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f000 fbe5 	bl	800620e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2160      	movs	r1, #96	@ 0x60
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fc10 	bl	8006270 <TIM_ITRx_SetConfig>
      break;
 8005a50:	e01c      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f000 fba6 	bl	80061b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2140      	movs	r1, #64	@ 0x40
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fc00 	bl	8006270 <TIM_ITRx_SetConfig>
      break;
 8005a70:	e00c      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	f000 fbf7 	bl	8006270 <TIM_ITRx_SetConfig>
      break;
 8005a82:	e003      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]
      break;
 8005a88:	e000      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005a8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	ffceff88 	.word	0xffceff88
 8005aac:	00100040 	.word	0x00100040
 8005ab0:	00100030 	.word	0x00100030
 8005ab4:	00100020 	.word	0x00100020

08005ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a46      	ldr	r2, [pc, #280]	@ (8005be4 <TIM_Base_SetConfig+0x12c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d013      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad6:	d00f      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a43      	ldr	r2, [pc, #268]	@ (8005be8 <TIM_Base_SetConfig+0x130>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00b      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a42      	ldr	r2, [pc, #264]	@ (8005bec <TIM_Base_SetConfig+0x134>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d007      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a41      	ldr	r2, [pc, #260]	@ (8005bf0 <TIM_Base_SetConfig+0x138>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d003      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a40      	ldr	r2, [pc, #256]	@ (8005bf4 <TIM_Base_SetConfig+0x13c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d108      	bne.n	8005b0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a35      	ldr	r2, [pc, #212]	@ (8005be4 <TIM_Base_SetConfig+0x12c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d01f      	beq.n	8005b52 <TIM_Base_SetConfig+0x9a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b18:	d01b      	beq.n	8005b52 <TIM_Base_SetConfig+0x9a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a32      	ldr	r2, [pc, #200]	@ (8005be8 <TIM_Base_SetConfig+0x130>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d017      	beq.n	8005b52 <TIM_Base_SetConfig+0x9a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a31      	ldr	r2, [pc, #196]	@ (8005bec <TIM_Base_SetConfig+0x134>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d013      	beq.n	8005b52 <TIM_Base_SetConfig+0x9a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a30      	ldr	r2, [pc, #192]	@ (8005bf0 <TIM_Base_SetConfig+0x138>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00f      	beq.n	8005b52 <TIM_Base_SetConfig+0x9a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a2f      	ldr	r2, [pc, #188]	@ (8005bf4 <TIM_Base_SetConfig+0x13c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00b      	beq.n	8005b52 <TIM_Base_SetConfig+0x9a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a2e      	ldr	r2, [pc, #184]	@ (8005bf8 <TIM_Base_SetConfig+0x140>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d007      	beq.n	8005b52 <TIM_Base_SetConfig+0x9a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a2d      	ldr	r2, [pc, #180]	@ (8005bfc <TIM_Base_SetConfig+0x144>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d003      	beq.n	8005b52 <TIM_Base_SetConfig+0x9a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a2c      	ldr	r2, [pc, #176]	@ (8005c00 <TIM_Base_SetConfig+0x148>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d108      	bne.n	8005b64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a16      	ldr	r2, [pc, #88]	@ (8005be4 <TIM_Base_SetConfig+0x12c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00f      	beq.n	8005bb0 <TIM_Base_SetConfig+0xf8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a18      	ldr	r2, [pc, #96]	@ (8005bf4 <TIM_Base_SetConfig+0x13c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00b      	beq.n	8005bb0 <TIM_Base_SetConfig+0xf8>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a17      	ldr	r2, [pc, #92]	@ (8005bf8 <TIM_Base_SetConfig+0x140>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d007      	beq.n	8005bb0 <TIM_Base_SetConfig+0xf8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a16      	ldr	r2, [pc, #88]	@ (8005bfc <TIM_Base_SetConfig+0x144>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d003      	beq.n	8005bb0 <TIM_Base_SetConfig+0xf8>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a15      	ldr	r2, [pc, #84]	@ (8005c00 <TIM_Base_SetConfig+0x148>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d103      	bne.n	8005bb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d105      	bne.n	8005bd6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f023 0201 	bic.w	r2, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	611a      	str	r2, [r3, #16]
  }
}
 8005bd6:	bf00      	nop
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40010000 	.word	0x40010000
 8005be8:	40000400 	.word	0x40000400
 8005bec:	40000800 	.word	0x40000800
 8005bf0:	40000c00 	.word	0x40000c00
 8005bf4:	40010400 	.word	0x40010400
 8005bf8:	40014000 	.word	0x40014000
 8005bfc:	40014400 	.word	0x40014400
 8005c00:	40014800 	.word	0x40014800

08005c04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	f023 0201 	bic.w	r2, r3, #1
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4b37      	ldr	r3, [pc, #220]	@ (8005d0c <TIM_OC1_SetConfig+0x108>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0303 	bic.w	r3, r3, #3
 8005c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f023 0302 	bic.w	r3, r3, #2
 8005c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a2d      	ldr	r2, [pc, #180]	@ (8005d10 <TIM_OC1_SetConfig+0x10c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d00f      	beq.n	8005c80 <TIM_OC1_SetConfig+0x7c>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a2c      	ldr	r2, [pc, #176]	@ (8005d14 <TIM_OC1_SetConfig+0x110>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00b      	beq.n	8005c80 <TIM_OC1_SetConfig+0x7c>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a2b      	ldr	r2, [pc, #172]	@ (8005d18 <TIM_OC1_SetConfig+0x114>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d007      	beq.n	8005c80 <TIM_OC1_SetConfig+0x7c>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a2a      	ldr	r2, [pc, #168]	@ (8005d1c <TIM_OC1_SetConfig+0x118>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_OC1_SetConfig+0x7c>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a29      	ldr	r2, [pc, #164]	@ (8005d20 <TIM_OC1_SetConfig+0x11c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d10c      	bne.n	8005c9a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f023 0308 	bic.w	r3, r3, #8
 8005c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f023 0304 	bic.w	r3, r3, #4
 8005c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8005d10 <TIM_OC1_SetConfig+0x10c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d00f      	beq.n	8005cc2 <TIM_OC1_SetConfig+0xbe>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8005d14 <TIM_OC1_SetConfig+0x110>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00b      	beq.n	8005cc2 <TIM_OC1_SetConfig+0xbe>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a1a      	ldr	r2, [pc, #104]	@ (8005d18 <TIM_OC1_SetConfig+0x114>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d007      	beq.n	8005cc2 <TIM_OC1_SetConfig+0xbe>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a19      	ldr	r2, [pc, #100]	@ (8005d1c <TIM_OC1_SetConfig+0x118>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d003      	beq.n	8005cc2 <TIM_OC1_SetConfig+0xbe>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a18      	ldr	r2, [pc, #96]	@ (8005d20 <TIM_OC1_SetConfig+0x11c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d111      	bne.n	8005ce6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	621a      	str	r2, [r3, #32]
}
 8005d00:	bf00      	nop
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	fffeff8f 	.word	0xfffeff8f
 8005d10:	40010000 	.word	0x40010000
 8005d14:	40010400 	.word	0x40010400
 8005d18:	40014000 	.word	0x40014000
 8005d1c:	40014400 	.word	0x40014400
 8005d20:	40014800 	.word	0x40014800

08005d24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	f023 0210 	bic.w	r2, r3, #16
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4b34      	ldr	r3, [pc, #208]	@ (8005e20 <TIM_OC2_SetConfig+0xfc>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	021b      	lsls	r3, r3, #8
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f023 0320 	bic.w	r3, r3, #32
 8005d6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a29      	ldr	r2, [pc, #164]	@ (8005e24 <TIM_OC2_SetConfig+0x100>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d003      	beq.n	8005d8c <TIM_OC2_SetConfig+0x68>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a28      	ldr	r2, [pc, #160]	@ (8005e28 <TIM_OC2_SetConfig+0x104>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d10d      	bne.n	8005da8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005da6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a1e      	ldr	r2, [pc, #120]	@ (8005e24 <TIM_OC2_SetConfig+0x100>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00f      	beq.n	8005dd0 <TIM_OC2_SetConfig+0xac>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a1d      	ldr	r2, [pc, #116]	@ (8005e28 <TIM_OC2_SetConfig+0x104>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00b      	beq.n	8005dd0 <TIM_OC2_SetConfig+0xac>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a1c      	ldr	r2, [pc, #112]	@ (8005e2c <TIM_OC2_SetConfig+0x108>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d007      	beq.n	8005dd0 <TIM_OC2_SetConfig+0xac>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8005e30 <TIM_OC2_SetConfig+0x10c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d003      	beq.n	8005dd0 <TIM_OC2_SetConfig+0xac>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a1a      	ldr	r2, [pc, #104]	@ (8005e34 <TIM_OC2_SetConfig+0x110>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d113      	bne.n	8005df8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005dd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	feff8fff 	.word	0xfeff8fff
 8005e24:	40010000 	.word	0x40010000
 8005e28:	40010400 	.word	0x40010400
 8005e2c:	40014000 	.word	0x40014000
 8005e30:	40014400 	.word	0x40014400
 8005e34:	40014800 	.word	0x40014800

08005e38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4b33      	ldr	r3, [pc, #204]	@ (8005f30 <TIM_OC3_SetConfig+0xf8>)
 8005e64:	4013      	ands	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0303 	bic.w	r3, r3, #3
 8005e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	021b      	lsls	r3, r3, #8
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a28      	ldr	r2, [pc, #160]	@ (8005f34 <TIM_OC3_SetConfig+0xfc>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d003      	beq.n	8005e9e <TIM_OC3_SetConfig+0x66>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a27      	ldr	r2, [pc, #156]	@ (8005f38 <TIM_OC3_SetConfig+0x100>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d10d      	bne.n	8005eba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	021b      	lsls	r3, r3, #8
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8005f34 <TIM_OC3_SetConfig+0xfc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d00f      	beq.n	8005ee2 <TIM_OC3_SetConfig+0xaa>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f38 <TIM_OC3_SetConfig+0x100>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00b      	beq.n	8005ee2 <TIM_OC3_SetConfig+0xaa>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8005f3c <TIM_OC3_SetConfig+0x104>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d007      	beq.n	8005ee2 <TIM_OC3_SetConfig+0xaa>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8005f40 <TIM_OC3_SetConfig+0x108>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d003      	beq.n	8005ee2 <TIM_OC3_SetConfig+0xaa>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a19      	ldr	r2, [pc, #100]	@ (8005f44 <TIM_OC3_SetConfig+0x10c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d113      	bne.n	8005f0a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	011b      	lsls	r3, r3, #4
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	011b      	lsls	r3, r3, #4
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	621a      	str	r2, [r3, #32]
}
 8005f24:	bf00      	nop
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	fffeff8f 	.word	0xfffeff8f
 8005f34:	40010000 	.word	0x40010000
 8005f38:	40010400 	.word	0x40010400
 8005f3c:	40014000 	.word	0x40014000
 8005f40:	40014400 	.word	0x40014400
 8005f44:	40014800 	.word	0x40014800

08005f48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4b24      	ldr	r3, [pc, #144]	@ (8006004 <TIM_OC4_SetConfig+0xbc>)
 8005f74:	4013      	ands	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	021b      	lsls	r3, r3, #8
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	031b      	lsls	r3, r3, #12
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a19      	ldr	r2, [pc, #100]	@ (8006008 <TIM_OC4_SetConfig+0xc0>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d00f      	beq.n	8005fc8 <TIM_OC4_SetConfig+0x80>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a18      	ldr	r2, [pc, #96]	@ (800600c <TIM_OC4_SetConfig+0xc4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d00b      	beq.n	8005fc8 <TIM_OC4_SetConfig+0x80>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a17      	ldr	r2, [pc, #92]	@ (8006010 <TIM_OC4_SetConfig+0xc8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d007      	beq.n	8005fc8 <TIM_OC4_SetConfig+0x80>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a16      	ldr	r2, [pc, #88]	@ (8006014 <TIM_OC4_SetConfig+0xcc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d003      	beq.n	8005fc8 <TIM_OC4_SetConfig+0x80>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a15      	ldr	r2, [pc, #84]	@ (8006018 <TIM_OC4_SetConfig+0xd0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d109      	bne.n	8005fdc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	019b      	lsls	r3, r3, #6
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	621a      	str	r2, [r3, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	feff8fff 	.word	0xfeff8fff
 8006008:	40010000 	.word	0x40010000
 800600c:	40010400 	.word	0x40010400
 8006010:	40014000 	.word	0x40014000
 8006014:	40014400 	.word	0x40014400
 8006018:	40014800 	.word	0x40014800

0800601c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4b21      	ldr	r3, [pc, #132]	@ (80060cc <TIM_OC5_SetConfig+0xb0>)
 8006048:	4013      	ands	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800605c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	041b      	lsls	r3, r3, #16
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a18      	ldr	r2, [pc, #96]	@ (80060d0 <TIM_OC5_SetConfig+0xb4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d00f      	beq.n	8006092 <TIM_OC5_SetConfig+0x76>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a17      	ldr	r2, [pc, #92]	@ (80060d4 <TIM_OC5_SetConfig+0xb8>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00b      	beq.n	8006092 <TIM_OC5_SetConfig+0x76>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a16      	ldr	r2, [pc, #88]	@ (80060d8 <TIM_OC5_SetConfig+0xbc>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d007      	beq.n	8006092 <TIM_OC5_SetConfig+0x76>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a15      	ldr	r2, [pc, #84]	@ (80060dc <TIM_OC5_SetConfig+0xc0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d003      	beq.n	8006092 <TIM_OC5_SetConfig+0x76>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a14      	ldr	r2, [pc, #80]	@ (80060e0 <TIM_OC5_SetConfig+0xc4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d109      	bne.n	80060a6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006098:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	621a      	str	r2, [r3, #32]
}
 80060c0:	bf00      	nop
 80060c2:	371c      	adds	r7, #28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	fffeff8f 	.word	0xfffeff8f
 80060d0:	40010000 	.word	0x40010000
 80060d4:	40010400 	.word	0x40010400
 80060d8:	40014000 	.word	0x40014000
 80060dc:	40014400 	.word	0x40014400
 80060e0:	40014800 	.word	0x40014800

080060e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800610a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4b22      	ldr	r3, [pc, #136]	@ (8006198 <TIM_OC6_SetConfig+0xb4>)
 8006110:	4013      	ands	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	021b      	lsls	r3, r3, #8
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	051b      	lsls	r3, r3, #20
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	4313      	orrs	r3, r2
 8006132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a19      	ldr	r2, [pc, #100]	@ (800619c <TIM_OC6_SetConfig+0xb8>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00f      	beq.n	800615c <TIM_OC6_SetConfig+0x78>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a18      	ldr	r2, [pc, #96]	@ (80061a0 <TIM_OC6_SetConfig+0xbc>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00b      	beq.n	800615c <TIM_OC6_SetConfig+0x78>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a17      	ldr	r2, [pc, #92]	@ (80061a4 <TIM_OC6_SetConfig+0xc0>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d007      	beq.n	800615c <TIM_OC6_SetConfig+0x78>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a16      	ldr	r2, [pc, #88]	@ (80061a8 <TIM_OC6_SetConfig+0xc4>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d003      	beq.n	800615c <TIM_OC6_SetConfig+0x78>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a15      	ldr	r2, [pc, #84]	@ (80061ac <TIM_OC6_SetConfig+0xc8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d109      	bne.n	8006170 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006162:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	029b      	lsls	r3, r3, #10
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	621a      	str	r2, [r3, #32]
}
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	feff8fff 	.word	0xfeff8fff
 800619c:	40010000 	.word	0x40010000
 80061a0:	40010400 	.word	0x40010400
 80061a4:	40014000 	.word	0x40014000
 80061a8:	40014400 	.word	0x40014400
 80061ac:	40014800 	.word	0x40014800

080061b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	f023 0201 	bic.w	r2, r3, #1
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f023 030a 	bic.w	r3, r3, #10
 80061ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	621a      	str	r2, [r3, #32]
}
 8006202:	bf00      	nop
 8006204:	371c      	adds	r7, #28
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800620e:	b480      	push	{r7}
 8006210:	b087      	sub	sp, #28
 8006212:	af00      	add	r7, sp, #0
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	f023 0210 	bic.w	r2, r3, #16
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006238:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	031b      	lsls	r3, r3, #12
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800624a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	621a      	str	r2, [r3, #32]
}
 8006262:	bf00      	nop
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
	...

08006270 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4b09      	ldr	r3, [pc, #36]	@ (80062a8 <TIM_ITRx_SetConfig+0x38>)
 8006284:	4013      	ands	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4313      	orrs	r3, r2
 800628e:	f043 0307 	orr.w	r3, r3, #7
 8006292:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	609a      	str	r2, [r3, #8]
}
 800629a:	bf00      	nop
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	ffcfff8f 	.word	0xffcfff8f

080062ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
 80062b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	021a      	lsls	r2, r3, #8
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	431a      	orrs	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	609a      	str	r2, [r3, #8]
}
 80062e0:	bf00      	nop
 80062e2:	371c      	adds	r7, #28
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f003 031f 	and.w	r3, r3, #31
 80062fe:	2201      	movs	r2, #1
 8006300:	fa02 f303 	lsl.w	r3, r2, r3
 8006304:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6a1a      	ldr	r2, [r3, #32]
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	43db      	mvns	r3, r3
 800630e:	401a      	ands	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1a      	ldr	r2, [r3, #32]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f003 031f 	and.w	r3, r3, #31
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	fa01 f303 	lsl.w	r3, r1, r3
 8006324:	431a      	orrs	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	621a      	str	r2, [r3, #32]
}
 800632a:	bf00      	nop
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
	...

08006338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800634c:	2302      	movs	r3, #2
 800634e:	e06d      	b.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a30      	ldr	r2, [pc, #192]	@ (8006438 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d004      	beq.n	8006384 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a2f      	ldr	r2, [pc, #188]	@ (800643c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d108      	bne.n	8006396 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800638a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800639c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a20      	ldr	r2, [pc, #128]	@ (8006438 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d022      	beq.n	8006400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063c2:	d01d      	beq.n	8006400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006440 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d018      	beq.n	8006400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a1c      	ldr	r2, [pc, #112]	@ (8006444 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d013      	beq.n	8006400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a1a      	ldr	r2, [pc, #104]	@ (8006448 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00e      	beq.n	8006400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a15      	ldr	r2, [pc, #84]	@ (800643c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d009      	beq.n	8006400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a16      	ldr	r2, [pc, #88]	@ (800644c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d004      	beq.n	8006400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a15      	ldr	r2, [pc, #84]	@ (8006450 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d10c      	bne.n	800641a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006406:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	4313      	orrs	r3, r2
 8006410:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	40010000 	.word	0x40010000
 800643c:	40010400 	.word	0x40010400
 8006440:	40000400 	.word	0x40000400
 8006444:	40000800 	.word	0x40000800
 8006448:	40000c00 	.word	0x40000c00
 800644c:	40001800 	.word	0x40001800
 8006450:	40014000 	.word	0x40014000

08006454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e042      	b.n	80064ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800646c:	2b00      	cmp	r3, #0
 800646e:	d106      	bne.n	800647e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7fa fda9 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2224      	movs	r2, #36	@ 0x24
 8006482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0201 	bic.w	r2, r2, #1
 8006494:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fd90 	bl	8006fc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f825 	bl	80064f4 <UART_SetConfig>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e01b      	b.n	80064ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689a      	ldr	r2, [r3, #8]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0201 	orr.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fe0f 	bl	8007108 <UART_CheckIdleState>
 80064ea:	4603      	mov	r3, r0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f8:	b092      	sub	sp, #72	@ 0x48
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	431a      	orrs	r2, r3
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	431a      	orrs	r2, r3
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	4313      	orrs	r3, r2
 800651a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	4bbe      	ldr	r3, [pc, #760]	@ (800681c <UART_SetConfig+0x328>)
 8006524:	4013      	ands	r3, r2
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	6812      	ldr	r2, [r2, #0]
 800652a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800652c:	430b      	orrs	r3, r1
 800652e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4ab3      	ldr	r2, [pc, #716]	@ (8006820 <UART_SetConfig+0x32c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d004      	beq.n	8006560 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800655c:	4313      	orrs	r3, r2
 800655e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	4baf      	ldr	r3, [pc, #700]	@ (8006824 <UART_SetConfig+0x330>)
 8006568:	4013      	ands	r3, r2
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	6812      	ldr	r2, [r2, #0]
 800656e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006570:	430b      	orrs	r3, r1
 8006572:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657a:	f023 010f 	bic.w	r1, r3, #15
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4aa6      	ldr	r2, [pc, #664]	@ (8006828 <UART_SetConfig+0x334>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d177      	bne.n	8006684 <UART_SetConfig+0x190>
 8006594:	4ba5      	ldr	r3, [pc, #660]	@ (800682c <UART_SetConfig+0x338>)
 8006596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006598:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800659c:	2b28      	cmp	r3, #40	@ 0x28
 800659e:	d86d      	bhi.n	800667c <UART_SetConfig+0x188>
 80065a0:	a201      	add	r2, pc, #4	@ (adr r2, 80065a8 <UART_SetConfig+0xb4>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	0800664d 	.word	0x0800664d
 80065ac:	0800667d 	.word	0x0800667d
 80065b0:	0800667d 	.word	0x0800667d
 80065b4:	0800667d 	.word	0x0800667d
 80065b8:	0800667d 	.word	0x0800667d
 80065bc:	0800667d 	.word	0x0800667d
 80065c0:	0800667d 	.word	0x0800667d
 80065c4:	0800667d 	.word	0x0800667d
 80065c8:	08006655 	.word	0x08006655
 80065cc:	0800667d 	.word	0x0800667d
 80065d0:	0800667d 	.word	0x0800667d
 80065d4:	0800667d 	.word	0x0800667d
 80065d8:	0800667d 	.word	0x0800667d
 80065dc:	0800667d 	.word	0x0800667d
 80065e0:	0800667d 	.word	0x0800667d
 80065e4:	0800667d 	.word	0x0800667d
 80065e8:	0800665d 	.word	0x0800665d
 80065ec:	0800667d 	.word	0x0800667d
 80065f0:	0800667d 	.word	0x0800667d
 80065f4:	0800667d 	.word	0x0800667d
 80065f8:	0800667d 	.word	0x0800667d
 80065fc:	0800667d 	.word	0x0800667d
 8006600:	0800667d 	.word	0x0800667d
 8006604:	0800667d 	.word	0x0800667d
 8006608:	08006665 	.word	0x08006665
 800660c:	0800667d 	.word	0x0800667d
 8006610:	0800667d 	.word	0x0800667d
 8006614:	0800667d 	.word	0x0800667d
 8006618:	0800667d 	.word	0x0800667d
 800661c:	0800667d 	.word	0x0800667d
 8006620:	0800667d 	.word	0x0800667d
 8006624:	0800667d 	.word	0x0800667d
 8006628:	0800666d 	.word	0x0800666d
 800662c:	0800667d 	.word	0x0800667d
 8006630:	0800667d 	.word	0x0800667d
 8006634:	0800667d 	.word	0x0800667d
 8006638:	0800667d 	.word	0x0800667d
 800663c:	0800667d 	.word	0x0800667d
 8006640:	0800667d 	.word	0x0800667d
 8006644:	0800667d 	.word	0x0800667d
 8006648:	08006675 	.word	0x08006675
 800664c:	2301      	movs	r3, #1
 800664e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006652:	e222      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006654:	2304      	movs	r3, #4
 8006656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800665a:	e21e      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800665c:	2308      	movs	r3, #8
 800665e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006662:	e21a      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006664:	2310      	movs	r3, #16
 8006666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800666a:	e216      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800666c:	2320      	movs	r3, #32
 800666e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006672:	e212      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006674:	2340      	movs	r3, #64	@ 0x40
 8006676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667a:	e20e      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800667c:	2380      	movs	r3, #128	@ 0x80
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006682:	e20a      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a69      	ldr	r2, [pc, #420]	@ (8006830 <UART_SetConfig+0x33c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d130      	bne.n	80066f0 <UART_SetConfig+0x1fc>
 800668e:	4b67      	ldr	r3, [pc, #412]	@ (800682c <UART_SetConfig+0x338>)
 8006690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	2b05      	cmp	r3, #5
 8006698:	d826      	bhi.n	80066e8 <UART_SetConfig+0x1f4>
 800669a:	a201      	add	r2, pc, #4	@ (adr r2, 80066a0 <UART_SetConfig+0x1ac>)
 800669c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a0:	080066b9 	.word	0x080066b9
 80066a4:	080066c1 	.word	0x080066c1
 80066a8:	080066c9 	.word	0x080066c9
 80066ac:	080066d1 	.word	0x080066d1
 80066b0:	080066d9 	.word	0x080066d9
 80066b4:	080066e1 	.word	0x080066e1
 80066b8:	2300      	movs	r3, #0
 80066ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066be:	e1ec      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80066c0:	2304      	movs	r3, #4
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c6:	e1e8      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80066c8:	2308      	movs	r3, #8
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ce:	e1e4      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80066d0:	2310      	movs	r3, #16
 80066d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d6:	e1e0      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80066d8:	2320      	movs	r3, #32
 80066da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066de:	e1dc      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80066e0:	2340      	movs	r3, #64	@ 0x40
 80066e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e6:	e1d8      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80066e8:	2380      	movs	r3, #128	@ 0x80
 80066ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ee:	e1d4      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a4f      	ldr	r2, [pc, #316]	@ (8006834 <UART_SetConfig+0x340>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d130      	bne.n	800675c <UART_SetConfig+0x268>
 80066fa:	4b4c      	ldr	r3, [pc, #304]	@ (800682c <UART_SetConfig+0x338>)
 80066fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fe:	f003 0307 	and.w	r3, r3, #7
 8006702:	2b05      	cmp	r3, #5
 8006704:	d826      	bhi.n	8006754 <UART_SetConfig+0x260>
 8006706:	a201      	add	r2, pc, #4	@ (adr r2, 800670c <UART_SetConfig+0x218>)
 8006708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670c:	08006725 	.word	0x08006725
 8006710:	0800672d 	.word	0x0800672d
 8006714:	08006735 	.word	0x08006735
 8006718:	0800673d 	.word	0x0800673d
 800671c:	08006745 	.word	0x08006745
 8006720:	0800674d 	.word	0x0800674d
 8006724:	2300      	movs	r3, #0
 8006726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800672a:	e1b6      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800672c:	2304      	movs	r3, #4
 800672e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006732:	e1b2      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006734:	2308      	movs	r3, #8
 8006736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673a:	e1ae      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800673c:	2310      	movs	r3, #16
 800673e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006742:	e1aa      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006744:	2320      	movs	r3, #32
 8006746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674a:	e1a6      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800674c:	2340      	movs	r3, #64	@ 0x40
 800674e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006752:	e1a2      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006754:	2380      	movs	r3, #128	@ 0x80
 8006756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675a:	e19e      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a35      	ldr	r2, [pc, #212]	@ (8006838 <UART_SetConfig+0x344>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d130      	bne.n	80067c8 <UART_SetConfig+0x2d4>
 8006766:	4b31      	ldr	r3, [pc, #196]	@ (800682c <UART_SetConfig+0x338>)
 8006768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800676a:	f003 0307 	and.w	r3, r3, #7
 800676e:	2b05      	cmp	r3, #5
 8006770:	d826      	bhi.n	80067c0 <UART_SetConfig+0x2cc>
 8006772:	a201      	add	r2, pc, #4	@ (adr r2, 8006778 <UART_SetConfig+0x284>)
 8006774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006778:	08006791 	.word	0x08006791
 800677c:	08006799 	.word	0x08006799
 8006780:	080067a1 	.word	0x080067a1
 8006784:	080067a9 	.word	0x080067a9
 8006788:	080067b1 	.word	0x080067b1
 800678c:	080067b9 	.word	0x080067b9
 8006790:	2300      	movs	r3, #0
 8006792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006796:	e180      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006798:	2304      	movs	r3, #4
 800679a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679e:	e17c      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80067a0:	2308      	movs	r3, #8
 80067a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a6:	e178      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80067a8:	2310      	movs	r3, #16
 80067aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ae:	e174      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80067b0:	2320      	movs	r3, #32
 80067b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067b6:	e170      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80067b8:	2340      	movs	r3, #64	@ 0x40
 80067ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067be:	e16c      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80067c0:	2380      	movs	r3, #128	@ 0x80
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c6:	e168      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a1b      	ldr	r2, [pc, #108]	@ (800683c <UART_SetConfig+0x348>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d142      	bne.n	8006858 <UART_SetConfig+0x364>
 80067d2:	4b16      	ldr	r3, [pc, #88]	@ (800682c <UART_SetConfig+0x338>)
 80067d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	2b05      	cmp	r3, #5
 80067dc:	d838      	bhi.n	8006850 <UART_SetConfig+0x35c>
 80067de:	a201      	add	r2, pc, #4	@ (adr r2, 80067e4 <UART_SetConfig+0x2f0>)
 80067e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e4:	080067fd 	.word	0x080067fd
 80067e8:	08006805 	.word	0x08006805
 80067ec:	0800680d 	.word	0x0800680d
 80067f0:	08006815 	.word	0x08006815
 80067f4:	08006841 	.word	0x08006841
 80067f8:	08006849 	.word	0x08006849
 80067fc:	2300      	movs	r3, #0
 80067fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006802:	e14a      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006804:	2304      	movs	r3, #4
 8006806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680a:	e146      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800680c:	2308      	movs	r3, #8
 800680e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006812:	e142      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006814:	2310      	movs	r3, #16
 8006816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800681a:	e13e      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800681c:	cfff69f3 	.word	0xcfff69f3
 8006820:	58000c00 	.word	0x58000c00
 8006824:	11fff4ff 	.word	0x11fff4ff
 8006828:	40011000 	.word	0x40011000
 800682c:	58024400 	.word	0x58024400
 8006830:	40004400 	.word	0x40004400
 8006834:	40004800 	.word	0x40004800
 8006838:	40004c00 	.word	0x40004c00
 800683c:	40005000 	.word	0x40005000
 8006840:	2320      	movs	r3, #32
 8006842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006846:	e128      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006848:	2340      	movs	r3, #64	@ 0x40
 800684a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800684e:	e124      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006850:	2380      	movs	r3, #128	@ 0x80
 8006852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006856:	e120      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4acb      	ldr	r2, [pc, #812]	@ (8006b8c <UART_SetConfig+0x698>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d176      	bne.n	8006950 <UART_SetConfig+0x45c>
 8006862:	4bcb      	ldr	r3, [pc, #812]	@ (8006b90 <UART_SetConfig+0x69c>)
 8006864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006866:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800686a:	2b28      	cmp	r3, #40	@ 0x28
 800686c:	d86c      	bhi.n	8006948 <UART_SetConfig+0x454>
 800686e:	a201      	add	r2, pc, #4	@ (adr r2, 8006874 <UART_SetConfig+0x380>)
 8006870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006874:	08006919 	.word	0x08006919
 8006878:	08006949 	.word	0x08006949
 800687c:	08006949 	.word	0x08006949
 8006880:	08006949 	.word	0x08006949
 8006884:	08006949 	.word	0x08006949
 8006888:	08006949 	.word	0x08006949
 800688c:	08006949 	.word	0x08006949
 8006890:	08006949 	.word	0x08006949
 8006894:	08006921 	.word	0x08006921
 8006898:	08006949 	.word	0x08006949
 800689c:	08006949 	.word	0x08006949
 80068a0:	08006949 	.word	0x08006949
 80068a4:	08006949 	.word	0x08006949
 80068a8:	08006949 	.word	0x08006949
 80068ac:	08006949 	.word	0x08006949
 80068b0:	08006949 	.word	0x08006949
 80068b4:	08006929 	.word	0x08006929
 80068b8:	08006949 	.word	0x08006949
 80068bc:	08006949 	.word	0x08006949
 80068c0:	08006949 	.word	0x08006949
 80068c4:	08006949 	.word	0x08006949
 80068c8:	08006949 	.word	0x08006949
 80068cc:	08006949 	.word	0x08006949
 80068d0:	08006949 	.word	0x08006949
 80068d4:	08006931 	.word	0x08006931
 80068d8:	08006949 	.word	0x08006949
 80068dc:	08006949 	.word	0x08006949
 80068e0:	08006949 	.word	0x08006949
 80068e4:	08006949 	.word	0x08006949
 80068e8:	08006949 	.word	0x08006949
 80068ec:	08006949 	.word	0x08006949
 80068f0:	08006949 	.word	0x08006949
 80068f4:	08006939 	.word	0x08006939
 80068f8:	08006949 	.word	0x08006949
 80068fc:	08006949 	.word	0x08006949
 8006900:	08006949 	.word	0x08006949
 8006904:	08006949 	.word	0x08006949
 8006908:	08006949 	.word	0x08006949
 800690c:	08006949 	.word	0x08006949
 8006910:	08006949 	.word	0x08006949
 8006914:	08006941 	.word	0x08006941
 8006918:	2301      	movs	r3, #1
 800691a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800691e:	e0bc      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006920:	2304      	movs	r3, #4
 8006922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006926:	e0b8      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006928:	2308      	movs	r3, #8
 800692a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800692e:	e0b4      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006930:	2310      	movs	r3, #16
 8006932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006936:	e0b0      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006938:	2320      	movs	r3, #32
 800693a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693e:	e0ac      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006940:	2340      	movs	r3, #64	@ 0x40
 8006942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006946:	e0a8      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006948:	2380      	movs	r3, #128	@ 0x80
 800694a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800694e:	e0a4      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a8f      	ldr	r2, [pc, #572]	@ (8006b94 <UART_SetConfig+0x6a0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d130      	bne.n	80069bc <UART_SetConfig+0x4c8>
 800695a:	4b8d      	ldr	r3, [pc, #564]	@ (8006b90 <UART_SetConfig+0x69c>)
 800695c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	2b05      	cmp	r3, #5
 8006964:	d826      	bhi.n	80069b4 <UART_SetConfig+0x4c0>
 8006966:	a201      	add	r2, pc, #4	@ (adr r2, 800696c <UART_SetConfig+0x478>)
 8006968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696c:	08006985 	.word	0x08006985
 8006970:	0800698d 	.word	0x0800698d
 8006974:	08006995 	.word	0x08006995
 8006978:	0800699d 	.word	0x0800699d
 800697c:	080069a5 	.word	0x080069a5
 8006980:	080069ad 	.word	0x080069ad
 8006984:	2300      	movs	r3, #0
 8006986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800698a:	e086      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800698c:	2304      	movs	r3, #4
 800698e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006992:	e082      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006994:	2308      	movs	r3, #8
 8006996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699a:	e07e      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800699c:	2310      	movs	r3, #16
 800699e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a2:	e07a      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80069a4:	2320      	movs	r3, #32
 80069a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069aa:	e076      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80069ac:	2340      	movs	r3, #64	@ 0x40
 80069ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069b2:	e072      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80069b4:	2380      	movs	r3, #128	@ 0x80
 80069b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ba:	e06e      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a75      	ldr	r2, [pc, #468]	@ (8006b98 <UART_SetConfig+0x6a4>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d130      	bne.n	8006a28 <UART_SetConfig+0x534>
 80069c6:	4b72      	ldr	r3, [pc, #456]	@ (8006b90 <UART_SetConfig+0x69c>)
 80069c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	2b05      	cmp	r3, #5
 80069d0:	d826      	bhi.n	8006a20 <UART_SetConfig+0x52c>
 80069d2:	a201      	add	r2, pc, #4	@ (adr r2, 80069d8 <UART_SetConfig+0x4e4>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	080069f1 	.word	0x080069f1
 80069dc:	080069f9 	.word	0x080069f9
 80069e0:	08006a01 	.word	0x08006a01
 80069e4:	08006a09 	.word	0x08006a09
 80069e8:	08006a11 	.word	0x08006a11
 80069ec:	08006a19 	.word	0x08006a19
 80069f0:	2300      	movs	r3, #0
 80069f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069f6:	e050      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80069f8:	2304      	movs	r3, #4
 80069fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069fe:	e04c      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a00:	2308      	movs	r3, #8
 8006a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a06:	e048      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a08:	2310      	movs	r3, #16
 8006a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0e:	e044      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a10:	2320      	movs	r3, #32
 8006a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a16:	e040      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a18:	2340      	movs	r3, #64	@ 0x40
 8006a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a1e:	e03c      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a20:	2380      	movs	r3, #128	@ 0x80
 8006a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a26:	e038      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a5b      	ldr	r2, [pc, #364]	@ (8006b9c <UART_SetConfig+0x6a8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d130      	bne.n	8006a94 <UART_SetConfig+0x5a0>
 8006a32:	4b57      	ldr	r3, [pc, #348]	@ (8006b90 <UART_SetConfig+0x69c>)
 8006a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a36:	f003 0307 	and.w	r3, r3, #7
 8006a3a:	2b05      	cmp	r3, #5
 8006a3c:	d826      	bhi.n	8006a8c <UART_SetConfig+0x598>
 8006a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a44 <UART_SetConfig+0x550>)
 8006a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a44:	08006a5d 	.word	0x08006a5d
 8006a48:	08006a65 	.word	0x08006a65
 8006a4c:	08006a6d 	.word	0x08006a6d
 8006a50:	08006a75 	.word	0x08006a75
 8006a54:	08006a7d 	.word	0x08006a7d
 8006a58:	08006a85 	.word	0x08006a85
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a62:	e01a      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a64:	2304      	movs	r3, #4
 8006a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6a:	e016      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a6c:	2308      	movs	r3, #8
 8006a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a72:	e012      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a74:	2310      	movs	r3, #16
 8006a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a7a:	e00e      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a7c:	2320      	movs	r3, #32
 8006a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a82:	e00a      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a84:	2340      	movs	r3, #64	@ 0x40
 8006a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a8a:	e006      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a8c:	2380      	movs	r3, #128	@ 0x80
 8006a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a92:	e002      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a94:	2380      	movs	r3, #128	@ 0x80
 8006a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a3f      	ldr	r2, [pc, #252]	@ (8006b9c <UART_SetConfig+0x6a8>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	f040 80f8 	bne.w	8006c96 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006aa6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	dc46      	bgt.n	8006b3c <UART_SetConfig+0x648>
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	f2c0 8082 	blt.w	8006bb8 <UART_SetConfig+0x6c4>
 8006ab4:	3b02      	subs	r3, #2
 8006ab6:	2b1e      	cmp	r3, #30
 8006ab8:	d87e      	bhi.n	8006bb8 <UART_SetConfig+0x6c4>
 8006aba:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac0 <UART_SetConfig+0x5cc>)
 8006abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac0:	08006b43 	.word	0x08006b43
 8006ac4:	08006bb9 	.word	0x08006bb9
 8006ac8:	08006b4b 	.word	0x08006b4b
 8006acc:	08006bb9 	.word	0x08006bb9
 8006ad0:	08006bb9 	.word	0x08006bb9
 8006ad4:	08006bb9 	.word	0x08006bb9
 8006ad8:	08006b5b 	.word	0x08006b5b
 8006adc:	08006bb9 	.word	0x08006bb9
 8006ae0:	08006bb9 	.word	0x08006bb9
 8006ae4:	08006bb9 	.word	0x08006bb9
 8006ae8:	08006bb9 	.word	0x08006bb9
 8006aec:	08006bb9 	.word	0x08006bb9
 8006af0:	08006bb9 	.word	0x08006bb9
 8006af4:	08006bb9 	.word	0x08006bb9
 8006af8:	08006b6b 	.word	0x08006b6b
 8006afc:	08006bb9 	.word	0x08006bb9
 8006b00:	08006bb9 	.word	0x08006bb9
 8006b04:	08006bb9 	.word	0x08006bb9
 8006b08:	08006bb9 	.word	0x08006bb9
 8006b0c:	08006bb9 	.word	0x08006bb9
 8006b10:	08006bb9 	.word	0x08006bb9
 8006b14:	08006bb9 	.word	0x08006bb9
 8006b18:	08006bb9 	.word	0x08006bb9
 8006b1c:	08006bb9 	.word	0x08006bb9
 8006b20:	08006bb9 	.word	0x08006bb9
 8006b24:	08006bb9 	.word	0x08006bb9
 8006b28:	08006bb9 	.word	0x08006bb9
 8006b2c:	08006bb9 	.word	0x08006bb9
 8006b30:	08006bb9 	.word	0x08006bb9
 8006b34:	08006bb9 	.word	0x08006bb9
 8006b38:	08006bab 	.word	0x08006bab
 8006b3c:	2b40      	cmp	r3, #64	@ 0x40
 8006b3e:	d037      	beq.n	8006bb0 <UART_SetConfig+0x6bc>
 8006b40:	e03a      	b.n	8006bb8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006b42:	f7fd ff2f 	bl	80049a4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006b46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b48:	e03c      	b.n	8006bc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fd ff3e 	bl	80049d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b58:	e034      	b.n	8006bc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b5a:	f107 0318 	add.w	r3, r7, #24
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe f88a 	bl	8004c78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b68:	e02c      	b.n	8006bc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b6a:	4b09      	ldr	r3, [pc, #36]	@ (8006b90 <UART_SetConfig+0x69c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d016      	beq.n	8006ba4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b76:	4b06      	ldr	r3, [pc, #24]	@ (8006b90 <UART_SetConfig+0x69c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	08db      	lsrs	r3, r3, #3
 8006b7c:	f003 0303 	and.w	r3, r3, #3
 8006b80:	4a07      	ldr	r2, [pc, #28]	@ (8006ba0 <UART_SetConfig+0x6ac>)
 8006b82:	fa22 f303 	lsr.w	r3, r2, r3
 8006b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b88:	e01c      	b.n	8006bc4 <UART_SetConfig+0x6d0>
 8006b8a:	bf00      	nop
 8006b8c:	40011400 	.word	0x40011400
 8006b90:	58024400 	.word	0x58024400
 8006b94:	40007800 	.word	0x40007800
 8006b98:	40007c00 	.word	0x40007c00
 8006b9c:	58000c00 	.word	0x58000c00
 8006ba0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006ba4:	4b9d      	ldr	r3, [pc, #628]	@ (8006e1c <UART_SetConfig+0x928>)
 8006ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ba8:	e00c      	b.n	8006bc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006baa:	4b9d      	ldr	r3, [pc, #628]	@ (8006e20 <UART_SetConfig+0x92c>)
 8006bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bae:	e009      	b.n	8006bc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bb6:	e005      	b.n	8006bc4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006bc2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 81de 	beq.w	8006f88 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd0:	4a94      	ldr	r2, [pc, #592]	@ (8006e24 <UART_SetConfig+0x930>)
 8006bd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bda:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bde:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	4613      	mov	r3, r2
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	4413      	add	r3, r2
 8006bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d305      	bcc.n	8006bfc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d903      	bls.n	8006c04 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006c02:	e1c1      	b.n	8006f88 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c06:	2200      	movs	r2, #0
 8006c08:	60bb      	str	r3, [r7, #8]
 8006c0a:	60fa      	str	r2, [r7, #12]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c10:	4a84      	ldr	r2, [pc, #528]	@ (8006e24 <UART_SetConfig+0x930>)
 8006c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	2200      	movs	r2, #0
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	607a      	str	r2, [r7, #4]
 8006c1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c26:	f7f9 fb57 	bl	80002d8 <__aeabi_uldivmod>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4610      	mov	r0, r2
 8006c30:	4619      	mov	r1, r3
 8006c32:	f04f 0200 	mov.w	r2, #0
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	020b      	lsls	r3, r1, #8
 8006c3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c40:	0202      	lsls	r2, r0, #8
 8006c42:	6979      	ldr	r1, [r7, #20]
 8006c44:	6849      	ldr	r1, [r1, #4]
 8006c46:	0849      	lsrs	r1, r1, #1
 8006c48:	2000      	movs	r0, #0
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	eb12 0804 	adds.w	r8, r2, r4
 8006c52:	eb43 0905 	adc.w	r9, r3, r5
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	469a      	mov	sl, r3
 8006c5e:	4693      	mov	fp, r2
 8006c60:	4652      	mov	r2, sl
 8006c62:	465b      	mov	r3, fp
 8006c64:	4640      	mov	r0, r8
 8006c66:	4649      	mov	r1, r9
 8006c68:	f7f9 fb36 	bl	80002d8 <__aeabi_uldivmod>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4613      	mov	r3, r2
 8006c72:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c7a:	d308      	bcc.n	8006c8e <UART_SetConfig+0x79a>
 8006c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c82:	d204      	bcs.n	8006c8e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c8a:	60da      	str	r2, [r3, #12]
 8006c8c:	e17c      	b.n	8006f88 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006c94:	e178      	b.n	8006f88 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c9e:	f040 80c5 	bne.w	8006e2c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006ca2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	dc48      	bgt.n	8006d3c <UART_SetConfig+0x848>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	db7b      	blt.n	8006da6 <UART_SetConfig+0x8b2>
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	d879      	bhi.n	8006da6 <UART_SetConfig+0x8b2>
 8006cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb8 <UART_SetConfig+0x7c4>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006d43 	.word	0x08006d43
 8006cbc:	08006d4b 	.word	0x08006d4b
 8006cc0:	08006da7 	.word	0x08006da7
 8006cc4:	08006da7 	.word	0x08006da7
 8006cc8:	08006d53 	.word	0x08006d53
 8006ccc:	08006da7 	.word	0x08006da7
 8006cd0:	08006da7 	.word	0x08006da7
 8006cd4:	08006da7 	.word	0x08006da7
 8006cd8:	08006d63 	.word	0x08006d63
 8006cdc:	08006da7 	.word	0x08006da7
 8006ce0:	08006da7 	.word	0x08006da7
 8006ce4:	08006da7 	.word	0x08006da7
 8006ce8:	08006da7 	.word	0x08006da7
 8006cec:	08006da7 	.word	0x08006da7
 8006cf0:	08006da7 	.word	0x08006da7
 8006cf4:	08006da7 	.word	0x08006da7
 8006cf8:	08006d73 	.word	0x08006d73
 8006cfc:	08006da7 	.word	0x08006da7
 8006d00:	08006da7 	.word	0x08006da7
 8006d04:	08006da7 	.word	0x08006da7
 8006d08:	08006da7 	.word	0x08006da7
 8006d0c:	08006da7 	.word	0x08006da7
 8006d10:	08006da7 	.word	0x08006da7
 8006d14:	08006da7 	.word	0x08006da7
 8006d18:	08006da7 	.word	0x08006da7
 8006d1c:	08006da7 	.word	0x08006da7
 8006d20:	08006da7 	.word	0x08006da7
 8006d24:	08006da7 	.word	0x08006da7
 8006d28:	08006da7 	.word	0x08006da7
 8006d2c:	08006da7 	.word	0x08006da7
 8006d30:	08006da7 	.word	0x08006da7
 8006d34:	08006da7 	.word	0x08006da7
 8006d38:	08006d99 	.word	0x08006d99
 8006d3c:	2b40      	cmp	r3, #64	@ 0x40
 8006d3e:	d02e      	beq.n	8006d9e <UART_SetConfig+0x8aa>
 8006d40:	e031      	b.n	8006da6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d42:	f7fc fbf9 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8006d46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d48:	e033      	b.n	8006db2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d4a:	f7fc fc0b 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 8006d4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d50:	e02f      	b.n	8006db2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fd fe3a 	bl	80049d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d60:	e027      	b.n	8006db2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d62:	f107 0318 	add.w	r3, r7, #24
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fd ff86 	bl	8004c78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d70:	e01f      	b.n	8006db2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d72:	4b2d      	ldr	r3, [pc, #180]	@ (8006e28 <UART_SetConfig+0x934>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d009      	beq.n	8006d92 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8006e28 <UART_SetConfig+0x934>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	08db      	lsrs	r3, r3, #3
 8006d84:	f003 0303 	and.w	r3, r3, #3
 8006d88:	4a24      	ldr	r2, [pc, #144]	@ (8006e1c <UART_SetConfig+0x928>)
 8006d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d90:	e00f      	b.n	8006db2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006d92:	4b22      	ldr	r3, [pc, #136]	@ (8006e1c <UART_SetConfig+0x928>)
 8006d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d96:	e00c      	b.n	8006db2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d98:	4b21      	ldr	r3, [pc, #132]	@ (8006e20 <UART_SetConfig+0x92c>)
 8006d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d9c:	e009      	b.n	8006db2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006da4:	e005      	b.n	8006db2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006db0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 80e7 	beq.w	8006f88 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dbe:	4a19      	ldr	r2, [pc, #100]	@ (8006e24 <UART_SetConfig+0x930>)
 8006dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dcc:	005a      	lsls	r2, r3, #1
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	085b      	lsrs	r3, r3, #1
 8006dd4:	441a      	add	r2, r3
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dde:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de2:	2b0f      	cmp	r3, #15
 8006de4:	d916      	bls.n	8006e14 <UART_SetConfig+0x920>
 8006de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dec:	d212      	bcs.n	8006e14 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	f023 030f 	bic.w	r3, r3, #15
 8006df6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfa:	085b      	lsrs	r3, r3, #1
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	f003 0307 	and.w	r3, r3, #7
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e06:	4313      	orrs	r3, r2
 8006e08:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006e10:	60da      	str	r2, [r3, #12]
 8006e12:	e0b9      	b.n	8006f88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006e1a:	e0b5      	b.n	8006f88 <UART_SetConfig+0xa94>
 8006e1c:	03d09000 	.word	0x03d09000
 8006e20:	003d0900 	.word	0x003d0900
 8006e24:	08007c9c 	.word	0x08007c9c
 8006e28:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e2c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006e30:	2b20      	cmp	r3, #32
 8006e32:	dc49      	bgt.n	8006ec8 <UART_SetConfig+0x9d4>
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	db7c      	blt.n	8006f32 <UART_SetConfig+0xa3e>
 8006e38:	2b20      	cmp	r3, #32
 8006e3a:	d87a      	bhi.n	8006f32 <UART_SetConfig+0xa3e>
 8006e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e44 <UART_SetConfig+0x950>)
 8006e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e42:	bf00      	nop
 8006e44:	08006ecf 	.word	0x08006ecf
 8006e48:	08006ed7 	.word	0x08006ed7
 8006e4c:	08006f33 	.word	0x08006f33
 8006e50:	08006f33 	.word	0x08006f33
 8006e54:	08006edf 	.word	0x08006edf
 8006e58:	08006f33 	.word	0x08006f33
 8006e5c:	08006f33 	.word	0x08006f33
 8006e60:	08006f33 	.word	0x08006f33
 8006e64:	08006eef 	.word	0x08006eef
 8006e68:	08006f33 	.word	0x08006f33
 8006e6c:	08006f33 	.word	0x08006f33
 8006e70:	08006f33 	.word	0x08006f33
 8006e74:	08006f33 	.word	0x08006f33
 8006e78:	08006f33 	.word	0x08006f33
 8006e7c:	08006f33 	.word	0x08006f33
 8006e80:	08006f33 	.word	0x08006f33
 8006e84:	08006eff 	.word	0x08006eff
 8006e88:	08006f33 	.word	0x08006f33
 8006e8c:	08006f33 	.word	0x08006f33
 8006e90:	08006f33 	.word	0x08006f33
 8006e94:	08006f33 	.word	0x08006f33
 8006e98:	08006f33 	.word	0x08006f33
 8006e9c:	08006f33 	.word	0x08006f33
 8006ea0:	08006f33 	.word	0x08006f33
 8006ea4:	08006f33 	.word	0x08006f33
 8006ea8:	08006f33 	.word	0x08006f33
 8006eac:	08006f33 	.word	0x08006f33
 8006eb0:	08006f33 	.word	0x08006f33
 8006eb4:	08006f33 	.word	0x08006f33
 8006eb8:	08006f33 	.word	0x08006f33
 8006ebc:	08006f33 	.word	0x08006f33
 8006ec0:	08006f33 	.word	0x08006f33
 8006ec4:	08006f25 	.word	0x08006f25
 8006ec8:	2b40      	cmp	r3, #64	@ 0x40
 8006eca:	d02e      	beq.n	8006f2a <UART_SetConfig+0xa36>
 8006ecc:	e031      	b.n	8006f32 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ece:	f7fc fb33 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8006ed2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ed4:	e033      	b.n	8006f3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ed6:	f7fc fb45 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 8006eda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006edc:	e02f      	b.n	8006f3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fd fd74 	bl	80049d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eec:	e027      	b.n	8006f3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eee:	f107 0318 	add.w	r3, r7, #24
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fd fec0 	bl	8004c78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006efc:	e01f      	b.n	8006f3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006efe:	4b2d      	ldr	r3, [pc, #180]	@ (8006fb4 <UART_SetConfig+0xac0>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0320 	and.w	r3, r3, #32
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d009      	beq.n	8006f1e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f0a:	4b2a      	ldr	r3, [pc, #168]	@ (8006fb4 <UART_SetConfig+0xac0>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	08db      	lsrs	r3, r3, #3
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	4a28      	ldr	r2, [pc, #160]	@ (8006fb8 <UART_SetConfig+0xac4>)
 8006f16:	fa22 f303 	lsr.w	r3, r2, r3
 8006f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f1c:	e00f      	b.n	8006f3e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006f1e:	4b26      	ldr	r3, [pc, #152]	@ (8006fb8 <UART_SetConfig+0xac4>)
 8006f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f22:	e00c      	b.n	8006f3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f24:	4b25      	ldr	r3, [pc, #148]	@ (8006fbc <UART_SetConfig+0xac8>)
 8006f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f28:	e009      	b.n	8006f3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f30:	e005      	b.n	8006f3e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006f3c:	bf00      	nop
    }

    if (pclk != 0U)
 8006f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d021      	beq.n	8006f88 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f48:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc0 <UART_SetConfig+0xacc>)
 8006f4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f52:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	085b      	lsrs	r3, r3, #1
 8006f5c:	441a      	add	r2, r3
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f6a:	2b0f      	cmp	r3, #15
 8006f6c:	d909      	bls.n	8006f82 <UART_SetConfig+0xa8e>
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f74:	d205      	bcs.n	8006f82 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60da      	str	r2, [r3, #12]
 8006f80:	e002      	b.n	8006f88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006fa4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3748      	adds	r7, #72	@ 0x48
 8006fac:	46bd      	mov	sp, r7
 8006fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fb2:	bf00      	nop
 8006fb4:	58024400 	.word	0x58024400
 8006fb8:	03d09000 	.word	0x03d09000
 8006fbc:	003d0900 	.word	0x003d0900
 8006fc0:	08007c9c 	.word	0x08007c9c

08006fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd0:	f003 0308 	and.w	r3, r3, #8
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00a      	beq.n	8006fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00a      	beq.n	8007010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	430a      	orrs	r2, r1
 800700e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	f003 0302 	and.w	r3, r3, #2
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00a      	beq.n	8007032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007058:	f003 0310 	and.w	r3, r3, #16
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00a      	beq.n	8007076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	430a      	orrs	r2, r1
 8007096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d01a      	beq.n	80070da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070c2:	d10a      	bne.n	80070da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	605a      	str	r2, [r3, #4]
  }
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b098      	sub	sp, #96	@ 0x60
 800710c:	af02      	add	r7, sp, #8
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007118:	f7fa f9a8 	bl	800146c <HAL_GetTick>
 800711c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b08      	cmp	r3, #8
 800712a:	d12f      	bne.n	800718c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800712c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007134:	2200      	movs	r2, #0
 8007136:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f88e 	bl	800725c <UART_WaitOnFlagUntilTimeout>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d022      	beq.n	800718c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714e:	e853 3f00 	ldrex	r3, [r3]
 8007152:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800715a:	653b      	str	r3, [r7, #80]	@ 0x50
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	461a      	mov	r2, r3
 8007162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007164:	647b      	str	r3, [r7, #68]	@ 0x44
 8007166:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007168:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800716a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800716c:	e841 2300 	strex	r3, r2, [r1]
 8007170:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1e6      	bne.n	8007146 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2220      	movs	r2, #32
 800717c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e063      	b.n	8007254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0304 	and.w	r3, r3, #4
 8007196:	2b04      	cmp	r3, #4
 8007198:	d149      	bne.n	800722e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800719a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071a2:	2200      	movs	r2, #0
 80071a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f857 	bl	800725c <UART_WaitOnFlagUntilTimeout>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d03c      	beq.n	800722e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	623b      	str	r3, [r7, #32]
   return(result);
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80071d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e6      	bne.n	80071b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3308      	adds	r3, #8
 80071ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f023 0301 	bic.w	r3, r3, #1
 80071fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3308      	adds	r3, #8
 8007204:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007206:	61fa      	str	r2, [r7, #28]
 8007208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	69b9      	ldr	r1, [r7, #24]
 800720c:	69fa      	ldr	r2, [r7, #28]
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	617b      	str	r3, [r7, #20]
   return(result);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e5      	bne.n	80071e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2220      	movs	r2, #32
 800721e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e012      	b.n	8007254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2220      	movs	r2, #32
 8007232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2220      	movs	r2, #32
 800723a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3758      	adds	r7, #88	@ 0x58
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	603b      	str	r3, [r7, #0]
 8007268:	4613      	mov	r3, r2
 800726a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800726c:	e04f      	b.n	800730e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007274:	d04b      	beq.n	800730e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007276:	f7fa f8f9 	bl	800146c <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	429a      	cmp	r2, r3
 8007284:	d302      	bcc.n	800728c <UART_WaitOnFlagUntilTimeout+0x30>
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e04e      	b.n	800732e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0304 	and.w	r3, r3, #4
 800729a:	2b00      	cmp	r3, #0
 800729c:	d037      	beq.n	800730e <UART_WaitOnFlagUntilTimeout+0xb2>
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2b80      	cmp	r3, #128	@ 0x80
 80072a2:	d034      	beq.n	800730e <UART_WaitOnFlagUntilTimeout+0xb2>
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2b40      	cmp	r3, #64	@ 0x40
 80072a8:	d031      	beq.n	800730e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	f003 0308 	and.w	r3, r3, #8
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d110      	bne.n	80072da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2208      	movs	r2, #8
 80072be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f000 f839 	bl	8007338 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2208      	movs	r2, #8
 80072ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e029      	b.n	800732e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072e8:	d111      	bne.n	800730e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f81f 	bl	8007338 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2220      	movs	r2, #32
 80072fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e00f      	b.n	800732e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69da      	ldr	r2, [r3, #28]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	4013      	ands	r3, r2
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	429a      	cmp	r2, r3
 800731c:	bf0c      	ite	eq
 800731e:	2301      	moveq	r3, #1
 8007320:	2300      	movne	r3, #0
 8007322:	b2db      	uxtb	r3, r3
 8007324:	461a      	mov	r2, r3
 8007326:	79fb      	ldrb	r3, [r7, #7]
 8007328:	429a      	cmp	r2, r3
 800732a:	d0a0      	beq.n	800726e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
	...

08007338 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007338:	b480      	push	{r7}
 800733a:	b095      	sub	sp, #84	@ 0x54
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007348:	e853 3f00 	ldrex	r3, [r3]
 800734c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800734e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007354:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	461a      	mov	r2, r3
 800735c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800735e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007360:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007362:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007364:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007366:	e841 2300 	strex	r3, r2, [r1]
 800736a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800736c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1e6      	bne.n	8007340 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3308      	adds	r3, #8
 8007378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	e853 3f00 	ldrex	r3, [r3]
 8007380:	61fb      	str	r3, [r7, #28]
   return(result);
 8007382:	69fa      	ldr	r2, [r7, #28]
 8007384:	4b1e      	ldr	r3, [pc, #120]	@ (8007400 <UART_EndRxTransfer+0xc8>)
 8007386:	4013      	ands	r3, r2
 8007388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	3308      	adds	r3, #8
 8007390:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007392:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007394:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007396:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e5      	bne.n	8007372 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d118      	bne.n	80073e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f023 0310 	bic.w	r3, r3, #16
 80073c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073cc:	61bb      	str	r3, [r7, #24]
 80073ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	6979      	ldr	r1, [r7, #20]
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	e841 2300 	strex	r3, r2, [r1]
 80073d8:	613b      	str	r3, [r7, #16]
   return(result);
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e6      	bne.n	80073ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073f4:	bf00      	nop
 80073f6:	3754      	adds	r7, #84	@ 0x54
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	effffffe 	.word	0xeffffffe

08007404 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_UARTEx_DisableFifoMode+0x16>
 8007416:	2302      	movs	r3, #2
 8007418:	e027      	b.n	800746a <HAL_UARTEx_DisableFifoMode+0x66>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2224      	movs	r2, #36	@ 0x24
 8007426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0201 	bic.w	r2, r2, #1
 8007440:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007448:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2220      	movs	r2, #32
 800745c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800748a:	2302      	movs	r3, #2
 800748c:	e02d      	b.n	80074ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2224      	movs	r2, #36	@ 0x24
 800749a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 0201 	bic.w	r2, r2, #1
 80074b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f850 	bl	8007570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2220      	movs	r2, #32
 80074dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007502:	2b01      	cmp	r3, #1
 8007504:	d101      	bne.n	800750a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007506:	2302      	movs	r3, #2
 8007508:	e02d      	b.n	8007566 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2224      	movs	r2, #36	@ 0x24
 8007516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0201 	bic.w	r2, r2, #1
 8007530:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f812 	bl	8007570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2220      	movs	r2, #32
 8007558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800757c:	2b00      	cmp	r3, #0
 800757e:	d108      	bne.n	8007592 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007590:	e031      	b.n	80075f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007592:	2310      	movs	r3, #16
 8007594:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007596:	2310      	movs	r3, #16
 8007598:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	0e5b      	lsrs	r3, r3, #25
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	0f5b      	lsrs	r3, r3, #29
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	f003 0307 	and.w	r3, r3, #7
 80075b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	7b3a      	ldrb	r2, [r7, #12]
 80075be:	4911      	ldr	r1, [pc, #68]	@ (8007604 <UARTEx_SetNbDataToProcess+0x94>)
 80075c0:	5c8a      	ldrb	r2, [r1, r2]
 80075c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075c6:	7b3a      	ldrb	r2, [r7, #12]
 80075c8:	490f      	ldr	r1, [pc, #60]	@ (8007608 <UARTEx_SetNbDataToProcess+0x98>)
 80075ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
 80075da:	7b7a      	ldrb	r2, [r7, #13]
 80075dc:	4909      	ldr	r1, [pc, #36]	@ (8007604 <UARTEx_SetNbDataToProcess+0x94>)
 80075de:	5c8a      	ldrb	r2, [r1, r2]
 80075e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075e4:	7b7a      	ldrb	r2, [r7, #13]
 80075e6:	4908      	ldr	r1, [pc, #32]	@ (8007608 <UARTEx_SetNbDataToProcess+0x98>)
 80075e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80075f6:	bf00      	nop
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	08007cb4 	.word	0x08007cb4
 8007608:	08007cbc 	.word	0x08007cbc

0800760c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800760c:	b084      	sub	sp, #16
 800760e:	b580      	push	{r7, lr}
 8007610:	b084      	sub	sp, #16
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	f107 001c 	add.w	r0, r7, #28
 800761a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800761e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007622:	2b01      	cmp	r3, #1
 8007624:	d121      	bne.n	800766a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68da      	ldr	r2, [r3, #12]
 8007636:	4b2c      	ldr	r3, [pc, #176]	@ (80076e8 <USB_CoreInit+0xdc>)
 8007638:	4013      	ands	r3, r2
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800764a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800764e:	2b01      	cmp	r3, #1
 8007650:	d105      	bne.n	800765e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 faaa 	bl	8007bb8 <USB_CoreReset>
 8007664:	4603      	mov	r3, r0
 8007666:	73fb      	strb	r3, [r7, #15]
 8007668:	e01b      	b.n	80076a2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fa9e 	bl	8007bb8 <USB_CoreReset>
 800767c:	4603      	mov	r3, r0
 800767e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007680:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007684:	2b00      	cmp	r3, #0
 8007686:	d106      	bne.n	8007696 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	639a      	str	r2, [r3, #56]	@ 0x38
 8007694:	e005      	b.n	80076a2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076a2:	7fbb      	ldrb	r3, [r7, #30]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d116      	bne.n	80076d6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80076b6:	4b0d      	ldr	r3, [pc, #52]	@ (80076ec <USB_CoreInit+0xe0>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f043 0206 	orr.w	r2, r3, #6
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f043 0220 	orr.w	r2, r3, #32
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076e2:	b004      	add	sp, #16
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	ffbdffbf 	.word	0xffbdffbf
 80076ec:	03ee0000 	.word	0x03ee0000

080076f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f023 0201 	bic.w	r2, r3, #1
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b084      	sub	sp, #16
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	460b      	mov	r3, r1
 800771c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800772e:	78fb      	ldrb	r3, [r7, #3]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d115      	bne.n	8007760 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007740:	200a      	movs	r0, #10
 8007742:	f7f9 fe9f 	bl	8001484 <HAL_Delay>
      ms += 10U;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	330a      	adds	r3, #10
 800774a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fa25 	bl	8007b9c <USB_GetMode>
 8007752:	4603      	mov	r3, r0
 8007754:	2b01      	cmp	r3, #1
 8007756:	d01e      	beq.n	8007796 <USB_SetCurrentMode+0x84>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2bc7      	cmp	r3, #199	@ 0xc7
 800775c:	d9f0      	bls.n	8007740 <USB_SetCurrentMode+0x2e>
 800775e:	e01a      	b.n	8007796 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d115      	bne.n	8007792 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007772:	200a      	movs	r0, #10
 8007774:	f7f9 fe86 	bl	8001484 <HAL_Delay>
      ms += 10U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	330a      	adds	r3, #10
 800777c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fa0c 	bl	8007b9c <USB_GetMode>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d005      	beq.n	8007796 <USB_SetCurrentMode+0x84>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2bc7      	cmp	r3, #199	@ 0xc7
 800778e:	d9f0      	bls.n	8007772 <USB_SetCurrentMode+0x60>
 8007790:	e001      	b.n	8007796 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e005      	b.n	80077a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2bc8      	cmp	r3, #200	@ 0xc8
 800779a:	d101      	bne.n	80077a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e000      	b.n	80077a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077ac:	b084      	sub	sp, #16
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b086      	sub	sp, #24
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80077ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077c6:	2300      	movs	r3, #0
 80077c8:	613b      	str	r3, [r7, #16]
 80077ca:	e009      	b.n	80077e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	3340      	adds	r3, #64	@ 0x40
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	2200      	movs	r2, #0
 80077d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	3301      	adds	r3, #1
 80077de:	613b      	str	r3, [r7, #16]
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	2b0e      	cmp	r3, #14
 80077e4:	d9f2      	bls.n	80077cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80077e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d11c      	bne.n	8007828 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077fc:	f043 0302 	orr.w	r3, r3, #2
 8007800:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007806:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	e005      	b.n	8007834 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800783a:	461a      	mov	r2, r3
 800783c:	2300      	movs	r3, #0
 800783e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007840:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007844:	2b01      	cmp	r3, #1
 8007846:	d10d      	bne.n	8007864 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007848:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800784c:	2b00      	cmp	r3, #0
 800784e:	d104      	bne.n	800785a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007850:	2100      	movs	r1, #0
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f968 	bl	8007b28 <USB_SetDevSpeed>
 8007858:	e008      	b.n	800786c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800785a:	2101      	movs	r1, #1
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f963 	bl	8007b28 <USB_SetDevSpeed>
 8007862:	e003      	b.n	800786c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007864:	2103      	movs	r1, #3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f95e 	bl	8007b28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800786c:	2110      	movs	r1, #16
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f8fa 	bl	8007a68 <USB_FlushTxFifo>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f924 	bl	8007acc <USB_FlushRxFifo>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007894:	461a      	mov	r2, r3
 8007896:	2300      	movs	r3, #0
 8007898:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078a0:	461a      	mov	r2, r3
 80078a2:	2300      	movs	r3, #0
 80078a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ac:	461a      	mov	r2, r3
 80078ae:	2300      	movs	r3, #0
 80078b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078b2:	2300      	movs	r3, #0
 80078b4:	613b      	str	r3, [r7, #16]
 80078b6:	e043      	b.n	8007940 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078ce:	d118      	bne.n	8007902 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10a      	bne.n	80078ec <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078e2:	461a      	mov	r2, r3
 80078e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	e013      	b.n	8007914 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078f8:	461a      	mov	r2, r3
 80078fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	e008      	b.n	8007914 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	015a      	lsls	r2, r3, #5
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	4413      	add	r3, r2
 800790a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800790e:	461a      	mov	r2, r3
 8007910:	2300      	movs	r3, #0
 8007912:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007920:	461a      	mov	r2, r3
 8007922:	2300      	movs	r3, #0
 8007924:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007932:	461a      	mov	r2, r3
 8007934:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007938:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	3301      	adds	r3, #1
 800793e:	613b      	str	r3, [r7, #16]
 8007940:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007944:	461a      	mov	r2, r3
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	4293      	cmp	r3, r2
 800794a:	d3b5      	bcc.n	80078b8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800794c:	2300      	movs	r3, #0
 800794e:	613b      	str	r3, [r7, #16]
 8007950:	e043      	b.n	80079da <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007964:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007968:	d118      	bne.n	800799c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10a      	bne.n	8007986 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800797c:	461a      	mov	r2, r3
 800797e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	e013      	b.n	80079ae <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4413      	add	r3, r2
 800798e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007992:	461a      	mov	r2, r3
 8007994:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	e008      	b.n	80079ae <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a8:	461a      	mov	r2, r3
 80079aa:	2300      	movs	r3, #0
 80079ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ba:	461a      	mov	r2, r3
 80079bc:	2300      	movs	r3, #0
 80079be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079cc:	461a      	mov	r2, r3
 80079ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80079d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	3301      	adds	r3, #1
 80079d8:	613b      	str	r3, [r7, #16]
 80079da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80079de:	461a      	mov	r2, r3
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d3b5      	bcc.n	8007952 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007a06:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d105      	bne.n	8007a1c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	f043 0210 	orr.w	r2, r3, #16
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	699a      	ldr	r2, [r3, #24]
 8007a20:	4b0f      	ldr	r3, [pc, #60]	@ (8007a60 <USB_DevInit+0x2b4>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d005      	beq.n	8007a3c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	f043 0208 	orr.w	r2, r3, #8
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d105      	bne.n	8007a50 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	699a      	ldr	r2, [r3, #24]
 8007a48:	4b06      	ldr	r3, [pc, #24]	@ (8007a64 <USB_DevInit+0x2b8>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3718      	adds	r7, #24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a5c:	b004      	add	sp, #16
 8007a5e:	4770      	bx	lr
 8007a60:	803c3800 	.word	0x803c3800
 8007a64:	40000004 	.word	0x40000004

08007a68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a82:	d901      	bls.n	8007a88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e01b      	b.n	8007ac0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	daf2      	bge.n	8007a76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	019b      	lsls	r3, r3, #6
 8007a98:	f043 0220 	orr.w	r2, r3, #32
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007aac:	d901      	bls.n	8007ab2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e006      	b.n	8007ac0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	f003 0320 	and.w	r3, r3, #32
 8007aba:	2b20      	cmp	r3, #32
 8007abc:	d0f0      	beq.n	8007aa0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	3301      	adds	r3, #1
 8007adc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ae4:	d901      	bls.n	8007aea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e018      	b.n	8007b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	daf2      	bge.n	8007ad8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2210      	movs	r2, #16
 8007afa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3301      	adds	r3, #1
 8007b00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b08:	d901      	bls.n	8007b0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e006      	b.n	8007b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	f003 0310 	and.w	r3, r3, #16
 8007b16:	2b10      	cmp	r3, #16
 8007b18:	d0f0      	beq.n	8007afc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	68f9      	ldr	r1, [r7, #12]
 8007b44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b085      	sub	sp, #20
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007b74:	f023 0303 	bic.w	r3, r3, #3
 8007b78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b88:	f043 0302 	orr.w	r3, r3, #2
 8007b8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	695b      	ldr	r3, [r3, #20]
 8007ba8:	f003 0301 	and.w	r3, r3, #1
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bd0:	d901      	bls.n	8007bd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e01b      	b.n	8007c0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	daf2      	bge.n	8007bc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	f043 0201 	orr.w	r2, r3, #1
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bfa:	d901      	bls.n	8007c00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e006      	b.n	8007c0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d0f0      	beq.n	8007bee <USB_CoreReset+0x36>

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <memset>:
 8007c1a:	4402      	add	r2, r0
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d100      	bne.n	8007c24 <memset+0xa>
 8007c22:	4770      	bx	lr
 8007c24:	f803 1b01 	strb.w	r1, [r3], #1
 8007c28:	e7f9      	b.n	8007c1e <memset+0x4>
	...

08007c2c <__libc_init_array>:
 8007c2c:	b570      	push	{r4, r5, r6, lr}
 8007c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8007c64 <__libc_init_array+0x38>)
 8007c30:	4c0d      	ldr	r4, [pc, #52]	@ (8007c68 <__libc_init_array+0x3c>)
 8007c32:	1b64      	subs	r4, r4, r5
 8007c34:	10a4      	asrs	r4, r4, #2
 8007c36:	2600      	movs	r6, #0
 8007c38:	42a6      	cmp	r6, r4
 8007c3a:	d109      	bne.n	8007c50 <__libc_init_array+0x24>
 8007c3c:	4d0b      	ldr	r5, [pc, #44]	@ (8007c6c <__libc_init_array+0x40>)
 8007c3e:	4c0c      	ldr	r4, [pc, #48]	@ (8007c70 <__libc_init_array+0x44>)
 8007c40:	f000 f818 	bl	8007c74 <_init>
 8007c44:	1b64      	subs	r4, r4, r5
 8007c46:	10a4      	asrs	r4, r4, #2
 8007c48:	2600      	movs	r6, #0
 8007c4a:	42a6      	cmp	r6, r4
 8007c4c:	d105      	bne.n	8007c5a <__libc_init_array+0x2e>
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}
 8007c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c54:	4798      	blx	r3
 8007c56:	3601      	adds	r6, #1
 8007c58:	e7ee      	b.n	8007c38 <__libc_init_array+0xc>
 8007c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c5e:	4798      	blx	r3
 8007c60:	3601      	adds	r6, #1
 8007c62:	e7f2      	b.n	8007c4a <__libc_init_array+0x1e>
 8007c64:	08007ccc 	.word	0x08007ccc
 8007c68:	08007ccc 	.word	0x08007ccc
 8007c6c:	08007ccc 	.word	0x08007ccc
 8007c70:	08007cd0 	.word	0x08007cd0

08007c74 <_init>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	bf00      	nop
 8007c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7a:	bc08      	pop	{r3}
 8007c7c:	469e      	mov	lr, r3
 8007c7e:	4770      	bx	lr

08007c80 <_fini>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	bf00      	nop
 8007c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c86:	bc08      	pop	{r3}
 8007c88:	469e      	mov	lr, r3
 8007c8a:	4770      	bx	lr
