
Stepper_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a1c  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007cb4  08007cb4  00008cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007cec  08007cec  00008cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007cf4  08007cf4  00008cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007cf8  08007cf8  00008cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08007cfc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08007d0c  00009010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08007d6c  00009070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  240000d0  08007dcc  000090d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240007a4  08007dcc  000097a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000090d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d383  00000000  00000000  000090fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f2b  00000000  00000000  00026481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  000293b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001078  00000000  00000000  0002a8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003910d  00000000  00000000  0002b930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3a3  00000000  00000000  00064a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016c836  00000000  00000000  00080de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ed616  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b24  00000000  00000000  001ed65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001f3180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007c9c 	.word	0x08007c9c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08007c9c 	.word	0x08007c9c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fedc 	bl	8001388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f836 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f9f2 	bl	80009bc <MX_GPIO_Init>
  MX_ETH_Init();
 80005d8:	f000 f8ae 	bl	8000738 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005dc:	f000 f970 	bl	80008c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e0:	f000 f9ba 	bl	8000958 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80005e4:	f000 f8f4 	bl	80007d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005e8:	2100      	movs	r1, #0
 80005ea:	4814      	ldr	r0, [pc, #80]	@ (800063c <main+0x74>)
 80005ec:	f004 fec8 	bl	8005380 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		set_direction(DIRECTION_LEFT);
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 fba1 	bl	8000d38 <set_direction>
		accelerate_RPM(430);
 80005f6:	f44f 70d7 	mov.w	r0, #430	@ 0x1ae
 80005fa:	f000 fad5 	bl	8000ba8 <accelerate_RPM>
		HAL_Delay(3000);
 80005fe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000602:	f000 ff53 	bl	80014ac <HAL_Delay>

		decelerate_to_RPM(0);
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fb32 	bl	8000c70 <decelerate_to_RPM>
		HAL_Delay(3000);
 800060c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000610:	f000 ff4c 	bl	80014ac <HAL_Delay>

		set_direction(DIRECTION_RIGHT);
 8000614:	2001      	movs	r0, #1
 8000616:	f000 fb8f 	bl	8000d38 <set_direction>
		accelerate_RPM(330);
 800061a:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 800061e:	f000 fac3 	bl	8000ba8 <accelerate_RPM>
		HAL_Delay(3000);
 8000622:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000626:	f000 ff41 	bl	80014ac <HAL_Delay>

		decelerate_to_RPM(0);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 fb20 	bl	8000c70 <decelerate_to_RPM>
		HAL_Delay(3000);
 8000630:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000634:	f000 ff3a 	bl	80014ac <HAL_Delay>
		set_direction(DIRECTION_LEFT);
 8000638:	bf00      	nop
 800063a:	e7d9      	b.n	80005f0 <main+0x28>
 800063c:	240001d4 	.word	0x240001d4

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09c      	sub	sp, #112	@ 0x70
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800064a:	224c      	movs	r2, #76	@ 0x4c
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f007 faf7 	bl	8007c42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2220      	movs	r2, #32
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f007 faf1 	bl	8007c42 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000660:	2002      	movs	r0, #2
 8000662:	f001 ff79 	bl	8002558 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	4b31      	ldr	r3, [pc, #196]	@ (8000730 <SystemClock_Config+0xf0>)
 800066c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800066e:	4a30      	ldr	r2, [pc, #192]	@ (8000730 <SystemClock_Config+0xf0>)
 8000670:	f023 0301 	bic.w	r3, r3, #1
 8000674:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000676:	4b2e      	ldr	r3, [pc, #184]	@ (8000730 <SystemClock_Config+0xf0>)
 8000678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b2c      	ldr	r3, [pc, #176]	@ (8000734 <SystemClock_Config+0xf4>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000688:	4a2a      	ldr	r2, [pc, #168]	@ (8000734 <SystemClock_Config+0xf4>)
 800068a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <SystemClock_Config+0xf4>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800069c:	bf00      	nop
 800069e:	4b25      	ldr	r3, [pc, #148]	@ (8000734 <SystemClock_Config+0xf4>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006aa:	d1f8      	bne.n	800069e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 75;
 80006c2:	234b      	movs	r3, #75	@ 0x4b
 80006c4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 80006ca:	230a      	movs	r3, #10
 80006cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006d2:	230c      	movs	r3, #12
 80006d4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 ff82 	bl	80025ec <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006ee:	f000 fa55 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	233f      	movs	r3, #63	@ 0x3f
 80006f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2303      	movs	r3, #3
 80006f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006fe:	2308      	movs	r3, #8
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000702:	2340      	movs	r3, #64	@ 0x40
 8000704:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000706:	2340      	movs	r3, #64	@ 0x40
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800070a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800070e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000710:	2340      	movs	r3, #64	@ 0x40
 8000712:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2102      	movs	r1, #2
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fbc1 	bl	8002ea0 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000724:	f000 fa3a 	bl	8000b9c <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	3770      	adds	r7, #112	@ 0x70
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	58000400 	.word	0x58000400
 8000734:	58024800 	.word	0x58024800

08000738 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800073c:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <MX_ETH_Init+0x80>)
 800073e:	4a1f      	ldr	r2, [pc, #124]	@ (80007bc <MX_ETH_Init+0x84>)
 8000740:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000742:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <MX_ETH_Init+0x88>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000748:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <MX_ETH_Init+0x88>)
 800074a:	2280      	movs	r2, #128	@ 0x80
 800074c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800074e:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <MX_ETH_Init+0x88>)
 8000750:	22e1      	movs	r2, #225	@ 0xe1
 8000752:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000754:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <MX_ETH_Init+0x88>)
 8000756:	2200      	movs	r2, #0
 8000758:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800075a:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <MX_ETH_Init+0x88>)
 800075c:	2200      	movs	r2, #0
 800075e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000760:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <MX_ETH_Init+0x88>)
 8000762:	2200      	movs	r2, #0
 8000764:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_ETH_Init+0x80>)
 8000768:	4a15      	ldr	r2, [pc, #84]	@ (80007c0 <MX_ETH_Init+0x88>)
 800076a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <MX_ETH_Init+0x80>)
 800076e:	2201      	movs	r2, #1
 8000770:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_ETH_Init+0x80>)
 8000774:	4a13      	ldr	r2, [pc, #76]	@ (80007c4 <MX_ETH_Init+0x8c>)
 8000776:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_ETH_Init+0x80>)
 800077a:	4a13      	ldr	r2, [pc, #76]	@ (80007c8 <MX_ETH_Init+0x90>)
 800077c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_ETH_Init+0x80>)
 8000780:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000784:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000786:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <MX_ETH_Init+0x80>)
 8000788:	f000 ffb8 	bl	80016fc <HAL_ETH_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000792:	f000 fa03 	bl	8000b9c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000796:	2238      	movs	r2, #56	@ 0x38
 8000798:	2100      	movs	r1, #0
 800079a:	480c      	ldr	r0, [pc, #48]	@ (80007cc <MX_ETH_Init+0x94>)
 800079c:	f007 fa51 	bl	8007c42 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <MX_ETH_Init+0x94>)
 80007a2:	2221      	movs	r2, #33	@ 0x21
 80007a4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_ETH_Init+0x94>)
 80007a8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007ac:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007ae:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <MX_ETH_Init+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	24000124 	.word	0x24000124
 80007bc:	40028000 	.word	0x40028000
 80007c0:	24000798 	.word	0x24000798
 80007c4:	24000070 	.word	0x24000070
 80007c8:	24000010 	.word	0x24000010
 80007cc:	240000ec 	.word	0x240000ec

080007d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08e      	sub	sp, #56	@ 0x38
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f0:	463b      	mov	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
 80007fe:	615a      	str	r2, [r3, #20]
 8000800:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000802:	4b2d      	ldr	r3, [pc, #180]	@ (80008b8 <MX_TIM3_Init+0xe8>)
 8000804:	4a2d      	ldr	r2, [pc, #180]	@ (80008bc <MX_TIM3_Init+0xec>)
 8000806:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 150-1;
 8000808:	4b2b      	ldr	r3, [pc, #172]	@ (80008b8 <MX_TIM3_Init+0xe8>)
 800080a:	2295      	movs	r2, #149	@ 0x95
 800080c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080e:	4b2a      	ldr	r3, [pc, #168]	@ (80008b8 <MX_TIM3_Init+0xe8>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 62500-1;
 8000814:	4b28      	ldr	r3, [pc, #160]	@ (80008b8 <MX_TIM3_Init+0xe8>)
 8000816:	f24f 4223 	movw	r2, #62499	@ 0xf423
 800081a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081c:	4b26      	ldr	r3, [pc, #152]	@ (80008b8 <MX_TIM3_Init+0xe8>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000822:	4b25      	ldr	r3, [pc, #148]	@ (80008b8 <MX_TIM3_Init+0xe8>)
 8000824:	2280      	movs	r2, #128	@ 0x80
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000828:	4823      	ldr	r0, [pc, #140]	@ (80008b8 <MX_TIM3_Init+0xe8>)
 800082a:	f004 fcf1 	bl	8005210 <HAL_TIM_Base_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000834:	f000 f9b2 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000838:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800083e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000842:	4619      	mov	r1, r3
 8000844:	481c      	ldr	r0, [pc, #112]	@ (80008b8 <MX_TIM3_Init+0xe8>)
 8000846:	f005 f853 	bl	80058f0 <HAL_TIM_ConfigClockSource>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000850:	f000 f9a4 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000854:	4818      	ldr	r0, [pc, #96]	@ (80008b8 <MX_TIM3_Init+0xe8>)
 8000856:	f004 fd32 	bl	80052be <HAL_TIM_PWM_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000860:	f000 f99c 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	4811      	ldr	r0, [pc, #68]	@ (80008b8 <MX_TIM3_Init+0xe8>)
 8000874:	f005 fd74 	bl	8006360 <HAL_TIMEx_MasterConfigSynchronization>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800087e:	f000 f98d 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000882:	2360      	movs	r3, #96	@ 0x60
 8000884:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 250;
 8000886:	23fa      	movs	r3, #250	@ 0xfa
 8000888:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000892:	463b      	mov	r3, r7
 8000894:	2200      	movs	r2, #0
 8000896:	4619      	mov	r1, r3
 8000898:	4807      	ldr	r0, [pc, #28]	@ (80008b8 <MX_TIM3_Init+0xe8>)
 800089a:	f004 ff15 	bl	80056c8 <HAL_TIM_PWM_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80008a4:	f000 f97a 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008a8:	4803      	ldr	r0, [pc, #12]	@ (80008b8 <MX_TIM3_Init+0xe8>)
 80008aa:	f000 fb6b 	bl	8000f84 <HAL_TIM_MspPostInit>

}
 80008ae:	bf00      	nop
 80008b0:	3738      	adds	r7, #56	@ 0x38
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	240001d4 	.word	0x240001d4
 80008bc:	40000400 	.word	0x40000400

080008c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c4:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008c6:	4a23      	ldr	r2, [pc, #140]	@ (8000954 <MX_USART3_UART_Init+0x94>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ca:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008de:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008fc:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000902:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000908:	4811      	ldr	r0, [pc, #68]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 800090a:	f005 fdb7 	bl	800647c <HAL_UART_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000914:	f000 f942 	bl	8000b9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000918:	2100      	movs	r1, #0
 800091a:	480d      	ldr	r0, [pc, #52]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 800091c:	f006 fdbf 	bl	800749e <HAL_UARTEx_SetTxFifoThreshold>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000926:	f000 f939 	bl	8000b9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092a:	2100      	movs	r1, #0
 800092c:	4808      	ldr	r0, [pc, #32]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 800092e:	f006 fdf4 	bl	800751a <HAL_UARTEx_SetRxFifoThreshold>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000938:	f000 f930 	bl	8000b9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 800093e:	f006 fd75 	bl	800742c <HAL_UARTEx_DisableFifoMode>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000948:	f000 f928 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	24000220 	.word	0x24000220
 8000954:	40004800 	.word	0x40004800

08000958 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800095c:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800095e:	4a16      	ldr	r2, [pc, #88]	@ (80009b8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000960:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000962:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000964:	2209      	movs	r2, #9
 8000966:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800096a:	2202      	movs	r2, #2
 800096c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000970:	2200      	movs	r2, #0
 8000972:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000976:	2202      	movs	r2, #2
 8000978:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800097c:	2201      	movs	r2, #1
 800097e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000980:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000982:	2200      	movs	r2, #0
 8000984:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	@ (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000988:	2200      	movs	r2, #0
 800098a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800098e:	2201      	movs	r2, #1
 8000990:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000994:	2201      	movs	r2, #1
 8000996:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800099a:	2200      	movs	r2, #0
 800099c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009a0:	f001 fca9 	bl	80022f6 <HAL_PCD_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80009aa:	f000 f8f7 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	240002b4 	.word	0x240002b4
 80009b8:	40080000 	.word	0x40080000

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	@ 0x30
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b6b      	ldr	r3, [pc, #428]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d8:	4a69      	ldr	r2, [pc, #420]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e2:	4b67      	ldr	r3, [pc, #412]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	61bb      	str	r3, [r7, #24]
 80009ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f0:	4b63      	ldr	r3, [pc, #396]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f6:	4a62      	ldr	r2, [pc, #392]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a00:	4b5f      	ldr	r3, [pc, #380]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b5c      	ldr	r3, [pc, #368]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a14:	4a5a      	ldr	r2, [pc, #360]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a1e:	4b58      	ldr	r3, [pc, #352]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	4b54      	ldr	r3, [pc, #336]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a32:	4a53      	ldr	r2, [pc, #332]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a3c:	4b50      	ldr	r3, [pc, #320]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	4b4d      	ldr	r3, [pc, #308]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a50:	4a4b      	ldr	r2, [pc, #300]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a52:	f043 0308 	orr.w	r3, r3, #8
 8000a56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a5a:	4b49      	ldr	r3, [pc, #292]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a60:	f003 0308 	and.w	r3, r3, #8
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a68:	4b45      	ldr	r3, [pc, #276]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6e:	4a44      	ldr	r2, [pc, #272]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a78:	4b41      	ldr	r3, [pc, #260]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a86:	4b3e      	ldr	r3, [pc, #248]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8c:	4a3c      	ldr	r2, [pc, #240]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a96:	4b3a      	ldr	r3, [pc, #232]	@ (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2120      	movs	r1, #32
 8000aa8:	4836      	ldr	r0, [pc, #216]	@ (8000b84 <MX_GPIO_Init+0x1c8>)
 8000aaa:	f001 fc0b 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ab4:	4834      	ldr	r0, [pc, #208]	@ (8000b88 <MX_GPIO_Init+0x1cc>)
 8000ab6:	f001 fc05 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ac0:	4832      	ldr	r0, [pc, #200]	@ (8000b8c <MX_GPIO_Init+0x1d0>)
 8000ac2:	f001 fbff 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4831      	ldr	r0, [pc, #196]	@ (8000b90 <MX_GPIO_Init+0x1d4>)
 8000acc:	f001 fbfa 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	482b      	ldr	r0, [pc, #172]	@ (8000b94 <MX_GPIO_Init+0x1d8>)
 8000ae6:	f001 fa3d 	bl	8001f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000aea:	2320      	movs	r3, #32
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4820      	ldr	r0, [pc, #128]	@ (8000b84 <MX_GPIO_Init+0x1c8>)
 8000b02:	f001 fa2f 	bl	8001f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b06:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	481a      	ldr	r0, [pc, #104]	@ (8000b88 <MX_GPIO_Init+0x1cc>)
 8000b20:	f001 fa20 	bl	8001f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4813      	ldr	r0, [pc, #76]	@ (8000b8c <MX_GPIO_Init+0x1d0>)
 8000b3e:	f001 fa11 	bl	8001f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b42:	2380      	movs	r3, #128	@ 0x80
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b46:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4810      	ldr	r0, [pc, #64]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 8000b58:	f001 fa04 	bl	8001f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	4807      	ldr	r0, [pc, #28]	@ (8000b90 <MX_GPIO_Init+0x1d4>)
 8000b74:	f001 f9f6 	bl	8001f64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b78:	bf00      	nop
 8000b7a:	3730      	adds	r7, #48	@ 0x30
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	58024400 	.word	0x58024400
 8000b84:	58020000 	.word	0x58020000
 8000b88:	58020400 	.word	0x58020400
 8000b8c:	58020c00 	.word	0x58020c00
 8000b90:	58021000 	.word	0x58021000
 8000b94:	58020800 	.word	0x58020800
 8000b98:	58021800 	.word	0x58021800

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <Error_Handler+0x8>

08000ba8 <accelerate_RPM>:
#include "stm32h7xx_hal.h"
#include "string.h"

extern TIM_HandleTypeDef htim3;

void accelerate_RPM(int target_speed_RPM) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

	//Porneste generarea de semnal PWM
	int target_frequency = (target_speed_RPM / 60.0) * 200;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	ee07 3a90 	vmov	s15, r3
 8000bb6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bba:	ed9f 5b27 	vldr	d5, [pc, #156]	@ 8000c58 <accelerate_RPM+0xb0>
 8000bbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bc2:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 8000c60 <accelerate_RPM+0xb8>
 8000bc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bca:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000bce:	ee17 3a90 	vmov	r3, s15
 8000bd2:	60fb      	str	r3, [r7, #12]
	int current_frequency  = 1000000 / (__HAL_TIM_GET_AUTORELOAD(&htim3)) +1;
 8000bd4:	4b24      	ldr	r3, [pc, #144]	@ (8000c68 <accelerate_RPM+0xc0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bda:	4a24      	ldr	r2, [pc, #144]	@ (8000c6c <accelerate_RPM+0xc4>)
 8000bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be0:	3301      	adds	r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]

	if(target_frequency > MAX_FREQUENCY){
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000bea:	4293      	cmp	r3, r2
 8000bec:	dd03      	ble.n	8000bf6 <accelerate_RPM+0x4e>
		target_frequency = MAX_FREQUENCY;
 8000bee:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	e004      	b.n	8000c00 <accelerate_RPM+0x58>
	}
	else if(target_frequency < MIN_FREQUENCY){
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b0f      	cmp	r3, #15
 8000bfa:	dc01      	bgt.n	8000c00 <accelerate_RPM+0x58>
		target_frequency = MIN_FREQUENCY;
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	60fb      	str	r3, [r7, #12]
	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c00:	2100      	movs	r1, #0
 8000c02:	4819      	ldr	r0, [pc, #100]	@ (8000c68 <accelerate_RPM+0xc0>)
 8000c04:	f004 fbbc 	bl	8005380 <HAL_TIM_PWM_Start>


	while (current_frequency < target_frequency) {
 8000c08:	e01b      	b.n	8000c42 <accelerate_RPM+0x9a>

		current_frequency += ACCELERATION_STEP;
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	3305      	adds	r3, #5
 8000c0e:	60bb      	str	r3, [r7, #8]

		if (current_frequency > target_frequency) {
 8000c10:	68ba      	ldr	r2, [r7, #8]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	dd01      	ble.n	8000c1c <accelerate_RPM+0x74>
			current_frequency = target_frequency;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	60bb      	str	r3, [r7, #8]
		}

		//Actualizeaza ARR cu noua valoare (1000000 este frecventa ceasului folosita pentru pwm -64mhz cu prescalar de 64)
		__HAL_TIM_SET_AUTORELOAD(&htim3, (1000000 / current_frequency) - 1);
 8000c1c:	4a13      	ldr	r2, [pc, #76]	@ (8000c6c <accelerate_RPM+0xc4>)
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c24:	1e5a      	subs	r2, r3, #1
 8000c26:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <accelerate_RPM+0xc0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c2c:	4a0f      	ldr	r2, [pc, #60]	@ (8000c6c <accelerate_RPM+0xc4>)
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c34:	3b01      	subs	r3, #1
 8000c36:	461a      	mov	r2, r3
 8000c38:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <accelerate_RPM+0xc0>)
 8000c3a:	60da      	str	r2, [r3, #12]
		HAL_Delay(10);
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f000 fc35 	bl	80014ac <HAL_Delay>
	while (current_frequency < target_frequency) {
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	dbdf      	blt.n	8000c0a <accelerate_RPM+0x62>
	}
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	f3af 8000 	nop.w
 8000c58:	00000000 	.word	0x00000000
 8000c5c:	404e0000 	.word	0x404e0000
 8000c60:	00000000 	.word	0x00000000
 8000c64:	40690000 	.word	0x40690000
 8000c68:	240001d4 	.word	0x240001d4
 8000c6c:	000f4240 	.word	0x000f4240

08000c70 <decelerate_to_RPM>:

void decelerate_to_RPM(int target_speed_RPM) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	int target_frequency = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
	int current_frequency  = 1000000 / (__HAL_TIM_GET_AUTORELOAD(&htim3)) +1;
 8000c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d30 <decelerate_to_RPM+0xc0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c82:	4a2c      	ldr	r2, [pc, #176]	@ (8000d34 <decelerate_to_RPM+0xc4>)
 8000c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c88:	3301      	adds	r3, #1
 8000c8a:	60bb      	str	r3, [r7, #8]

	if (target_speed_RPM == 0) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d102      	bne.n	8000c98 <decelerate_to_RPM+0x28>
		target_frequency = MIN_FREQUENCY;
 8000c92:	2310      	movs	r3, #16
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	e02e      	b.n	8000cf6 <decelerate_to_RPM+0x86>
	} else {
		target_frequency = (target_speed_RPM / 60.0) * 200;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	ee07 3a90 	vmov	s15, r3
 8000c9e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ca2:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 8000d20 <decelerate_to_RPM+0xb0>
 8000ca6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000caa:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8000d28 <decelerate_to_RPM+0xb8>
 8000cae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cb2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cb6:	ee17 3a90 	vmov	r3, s15
 8000cba:	60fb      	str	r3, [r7, #12]
	}

	while (current_frequency > target_frequency) {
 8000cbc:	e01b      	b.n	8000cf6 <decelerate_to_RPM+0x86>

		current_frequency -= DECELERATION_STEP;
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	3b05      	subs	r3, #5
 8000cc2:	60bb      	str	r3, [r7, #8]

		if (current_frequency < target_frequency) {
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	da01      	bge.n	8000cd0 <decelerate_to_RPM+0x60>
			current_frequency = target_frequency;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	60bb      	str	r3, [r7, #8]
		}

		//Actualizeaza ARR cu noua valoare (1000000 este frecventa ceasului folosita pentru pwm -64mhz cu prescalar de 64)
		__HAL_TIM_SET_AUTORELOAD(&htim3, (1000000 / current_frequency) - 1);
 8000cd0:	4a18      	ldr	r2, [pc, #96]	@ (8000d34 <decelerate_to_RPM+0xc4>)
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cd8:	1e5a      	subs	r2, r3, #1
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <decelerate_to_RPM+0xc0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ce0:	4a14      	ldr	r2, [pc, #80]	@ (8000d34 <decelerate_to_RPM+0xc4>)
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <decelerate_to_RPM+0xc0>)
 8000cee:	60da      	str	r2, [r3, #12]
		HAL_Delay(10);
 8000cf0:	200a      	movs	r0, #10
 8000cf2:	f000 fbdb 	bl	80014ac <HAL_Delay>
	while (current_frequency > target_frequency) {
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	dcdf      	bgt.n	8000cbe <decelerate_to_RPM+0x4e>
	}

	if (target_speed_RPM == 0 && target_frequency == 16) {
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d106      	bne.n	8000d12 <decelerate_to_RPM+0xa2>
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2b10      	cmp	r3, #16
 8000d08:	d103      	bne.n	8000d12 <decelerate_to_RPM+0xa2>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4808      	ldr	r0, [pc, #32]	@ (8000d30 <decelerate_to_RPM+0xc0>)
 8000d0e:	f004 fc45 	bl	800559c <HAL_TIM_PWM_Stop>
	}
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	f3af 8000 	nop.w
 8000d20:	00000000 	.word	0x00000000
 8000d24:	404e0000 	.word	0x404e0000
 8000d28:	00000000 	.word	0x00000000
 8000d2c:	40690000 	.word	0x40690000
 8000d30:	240001d4 	.word	0x240001d4
 8000d34:	000f4240 	.word	0x000f4240

08000d38 <set_direction>:

void set_direction(Direction direction) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
    if (direction == DIRECTION_LEFT) {
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d105      	bne.n	8000d54 <set_direction+0x1c>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2120      	movs	r1, #32
 8000d4c:	4807      	ldr	r0, [pc, #28]	@ (8000d6c <set_direction+0x34>)
 8000d4e:	f001 fab9 	bl	80022c4 <HAL_GPIO_WritePin>
    } else if (direction == DIRECTION_RIGHT) {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
    }
}
 8000d52:	e007      	b.n	8000d64 <set_direction+0x2c>
    } else if (direction == DIRECTION_RIGHT) {
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d104      	bne.n	8000d64 <set_direction+0x2c>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2120      	movs	r1, #32
 8000d5e:	4803      	ldr	r0, [pc, #12]	@ (8000d6c <set_direction+0x34>)
 8000d60:	f001 fab0 	bl	80022c4 <HAL_GPIO_WritePin>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	58020000 	.word	0x58020000

08000d70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <HAL_MspInit+0x30>)
 8000d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d7c:	4a08      	ldr	r2, [pc, #32]	@ (8000da0 <HAL_MspInit+0x30>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_MspInit+0x30>)
 8000d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	58024400 	.word	0x58024400

08000da4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	@ 0x38
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a59      	ldr	r2, [pc, #356]	@ (8000f28 <HAL_ETH_MspInit+0x184>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	f040 80ab 	bne.w	8000f1e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000dc8:	4b58      	ldr	r3, [pc, #352]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000dca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dce:	4a57      	ldr	r2, [pc, #348]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dd4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dd8:	4b54      	ldr	r3, [pc, #336]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000dda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000de2:	623b      	str	r3, [r7, #32]
 8000de4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000de6:	4b51      	ldr	r3, [pc, #324]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000de8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dec:	4a4f      	ldr	r2, [pc, #316]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000dee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000df2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000df6:	4b4d      	ldr	r3, [pc, #308]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000df8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e04:	4b49      	ldr	r3, [pc, #292]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e0a:	4a48      	ldr	r2, [pc, #288]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e10:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e14:	4b45      	ldr	r3, [pc, #276]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e1e:	61bb      	str	r3, [r7, #24]
 8000e20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	4b42      	ldr	r3, [pc, #264]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e28:	4a40      	ldr	r2, [pc, #256]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e32:	4b3e      	ldr	r3, [pc, #248]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b3a      	ldr	r3, [pc, #232]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e46:	4a39      	ldr	r2, [pc, #228]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e50:	4b36      	ldr	r3, [pc, #216]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b33      	ldr	r3, [pc, #204]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e64:	4a31      	ldr	r2, [pc, #196]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e66:	f043 0302 	orr.w	r3, r3, #2
 8000e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e82:	4a2a      	ldr	r2, [pc, #168]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e8c:	4b27      	ldr	r3, [pc, #156]	@ (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e9a:	2332      	movs	r3, #50	@ 0x32
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eaa:	230b      	movs	r3, #11
 8000eac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	481e      	ldr	r0, [pc, #120]	@ (8000f30 <HAL_ETH_MspInit+0x18c>)
 8000eb6:	f001 f855 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000eba:	2386      	movs	r3, #134	@ 0x86
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eca:	230b      	movs	r3, #11
 8000ecc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4817      	ldr	r0, [pc, #92]	@ (8000f34 <HAL_ETH_MspInit+0x190>)
 8000ed6:	f001 f845 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eec:	230b      	movs	r3, #11
 8000eee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4810      	ldr	r0, [pc, #64]	@ (8000f38 <HAL_ETH_MspInit+0x194>)
 8000ef8:	f001 f834 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000efc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f0e:	230b      	movs	r3, #11
 8000f10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f16:	4619      	mov	r1, r3
 8000f18:	4808      	ldr	r0, [pc, #32]	@ (8000f3c <HAL_ETH_MspInit+0x198>)
 8000f1a:	f001 f823 	bl	8001f64 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000f1e:	bf00      	nop
 8000f20:	3738      	adds	r7, #56	@ 0x38
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40028000 	.word	0x40028000
 8000f2c:	58024400 	.word	0x58024400
 8000f30:	58020800 	.word	0x58020800
 8000f34:	58020000 	.word	0x58020000
 8000f38:	58020400 	.word	0x58020400
 8000f3c:	58021800 	.word	0x58021800

08000f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <HAL_TIM_Base_MspInit+0x3c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d10e      	bne.n	8000f70 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f52:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <HAL_TIM_Base_MspInit+0x40>)
 8000f54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f58:	4a09      	ldr	r2, [pc, #36]	@ (8000f80 <HAL_TIM_Base_MspInit+0x40>)
 8000f5a:	f043 0302 	orr.w	r3, r3, #2
 8000f5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f62:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <HAL_TIM_Base_MspInit+0x40>)
 8000f64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40000400 	.word	0x40000400
 8000f80:	58024400 	.word	0x58024400

08000f84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a12      	ldr	r2, [pc, #72]	@ (8000fec <HAL_TIM_MspPostInit+0x68>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d11e      	bne.n	8000fe4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <HAL_TIM_MspPostInit+0x6c>)
 8000fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fac:	4a10      	ldr	r2, [pc, #64]	@ (8000ff0 <HAL_TIM_MspPostInit+0x6c>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <HAL_TIM_MspPostInit+0x6c>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fc4:	2340      	movs	r3, #64	@ 0x40
 8000fc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <HAL_TIM_MspPostInit+0x70>)
 8000fe0:	f000 ffc0 	bl	8001f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40000400 	.word	0x40000400
 8000ff0:	58024400 	.word	0x58024400
 8000ff4:	58020000 	.word	0x58020000

08000ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0ba      	sub	sp, #232	@ 0xe8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	22c0      	movs	r2, #192	@ 0xc0
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f006 fe12 	bl	8007c42 <memset>
  if(huart->Instance==USART3)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a27      	ldr	r2, [pc, #156]	@ (80010c0 <HAL_UART_MspInit+0xc8>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d146      	bne.n	80010b6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001028:	f04f 0202 	mov.w	r2, #2
 800102c:	f04f 0300 	mov.w	r3, #0
 8001030:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	4618      	mov	r0, r3
 8001040:	f002 faba 	bl	80035b8 <HAL_RCCEx_PeriphCLKConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800104a:	f7ff fda7 	bl	8000b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800104e:	4b1d      	ldr	r3, [pc, #116]	@ (80010c4 <HAL_UART_MspInit+0xcc>)
 8001050:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001054:	4a1b      	ldr	r2, [pc, #108]	@ (80010c4 <HAL_UART_MspInit+0xcc>)
 8001056:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800105a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800105e:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <HAL_UART_MspInit+0xcc>)
 8001060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001064:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800106c:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <HAL_UART_MspInit+0xcc>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001072:	4a14      	ldr	r2, [pc, #80]	@ (80010c4 <HAL_UART_MspInit+0xcc>)
 8001074:	f043 0308 	orr.w	r3, r3, #8
 8001078:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800107c:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <HAL_UART_MspInit+0xcc>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800108a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800108e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010a4:	2307      	movs	r3, #7
 80010a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010aa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <HAL_UART_MspInit+0xd0>)
 80010b2:	f000 ff57 	bl	8001f64 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80010b6:	bf00      	nop
 80010b8:	37e8      	adds	r7, #232	@ 0xe8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40004800 	.word	0x40004800
 80010c4:	58024400 	.word	0x58024400
 80010c8:	58020c00 	.word	0x58020c00

080010cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0ba      	sub	sp, #232	@ 0xe8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	22c0      	movs	r2, #192	@ 0xc0
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f006 fda8 	bl	8007c42 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a30      	ldr	r2, [pc, #192]	@ (80011b8 <HAL_PCD_MspInit+0xec>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d159      	bne.n	80011b0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010fc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001108:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800110c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f002 fa4f 	bl	80035b8 <HAL_RCCEx_PeriphCLKConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001120:	f7ff fd3c 	bl	8000b9c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001124:	f001 fa52 	bl	80025cc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b24      	ldr	r3, [pc, #144]	@ (80011bc <HAL_PCD_MspInit+0xf0>)
 800112a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112e:	4a23      	ldr	r2, [pc, #140]	@ (80011bc <HAL_PCD_MspInit+0xf0>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001138:	4b20      	ldr	r3, [pc, #128]	@ (80011bc <HAL_PCD_MspInit+0xf0>)
 800113a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001146:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800114a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001160:	230a      	movs	r3, #10
 8001162:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800116a:	4619      	mov	r1, r3
 800116c:	4814      	ldr	r0, [pc, #80]	@ (80011c0 <HAL_PCD_MspInit+0xf4>)
 800116e:	f000 fef9 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001172:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001176:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800118a:	4619      	mov	r1, r3
 800118c:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <HAL_PCD_MspInit+0xf4>)
 800118e:	f000 fee9 	bl	8001f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <HAL_PCD_MspInit+0xf0>)
 8001194:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001198:	4a08      	ldr	r2, [pc, #32]	@ (80011bc <HAL_PCD_MspInit+0xf0>)
 800119a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800119e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_PCD_MspInit+0xf0>)
 80011a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80011b0:	bf00      	nop
 80011b2:	37e8      	adds	r7, #232	@ 0xe8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40080000 	.word	0x40080000
 80011bc:	58024400 	.word	0x58024400
 80011c0:	58020000 	.word	0x58020000

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <NMI_Handler+0x4>

080011cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <MemManage_Handler+0x4>

080011dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121a:	f000 f927 	bl	800146c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001228:	4b37      	ldr	r3, [pc, #220]	@ (8001308 <SystemInit+0xe4>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800122e:	4a36      	ldr	r2, [pc, #216]	@ (8001308 <SystemInit+0xe4>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001238:	4b34      	ldr	r3, [pc, #208]	@ (800130c <SystemInit+0xe8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 030f 	and.w	r3, r3, #15
 8001240:	2b06      	cmp	r3, #6
 8001242:	d807      	bhi.n	8001254 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001244:	4b31      	ldr	r3, [pc, #196]	@ (800130c <SystemInit+0xe8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f023 030f 	bic.w	r3, r3, #15
 800124c:	4a2f      	ldr	r2, [pc, #188]	@ (800130c <SystemInit+0xe8>)
 800124e:	f043 0307 	orr.w	r3, r3, #7
 8001252:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001254:	4b2e      	ldr	r3, [pc, #184]	@ (8001310 <SystemInit+0xec>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a2d      	ldr	r2, [pc, #180]	@ (8001310 <SystemInit+0xec>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001260:	4b2b      	ldr	r3, [pc, #172]	@ (8001310 <SystemInit+0xec>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001266:	4b2a      	ldr	r3, [pc, #168]	@ (8001310 <SystemInit+0xec>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4929      	ldr	r1, [pc, #164]	@ (8001310 <SystemInit+0xec>)
 800126c:	4b29      	ldr	r3, [pc, #164]	@ (8001314 <SystemInit+0xf0>)
 800126e:	4013      	ands	r3, r2
 8001270:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001272:	4b26      	ldr	r3, [pc, #152]	@ (800130c <SystemInit+0xe8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d007      	beq.n	800128e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800127e:	4b23      	ldr	r3, [pc, #140]	@ (800130c <SystemInit+0xe8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 030f 	bic.w	r3, r3, #15
 8001286:	4a21      	ldr	r2, [pc, #132]	@ (800130c <SystemInit+0xe8>)
 8001288:	f043 0307 	orr.w	r3, r3, #7
 800128c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800128e:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <SystemInit+0xec>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001294:	4b1e      	ldr	r3, [pc, #120]	@ (8001310 <SystemInit+0xec>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800129a:	4b1d      	ldr	r3, [pc, #116]	@ (8001310 <SystemInit+0xec>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001310 <SystemInit+0xec>)
 80012a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001318 <SystemInit+0xf4>)
 80012a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <SystemInit+0xec>)
 80012a8:	4a1c      	ldr	r2, [pc, #112]	@ (800131c <SystemInit+0xf8>)
 80012aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012ac:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <SystemInit+0xec>)
 80012ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001320 <SystemInit+0xfc>)
 80012b0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012b2:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <SystemInit+0xec>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012b8:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <SystemInit+0xec>)
 80012ba:	4a19      	ldr	r2, [pc, #100]	@ (8001320 <SystemInit+0xfc>)
 80012bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012be:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <SystemInit+0xec>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <SystemInit+0xec>)
 80012c6:	4a16      	ldr	r2, [pc, #88]	@ (8001320 <SystemInit+0xfc>)
 80012c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <SystemInit+0xec>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <SystemInit+0xec>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001310 <SystemInit+0xec>)
 80012d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <SystemInit+0xec>)
 80012de:	2200      	movs	r2, #0
 80012e0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012e2:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <SystemInit+0x100>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b10      	ldr	r3, [pc, #64]	@ (8001328 <SystemInit+0x104>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012ee:	d202      	bcs.n	80012f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012f0:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <SystemInit+0x108>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <SystemInit+0x10c>)
 80012f8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80012fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00
 800130c:	52002000 	.word	0x52002000
 8001310:	58024400 	.word	0x58024400
 8001314:	eaf6ed7f 	.word	0xeaf6ed7f
 8001318:	02020200 	.word	0x02020200
 800131c:	01ff0000 	.word	0x01ff0000
 8001320:	01010280 	.word	0x01010280
 8001324:	5c001000 	.word	0x5c001000
 8001328:	ffff0000 	.word	0xffff0000
 800132c:	51008108 	.word	0x51008108
 8001330:	52004000 	.word	0x52004000

08001334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001334:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800136c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001338:	f7ff ff74 	bl	8001224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800133c:	480c      	ldr	r0, [pc, #48]	@ (8001370 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800133e:	490d      	ldr	r1, [pc, #52]	@ (8001374 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001340:	4a0d      	ldr	r2, [pc, #52]	@ (8001378 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001344:	e002      	b.n	800134c <LoopCopyDataInit>

08001346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134a:	3304      	adds	r3, #4

0800134c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800134c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001350:	d3f9      	bcc.n	8001346 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001354:	4c0a      	ldr	r4, [pc, #40]	@ (8001380 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001358:	e001      	b.n	800135e <LoopFillZerobss>

0800135a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800135c:	3204      	adds	r2, #4

0800135e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001360:	d3fb      	bcc.n	800135a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001362:	f006 fc77 	bl	8007c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001366:	f7ff f92f 	bl	80005c8 <main>
  bx  lr
 800136a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800136c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001370:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001374:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001378:	08007cfc 	.word	0x08007cfc
  ldr r2, =_sbss
 800137c:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001380:	240007a4 	.word	0x240007a4

08001384 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <ADC3_IRQHandler>
	...

08001388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138e:	2003      	movs	r0, #3
 8001390:	f000 f982 	bl	8001698 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001394:	f001 ff3a 	bl	800320c <HAL_RCC_GetSysClockFreq>
 8001398:	4602      	mov	r2, r0
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <HAL_Init+0x68>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	0a1b      	lsrs	r3, r3, #8
 80013a0:	f003 030f 	and.w	r3, r3, #15
 80013a4:	4913      	ldr	r1, [pc, #76]	@ (80013f4 <HAL_Init+0x6c>)
 80013a6:	5ccb      	ldrb	r3, [r1, r3]
 80013a8:	f003 031f 	and.w	r3, r3, #31
 80013ac:	fa22 f303 	lsr.w	r3, r2, r3
 80013b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013b2:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <HAL_Init+0x68>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	4a0e      	ldr	r2, [pc, #56]	@ (80013f4 <HAL_Init+0x6c>)
 80013bc:	5cd3      	ldrb	r3, [r2, r3]
 80013be:	f003 031f 	and.w	r3, r3, #31
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	fa22 f303 	lsr.w	r3, r2, r3
 80013c8:	4a0b      	ldr	r2, [pc, #44]	@ (80013f8 <HAL_Init+0x70>)
 80013ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013cc:	4a0b      	ldr	r2, [pc, #44]	@ (80013fc <HAL_Init+0x74>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013d2:	200f      	movs	r0, #15
 80013d4:	f000 f814 	bl	8001400 <HAL_InitTick>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e002      	b.n	80013e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013e2:	f7ff fcc5 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	58024400 	.word	0x58024400
 80013f4:	08007cb4 	.word	0x08007cb4
 80013f8:	24000004 	.word	0x24000004
 80013fc:	24000000 	.word	0x24000000

08001400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001408:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <HAL_InitTick+0x60>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e021      	b.n	8001458 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001414:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <HAL_InitTick+0x64>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <HAL_InitTick+0x60>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001422:	fbb3 f3f1 	udiv	r3, r3, r1
 8001426:	fbb2 f3f3 	udiv	r3, r2, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f959 	bl	80016e2 <HAL_SYSTICK_Config>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e00e      	b.n	8001458 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b0f      	cmp	r3, #15
 800143e:	d80a      	bhi.n	8001456 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001440:	2200      	movs	r2, #0
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f000 f931 	bl	80016ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800144c:	4a06      	ldr	r2, [pc, #24]	@ (8001468 <HAL_InitTick+0x68>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e000      	b.n	8001458 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2400000c 	.word	0x2400000c
 8001464:	24000000 	.word	0x24000000
 8001468:	24000008 	.word	0x24000008

0800146c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_IncTick+0x20>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_IncTick+0x24>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a04      	ldr	r2, [pc, #16]	@ (8001490 <HAL_IncTick+0x24>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	2400000c 	.word	0x2400000c
 8001490:	240007a0 	.word	0x240007a0

08001494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <HAL_GetTick+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	240007a0 	.word	0x240007a0

080014ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b4:	f7ff ffee 	bl	8001494 <HAL_GetTick>
 80014b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c4:	d005      	beq.n	80014d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <HAL_Delay+0x44>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014d2:	bf00      	nop
 80014d4:	f7ff ffde 	bl	8001494 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d8f7      	bhi.n	80014d4 <HAL_Delay+0x28>
  {
  }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2400000c 	.word	0x2400000c

080014f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014f8:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <HAL_GetREVID+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	0c1b      	lsrs	r3, r3, #16
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	5c001000 	.word	0x5c001000

0800150c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001514:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800151c:	4904      	ldr	r1, [pc, #16]	@ (8001530 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4313      	orrs	r3, r2
 8001522:	604b      	str	r3, [r1, #4]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	58000400 	.word	0x58000400

08001534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <__NVIC_SetPriorityGrouping+0x40>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	4313      	orrs	r3, r2
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <__NVIC_SetPriorityGrouping+0x40>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00
 8001578:	05fa0000 	.word	0x05fa0000

0800157c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	@ (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0a      	blt.n	80015c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	490c      	ldr	r1, [pc, #48]	@ (80015e4 <__NVIC_SetPriority+0x4c>)
 80015b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c0:	e00a      	b.n	80015d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4908      	ldr	r1, [pc, #32]	@ (80015e8 <__NVIC_SetPriority+0x50>)
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	3b04      	subs	r3, #4
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	440b      	add	r3, r1
 80015d6:	761a      	strb	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	@ 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	bf28      	it	cs
 800160a:	2304      	movcs	r3, #4
 800160c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	2b06      	cmp	r3, #6
 8001614:	d902      	bls.n	800161c <NVIC_EncodePriority+0x30>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3b03      	subs	r3, #3
 800161a:	e000      	b.n	800161e <NVIC_EncodePriority+0x32>
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43d9      	mvns	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	4313      	orrs	r3, r2
         );
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	@ 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001664:	d301      	bcc.n	800166a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001666:	2301      	movs	r3, #1
 8001668:	e00f      	b.n	800168a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <SysTick_Config+0x40>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001672:	210f      	movs	r1, #15
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f7ff ff8e 	bl	8001598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <SysTick_Config+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001682:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <SysTick_Config+0x40>)
 8001684:	2207      	movs	r2, #7
 8001686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	e000e010 	.word	0xe000e010

08001698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff47 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016bc:	f7ff ff5e 	bl	800157c <__NVIC_GetPriorityGrouping>
 80016c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	6978      	ldr	r0, [r7, #20]
 80016c8:	f7ff ff90 	bl	80015ec <NVIC_EncodePriority>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff5f 	bl	8001598 <__NVIC_SetPriority>
}
 80016da:	bf00      	nop
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffb2 	bl	8001654 <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e0e3      	b.n	80018d6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001714:	2b00      	cmp	r3, #0
 8001716:	d106      	bne.n	8001726 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2223      	movs	r2, #35	@ 0x23
 800171c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fb3f 	bl	8000da4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001726:	4b6e      	ldr	r3, [pc, #440]	@ (80018e0 <HAL_ETH_Init+0x1e4>)
 8001728:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800172c:	4a6c      	ldr	r2, [pc, #432]	@ (80018e0 <HAL_ETH_Init+0x1e4>)
 800172e:	f043 0302 	orr.w	r3, r3, #2
 8001732:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001736:	4b6a      	ldr	r3, [pc, #424]	@ (80018e0 <HAL_ETH_Init+0x1e4>)
 8001738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7a1b      	ldrb	r3, [r3, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d103      	bne.n	8001754 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800174c:	2000      	movs	r0, #0
 800174e:	f7ff fedd 	bl	800150c <HAL_SYSCFG_ETHInterfaceSelect>
 8001752:	e003      	b.n	800175c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001754:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001758:	f7ff fed8 	bl	800150c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800175c:	4b61      	ldr	r3, [pc, #388]	@ (80018e4 <HAL_ETH_Init+0x1e8>)
 800175e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001776:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001778:	f7ff fe8c 	bl	8001494 <HAL_GetTick>
 800177c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800177e:	e011      	b.n	80017a4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001780:	f7ff fe88 	bl	8001494 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800178e:	d909      	bls.n	80017a4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2204      	movs	r2, #4
 8001794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	22e0      	movs	r2, #224	@ 0xe0
 800179c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e098      	b.n	80018d6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1e4      	bne.n	8001780 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f89e 	bl	80018f8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80017bc:	f001 fea0 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4a49      	ldr	r2, [pc, #292]	@ (80018e8 <HAL_ETH_Init+0x1ec>)
 80017c4:	fba2 2303 	umull	r2, r3, r2, r3
 80017c8:	0c9a      	lsrs	r2, r3, #18
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	3a01      	subs	r2, #1
 80017d0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 fa81 	bl	8001cdc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80017e6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017f6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d009      	beq.n	800181a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	22e0      	movs	r2, #224	@ 0xe0
 8001812:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e05d      	b.n	80018d6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001822:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001826:	4b31      	ldr	r3, [pc, #196]	@ (80018ec <HAL_ETH_Init+0x1f0>)
 8001828:	4013      	ands	r3, r2
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6952      	ldr	r2, [r2, #20]
 800182e:	0051      	lsls	r1, r2, #1
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	430b      	orrs	r3, r1
 8001836:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800183a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fae9 	bl	8001e16 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fb2f 	bl	8001ea8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	3305      	adds	r3, #5
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	021a      	lsls	r2, r3, #8
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	3304      	adds	r3, #4
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	3303      	adds	r3, #3
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	061a      	lsls	r2, r3, #24
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	3302      	adds	r3, #2
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	041b      	lsls	r3, r3, #16
 800187c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	3301      	adds	r3, #1
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001888:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001896:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001898:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <HAL_ETH_Init+0x1f4>)
 80018aa:	430b      	orrs	r3, r1
 80018ac:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b0d      	ldr	r3, [pc, #52]	@ (80018f4 <HAL_ETH_Init+0x1f8>)
 80018be:	430b      	orrs	r3, r1
 80018c0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2210      	movs	r2, #16
 80018d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	58024400 	.word	0x58024400
 80018e4:	58000400 	.word	0x58000400
 80018e8:	431bde83 	.word	0x431bde83
 80018ec:	ffff8001 	.word	0xffff8001
 80018f0:	0c020060 	.word	0x0c020060
 80018f4:	0c20c000 	.word	0x0c20c000

080018f8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001908:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001910:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001912:	f001 fdf5 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 8001916:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4a1a      	ldr	r2, [pc, #104]	@ (8001984 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d804      	bhi.n	800192a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	e022      	b.n	8001970 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	4a16      	ldr	r2, [pc, #88]	@ (8001988 <HAL_ETH_SetMDIOClockRange+0x90>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d204      	bcs.n	800193c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e019      	b.n	8001970 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4a13      	ldr	r2, [pc, #76]	@ (800198c <HAL_ETH_SetMDIOClockRange+0x94>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d915      	bls.n	8001970 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4a12      	ldr	r2, [pc, #72]	@ (8001990 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d804      	bhi.n	8001956 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	e00c      	b.n	8001970 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	4a0e      	ldr	r2, [pc, #56]	@ (8001994 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d804      	bhi.n	8001968 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	e003      	b.n	8001970 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800196e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	02160ebf 	.word	0x02160ebf
 8001988:	03938700 	.word	0x03938700
 800198c:	05f5e0ff 	.word	0x05f5e0ff
 8001990:	08f0d17f 	.word	0x08f0d17f
 8001994:	0ee6b27f 	.word	0x0ee6b27f

08001998 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80019aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	791b      	ldrb	r3, [r3, #4]
 80019b0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80019b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	7b1b      	ldrb	r3, [r3, #12]
 80019b8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80019ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	7b5b      	ldrb	r3, [r3, #13]
 80019c0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80019c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	7b9b      	ldrb	r3, [r3, #14]
 80019c8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80019ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	7bdb      	ldrb	r3, [r3, #15]
 80019d0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	7c12      	ldrb	r2, [r2, #16]
 80019d8:	2a00      	cmp	r2, #0
 80019da:	d102      	bne.n	80019e2 <ETH_SetMACConfig+0x4a>
 80019dc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80019e0:	e000      	b.n	80019e4 <ETH_SetMACConfig+0x4c>
 80019e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80019e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	7c52      	ldrb	r2, [r2, #17]
 80019ea:	2a00      	cmp	r2, #0
 80019ec:	d102      	bne.n	80019f4 <ETH_SetMACConfig+0x5c>
 80019ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019f2:	e000      	b.n	80019f6 <ETH_SetMACConfig+0x5e>
 80019f4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80019f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	7c9b      	ldrb	r3, [r3, #18]
 80019fc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80019fe:	431a      	orrs	r2, r3
               macconf->Speed |
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a04:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001a0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	7f1b      	ldrb	r3, [r3, #28]
 8001a10:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001a12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	7f5b      	ldrb	r3, [r3, #29]
 8001a18:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a1a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	7f92      	ldrb	r2, [r2, #30]
 8001a20:	2a00      	cmp	r2, #0
 8001a22:	d102      	bne.n	8001a2a <ETH_SetMACConfig+0x92>
 8001a24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a28:	e000      	b.n	8001a2c <ETH_SetMACConfig+0x94>
 8001a2a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a2c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	7fdb      	ldrb	r3, [r3, #31]
 8001a32:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a34:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a3c:	2a00      	cmp	r2, #0
 8001a3e:	d102      	bne.n	8001a46 <ETH_SetMACConfig+0xae>
 8001a40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a44:	e000      	b.n	8001a48 <ETH_SetMACConfig+0xb0>
 8001a46:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a48:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001a56:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001a58:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b56      	ldr	r3, [pc, #344]	@ (8001bc4 <ETH_SetMACConfig+0x22c>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	68f9      	ldr	r1, [r7, #12]
 8001a72:	430b      	orrs	r3, r1
 8001a74:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a7a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a82:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a84:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a8c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001a96:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a98:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001aa0:	2a00      	cmp	r2, #0
 8001aa2:	d102      	bne.n	8001aaa <ETH_SetMACConfig+0x112>
 8001aa4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001aa8:	e000      	b.n	8001aac <ETH_SetMACConfig+0x114>
 8001aaa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001aac:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4b42      	ldr	r3, [pc, #264]	@ (8001bc8 <ETH_SetMACConfig+0x230>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	68f9      	ldr	r1, [r7, #12]
 8001ac6:	430b      	orrs	r3, r1
 8001ac8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ad0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	4b3a      	ldr	r3, [pc, #232]	@ (8001bcc <ETH_SetMACConfig+0x234>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	68f9      	ldr	r1, [r7, #12]
 8001aea:	430b      	orrs	r3, r1
 8001aec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001af4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001afa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001b02:	2a00      	cmp	r2, #0
 8001b04:	d101      	bne.n	8001b0a <ETH_SetMACConfig+0x172>
 8001b06:	2280      	movs	r2, #128	@ 0x80
 8001b08:	e000      	b.n	8001b0c <ETH_SetMACConfig+0x174>
 8001b0a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001b0c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b12:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b14:	4313      	orrs	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b1e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001b22:	4013      	ands	r3, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	68f9      	ldr	r1, [r7, #12]
 8001b2a:	430b      	orrs	r3, r1
 8001b2c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001b34:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001b3c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b4a:	f023 0103 	bic.w	r1, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001b62:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001b7e:	2a00      	cmp	r2, #0
 8001b80:	d101      	bne.n	8001b86 <ETH_SetMACConfig+0x1ee>
 8001b82:	2240      	movs	r2, #64	@ 0x40
 8001b84:	e000      	b.n	8001b88 <ETH_SetMACConfig+0x1f0>
 8001b86:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001b88:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001b90:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001b9a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001ba8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	00048083 	.word	0x00048083
 8001bc8:	c0f88000 	.word	0xc0f88000
 8001bcc:	fffffef0 	.word	0xfffffef0

08001bd0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b38      	ldr	r3, [pc, #224]	@ (8001cc8 <ETH_SetDMAConfig+0xf8>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	6811      	ldr	r1, [r2, #0]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bf6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	791b      	ldrb	r3, [r3, #4]
 8001bfc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c02:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	7b1b      	ldrb	r3, [r3, #12]
 8001c08:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	4b2c      	ldr	r3, [pc, #176]	@ (8001ccc <ETH_SetDMAConfig+0xfc>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	68f9      	ldr	r1, [r7, #12]
 8001c22:	430b      	orrs	r3, r1
 8001c24:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c28:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	7b5b      	ldrb	r3, [r3, #13]
 8001c2e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c40:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001c44:	4b22      	ldr	r3, [pc, #136]	@ (8001cd0 <ETH_SetDMAConfig+0x100>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	68f9      	ldr	r1, [r7, #12]
 8001c4e:	430b      	orrs	r3, r1
 8001c50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c54:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	7d1b      	ldrb	r3, [r3, #20]
 8001c60:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c62:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	7f5b      	ldrb	r3, [r3, #29]
 8001c68:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c76:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001c7a:	4b16      	ldr	r3, [pc, #88]	@ (8001cd4 <ETH_SetDMAConfig+0x104>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	68f9      	ldr	r1, [r7, #12]
 8001c84:	430b      	orrs	r3, r1
 8001c86:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c8a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	7f1b      	ldrb	r3, [r3, #28]
 8001c92:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ca4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <ETH_SetDMAConfig+0x108>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	68f9      	ldr	r1, [r7, #12]
 8001cb2:	430b      	orrs	r3, r1
 8001cb4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cb8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	ffff87fd 	.word	0xffff87fd
 8001ccc:	ffff2ffe 	.word	0xffff2ffe
 8001cd0:	fffec000 	.word	0xfffec000
 8001cd4:	ffc0efef 	.word	0xffc0efef
 8001cd8:	7fc0ffff 	.word	0x7fc0ffff

08001cdc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b0a4      	sub	sp, #144	@ 0x90
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cea:	2300      	movs	r3, #0
 8001cec:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001d00:	2301      	movs	r3, #1
 8001d02:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001d06:	2301      	movs	r3, #1
 8001d08:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001d12:	2301      	movs	r3, #1
 8001d14:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d1c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001d34:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001d38:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001d40:	2300      	movs	r3, #0
 8001d42:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001d44:	2301      	movs	r3, #1
 8001d46:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001d56:	2300      	movs	r3, #0
 8001d58:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001d74:	2320      	movs	r3, #32
 8001d76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001d86:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d90:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001db0:	2301      	movs	r3, #1
 8001db2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001db6:	2300      	movs	r3, #0
 8001db8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001dc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff fde6 	bl	8001998 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001de6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001dea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001df0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001df4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001dfc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001e00:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e02:	f107 0308 	add.w	r3, r7, #8
 8001e06:	4619      	mov	r1, r3
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff fee1 	bl	8001bd0 <ETH_SetDMAConfig>
}
 8001e0e:	bf00      	nop
 8001e10:	3790      	adds	r7, #144	@ 0x90
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b085      	sub	sp, #20
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	e01d      	b.n	8001e60 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68d9      	ldr	r1, [r3, #12]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	440b      	add	r3, r1
 8001e34:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	3206      	adds	r2, #6
 8001e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d9de      	bls.n	8001e24 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e74:	461a      	mov	r2, r3
 8001e76:	2303      	movs	r3, #3
 8001e78:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e88:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e98:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e023      	b.n	8001efe <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6919      	ldr	r1, [r3, #16]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	440b      	add	r3, r1
 8001ec6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2200      	movs	r2, #0
 8001ede:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	3212      	adds	r2, #18
 8001ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3301      	adds	r3, #1
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d9d8      	bls.n	8001eb6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f3e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f52:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	@ 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f72:	4b89      	ldr	r3, [pc, #548]	@ (8002198 <HAL_GPIO_Init+0x234>)
 8001f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f76:	e194      	b.n	80022a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	fa01 f303 	lsl.w	r3, r1, r3
 8001f84:	4013      	ands	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 8186 	beq.w	800229c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d005      	beq.n	8001fa8 <HAL_GPIO_Init+0x44>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d130      	bne.n	800200a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fde:	2201      	movs	r2, #1
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	091b      	lsrs	r3, r3, #4
 8001ff4:	f003 0201 	and.w	r2, r3, #1
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b03      	cmp	r3, #3
 8002014:	d017      	beq.n	8002046 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	2203      	movs	r2, #3
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d123      	bne.n	800209a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	08da      	lsrs	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3208      	adds	r2, #8
 800205a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	220f      	movs	r2, #15
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	69b9      	ldr	r1, [r7, #24]
 8002096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	2203      	movs	r2, #3
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0203 	and.w	r2, r3, #3
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 80e0 	beq.w	800229c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020dc:	4b2f      	ldr	r3, [pc, #188]	@ (800219c <HAL_GPIO_Init+0x238>)
 80020de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020e2:	4a2e      	ldr	r2, [pc, #184]	@ (800219c <HAL_GPIO_Init+0x238>)
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80020ec:	4b2b      	ldr	r3, [pc, #172]	@ (800219c <HAL_GPIO_Init+0x238>)
 80020ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020fa:	4a29      	ldr	r2, [pc, #164]	@ (80021a0 <HAL_GPIO_Init+0x23c>)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	3302      	adds	r3, #2
 8002102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	220f      	movs	r2, #15
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a20      	ldr	r2, [pc, #128]	@ (80021a4 <HAL_GPIO_Init+0x240>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d052      	beq.n	80021cc <HAL_GPIO_Init+0x268>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a1f      	ldr	r2, [pc, #124]	@ (80021a8 <HAL_GPIO_Init+0x244>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d031      	beq.n	8002192 <HAL_GPIO_Init+0x22e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a1e      	ldr	r2, [pc, #120]	@ (80021ac <HAL_GPIO_Init+0x248>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d02b      	beq.n	800218e <HAL_GPIO_Init+0x22a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a1d      	ldr	r2, [pc, #116]	@ (80021b0 <HAL_GPIO_Init+0x24c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d025      	beq.n	800218a <HAL_GPIO_Init+0x226>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a1c      	ldr	r2, [pc, #112]	@ (80021b4 <HAL_GPIO_Init+0x250>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01f      	beq.n	8002186 <HAL_GPIO_Init+0x222>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a1b      	ldr	r2, [pc, #108]	@ (80021b8 <HAL_GPIO_Init+0x254>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d019      	beq.n	8002182 <HAL_GPIO_Init+0x21e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a1a      	ldr	r2, [pc, #104]	@ (80021bc <HAL_GPIO_Init+0x258>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d013      	beq.n	800217e <HAL_GPIO_Init+0x21a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a19      	ldr	r2, [pc, #100]	@ (80021c0 <HAL_GPIO_Init+0x25c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00d      	beq.n	800217a <HAL_GPIO_Init+0x216>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a18      	ldr	r2, [pc, #96]	@ (80021c4 <HAL_GPIO_Init+0x260>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d007      	beq.n	8002176 <HAL_GPIO_Init+0x212>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a17      	ldr	r2, [pc, #92]	@ (80021c8 <HAL_GPIO_Init+0x264>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_GPIO_Init+0x20e>
 800216e:	2309      	movs	r3, #9
 8002170:	e02d      	b.n	80021ce <HAL_GPIO_Init+0x26a>
 8002172:	230a      	movs	r3, #10
 8002174:	e02b      	b.n	80021ce <HAL_GPIO_Init+0x26a>
 8002176:	2308      	movs	r3, #8
 8002178:	e029      	b.n	80021ce <HAL_GPIO_Init+0x26a>
 800217a:	2307      	movs	r3, #7
 800217c:	e027      	b.n	80021ce <HAL_GPIO_Init+0x26a>
 800217e:	2306      	movs	r3, #6
 8002180:	e025      	b.n	80021ce <HAL_GPIO_Init+0x26a>
 8002182:	2305      	movs	r3, #5
 8002184:	e023      	b.n	80021ce <HAL_GPIO_Init+0x26a>
 8002186:	2304      	movs	r3, #4
 8002188:	e021      	b.n	80021ce <HAL_GPIO_Init+0x26a>
 800218a:	2303      	movs	r3, #3
 800218c:	e01f      	b.n	80021ce <HAL_GPIO_Init+0x26a>
 800218e:	2302      	movs	r3, #2
 8002190:	e01d      	b.n	80021ce <HAL_GPIO_Init+0x26a>
 8002192:	2301      	movs	r3, #1
 8002194:	e01b      	b.n	80021ce <HAL_GPIO_Init+0x26a>
 8002196:	bf00      	nop
 8002198:	58000080 	.word	0x58000080
 800219c:	58024400 	.word	0x58024400
 80021a0:	58000400 	.word	0x58000400
 80021a4:	58020000 	.word	0x58020000
 80021a8:	58020400 	.word	0x58020400
 80021ac:	58020800 	.word	0x58020800
 80021b0:	58020c00 	.word	0x58020c00
 80021b4:	58021000 	.word	0x58021000
 80021b8:	58021400 	.word	0x58021400
 80021bc:	58021800 	.word	0x58021800
 80021c0:	58021c00 	.word	0x58021c00
 80021c4:	58022000 	.word	0x58022000
 80021c8:	58022400 	.word	0x58022400
 80021cc:	2300      	movs	r3, #0
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	f002 0203 	and.w	r2, r2, #3
 80021d4:	0092      	lsls	r2, r2, #2
 80021d6:	4093      	lsls	r3, r2
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021de:	4938      	ldr	r1, [pc, #224]	@ (80022c0 <HAL_GPIO_Init+0x35c>)
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	089b      	lsrs	r3, r3, #2
 80021e4:	3302      	adds	r3, #2
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002212:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800221a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002240:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	3301      	adds	r3, #1
 80022a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f47f ae63 	bne.w	8001f78 <HAL_GPIO_Init+0x14>
  }
}
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	3724      	adds	r7, #36	@ 0x24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	58000400 	.word	0x58000400

080022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80022e0:	e003      	b.n	80022ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	041a      	lsls	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	619a      	str	r2, [r3, #24]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b086      	sub	sp, #24
 80022fa:	af02      	add	r7, sp, #8
 80022fc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0fe      	b.n	8002506 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d106      	bne.n	8002322 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7fe fed5 	bl	80010cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2203      	movs	r2, #3
 8002326:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f005 f9f2 	bl	8007718 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	7c1a      	ldrb	r2, [r3, #16]
 800233c:	f88d 2000 	strb.w	r2, [sp]
 8002340:	3304      	adds	r3, #4
 8002342:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002344:	f005 f976 	bl	8007634 <USB_CoreInit>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2202      	movs	r2, #2
 8002352:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0d5      	b.n	8002506 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f005 f9ea 	bl	800773a <USB_SetCurrentMode>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0c6      	b.n	8002506 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	e04a      	b.n	8002414 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	3315      	adds	r3, #21
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002392:	7bfa      	ldrb	r2, [r7, #15]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4413      	add	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	3314      	adds	r3, #20
 80023a2:	7bfa      	ldrb	r2, [r7, #15]
 80023a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	b298      	uxth	r0, r3
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	332e      	adds	r3, #46	@ 0x2e
 80023ba:	4602      	mov	r2, r0
 80023bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023be:	7bfa      	ldrb	r2, [r7, #15]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	3318      	adds	r3, #24
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	331c      	adds	r3, #28
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	3320      	adds	r3, #32
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	3324      	adds	r3, #36	@ 0x24
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	3301      	adds	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	791b      	ldrb	r3, [r3, #4]
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	429a      	cmp	r2, r3
 800241c:	d3af      	bcc.n	800237e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	e044      	b.n	80024ae <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002436:	2200      	movs	r2, #0
 8002438:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800247c:	7bfa      	ldrb	r2, [r7, #15]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	3301      	adds	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	791b      	ldrb	r3, [r3, #4]
 80024b2:	7bfa      	ldrb	r2, [r7, #15]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d3b5      	bcc.n	8002424 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	7c1a      	ldrb	r2, [r3, #16]
 80024c0:	f88d 2000 	strb.w	r2, [sp]
 80024c4:	3304      	adds	r3, #4
 80024c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024c8:	f005 f984 	bl	80077d4 <USB_DevInit>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2202      	movs	r2, #2
 80024d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e013      	b.n	8002506 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7b1b      	ldrb	r3, [r3, #12]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d102      	bne.n	80024fa <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f80b 	bl	8002510 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f005 fb3f 	bl	8007b82 <USB_DevDisconnect>

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800253e:	4b05      	ldr	r3, [pc, #20]	@ (8002554 <HAL_PCDEx_ActivateLPM+0x44>)
 8002540:	4313      	orrs	r3, r2
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	10000003 	.word	0x10000003

08002558 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002560:	4b19      	ldr	r3, [pc, #100]	@ (80025c8 <HAL_PWREx_ConfigSupply+0x70>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b04      	cmp	r3, #4
 800256a:	d00a      	beq.n	8002582 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800256c:	4b16      	ldr	r3, [pc, #88]	@ (80025c8 <HAL_PWREx_ConfigSupply+0x70>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	429a      	cmp	r2, r3
 8002578:	d001      	beq.n	800257e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e01f      	b.n	80025be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e01d      	b.n	80025be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002582:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <HAL_PWREx_ConfigSupply+0x70>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f023 0207 	bic.w	r2, r3, #7
 800258a:	490f      	ldr	r1, [pc, #60]	@ (80025c8 <HAL_PWREx_ConfigSupply+0x70>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4313      	orrs	r3, r2
 8002590:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002592:	f7fe ff7f 	bl	8001494 <HAL_GetTick>
 8002596:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002598:	e009      	b.n	80025ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800259a:	f7fe ff7b 	bl	8001494 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025a8:	d901      	bls.n	80025ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e007      	b.n	80025be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025ae:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_PWREx_ConfigSupply+0x70>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ba:	d1ee      	bne.n	800259a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	58024800 	.word	0x58024800

080025cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80025d0:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4a04      	ldr	r2, [pc, #16]	@ (80025e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025da:	60d3      	str	r3, [r2, #12]
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	58024800 	.word	0x58024800

080025ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08c      	sub	sp, #48	@ 0x30
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f000 bc48 	b.w	8002e90 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8088 	beq.w	800271e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260e:	4b99      	ldr	r3, [pc, #612]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002616:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002618:	4b96      	ldr	r3, [pc, #600]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 800261a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800261e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002620:	2b10      	cmp	r3, #16
 8002622:	d007      	beq.n	8002634 <HAL_RCC_OscConfig+0x48>
 8002624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002626:	2b18      	cmp	r3, #24
 8002628:	d111      	bne.n	800264e <HAL_RCC_OscConfig+0x62>
 800262a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d10c      	bne.n	800264e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	4b8f      	ldr	r3, [pc, #572]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d06d      	beq.n	800271c <HAL_RCC_OscConfig+0x130>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d169      	bne.n	800271c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	f000 bc21 	b.w	8002e90 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002656:	d106      	bne.n	8002666 <HAL_RCC_OscConfig+0x7a>
 8002658:	4b86      	ldr	r3, [pc, #536]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a85      	ldr	r2, [pc, #532]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 800265e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	e02e      	b.n	80026c4 <HAL_RCC_OscConfig+0xd8>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x9c>
 800266e:	4b81      	ldr	r3, [pc, #516]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a80      	ldr	r2, [pc, #512]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 8002674:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	4b7e      	ldr	r3, [pc, #504]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a7d      	ldr	r2, [pc, #500]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 8002680:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e01d      	b.n	80026c4 <HAL_RCC_OscConfig+0xd8>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0xc0>
 8002692:	4b78      	ldr	r3, [pc, #480]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a77      	ldr	r2, [pc, #476]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 8002698:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	4b75      	ldr	r3, [pc, #468]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a74      	ldr	r2, [pc, #464]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e00b      	b.n	80026c4 <HAL_RCC_OscConfig+0xd8>
 80026ac:	4b71      	ldr	r3, [pc, #452]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a70      	ldr	r2, [pc, #448]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 80026b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b6e      	ldr	r3, [pc, #440]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a6d      	ldr	r2, [pc, #436]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 80026be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d013      	beq.n	80026f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7fe fee2 	bl	8001494 <HAL_GetTick>
 80026d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d4:	f7fe fede 	bl	8001494 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	@ 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e3d4      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026e6:	4b63      	ldr	r3, [pc, #396]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0xe8>
 80026f2:	e014      	b.n	800271e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fece 	bl	8001494 <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026fc:	f7fe feca 	bl	8001494 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	@ 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e3c0      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800270e:	4b59      	ldr	r3, [pc, #356]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x110>
 800271a:	e000      	b.n	800271e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 80ca 	beq.w	80028c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800272c:	4b51      	ldr	r3, [pc, #324]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002734:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002736:	4b4f      	ldr	r3, [pc, #316]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 8002738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <HAL_RCC_OscConfig+0x166>
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	2b18      	cmp	r3, #24
 8002746:	d156      	bne.n	80027f6 <HAL_RCC_OscConfig+0x20a>
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d151      	bne.n	80027f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002752:	4b48      	ldr	r3, [pc, #288]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_RCC_OscConfig+0x17e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e392      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800276a:	4b42      	ldr	r3, [pc, #264]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 0219 	bic.w	r2, r3, #25
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	493f      	ldr	r1, [pc, #252]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe fe8a 	bl	8001494 <HAL_GetTick>
 8002780:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002784:	f7fe fe86 	bl	8001494 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e37c      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002796:	4b37      	ldr	r3, [pc, #220]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a2:	f7fe fea7 	bl	80014f4 <HAL_GetREVID>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d817      	bhi.n	80027e0 <HAL_RCC_OscConfig+0x1f4>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	2b40      	cmp	r3, #64	@ 0x40
 80027b6:	d108      	bne.n	80027ca <HAL_RCC_OscConfig+0x1de>
 80027b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80027c0:	4a2c      	ldr	r2, [pc, #176]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 80027c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c8:	e07a      	b.n	80028c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	031b      	lsls	r3, r3, #12
 80027d8:	4926      	ldr	r1, [pc, #152]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027de:	e06f      	b.n	80028c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e0:	4b24      	ldr	r3, [pc, #144]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	061b      	lsls	r3, r3, #24
 80027ee:	4921      	ldr	r1, [pc, #132]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f4:	e064      	b.n	80028c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d047      	beq.n	800288e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 0219 	bic.w	r2, r3, #25
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	491a      	ldr	r1, [pc, #104]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 800280c:	4313      	orrs	r3, r2
 800280e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7fe fe40 	bl	8001494 <HAL_GetTick>
 8002814:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002818:	f7fe fe3c 	bl	8001494 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e332      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800282a:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002836:	f7fe fe5d 	bl	80014f4 <HAL_GetREVID>
 800283a:	4603      	mov	r3, r0
 800283c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002840:	4293      	cmp	r3, r2
 8002842:	d819      	bhi.n	8002878 <HAL_RCC_OscConfig+0x28c>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	2b40      	cmp	r3, #64	@ 0x40
 800284a:	d108      	bne.n	800285e <HAL_RCC_OscConfig+0x272>
 800284c:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002854:	4a07      	ldr	r2, [pc, #28]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 8002856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800285a:	6053      	str	r3, [r2, #4]
 800285c:	e030      	b.n	80028c0 <HAL_RCC_OscConfig+0x2d4>
 800285e:	4b05      	ldr	r3, [pc, #20]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	031b      	lsls	r3, r3, #12
 800286c:	4901      	ldr	r1, [pc, #4]	@ (8002874 <HAL_RCC_OscConfig+0x288>)
 800286e:	4313      	orrs	r3, r2
 8002870:	604b      	str	r3, [r1, #4]
 8002872:	e025      	b.n	80028c0 <HAL_RCC_OscConfig+0x2d4>
 8002874:	58024400 	.word	0x58024400
 8002878:	4b9a      	ldr	r3, [pc, #616]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	4997      	ldr	r1, [pc, #604]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
 800288c:	e018      	b.n	80028c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288e:	4b95      	ldr	r3, [pc, #596]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a94      	ldr	r2, [pc, #592]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7fe fdfb 	bl	8001494 <HAL_GetTick>
 800289e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a2:	f7fe fdf7 	bl	8001494 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e2ed      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028b4:	4b8b      	ldr	r3, [pc, #556]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80a9 	beq.w	8002a20 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ce:	4b85      	ldr	r3, [pc, #532]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028d8:	4b82      	ldr	r3, [pc, #520]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 80028da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d007      	beq.n	80028f4 <HAL_RCC_OscConfig+0x308>
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b18      	cmp	r3, #24
 80028e8:	d13a      	bne.n	8002960 <HAL_RCC_OscConfig+0x374>
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d135      	bne.n	8002960 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028f4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_OscConfig+0x320>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	2b80      	cmp	r3, #128	@ 0x80
 8002906:	d001      	beq.n	800290c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e2c1      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800290c:	f7fe fdf2 	bl	80014f4 <HAL_GetREVID>
 8002910:	4603      	mov	r3, r0
 8002912:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002916:	4293      	cmp	r3, r2
 8002918:	d817      	bhi.n	800294a <HAL_RCC_OscConfig+0x35e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	2b20      	cmp	r3, #32
 8002920:	d108      	bne.n	8002934 <HAL_RCC_OscConfig+0x348>
 8002922:	4b70      	ldr	r3, [pc, #448]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800292a:	4a6e      	ldr	r2, [pc, #440]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 800292c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002930:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002932:	e075      	b.n	8002a20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002934:	4b6b      	ldr	r3, [pc, #428]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	069b      	lsls	r3, r3, #26
 8002942:	4968      	ldr	r1, [pc, #416]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002948:	e06a      	b.n	8002a20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800294a:	4b66      	ldr	r3, [pc, #408]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	061b      	lsls	r3, r3, #24
 8002958:	4962      	ldr	r1, [pc, #392]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 800295a:	4313      	orrs	r3, r2
 800295c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800295e:	e05f      	b.n	8002a20 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d042      	beq.n	80029ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002968:	4b5e      	ldr	r3, [pc, #376]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 800296e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe fd8e 	bl	8001494 <HAL_GetTick>
 8002978:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800297c:	f7fe fd8a 	bl	8001494 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e280      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800298e:	4b55      	ldr	r3, [pc, #340]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800299a:	f7fe fdab 	bl	80014f4 <HAL_GetREVID>
 800299e:	4603      	mov	r3, r0
 80029a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d817      	bhi.n	80029d8 <HAL_RCC_OscConfig+0x3ec>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d108      	bne.n	80029c2 <HAL_RCC_OscConfig+0x3d6>
 80029b0:	4b4c      	ldr	r3, [pc, #304]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80029b8:	4a4a      	ldr	r2, [pc, #296]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 80029ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029be:	6053      	str	r3, [r2, #4]
 80029c0:	e02e      	b.n	8002a20 <HAL_RCC_OscConfig+0x434>
 80029c2:	4b48      	ldr	r3, [pc, #288]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	069b      	lsls	r3, r3, #26
 80029d0:	4944      	ldr	r1, [pc, #272]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]
 80029d6:	e023      	b.n	8002a20 <HAL_RCC_OscConfig+0x434>
 80029d8:	4b42      	ldr	r3, [pc, #264]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	061b      	lsls	r3, r3, #24
 80029e6:	493f      	ldr	r1, [pc, #252]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60cb      	str	r3, [r1, #12]
 80029ec:	e018      	b.n	8002a20 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029ee:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a3c      	ldr	r2, [pc, #240]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 80029f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7fe fd4b 	bl	8001494 <HAL_GetTick>
 80029fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a02:	f7fe fd47 	bl	8001494 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e23d      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a14:	4b33      	ldr	r3, [pc, #204]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f0      	bne.n	8002a02 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d036      	beq.n	8002a9a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d019      	beq.n	8002a68 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a34:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 8002a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a38:	4a2a      	ldr	r2, [pc, #168]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7fe fd28 	bl	8001494 <HAL_GetTick>
 8002a44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a48:	f7fe fd24 	bl	8001494 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e21a      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a5a:	4b22      	ldr	r3, [pc, #136]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 8002a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x45c>
 8002a66:	e018      	b.n	8002a9a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a68:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 8002a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
 8002a72:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7fe fd0e 	bl	8001494 <HAL_GetTick>
 8002a78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7c:	f7fe fd0a 	bl	8001494 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e200      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 8002a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d039      	beq.n	8002b1a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d01c      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002aae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 8002ab4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ab8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002aba:	f7fe fceb 	bl	8001494 <HAL_GetTick>
 8002abe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ac2:	f7fe fce7 	bl	8001494 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e1dd      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ad4:	4b03      	ldr	r3, [pc, #12]	@ (8002ae4 <HAL_RCC_OscConfig+0x4f8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x4d6>
 8002ae0:	e01b      	b.n	8002b1a <HAL_RCC_OscConfig+0x52e>
 8002ae2:	bf00      	nop
 8002ae4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ae8:	4b9b      	ldr	r3, [pc, #620]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a9a      	ldr	r2, [pc, #616]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002aee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002af2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002af4:	f7fe fcce 	bl	8001494 <HAL_GetTick>
 8002af8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002afc:	f7fe fcca 	bl	8001494 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e1c0      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b0e:	4b92      	ldr	r3, [pc, #584]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 8081 	beq.w	8002c2a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b28:	4b8c      	ldr	r3, [pc, #560]	@ (8002d5c <HAL_RCC_OscConfig+0x770>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a8b      	ldr	r2, [pc, #556]	@ (8002d5c <HAL_RCC_OscConfig+0x770>)
 8002b2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b34:	f7fe fcae 	bl	8001494 <HAL_GetTick>
 8002b38:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3c:	f7fe fcaa 	bl	8001494 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	@ 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e1a0      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b4e:	4b83      	ldr	r3, [pc, #524]	@ (8002d5c <HAL_RCC_OscConfig+0x770>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d106      	bne.n	8002b70 <HAL_RCC_OscConfig+0x584>
 8002b62:	4b7d      	ldr	r3, [pc, #500]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b66:	4a7c      	ldr	r2, [pc, #496]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b6e:	e02d      	b.n	8002bcc <HAL_RCC_OscConfig+0x5e0>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10c      	bne.n	8002b92 <HAL_RCC_OscConfig+0x5a6>
 8002b78:	4b77      	ldr	r3, [pc, #476]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7c:	4a76      	ldr	r2, [pc, #472]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002b7e:	f023 0301 	bic.w	r3, r3, #1
 8002b82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b84:	4b74      	ldr	r3, [pc, #464]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b88:	4a73      	ldr	r2, [pc, #460]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002b8a:	f023 0304 	bic.w	r3, r3, #4
 8002b8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b90:	e01c      	b.n	8002bcc <HAL_RCC_OscConfig+0x5e0>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b05      	cmp	r3, #5
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x5c8>
 8002b9a:	4b6f      	ldr	r3, [pc, #444]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9e:	4a6e      	ldr	r2, [pc, #440]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ba6:	4b6c      	ldr	r3, [pc, #432]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002baa:	4a6b      	ldr	r2, [pc, #428]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bb2:	e00b      	b.n	8002bcc <HAL_RCC_OscConfig+0x5e0>
 8002bb4:	4b68      	ldr	r3, [pc, #416]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb8:	4a67      	ldr	r2, [pc, #412]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc0:	4b65      	ldr	r3, [pc, #404]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc4:	4a64      	ldr	r2, [pc, #400]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002bc6:	f023 0304 	bic.w	r3, r3, #4
 8002bca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d015      	beq.n	8002c00 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd4:	f7fe fc5e 	bl	8001494 <HAL_GetTick>
 8002bd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bdc:	f7fe fc5a 	bl	8001494 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e14e      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bf2:	4b59      	ldr	r3, [pc, #356]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0ee      	beq.n	8002bdc <HAL_RCC_OscConfig+0x5f0>
 8002bfe:	e014      	b.n	8002c2a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c00:	f7fe fc48 	bl	8001494 <HAL_GetTick>
 8002c04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c08:	f7fe fc44 	bl	8001494 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e138      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c1e:	4b4e      	ldr	r3, [pc, #312]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1ee      	bne.n	8002c08 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 812d 	beq.w	8002e8e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c34:	4b48      	ldr	r3, [pc, #288]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c3c:	2b18      	cmp	r3, #24
 8002c3e:	f000 80bd 	beq.w	8002dbc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	f040 809e 	bne.w	8002d88 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4c:	4b42      	ldr	r3, [pc, #264]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a41      	ldr	r2, [pc, #260]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002c52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe fc1c 	bl	8001494 <HAL_GetTick>
 8002c5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c60:	f7fe fc18 	bl	8001494 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e10e      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c72:	4b39      	ldr	r3, [pc, #228]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c7e:	4b36      	ldr	r3, [pc, #216]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002c80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c82:	4b37      	ldr	r3, [pc, #220]	@ (8002d60 <HAL_RCC_OscConfig+0x774>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c8e:	0112      	lsls	r2, r2, #4
 8002c90:	430a      	orrs	r2, r1
 8002c92:	4931      	ldr	r1, [pc, #196]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	628b      	str	r3, [r1, #40]	@ 0x28
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	025b      	lsls	r3, r3, #9
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	041b      	lsls	r3, r3, #16
 8002cb6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	061b      	lsls	r3, r3, #24
 8002cc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002cc8:	4923      	ldr	r1, [pc, #140]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002cce:	4b22      	ldr	r3, [pc, #136]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd2:	4a21      	ldr	r2, [pc, #132]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	f023 0301 	bic.w	r3, r3, #1
 8002cd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cda:	4b1f      	ldr	r3, [pc, #124]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002cdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cde:	4b21      	ldr	r3, [pc, #132]	@ (8002d64 <HAL_RCC_OscConfig+0x778>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ce6:	00d2      	lsls	r2, r2, #3
 8002ce8:	491b      	ldr	r1, [pc, #108]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002cee:	4b1a      	ldr	r3, [pc, #104]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf2:	f023 020c 	bic.w	r2, r3, #12
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	4917      	ldr	r1, [pc, #92]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d00:	4b15      	ldr	r3, [pc, #84]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	f023 0202 	bic.w	r2, r3, #2
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0c:	4912      	ldr	r1, [pc, #72]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d12:	4b11      	ldr	r3, [pc, #68]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d16:	4a10      	ldr	r2, [pc, #64]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d22:	4a0d      	ldr	r2, [pc, #52]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002d30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d36:	4b08      	ldr	r3, [pc, #32]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3a:	4a07      	ldr	r2, [pc, #28]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d42:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a04      	ldr	r2, [pc, #16]	@ (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002d48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4e:	f7fe fba1 	bl	8001494 <HAL_GetTick>
 8002d52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d54:	e011      	b.n	8002d7a <HAL_RCC_OscConfig+0x78e>
 8002d56:	bf00      	nop
 8002d58:	58024400 	.word	0x58024400
 8002d5c:	58024800 	.word	0x58024800
 8002d60:	fffffc0c 	.word	0xfffffc0c
 8002d64:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fe fb94 	bl	8001494 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e08a      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d7a:	4b47      	ldr	r3, [pc, #284]	@ (8002e98 <HAL_RCC_OscConfig+0x8ac>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x77c>
 8002d86:	e082      	b.n	8002e8e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d88:	4b43      	ldr	r3, [pc, #268]	@ (8002e98 <HAL_RCC_OscConfig+0x8ac>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a42      	ldr	r2, [pc, #264]	@ (8002e98 <HAL_RCC_OscConfig+0x8ac>)
 8002d8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe fb7e 	bl	8001494 <HAL_GetTick>
 8002d98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fe fb7a 	bl	8001494 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e070      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dae:	4b3a      	ldr	r3, [pc, #232]	@ (8002e98 <HAL_RCC_OscConfig+0x8ac>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x7b0>
 8002dba:	e068      	b.n	8002e8e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002dbc:	4b36      	ldr	r3, [pc, #216]	@ (8002e98 <HAL_RCC_OscConfig+0x8ac>)
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002dc2:	4b35      	ldr	r3, [pc, #212]	@ (8002e98 <HAL_RCC_OscConfig+0x8ac>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d031      	beq.n	8002e34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f003 0203 	and.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d12a      	bne.n	8002e34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d122      	bne.n	8002e34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d11a      	bne.n	8002e34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	0a5b      	lsrs	r3, r3, #9
 8002e02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e0a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d111      	bne.n	8002e34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	0c1b      	lsrs	r3, r3, #16
 8002e14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d108      	bne.n	8002e34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	0e1b      	lsrs	r3, r3, #24
 8002e26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e02b      	b.n	8002e90 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e38:	4b17      	ldr	r3, [pc, #92]	@ (8002e98 <HAL_RCC_OscConfig+0x8ac>)
 8002e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e3c:	08db      	lsrs	r3, r3, #3
 8002e3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e42:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d01f      	beq.n	8002e8e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e4e:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <HAL_RCC_OscConfig+0x8ac>)
 8002e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e52:	4a11      	ldr	r2, [pc, #68]	@ (8002e98 <HAL_RCC_OscConfig+0x8ac>)
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e5a:	f7fe fb1b 	bl	8001494 <HAL_GetTick>
 8002e5e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e60:	bf00      	nop
 8002e62:	f7fe fb17 	bl	8001494 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d0f9      	beq.n	8002e62 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e98 <HAL_RCC_OscConfig+0x8ac>)
 8002e70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e72:	4b0a      	ldr	r3, [pc, #40]	@ (8002e9c <HAL_RCC_OscConfig+0x8b0>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e7a:	00d2      	lsls	r2, r2, #3
 8002e7c:	4906      	ldr	r1, [pc, #24]	@ (8002e98 <HAL_RCC_OscConfig+0x8ac>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e82:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <HAL_RCC_OscConfig+0x8ac>)
 8002e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e86:	4a04      	ldr	r2, [pc, #16]	@ (8002e98 <HAL_RCC_OscConfig+0x8ac>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3730      	adds	r7, #48	@ 0x30
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	58024400 	.word	0x58024400
 8002e9c:	ffff0007 	.word	0xffff0007

08002ea0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e19c      	b.n	80031ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb4:	4b8a      	ldr	r3, [pc, #552]	@ (80030e0 <HAL_RCC_ClockConfig+0x240>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d910      	bls.n	8002ee4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec2:	4b87      	ldr	r3, [pc, #540]	@ (80030e0 <HAL_RCC_ClockConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 020f 	bic.w	r2, r3, #15
 8002eca:	4985      	ldr	r1, [pc, #532]	@ (80030e0 <HAL_RCC_ClockConfig+0x240>)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed2:	4b83      	ldr	r3, [pc, #524]	@ (80030e0 <HAL_RCC_ClockConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e184      	b.n	80031ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d010      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	4b7b      	ldr	r3, [pc, #492]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d908      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f00:	4b78      	ldr	r3, [pc, #480]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	4975      	ldr	r1, [pc, #468]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d010      	beq.n	8002f40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	4b70      	ldr	r3, [pc, #448]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d908      	bls.n	8002f40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f2e:	4b6d      	ldr	r3, [pc, #436]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	496a      	ldr	r1, [pc, #424]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d010      	beq.n	8002f6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699a      	ldr	r2, [r3, #24]
 8002f50:	4b64      	ldr	r3, [pc, #400]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d908      	bls.n	8002f6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f5c:	4b61      	ldr	r3, [pc, #388]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	495e      	ldr	r1, [pc, #376]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d010      	beq.n	8002f9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69da      	ldr	r2, [r3, #28]
 8002f7e:	4b59      	ldr	r3, [pc, #356]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d908      	bls.n	8002f9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f8a:	4b56      	ldr	r3, [pc, #344]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	4953      	ldr	r1, [pc, #332]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d010      	beq.n	8002fca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	4b4d      	ldr	r3, [pc, #308]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d908      	bls.n	8002fca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b4a      	ldr	r3, [pc, #296]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	f023 020f 	bic.w	r2, r3, #15
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4947      	ldr	r1, [pc, #284]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d055      	beq.n	8003082 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fd6:	4b43      	ldr	r3, [pc, #268]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	4940      	ldr	r1, [pc, #256]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ff0:	4b3c      	ldr	r3, [pc, #240]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d121      	bne.n	8003040 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0f6      	b.n	80031ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b03      	cmp	r3, #3
 8003006:	d107      	bne.n	8003018 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003008:	4b36      	ldr	r3, [pc, #216]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d115      	bne.n	8003040 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0ea      	b.n	80031ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d107      	bne.n	8003030 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003020:	4b30      	ldr	r3, [pc, #192]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003028:	2b00      	cmp	r3, #0
 800302a:	d109      	bne.n	8003040 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0de      	b.n	80031ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003030:	4b2c      	ldr	r3, [pc, #176]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0d6      	b.n	80031ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003040:	4b28      	ldr	r3, [pc, #160]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f023 0207 	bic.w	r2, r3, #7
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4925      	ldr	r1, [pc, #148]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 800304e:	4313      	orrs	r3, r2
 8003050:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003052:	f7fe fa1f 	bl	8001494 <HAL_GetTick>
 8003056:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003058:	e00a      	b.n	8003070 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305a:	f7fe fa1b 	bl	8001494 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003068:	4293      	cmp	r3, r2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e0be      	b.n	80031ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003070:	4b1c      	ldr	r3, [pc, #112]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	429a      	cmp	r2, r3
 8003080:	d1eb      	bne.n	800305a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d010      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	4b14      	ldr	r3, [pc, #80]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	429a      	cmp	r2, r3
 800309c:	d208      	bcs.n	80030b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800309e:	4b11      	ldr	r3, [pc, #68]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f023 020f 	bic.w	r2, r3, #15
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	490e      	ldr	r1, [pc, #56]	@ (80030e4 <HAL_RCC_ClockConfig+0x244>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030b0:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <HAL_RCC_ClockConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d214      	bcs.n	80030e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b08      	ldr	r3, [pc, #32]	@ (80030e0 <HAL_RCC_ClockConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 020f 	bic.w	r2, r3, #15
 80030c6:	4906      	ldr	r1, [pc, #24]	@ (80030e0 <HAL_RCC_ClockConfig+0x240>)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b04      	ldr	r3, [pc, #16]	@ (80030e0 <HAL_RCC_ClockConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e086      	b.n	80031ee <HAL_RCC_ClockConfig+0x34e>
 80030e0:	52002000 	.word	0x52002000
 80030e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d010      	beq.n	8003116 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	4b3f      	ldr	r3, [pc, #252]	@ (80031f8 <HAL_RCC_ClockConfig+0x358>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003100:	429a      	cmp	r2, r3
 8003102:	d208      	bcs.n	8003116 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003104:	4b3c      	ldr	r3, [pc, #240]	@ (80031f8 <HAL_RCC_ClockConfig+0x358>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	4939      	ldr	r1, [pc, #228]	@ (80031f8 <HAL_RCC_ClockConfig+0x358>)
 8003112:	4313      	orrs	r3, r2
 8003114:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d010      	beq.n	8003144 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	4b34      	ldr	r3, [pc, #208]	@ (80031f8 <HAL_RCC_ClockConfig+0x358>)
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800312e:	429a      	cmp	r2, r3
 8003130:	d208      	bcs.n	8003144 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003132:	4b31      	ldr	r3, [pc, #196]	@ (80031f8 <HAL_RCC_ClockConfig+0x358>)
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	492e      	ldr	r1, [pc, #184]	@ (80031f8 <HAL_RCC_ClockConfig+0x358>)
 8003140:	4313      	orrs	r3, r2
 8003142:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	d010      	beq.n	8003172 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699a      	ldr	r2, [r3, #24]
 8003154:	4b28      	ldr	r3, [pc, #160]	@ (80031f8 <HAL_RCC_ClockConfig+0x358>)
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800315c:	429a      	cmp	r2, r3
 800315e:	d208      	bcs.n	8003172 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003160:	4b25      	ldr	r3, [pc, #148]	@ (80031f8 <HAL_RCC_ClockConfig+0x358>)
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	4922      	ldr	r1, [pc, #136]	@ (80031f8 <HAL_RCC_ClockConfig+0x358>)
 800316e:	4313      	orrs	r3, r2
 8003170:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b00      	cmp	r3, #0
 800317c:	d010      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	4b1d      	ldr	r3, [pc, #116]	@ (80031f8 <HAL_RCC_ClockConfig+0x358>)
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800318a:	429a      	cmp	r2, r3
 800318c:	d208      	bcs.n	80031a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800318e:	4b1a      	ldr	r3, [pc, #104]	@ (80031f8 <HAL_RCC_ClockConfig+0x358>)
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	4917      	ldr	r1, [pc, #92]	@ (80031f8 <HAL_RCC_ClockConfig+0x358>)
 800319c:	4313      	orrs	r3, r2
 800319e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031a0:	f000 f834 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b14      	ldr	r3, [pc, #80]	@ (80031f8 <HAL_RCC_ClockConfig+0x358>)
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	0a1b      	lsrs	r3, r3, #8
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	4912      	ldr	r1, [pc, #72]	@ (80031fc <HAL_RCC_ClockConfig+0x35c>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
 80031bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031be:	4b0e      	ldr	r3, [pc, #56]	@ (80031f8 <HAL_RCC_ClockConfig+0x358>)
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	4a0d      	ldr	r2, [pc, #52]	@ (80031fc <HAL_RCC_ClockConfig+0x35c>)
 80031c8:	5cd3      	ldrb	r3, [r2, r3]
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
 80031d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003200 <HAL_RCC_ClockConfig+0x360>)
 80031d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003204 <HAL_RCC_ClockConfig+0x364>)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80031de:	4b0a      	ldr	r3, [pc, #40]	@ (8003208 <HAL_RCC_ClockConfig+0x368>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe f90c 	bl	8001400 <HAL_InitTick>
 80031e8:	4603      	mov	r3, r0
 80031ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	58024400 	.word	0x58024400
 80031fc:	08007cb4 	.word	0x08007cb4
 8003200:	24000004 	.word	0x24000004
 8003204:	24000000 	.word	0x24000000
 8003208:	24000008 	.word	0x24000008

0800320c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800320c:	b480      	push	{r7}
 800320e:	b089      	sub	sp, #36	@ 0x24
 8003210:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003212:	4bb3      	ldr	r3, [pc, #716]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800321a:	2b18      	cmp	r3, #24
 800321c:	f200 8155 	bhi.w	80034ca <HAL_RCC_GetSysClockFreq+0x2be>
 8003220:	a201      	add	r2, pc, #4	@ (adr r2, 8003228 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	0800328d 	.word	0x0800328d
 800322c:	080034cb 	.word	0x080034cb
 8003230:	080034cb 	.word	0x080034cb
 8003234:	080034cb 	.word	0x080034cb
 8003238:	080034cb 	.word	0x080034cb
 800323c:	080034cb 	.word	0x080034cb
 8003240:	080034cb 	.word	0x080034cb
 8003244:	080034cb 	.word	0x080034cb
 8003248:	080032b3 	.word	0x080032b3
 800324c:	080034cb 	.word	0x080034cb
 8003250:	080034cb 	.word	0x080034cb
 8003254:	080034cb 	.word	0x080034cb
 8003258:	080034cb 	.word	0x080034cb
 800325c:	080034cb 	.word	0x080034cb
 8003260:	080034cb 	.word	0x080034cb
 8003264:	080034cb 	.word	0x080034cb
 8003268:	080032b9 	.word	0x080032b9
 800326c:	080034cb 	.word	0x080034cb
 8003270:	080034cb 	.word	0x080034cb
 8003274:	080034cb 	.word	0x080034cb
 8003278:	080034cb 	.word	0x080034cb
 800327c:	080034cb 	.word	0x080034cb
 8003280:	080034cb 	.word	0x080034cb
 8003284:	080034cb 	.word	0x080034cb
 8003288:	080032bf 	.word	0x080032bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800328c:	4b94      	ldr	r3, [pc, #592]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003298:	4b91      	ldr	r3, [pc, #580]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	08db      	lsrs	r3, r3, #3
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	4a90      	ldr	r2, [pc, #576]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032a4:	fa22 f303 	lsr.w	r3, r2, r3
 80032a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80032aa:	e111      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032ac:	4b8d      	ldr	r3, [pc, #564]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032ae:	61bb      	str	r3, [r7, #24]
      break;
 80032b0:	e10e      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80032b2:	4b8d      	ldr	r3, [pc, #564]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032b4:	61bb      	str	r3, [r7, #24]
      break;
 80032b6:	e10b      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80032b8:	4b8c      	ldr	r3, [pc, #560]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032ba:	61bb      	str	r3, [r7, #24]
      break;
 80032bc:	e108      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032be:	4b88      	ldr	r3, [pc, #544]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80032c8:	4b85      	ldr	r3, [pc, #532]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032d4:	4b82      	ldr	r3, [pc, #520]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80032de:	4b80      	ldr	r3, [pc, #512]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e2:	08db      	lsrs	r3, r3, #3
 80032e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	fb02 f303 	mul.w	r3, r2, r3
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80e1 	beq.w	80034c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b02      	cmp	r3, #2
 8003306:	f000 8083 	beq.w	8003410 <HAL_RCC_GetSysClockFreq+0x204>
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b02      	cmp	r3, #2
 800330e:	f200 80a1 	bhi.w	8003454 <HAL_RCC_GetSysClockFreq+0x248>
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x114>
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d056      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800331e:	e099      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003320:	4b6f      	ldr	r3, [pc, #444]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d02d      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800332c:	4b6c      	ldr	r3, [pc, #432]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	08db      	lsrs	r3, r3, #3
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	4a6b      	ldr	r2, [pc, #428]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
 800333c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	ee07 3a90 	vmov	s15, r3
 8003344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003356:	4b62      	ldr	r3, [pc, #392]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003366:	ed97 6a02 	vldr	s12, [r7, #8]
 800336a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80034f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800336e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800337a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800337e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003382:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003386:	e087      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003392:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80034f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800339a:	4b51      	ldr	r3, [pc, #324]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80034f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033ca:	e065      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80034f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033de:	4b40      	ldr	r3, [pc, #256]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80033f2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80034f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800340e:	e043      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80034fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800341e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003422:	4b2f      	ldr	r3, [pc, #188]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003432:	ed97 6a02 	vldr	s12, [r7, #8]
 8003436:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80034f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800343a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800343e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800344a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003452:	e021      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80034f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003466:	4b1e      	ldr	r3, [pc, #120]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003476:	ed97 6a02 	vldr	s12, [r7, #8]
 800347a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80034f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800347e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800348a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800348e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003492:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003496:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003498:	4b11      	ldr	r3, [pc, #68]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349c:	0a5b      	lsrs	r3, r3, #9
 800349e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034a2:	3301      	adds	r3, #1
 80034a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	ee07 3a90 	vmov	s15, r3
 80034ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80034b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034bc:	ee17 3a90 	vmov	r3, s15
 80034c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80034c2:	e005      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	61bb      	str	r3, [r7, #24]
      break;
 80034c8:	e002      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80034ca:	4b07      	ldr	r3, [pc, #28]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034cc:	61bb      	str	r3, [r7, #24]
      break;
 80034ce:	bf00      	nop
  }

  return sysclockfreq;
 80034d0:	69bb      	ldr	r3, [r7, #24]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3724      	adds	r7, #36	@ 0x24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	58024400 	.word	0x58024400
 80034e4:	03d09000 	.word	0x03d09000
 80034e8:	003d0900 	.word	0x003d0900
 80034ec:	007a1200 	.word	0x007a1200
 80034f0:	46000000 	.word	0x46000000
 80034f4:	4c742400 	.word	0x4c742400
 80034f8:	4a742400 	.word	0x4a742400
 80034fc:	4af42400 	.word	0x4af42400

08003500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003506:	f7ff fe81 	bl	800320c <HAL_RCC_GetSysClockFreq>
 800350a:	4602      	mov	r2, r0
 800350c:	4b10      	ldr	r3, [pc, #64]	@ (8003550 <HAL_RCC_GetHCLKFreq+0x50>)
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	0a1b      	lsrs	r3, r3, #8
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	490f      	ldr	r1, [pc, #60]	@ (8003554 <HAL_RCC_GetHCLKFreq+0x54>)
 8003518:	5ccb      	ldrb	r3, [r1, r3]
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	fa22 f303 	lsr.w	r3, r2, r3
 8003522:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003524:	4b0a      	ldr	r3, [pc, #40]	@ (8003550 <HAL_RCC_GetHCLKFreq+0x50>)
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	4a09      	ldr	r2, [pc, #36]	@ (8003554 <HAL_RCC_GetHCLKFreq+0x54>)
 800352e:	5cd3      	ldrb	r3, [r2, r3]
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	fa22 f303 	lsr.w	r3, r2, r3
 800353a:	4a07      	ldr	r2, [pc, #28]	@ (8003558 <HAL_RCC_GetHCLKFreq+0x58>)
 800353c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800353e:	4a07      	ldr	r2, [pc, #28]	@ (800355c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003544:	4b04      	ldr	r3, [pc, #16]	@ (8003558 <HAL_RCC_GetHCLKFreq+0x58>)
 8003546:	681b      	ldr	r3, [r3, #0]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	58024400 	.word	0x58024400
 8003554:	08007cb4 	.word	0x08007cb4
 8003558:	24000004 	.word	0x24000004
 800355c:	24000000 	.word	0x24000000

08003560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003564:	f7ff ffcc 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <HAL_RCC_GetPCLK1Freq+0x24>)
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4904      	ldr	r1, [pc, #16]	@ (8003588 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003576:	5ccb      	ldrb	r3, [r1, r3]
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003580:	4618      	mov	r0, r3
 8003582:	bd80      	pop	{r7, pc}
 8003584:	58024400 	.word	0x58024400
 8003588:	08007cb4 	.word	0x08007cb4

0800358c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003590:	f7ff ffb6 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b06      	ldr	r3, [pc, #24]	@ (80035b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	0a1b      	lsrs	r3, r3, #8
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	4904      	ldr	r1, [pc, #16]	@ (80035b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	58024400 	.word	0x58024400
 80035b4:	08007cb4 	.word	0x08007cb4

080035b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035bc:	b0ca      	sub	sp, #296	@ 0x128
 80035be:	af00      	add	r7, sp, #0
 80035c0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035c4:	2300      	movs	r3, #0
 80035c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035ca:	2300      	movs	r3, #0
 80035cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80035dc:	2500      	movs	r5, #0
 80035de:	ea54 0305 	orrs.w	r3, r4, r5
 80035e2:	d049      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035ee:	d02f      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80035f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035f4:	d828      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035fa:	d01a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80035fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003600:	d822      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003606:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800360a:	d007      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800360c:	e01c      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800360e:	4bb8      	ldr	r3, [pc, #736]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	4ab7      	ldr	r2, [pc, #732]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003618:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800361a:	e01a      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800361c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003620:	3308      	adds	r3, #8
 8003622:	2102      	movs	r1, #2
 8003624:	4618      	mov	r0, r3
 8003626:	f001 fc8f 	bl	8004f48 <RCCEx_PLL2_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003630:	e00f      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003636:	3328      	adds	r3, #40	@ 0x28
 8003638:	2102      	movs	r1, #2
 800363a:	4618      	mov	r0, r3
 800363c:	f001 fd36 	bl	80050ac <RCCEx_PLL3_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003646:	e004      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800364e:	e000      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10a      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800365a:	4ba5      	ldr	r3, [pc, #660]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800365c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800365e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003666:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003668:	4aa1      	ldr	r2, [pc, #644]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800366a:	430b      	orrs	r3, r1
 800366c:	6513      	str	r3, [r2, #80]	@ 0x50
 800366e:	e003      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003684:	f04f 0900 	mov.w	r9, #0
 8003688:	ea58 0309 	orrs.w	r3, r8, r9
 800368c:	d047      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800368e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003694:	2b04      	cmp	r3, #4
 8003696:	d82a      	bhi.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003698:	a201      	add	r2, pc, #4	@ (adr r2, 80036a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800369a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369e:	bf00      	nop
 80036a0:	080036b5 	.word	0x080036b5
 80036a4:	080036c3 	.word	0x080036c3
 80036a8:	080036d9 	.word	0x080036d9
 80036ac:	080036f7 	.word	0x080036f7
 80036b0:	080036f7 	.word	0x080036f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b4:	4b8e      	ldr	r3, [pc, #568]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b8:	4a8d      	ldr	r2, [pc, #564]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036c0:	e01a      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c6:	3308      	adds	r3, #8
 80036c8:	2100      	movs	r1, #0
 80036ca:	4618      	mov	r0, r3
 80036cc:	f001 fc3c 	bl	8004f48 <RCCEx_PLL2_Config>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036d6:	e00f      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036dc:	3328      	adds	r3, #40	@ 0x28
 80036de:	2100      	movs	r1, #0
 80036e0:	4618      	mov	r0, r3
 80036e2:	f001 fce3 	bl	80050ac <RCCEx_PLL3_Config>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036ec:	e004      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036f4:	e000      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80036f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003700:	4b7b      	ldr	r3, [pc, #492]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003704:	f023 0107 	bic.w	r1, r3, #7
 8003708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370e:	4a78      	ldr	r2, [pc, #480]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003710:	430b      	orrs	r3, r1
 8003712:	6513      	str	r3, [r2, #80]	@ 0x50
 8003714:	e003      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800371a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800371e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003726:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800372a:	f04f 0b00 	mov.w	fp, #0
 800372e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003732:	d04c      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800373e:	d030      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003744:	d829      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003746:	2bc0      	cmp	r3, #192	@ 0xc0
 8003748:	d02d      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800374a:	2bc0      	cmp	r3, #192	@ 0xc0
 800374c:	d825      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800374e:	2b80      	cmp	r3, #128	@ 0x80
 8003750:	d018      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003752:	2b80      	cmp	r3, #128	@ 0x80
 8003754:	d821      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800375a:	2b40      	cmp	r3, #64	@ 0x40
 800375c:	d007      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800375e:	e01c      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003760:	4b63      	ldr	r3, [pc, #396]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003764:	4a62      	ldr	r2, [pc, #392]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800376a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800376c:	e01c      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003772:	3308      	adds	r3, #8
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f001 fbe6 	bl	8004f48 <RCCEx_PLL2_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003782:	e011      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003788:	3328      	adds	r3, #40	@ 0x28
 800378a:	2100      	movs	r1, #0
 800378c:	4618      	mov	r0, r3
 800378e:	f001 fc8d 	bl	80050ac <RCCEx_PLL3_Config>
 8003792:	4603      	mov	r3, r0
 8003794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003798:	e006      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037a0:	e002      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037a2:	bf00      	nop
 80037a4:	e000      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80037b0:	4b4f      	ldr	r3, [pc, #316]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80037b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037be:	4a4c      	ldr	r2, [pc, #304]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c0:	430b      	orrs	r3, r1
 80037c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80037c4:	e003      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80037da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80037de:	2300      	movs	r3, #0
 80037e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80037e4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80037e8:	460b      	mov	r3, r1
 80037ea:	4313      	orrs	r3, r2
 80037ec:	d053      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80037ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037fa:	d035      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80037fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003800:	d82e      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003802:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003806:	d031      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003808:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800380c:	d828      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800380e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003812:	d01a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003814:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003818:	d822      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800381e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003822:	d007      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003824:	e01c      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003826:	4b32      	ldr	r3, [pc, #200]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382a:	4a31      	ldr	r2, [pc, #196]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800382c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003830:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003832:	e01c      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003838:	3308      	adds	r3, #8
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f001 fb83 	bl	8004f48 <RCCEx_PLL2_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003848:	e011      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384e:	3328      	adds	r3, #40	@ 0x28
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f001 fc2a 	bl	80050ac <RCCEx_PLL3_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800385e:	e006      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003866:	e002      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003868:	bf00      	nop
 800386a:	e000      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800386c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800386e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10b      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003876:	4b1e      	ldr	r3, [pc, #120]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800387e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003882:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003886:	4a1a      	ldr	r2, [pc, #104]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003888:	430b      	orrs	r3, r1
 800388a:	6593      	str	r3, [r2, #88]	@ 0x58
 800388c:	e003      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80038a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80038a6:	2300      	movs	r3, #0
 80038a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80038ac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80038b0:	460b      	mov	r3, r1
 80038b2:	4313      	orrs	r3, r2
 80038b4:	d056      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80038b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038c2:	d038      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80038c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038c8:	d831      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038ce:	d034      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80038d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038d4:	d82b      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038da:	d01d      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80038dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038e0:	d825      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d006      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80038e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80038ec:	e01f      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038ee:	bf00      	nop
 80038f0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f4:	4ba2      	ldr	r3, [pc, #648]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f8:	4aa1      	ldr	r2, [pc, #644]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003900:	e01c      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003906:	3308      	adds	r3, #8
 8003908:	2100      	movs	r1, #0
 800390a:	4618      	mov	r0, r3
 800390c:	f001 fb1c 	bl	8004f48 <RCCEx_PLL2_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003916:	e011      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391c:	3328      	adds	r3, #40	@ 0x28
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f001 fbc3 	bl	80050ac <RCCEx_PLL3_Config>
 8003926:	4603      	mov	r3, r0
 8003928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800392c:	e006      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003934:	e002      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003936:	bf00      	nop
 8003938:	e000      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800393a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800393c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10b      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003944:	4b8e      	ldr	r3, [pc, #568]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003948:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800394c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003950:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003954:	4a8a      	ldr	r2, [pc, #552]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003956:	430b      	orrs	r3, r1
 8003958:	6593      	str	r3, [r2, #88]	@ 0x58
 800395a:	e003      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003960:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003970:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800397a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800397e:	460b      	mov	r3, r1
 8003980:	4313      	orrs	r3, r2
 8003982:	d03a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398a:	2b30      	cmp	r3, #48	@ 0x30
 800398c:	d01f      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x416>
 800398e:	2b30      	cmp	r3, #48	@ 0x30
 8003990:	d819      	bhi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003992:	2b20      	cmp	r3, #32
 8003994:	d00c      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003996:	2b20      	cmp	r3, #32
 8003998:	d815      	bhi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d019      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800399e:	2b10      	cmp	r3, #16
 80039a0:	d111      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a2:	4b77      	ldr	r3, [pc, #476]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a6:	4a76      	ldr	r2, [pc, #472]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039ae:	e011      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b4:	3308      	adds	r3, #8
 80039b6:	2102      	movs	r1, #2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 fac5 	bl	8004f48 <RCCEx_PLL2_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039c4:	e006      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039cc:	e002      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039ce:	bf00      	nop
 80039d0:	e000      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10a      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039dc:	4b68      	ldr	r3, [pc, #416]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80039e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ea:	4a65      	ldr	r2, [pc, #404]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ec:	430b      	orrs	r3, r1
 80039ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039f0:	e003      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a02:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a06:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003a10:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4313      	orrs	r3, r2
 8003a18:	d051      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a24:	d035      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a2a:	d82e      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a30:	d031      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003a32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a36:	d828      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a3c:	d01a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003a3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a42:	d822      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a4c:	d007      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a4e:	e01c      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a50:	4b4b      	ldr	r3, [pc, #300]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a54:	4a4a      	ldr	r2, [pc, #296]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a5c:	e01c      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a62:	3308      	adds	r3, #8
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f001 fa6e 	bl	8004f48 <RCCEx_PLL2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a72:	e011      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a78:	3328      	adds	r3, #40	@ 0x28
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f001 fb15 	bl	80050ac <RCCEx_PLL3_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a88:	e006      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a90:	e002      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a92:	bf00      	nop
 8003a94:	e000      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003aa0:	4b37      	ldr	r3, [pc, #220]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aae:	4a34      	ldr	r2, [pc, #208]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ab4:	e003      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003aca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003ad4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4313      	orrs	r3, r2
 8003adc:	d056      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ae8:	d033      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003aea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aee:	d82c      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003af0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003af4:	d02f      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003af6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003afa:	d826      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003afc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b00:	d02b      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003b02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b06:	d820      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b0c:	d012      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b12:	d81a      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d022      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b1c:	d115      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b22:	3308      	adds	r3, #8
 8003b24:	2101      	movs	r1, #1
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 fa0e 	bl	8004f48 <RCCEx_PLL2_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b32:	e015      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b38:	3328      	adds	r3, #40	@ 0x28
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 fab5 	bl	80050ac <RCCEx_PLL3_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b48:	e00a      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b50:	e006      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b52:	bf00      	nop
 8003b54:	e004      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b56:	bf00      	nop
 8003b58:	e002      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b5a:	bf00      	nop
 8003b5c:	e000      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10d      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b68:	4b05      	ldr	r3, [pc, #20]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b6c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b76:	4a02      	ldr	r2, [pc, #8]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b7c:	e006      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b7e:	bf00      	nop
 8003b80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b94:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ba2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	d055      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bb8:	d033      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bbe:	d82c      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc4:	d02f      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bca:	d826      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bcc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bd0:	d02b      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003bd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bd6:	d820      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bdc:	d012      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003bde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003be2:	d81a      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d022      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003be8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bec:	d115      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f001 f9a6 	bl	8004f48 <RCCEx_PLL2_Config>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c02:	e015      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c08:	3328      	adds	r3, #40	@ 0x28
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f001 fa4d 	bl	80050ac <RCCEx_PLL3_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c18:	e00a      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c20:	e006      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c22:	bf00      	nop
 8003c24:	e004      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c26:	bf00      	nop
 8003c28:	e002      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c2a:	bf00      	nop
 8003c2c:	e000      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10b      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c38:	4ba3      	ldr	r3, [pc, #652]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c48:	4a9f      	ldr	r2, [pc, #636]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c4e:	e003      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003c6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c72:	460b      	mov	r3, r1
 8003c74:	4313      	orrs	r3, r2
 8003c76:	d037      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c82:	d00e      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003c84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c88:	d816      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d018      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003c8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c92:	d111      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c94:	4b8c      	ldr	r3, [pc, #560]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c98:	4a8b      	ldr	r2, [pc, #556]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ca0:	e00f      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	2101      	movs	r1, #1
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 f94c 	bl	8004f48 <RCCEx_PLL2_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cb6:	e004      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cca:	4b7f      	ldr	r3, [pc, #508]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd8:	4a7b      	ldr	r2, [pc, #492]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cde:	e003      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003cfe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4313      	orrs	r3, r2
 8003d06:	d039      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d81c      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003d12:	a201      	add	r2, pc, #4	@ (adr r2, 8003d18 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003d55 	.word	0x08003d55
 8003d1c:	08003d29 	.word	0x08003d29
 8003d20:	08003d37 	.word	0x08003d37
 8003d24:	08003d55 	.word	0x08003d55
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d28:	4b67      	ldr	r3, [pc, #412]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2c:	4a66      	ldr	r2, [pc, #408]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d34:	e00f      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	2102      	movs	r1, #2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f001 f902 	bl	8004f48 <RCCEx_PLL2_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d4a:	e004      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d52:	e000      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d5e:	4b5a      	ldr	r3, [pc, #360]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d62:	f023 0103 	bic.w	r1, r3, #3
 8003d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d6c:	4a56      	ldr	r2, [pc, #344]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d72:	e003      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003d88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d92:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d96:	460b      	mov	r3, r1
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f000 809f 	beq.w	8003edc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a4a      	ldr	r2, [pc, #296]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003daa:	f7fd fb73 	bl	8001494 <HAL_GetTick>
 8003dae:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003db2:	e00b      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db4:	f7fd fb6e 	bl	8001494 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b64      	cmp	r3, #100	@ 0x64
 8003dc2:	d903      	bls.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dca:	e005      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dcc:	4b3f      	ldr	r3, [pc, #252]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0ed      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d179      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003de0:	4b39      	ldr	r3, [pc, #228]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dec:	4053      	eors	r3, r2
 8003dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d015      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003df6:	4b34      	ldr	r3, [pc, #208]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dfe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e02:	4b31      	ldr	r3, [pc, #196]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e06:	4a30      	ldr	r2, [pc, #192]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e0c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e0e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e12:	4a2d      	ldr	r2, [pc, #180]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e18:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e1a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e20:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e2e:	d118      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7fd fb30 	bl	8001494 <HAL_GetTick>
 8003e34:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e38:	e00d      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3a:	f7fd fb2b 	bl	8001494 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e44:	1ad2      	subs	r2, r2, r3
 8003e46:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d903      	bls.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003e54:	e005      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e56:	4b1c      	ldr	r3, [pc, #112]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0eb      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d129      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e7a:	d10e      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003e7c:	4b12      	ldr	r3, [pc, #72]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e8c:	091a      	lsrs	r2, r3, #4
 8003e8e:	4b10      	ldr	r3, [pc, #64]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	4a0d      	ldr	r2, [pc, #52]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6113      	str	r3, [r2, #16]
 8003e98:	e005      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ea4:	6113      	str	r3, [r2, #16]
 8003ea6:	4b08      	ldr	r3, [pc, #32]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb6:	4a04      	ldr	r2, [pc, #16]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ebc:	e00e      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003ec6:	e009      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003ec8:	58024400 	.word	0x58024400
 8003ecc:	58024800 	.word	0x58024800
 8003ed0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee4:	f002 0301 	and.w	r3, r2, #1
 8003ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003eec:	2300      	movs	r3, #0
 8003eee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ef2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f000 8089 	beq.w	8004010 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f04:	2b28      	cmp	r3, #40	@ 0x28
 8003f06:	d86b      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003f08:	a201      	add	r2, pc, #4	@ (adr r2, 8003f10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003fe9 	.word	0x08003fe9
 8003f14:	08003fe1 	.word	0x08003fe1
 8003f18:	08003fe1 	.word	0x08003fe1
 8003f1c:	08003fe1 	.word	0x08003fe1
 8003f20:	08003fe1 	.word	0x08003fe1
 8003f24:	08003fe1 	.word	0x08003fe1
 8003f28:	08003fe1 	.word	0x08003fe1
 8003f2c:	08003fe1 	.word	0x08003fe1
 8003f30:	08003fb5 	.word	0x08003fb5
 8003f34:	08003fe1 	.word	0x08003fe1
 8003f38:	08003fe1 	.word	0x08003fe1
 8003f3c:	08003fe1 	.word	0x08003fe1
 8003f40:	08003fe1 	.word	0x08003fe1
 8003f44:	08003fe1 	.word	0x08003fe1
 8003f48:	08003fe1 	.word	0x08003fe1
 8003f4c:	08003fe1 	.word	0x08003fe1
 8003f50:	08003fcb 	.word	0x08003fcb
 8003f54:	08003fe1 	.word	0x08003fe1
 8003f58:	08003fe1 	.word	0x08003fe1
 8003f5c:	08003fe1 	.word	0x08003fe1
 8003f60:	08003fe1 	.word	0x08003fe1
 8003f64:	08003fe1 	.word	0x08003fe1
 8003f68:	08003fe1 	.word	0x08003fe1
 8003f6c:	08003fe1 	.word	0x08003fe1
 8003f70:	08003fe9 	.word	0x08003fe9
 8003f74:	08003fe1 	.word	0x08003fe1
 8003f78:	08003fe1 	.word	0x08003fe1
 8003f7c:	08003fe1 	.word	0x08003fe1
 8003f80:	08003fe1 	.word	0x08003fe1
 8003f84:	08003fe1 	.word	0x08003fe1
 8003f88:	08003fe1 	.word	0x08003fe1
 8003f8c:	08003fe1 	.word	0x08003fe1
 8003f90:	08003fe9 	.word	0x08003fe9
 8003f94:	08003fe1 	.word	0x08003fe1
 8003f98:	08003fe1 	.word	0x08003fe1
 8003f9c:	08003fe1 	.word	0x08003fe1
 8003fa0:	08003fe1 	.word	0x08003fe1
 8003fa4:	08003fe1 	.word	0x08003fe1
 8003fa8:	08003fe1 	.word	0x08003fe1
 8003fac:	08003fe1 	.word	0x08003fe1
 8003fb0:	08003fe9 	.word	0x08003fe9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb8:	3308      	adds	r3, #8
 8003fba:	2101      	movs	r1, #1
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 ffc3 	bl	8004f48 <RCCEx_PLL2_Config>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fc8:	e00f      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fce:	3328      	adds	r3, #40	@ 0x28
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f001 f86a 	bl	80050ac <RCCEx_PLL3_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fde:	e004      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fe6:	e000      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ff2:	4bbf      	ldr	r3, [pc, #764]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004000:	4abb      	ldr	r2, [pc, #748]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004002:	430b      	orrs	r3, r1
 8004004:	6553      	str	r3, [r2, #84]	@ 0x54
 8004006:	e003      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800400c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	f002 0302 	and.w	r3, r2, #2
 800401c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004020:	2300      	movs	r3, #0
 8004022:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004026:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800402a:	460b      	mov	r3, r1
 800402c:	4313      	orrs	r3, r2
 800402e:	d041      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004034:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004036:	2b05      	cmp	r3, #5
 8004038:	d824      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800403a:	a201      	add	r2, pc, #4	@ (adr r2, 8004040 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	0800408d 	.word	0x0800408d
 8004044:	08004059 	.word	0x08004059
 8004048:	0800406f 	.word	0x0800406f
 800404c:	0800408d 	.word	0x0800408d
 8004050:	0800408d 	.word	0x0800408d
 8004054:	0800408d 	.word	0x0800408d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405c:	3308      	adds	r3, #8
 800405e:	2101      	movs	r1, #1
 8004060:	4618      	mov	r0, r3
 8004062:	f000 ff71 	bl	8004f48 <RCCEx_PLL2_Config>
 8004066:	4603      	mov	r3, r0
 8004068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800406c:	e00f      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004072:	3328      	adds	r3, #40	@ 0x28
 8004074:	2101      	movs	r1, #1
 8004076:	4618      	mov	r0, r3
 8004078:	f001 f818 	bl	80050ac <RCCEx_PLL3_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004082:	e004      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800408a:	e000      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800408c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800408e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004096:	4b96      	ldr	r3, [pc, #600]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800409a:	f023 0107 	bic.w	r1, r3, #7
 800409e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040a4:	4a92      	ldr	r2, [pc, #584]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040a6:	430b      	orrs	r3, r1
 80040a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80040aa:	e003      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	f002 0304 	and.w	r3, r2, #4
 80040c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040c4:	2300      	movs	r3, #0
 80040c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4313      	orrs	r3, r2
 80040d2:	d044      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80040d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040dc:	2b05      	cmp	r3, #5
 80040de:	d825      	bhi.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80040e0:	a201      	add	r2, pc, #4	@ (adr r2, 80040e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80040e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e6:	bf00      	nop
 80040e8:	08004135 	.word	0x08004135
 80040ec:	08004101 	.word	0x08004101
 80040f0:	08004117 	.word	0x08004117
 80040f4:	08004135 	.word	0x08004135
 80040f8:	08004135 	.word	0x08004135
 80040fc:	08004135 	.word	0x08004135
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004104:	3308      	adds	r3, #8
 8004106:	2101      	movs	r1, #1
 8004108:	4618      	mov	r0, r3
 800410a:	f000 ff1d 	bl	8004f48 <RCCEx_PLL2_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004114:	e00f      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411a:	3328      	adds	r3, #40	@ 0x28
 800411c:	2101      	movs	r1, #1
 800411e:	4618      	mov	r0, r3
 8004120:	f000 ffc4 	bl	80050ac <RCCEx_PLL3_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800412a:	e004      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004132:	e000      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10b      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800413e:	4b6c      	ldr	r3, [pc, #432]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004142:	f023 0107 	bic.w	r1, r3, #7
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800414e:	4a68      	ldr	r2, [pc, #416]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004150:	430b      	orrs	r3, r1
 8004152:	6593      	str	r3, [r2, #88]	@ 0x58
 8004154:	e003      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800415a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800415e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004166:	f002 0320 	and.w	r3, r2, #32
 800416a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800416e:	2300      	movs	r3, #0
 8004170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004174:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004178:	460b      	mov	r3, r1
 800417a:	4313      	orrs	r3, r2
 800417c:	d055      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800417e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004186:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800418a:	d033      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800418c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004190:	d82c      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004196:	d02f      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419c:	d826      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800419e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041a2:	d02b      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80041a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041a8:	d820      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041ae:	d012      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80041b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041b4:	d81a      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d022      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80041ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041be:	d115      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c4:	3308      	adds	r3, #8
 80041c6:	2100      	movs	r1, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 febd 	bl	8004f48 <RCCEx_PLL2_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041d4:	e015      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041da:	3328      	adds	r3, #40	@ 0x28
 80041dc:	2102      	movs	r1, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 ff64 	bl	80050ac <RCCEx_PLL3_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041ea:	e00a      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041f2:	e006      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041f4:	bf00      	nop
 80041f6:	e004      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041f8:	bf00      	nop
 80041fa:	e002      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041fc:	bf00      	nop
 80041fe:	e000      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10b      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800420a:	4b39      	ldr	r3, [pc, #228]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800420c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800421a:	4a35      	ldr	r2, [pc, #212]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800421c:	430b      	orrs	r3, r1
 800421e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004220:	e003      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004226:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800422a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004232:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004236:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800423a:	2300      	movs	r3, #0
 800423c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004240:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004244:	460b      	mov	r3, r1
 8004246:	4313      	orrs	r3, r2
 8004248:	d058      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004252:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004256:	d033      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004258:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800425c:	d82c      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800425e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004262:	d02f      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004268:	d826      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800426a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800426e:	d02b      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004270:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004274:	d820      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800427a:	d012      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800427c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004280:	d81a      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d022      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800428a:	d115      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800428c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004290:	3308      	adds	r3, #8
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fe57 	bl	8004f48 <RCCEx_PLL2_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042a0:	e015      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a6:	3328      	adds	r3, #40	@ 0x28
 80042a8:	2102      	movs	r1, #2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fefe 	bl	80050ac <RCCEx_PLL3_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042b6:	e00a      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042be:	e006      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042c0:	bf00      	nop
 80042c2:	e004      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042c4:	bf00      	nop
 80042c6:	e002      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042c8:	bf00      	nop
 80042ca:	e000      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10e      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042d6:	4b06      	ldr	r3, [pc, #24]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042da:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80042de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042e6:	4a02      	ldr	r2, [pc, #8]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042e8:	430b      	orrs	r3, r1
 80042ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80042ec:	e006      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80042ee:	bf00      	nop
 80042f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004308:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800430c:	2300      	movs	r3, #0
 800430e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004312:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004316:	460b      	mov	r3, r1
 8004318:	4313      	orrs	r3, r2
 800431a:	d055      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800431c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004320:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004324:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004328:	d033      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800432a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800432e:	d82c      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004334:	d02f      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004336:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800433a:	d826      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800433c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004340:	d02b      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004342:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004346:	d820      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004348:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800434c:	d012      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800434e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004352:	d81a      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d022      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800435c:	d115      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	3308      	adds	r3, #8
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fdee 	bl	8004f48 <RCCEx_PLL2_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004372:	e015      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004378:	3328      	adds	r3, #40	@ 0x28
 800437a:	2102      	movs	r1, #2
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fe95 	bl	80050ac <RCCEx_PLL3_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004388:	e00a      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004390:	e006      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004392:	bf00      	nop
 8004394:	e004      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004396:	bf00      	nop
 8004398:	e002      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800439a:	bf00      	nop
 800439c:	e000      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800439e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10b      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043a8:	4ba1      	ldr	r3, [pc, #644]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ac:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80043b8:	4a9d      	ldr	r2, [pc, #628]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ba:	430b      	orrs	r3, r1
 80043bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80043be:	e003      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	f002 0308 	and.w	r3, r2, #8
 80043d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043d8:	2300      	movs	r3, #0
 80043da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80043e2:	460b      	mov	r3, r1
 80043e4:	4313      	orrs	r3, r2
 80043e6:	d01e      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043f4:	d10c      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fa:	3328      	adds	r3, #40	@ 0x28
 80043fc:	2102      	movs	r1, #2
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fe54 	bl	80050ac <RCCEx_PLL3_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004410:	4b87      	ldr	r3, [pc, #540]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004414:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004420:	4a83      	ldr	r2, [pc, #524]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004422:	430b      	orrs	r3, r1
 8004424:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	f002 0310 	and.w	r3, r2, #16
 8004432:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004436:	2300      	movs	r3, #0
 8004438:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800443c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004440:	460b      	mov	r3, r1
 8004442:	4313      	orrs	r3, r2
 8004444:	d01e      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800444e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004452:	d10c      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004458:	3328      	adds	r3, #40	@ 0x28
 800445a:	2102      	movs	r1, #2
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fe25 	bl	80050ac <RCCEx_PLL3_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800446e:	4b70      	ldr	r3, [pc, #448]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004472:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800447e:	4a6c      	ldr	r2, [pc, #432]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004480:	430b      	orrs	r3, r1
 8004482:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004490:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004494:	2300      	movs	r3, #0
 8004496:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800449a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800449e:	460b      	mov	r3, r1
 80044a0:	4313      	orrs	r3, r2
 80044a2:	d03e      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80044a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044b0:	d022      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80044b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044b6:	d81b      	bhi.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80044bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c0:	d00b      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80044c2:	e015      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c8:	3308      	adds	r3, #8
 80044ca:	2100      	movs	r1, #0
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fd3b 	bl	8004f48 <RCCEx_PLL2_Config>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044d8:	e00f      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044de:	3328      	adds	r3, #40	@ 0x28
 80044e0:	2102      	movs	r1, #2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fde2 	bl	80050ac <RCCEx_PLL3_Config>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044ee:	e004      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044f6:	e000      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80044f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10b      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004502:	4b4b      	ldr	r3, [pc, #300]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004506:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004512:	4a47      	ldr	r2, [pc, #284]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004514:	430b      	orrs	r3, r1
 8004516:	6593      	str	r3, [r2, #88]	@ 0x58
 8004518:	e003      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800451e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800452e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004530:	2300      	movs	r3, #0
 8004532:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004534:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004538:	460b      	mov	r3, r1
 800453a:	4313      	orrs	r3, r2
 800453c:	d03b      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800453e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004546:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800454a:	d01f      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800454c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004550:	d818      	bhi.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004552:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004556:	d003      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004558:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800455c:	d007      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800455e:	e011      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004560:	4b33      	ldr	r3, [pc, #204]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004564:	4a32      	ldr	r2, [pc, #200]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800456a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800456c:	e00f      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800456e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004572:	3328      	adds	r3, #40	@ 0x28
 8004574:	2101      	movs	r1, #1
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fd98 	bl	80050ac <RCCEx_PLL3_Config>
 800457c:	4603      	mov	r3, r0
 800457e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004582:	e004      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800458a:	e000      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800458c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800458e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10b      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004596:	4b26      	ldr	r3, [pc, #152]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800459e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a6:	4a22      	ldr	r2, [pc, #136]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80045ac:	e003      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80045c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80045c4:	2300      	movs	r3, #0
 80045c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80045c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80045cc:	460b      	mov	r3, r1
 80045ce:	4313      	orrs	r3, r2
 80045d0:	d034      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80045dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e0:	d007      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80045e2:	e011      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e4:	4b12      	ldr	r3, [pc, #72]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e8:	4a11      	ldr	r2, [pc, #68]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045f0:	e00e      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f6:	3308      	adds	r3, #8
 80045f8:	2102      	movs	r1, #2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fca4 	bl	8004f48 <RCCEx_PLL2_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004606:	e003      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800460e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10d      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004618:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800461a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004626:	4a02      	ldr	r2, [pc, #8]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004628:	430b      	orrs	r3, r1
 800462a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800462c:	e006      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800462e:	bf00      	nop
 8004630:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004638:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800463c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004648:	66bb      	str	r3, [r7, #104]	@ 0x68
 800464a:	2300      	movs	r3, #0
 800464c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800464e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004652:	460b      	mov	r3, r1
 8004654:	4313      	orrs	r3, r2
 8004656:	d00c      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465c:	3328      	adds	r3, #40	@ 0x28
 800465e:	2102      	movs	r1, #2
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fd23 	bl	80050ac <RCCEx_PLL3_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800467e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004680:	2300      	movs	r3, #0
 8004682:	667b      	str	r3, [r7, #100]	@ 0x64
 8004684:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004688:	460b      	mov	r3, r1
 800468a:	4313      	orrs	r3, r2
 800468c:	d038      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004696:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800469a:	d018      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800469c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046a0:	d811      	bhi.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80046a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046a6:	d014      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80046a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046ac:	d80b      	bhi.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d011      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80046b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046b6:	d106      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b8:	4bc3      	ldr	r3, [pc, #780]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046bc:	4ac2      	ldr	r2, [pc, #776]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80046c4:	e008      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046cc:	e004      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046ce:	bf00      	nop
 80046d0:	e002      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046d2:	bf00      	nop
 80046d4:	e000      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10b      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046e0:	4bb9      	ldr	r3, [pc, #740]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80046e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046f0:	4ab5      	ldr	r2, [pc, #724]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f2:	430b      	orrs	r3, r1
 80046f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80046f6:	e003      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800470c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800470e:	2300      	movs	r3, #0
 8004710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004712:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004716:	460b      	mov	r3, r1
 8004718:	4313      	orrs	r3, r2
 800471a:	d009      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800471c:	4baa      	ldr	r3, [pc, #680]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800471e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004720:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472a:	4aa7      	ldr	r2, [pc, #668]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800472c:	430b      	orrs	r3, r1
 800472e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004738:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800473c:	653b      	str	r3, [r7, #80]	@ 0x50
 800473e:	2300      	movs	r3, #0
 8004740:	657b      	str	r3, [r7, #84]	@ 0x54
 8004742:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004746:	460b      	mov	r3, r1
 8004748:	4313      	orrs	r3, r2
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800474c:	4b9e      	ldr	r3, [pc, #632]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004758:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800475c:	4a9a      	ldr	r2, [pc, #616]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800475e:	430b      	orrs	r3, r1
 8004760:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800476e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004770:	2300      	movs	r3, #0
 8004772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004774:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004778:	460b      	mov	r3, r1
 800477a:	4313      	orrs	r3, r2
 800477c:	d009      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800477e:	4b92      	ldr	r3, [pc, #584]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004782:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800478c:	4a8e      	ldr	r2, [pc, #568]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800478e:	430b      	orrs	r3, r1
 8004790:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800479e:	643b      	str	r3, [r7, #64]	@ 0x40
 80047a0:	2300      	movs	r3, #0
 80047a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80047a4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80047a8:	460b      	mov	r3, r1
 80047aa:	4313      	orrs	r3, r2
 80047ac:	d00e      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047ae:	4b86      	ldr	r3, [pc, #536]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	4a85      	ldr	r2, [pc, #532]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80047b8:	6113      	str	r3, [r2, #16]
 80047ba:	4b83      	ldr	r3, [pc, #524]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047bc:	6919      	ldr	r1, [r3, #16]
 80047be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80047c6:	4a80      	ldr	r2, [pc, #512]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80047cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80047d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047da:	2300      	movs	r3, #0
 80047dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047de:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80047e2:	460b      	mov	r3, r1
 80047e4:	4313      	orrs	r3, r2
 80047e6:	d009      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047e8:	4b77      	ldr	r3, [pc, #476]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ec:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80047f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f6:	4a74      	ldr	r2, [pc, #464]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047f8:	430b      	orrs	r3, r1
 80047fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004804:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004808:	633b      	str	r3, [r7, #48]	@ 0x30
 800480a:	2300      	movs	r3, #0
 800480c:	637b      	str	r3, [r7, #52]	@ 0x34
 800480e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004812:	460b      	mov	r3, r1
 8004814:	4313      	orrs	r3, r2
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004818:	4b6b      	ldr	r3, [pc, #428]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800481a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004828:	4a67      	ldr	r2, [pc, #412]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800482a:	430b      	orrs	r3, r1
 800482c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800482e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	2100      	movs	r1, #0
 8004838:	62b9      	str	r1, [r7, #40]	@ 0x28
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004840:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004844:	460b      	mov	r3, r1
 8004846:	4313      	orrs	r3, r2
 8004848:	d011      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484e:	3308      	adds	r3, #8
 8004850:	2100      	movs	r1, #0
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fb78 	bl	8004f48 <RCCEx_PLL2_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800485e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	2100      	movs	r1, #0
 8004878:	6239      	str	r1, [r7, #32]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004880:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004884:	460b      	mov	r3, r1
 8004886:	4313      	orrs	r3, r2
 8004888:	d011      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488e:	3308      	adds	r3, #8
 8004890:	2101      	movs	r1, #1
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fb58 	bl	8004f48 <RCCEx_PLL2_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800489e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80048ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b6:	2100      	movs	r1, #0
 80048b8:	61b9      	str	r1, [r7, #24]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	61fb      	str	r3, [r7, #28]
 80048c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048c4:	460b      	mov	r3, r1
 80048c6:	4313      	orrs	r3, r2
 80048c8:	d011      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ce:	3308      	adds	r3, #8
 80048d0:	2102      	movs	r1, #2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fb38 	bl	8004f48 <RCCEx_PLL2_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	2100      	movs	r1, #0
 80048f8:	6139      	str	r1, [r7, #16]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004904:	460b      	mov	r3, r1
 8004906:	4313      	orrs	r3, r2
 8004908:	d011      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800490a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490e:	3328      	adds	r3, #40	@ 0x28
 8004910:	2100      	movs	r1, #0
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fbca 	bl	80050ac <RCCEx_PLL3_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800491e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800492a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800492e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004936:	2100      	movs	r1, #0
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004944:	460b      	mov	r3, r1
 8004946:	4313      	orrs	r3, r2
 8004948:	d011      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494e:	3328      	adds	r3, #40	@ 0x28
 8004950:	2101      	movs	r1, #1
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fbaa 	bl	80050ac <RCCEx_PLL3_Config>
 8004958:	4603      	mov	r3, r0
 800495a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800495e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800496a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	2100      	movs	r1, #0
 8004978:	6039      	str	r1, [r7, #0]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	607b      	str	r3, [r7, #4]
 8004980:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004984:	460b      	mov	r3, r1
 8004986:	4313      	orrs	r3, r2
 8004988:	d011      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800498a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498e:	3328      	adds	r3, #40	@ 0x28
 8004990:	2102      	movs	r1, #2
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fb8a 	bl	80050ac <RCCEx_PLL3_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800499e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80049ae:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e000      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
}
 80049bc:	4618      	mov	r0, r3
 80049be:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80049c2:	46bd      	mov	sp, r7
 80049c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049c8:	58024400 	.word	0x58024400

080049cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80049d0:	f7fe fd96 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 80049d4:	4602      	mov	r2, r0
 80049d6:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	091b      	lsrs	r3, r3, #4
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	4904      	ldr	r1, [pc, #16]	@ (80049f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80049e2:	5ccb      	ldrb	r3, [r1, r3]
 80049e4:	f003 031f 	and.w	r3, r3, #31
 80049e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	58024400 	.word	0x58024400
 80049f4:	08007cb4 	.word	0x08007cb4

080049f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b089      	sub	sp, #36	@ 0x24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a00:	4ba1      	ldr	r3, [pc, #644]	@ (8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a04:	f003 0303 	and.w	r3, r3, #3
 8004a08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004a0a:	4b9f      	ldr	r3, [pc, #636]	@ (8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0e:	0b1b      	lsrs	r3, r3, #12
 8004a10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a16:	4b9c      	ldr	r3, [pc, #624]	@ (8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1a:	091b      	lsrs	r3, r3, #4
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004a22:	4b99      	ldr	r3, [pc, #612]	@ (8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a26:	08db      	lsrs	r3, r3, #3
 8004a28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	fb02 f303 	mul.w	r3, r2, r3
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 8111 	beq.w	8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	f000 8083 	beq.w	8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	f200 80a1 	bhi.w	8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d056      	beq.n	8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a62:	e099      	b.n	8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a64:	4b88      	ldr	r3, [pc, #544]	@ (8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d02d      	beq.n	8004acc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a70:	4b85      	ldr	r3, [pc, #532]	@ (8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	08db      	lsrs	r3, r3, #3
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	4a84      	ldr	r2, [pc, #528]	@ (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a80:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	ee07 3a90 	vmov	s15, r3
 8004a88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a9a:	4b7b      	ldr	r3, [pc, #492]	@ (8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004aca:	e087      	b.n	8004bdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ade:	4b6a      	ldr	r3, [pc, #424]	@ (8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004af2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b0e:	e065      	b.n	8004bdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b22:	4b59      	ldr	r3, [pc, #356]	@ (8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b36:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b52:	e043      	b.n	8004bdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b66:	4b48      	ldr	r3, [pc, #288]	@ (8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b7a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b96:	e021      	b.n	8004bdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004baa:	4b37      	ldr	r3, [pc, #220]	@ (8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bbe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bda:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be0:	0a5b      	lsrs	r3, r3, #9
 8004be2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c02:	ee17 2a90 	vmov	r2, s15
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0e:	0c1b      	lsrs	r3, r3, #16
 8004c10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c14:	ee07 3a90 	vmov	s15, r3
 8004c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c24:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c30:	ee17 2a90 	vmov	r2, s15
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004c38:	4b13      	ldr	r3, [pc, #76]	@ (8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3c:	0e1b      	lsrs	r3, r3, #24
 8004c3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c52:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c5e:	ee17 2a90 	vmov	r2, s15
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c66:	e008      	b.n	8004c7a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	609a      	str	r2, [r3, #8]
}
 8004c7a:	bf00      	nop
 8004c7c:	3724      	adds	r7, #36	@ 0x24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	58024400 	.word	0x58024400
 8004c8c:	03d09000 	.word	0x03d09000
 8004c90:	46000000 	.word	0x46000000
 8004c94:	4c742400 	.word	0x4c742400
 8004c98:	4a742400 	.word	0x4a742400
 8004c9c:	4af42400 	.word	0x4af42400

08004ca0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b089      	sub	sp, #36	@ 0x24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ca8:	4ba1      	ldr	r3, [pc, #644]	@ (8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004cb2:	4b9f      	ldr	r3, [pc, #636]	@ (8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb6:	0d1b      	lsrs	r3, r3, #20
 8004cb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cbc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004cbe:	4b9c      	ldr	r3, [pc, #624]	@ (8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc2:	0a1b      	lsrs	r3, r3, #8
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004cca:	4b99      	ldr	r3, [pc, #612]	@ (8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cce:	08db      	lsrs	r3, r3, #3
 8004cd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	fb02 f303 	mul.w	r3, r2, r3
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 8111 	beq.w	8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	f000 8083 	beq.w	8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	f200 80a1 	bhi.w	8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d056      	beq.n	8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d0a:	e099      	b.n	8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d0c:	4b88      	ldr	r3, [pc, #544]	@ (8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d02d      	beq.n	8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d18:	4b85      	ldr	r3, [pc, #532]	@ (8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	08db      	lsrs	r3, r3, #3
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	4a84      	ldr	r2, [pc, #528]	@ (8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
 8004d28:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	ee07 3a90 	vmov	s15, r3
 8004d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d42:	4b7b      	ldr	r3, [pc, #492]	@ (8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d72:	e087      	b.n	8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d86:	4b6a      	ldr	r3, [pc, #424]	@ (8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d9a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004db6:	e065      	b.n	8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004f40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dca:	4b59      	ldr	r3, [pc, #356]	@ (8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dde:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dfa:	e043      	b.n	8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004f44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0e:	4b48      	ldr	r3, [pc, #288]	@ (8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e22:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e3e:	e021      	b.n	8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	ee07 3a90 	vmov	s15, r3
 8004e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004f40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e52:	4b37      	ldr	r3, [pc, #220]	@ (8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e84:	4b2a      	ldr	r3, [pc, #168]	@ (8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e88:	0a5b      	lsrs	r3, r3, #9
 8004e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eaa:	ee17 2a90 	vmov	r2, s15
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb6:	0c1b      	lsrs	r3, r3, #16
 8004eb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ebc:	ee07 3a90 	vmov	s15, r3
 8004ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ec8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ecc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ed8:	ee17 2a90 	vmov	r2, s15
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004ee0:	4b13      	ldr	r3, [pc, #76]	@ (8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee4:	0e1b      	lsrs	r3, r3, #24
 8004ee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004efa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f06:	ee17 2a90 	vmov	r2, s15
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f0e:	e008      	b.n	8004f22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	609a      	str	r2, [r3, #8]
}
 8004f22:	bf00      	nop
 8004f24:	3724      	adds	r7, #36	@ 0x24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	58024400 	.word	0x58024400
 8004f34:	03d09000 	.word	0x03d09000
 8004f38:	46000000 	.word	0x46000000
 8004f3c:	4c742400 	.word	0x4c742400
 8004f40:	4a742400 	.word	0x4a742400
 8004f44:	4af42400 	.word	0x4af42400

08004f48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f56:	4b53      	ldr	r3, [pc, #332]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 8004f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d101      	bne.n	8004f66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e099      	b.n	800509a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f66:	4b4f      	ldr	r3, [pc, #316]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a4e      	ldr	r2, [pc, #312]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 8004f6c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f72:	f7fc fa8f 	bl	8001494 <HAL_GetTick>
 8004f76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f78:	e008      	b.n	8004f8c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f7a:	f7fc fa8b 	bl	8001494 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e086      	b.n	800509a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f8c:	4b45      	ldr	r3, [pc, #276]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f0      	bne.n	8004f7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f98:	4b42      	ldr	r3, [pc, #264]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	031b      	lsls	r3, r3, #12
 8004fa6:	493f      	ldr	r1, [pc, #252]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	628b      	str	r3, [r1, #40]	@ 0x28
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	025b      	lsls	r3, r3, #9
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	041b      	lsls	r3, r3, #16
 8004fca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	061b      	lsls	r3, r3, #24
 8004fd8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004fdc:	4931      	ldr	r1, [pc, #196]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004fe2:	4b30      	ldr	r3, [pc, #192]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 8004fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	492d      	ldr	r1, [pc, #180]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	f023 0220 	bic.w	r2, r3, #32
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	4928      	ldr	r1, [pc, #160]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 8005002:	4313      	orrs	r3, r2
 8005004:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005006:	4b27      	ldr	r3, [pc, #156]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 8005008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500a:	4a26      	ldr	r2, [pc, #152]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 800500c:	f023 0310 	bic.w	r3, r3, #16
 8005010:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005012:	4b24      	ldr	r3, [pc, #144]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 8005014:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005016:	4b24      	ldr	r3, [pc, #144]	@ (80050a8 <RCCEx_PLL2_Config+0x160>)
 8005018:	4013      	ands	r3, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	69d2      	ldr	r2, [r2, #28]
 800501e:	00d2      	lsls	r2, r2, #3
 8005020:	4920      	ldr	r1, [pc, #128]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 8005022:	4313      	orrs	r3, r2
 8005024:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005026:	4b1f      	ldr	r3, [pc, #124]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 8005028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502a:	4a1e      	ldr	r2, [pc, #120]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 800502c:	f043 0310 	orr.w	r3, r3, #16
 8005030:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d106      	bne.n	8005046 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005038:	4b1a      	ldr	r3, [pc, #104]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 800503a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503c:	4a19      	ldr	r2, [pc, #100]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 800503e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005042:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005044:	e00f      	b.n	8005066 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d106      	bne.n	800505a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800504c:	4b15      	ldr	r3, [pc, #84]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 800504e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005050:	4a14      	ldr	r2, [pc, #80]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 8005052:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005056:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005058:	e005      	b.n	8005066 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800505a:	4b12      	ldr	r3, [pc, #72]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 800505c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505e:	4a11      	ldr	r2, [pc, #68]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 8005060:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005064:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005066:	4b0f      	ldr	r3, [pc, #60]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a0e      	ldr	r2, [pc, #56]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 800506c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005070:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005072:	f7fc fa0f 	bl	8001494 <HAL_GetTick>
 8005076:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005078:	e008      	b.n	800508c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800507a:	f7fc fa0b 	bl	8001494 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e006      	b.n	800509a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800508c:	4b05      	ldr	r3, [pc, #20]	@ (80050a4 <RCCEx_PLL2_Config+0x15c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0f0      	beq.n	800507a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005098:	7bfb      	ldrb	r3, [r7, #15]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	58024400 	.word	0x58024400
 80050a8:	ffff0007 	.word	0xffff0007

080050ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050ba:	4b53      	ldr	r3, [pc, #332]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 80050bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d101      	bne.n	80050ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e099      	b.n	80051fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80050ca:	4b4f      	ldr	r3, [pc, #316]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a4e      	ldr	r2, [pc, #312]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 80050d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d6:	f7fc f9dd 	bl	8001494 <HAL_GetTick>
 80050da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050dc:	e008      	b.n	80050f0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050de:	f7fc f9d9 	bl	8001494 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e086      	b.n	80051fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050f0:	4b45      	ldr	r3, [pc, #276]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1f0      	bne.n	80050de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80050fc:	4b42      	ldr	r3, [pc, #264]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 80050fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005100:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	051b      	lsls	r3, r3, #20
 800510a:	493f      	ldr	r1, [pc, #252]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 800510c:	4313      	orrs	r3, r2
 800510e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	3b01      	subs	r3, #1
 8005116:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	3b01      	subs	r3, #1
 8005120:	025b      	lsls	r3, r3, #9
 8005122:	b29b      	uxth	r3, r3
 8005124:	431a      	orrs	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	3b01      	subs	r3, #1
 800512c:	041b      	lsls	r3, r3, #16
 800512e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	3b01      	subs	r3, #1
 800513a:	061b      	lsls	r3, r3, #24
 800513c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005140:	4931      	ldr	r1, [pc, #196]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 8005142:	4313      	orrs	r3, r2
 8005144:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005146:	4b30      	ldr	r3, [pc, #192]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 8005148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	492d      	ldr	r1, [pc, #180]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 8005154:	4313      	orrs	r3, r2
 8005156:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005158:	4b2b      	ldr	r3, [pc, #172]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 800515a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	4928      	ldr	r1, [pc, #160]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 8005166:	4313      	orrs	r3, r2
 8005168:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800516a:	4b27      	ldr	r3, [pc, #156]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 800516c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516e:	4a26      	ldr	r2, [pc, #152]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 8005170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005174:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005176:	4b24      	ldr	r3, [pc, #144]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 8005178:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800517a:	4b24      	ldr	r3, [pc, #144]	@ (800520c <RCCEx_PLL3_Config+0x160>)
 800517c:	4013      	ands	r3, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	69d2      	ldr	r2, [r2, #28]
 8005182:	00d2      	lsls	r2, r2, #3
 8005184:	4920      	ldr	r1, [pc, #128]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 8005186:	4313      	orrs	r3, r2
 8005188:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800518a:	4b1f      	ldr	r3, [pc, #124]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 800518c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518e:	4a1e      	ldr	r2, [pc, #120]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 8005190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005194:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d106      	bne.n	80051aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800519c:	4b1a      	ldr	r3, [pc, #104]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 800519e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a0:	4a19      	ldr	r2, [pc, #100]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 80051a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80051a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051a8:	e00f      	b.n	80051ca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d106      	bne.n	80051be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80051b0:	4b15      	ldr	r3, [pc, #84]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 80051b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b4:	4a14      	ldr	r2, [pc, #80]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 80051b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051bc:	e005      	b.n	80051ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80051be:	4b12      	ldr	r3, [pc, #72]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 80051c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c2:	4a11      	ldr	r2, [pc, #68]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 80051c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80051ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 80051d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d6:	f7fc f95d 	bl	8001494 <HAL_GetTick>
 80051da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051dc:	e008      	b.n	80051f0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051de:	f7fc f959 	bl	8001494 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e006      	b.n	80051fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051f0:	4b05      	ldr	r3, [pc, #20]	@ (8005208 <RCCEx_PLL3_Config+0x15c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0f0      	beq.n	80051de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	58024400 	.word	0x58024400
 800520c:	ffff0007 	.word	0xffff0007

08005210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e049      	b.n	80052b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fb fe82 	bl	8000f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f000 fc46 	bl	8005ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e049      	b.n	8005364 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d106      	bne.n	80052ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f841 	bl	800536c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2202      	movs	r2, #2
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3304      	adds	r3, #4
 80052fa:	4619      	mov	r1, r3
 80052fc:	4610      	mov	r0, r2
 80052fe:	f000 fbef 	bl	8005ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d109      	bne.n	80053a4 <HAL_TIM_PWM_Start+0x24>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	bf14      	ite	ne
 800539c:	2301      	movne	r3, #1
 800539e:	2300      	moveq	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	e03c      	b.n	800541e <HAL_TIM_PWM_Start+0x9e>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d109      	bne.n	80053be <HAL_TIM_PWM_Start+0x3e>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	bf14      	ite	ne
 80053b6:	2301      	movne	r3, #1
 80053b8:	2300      	moveq	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	e02f      	b.n	800541e <HAL_TIM_PWM_Start+0x9e>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d109      	bne.n	80053d8 <HAL_TIM_PWM_Start+0x58>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	bf14      	ite	ne
 80053d0:	2301      	movne	r3, #1
 80053d2:	2300      	moveq	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	e022      	b.n	800541e <HAL_TIM_PWM_Start+0x9e>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b0c      	cmp	r3, #12
 80053dc:	d109      	bne.n	80053f2 <HAL_TIM_PWM_Start+0x72>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	bf14      	ite	ne
 80053ea:	2301      	movne	r3, #1
 80053ec:	2300      	moveq	r3, #0
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	e015      	b.n	800541e <HAL_TIM_PWM_Start+0x9e>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b10      	cmp	r3, #16
 80053f6:	d109      	bne.n	800540c <HAL_TIM_PWM_Start+0x8c>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b01      	cmp	r3, #1
 8005402:	bf14      	ite	ne
 8005404:	2301      	movne	r3, #1
 8005406:	2300      	moveq	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	e008      	b.n	800541e <HAL_TIM_PWM_Start+0x9e>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b01      	cmp	r3, #1
 8005416:	bf14      	ite	ne
 8005418:	2301      	movne	r3, #1
 800541a:	2300      	moveq	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e0a1      	b.n	800556a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d104      	bne.n	8005436 <HAL_TIM_PWM_Start+0xb6>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005434:	e023      	b.n	800547e <HAL_TIM_PWM_Start+0xfe>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b04      	cmp	r3, #4
 800543a:	d104      	bne.n	8005446 <HAL_TIM_PWM_Start+0xc6>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005444:	e01b      	b.n	800547e <HAL_TIM_PWM_Start+0xfe>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b08      	cmp	r3, #8
 800544a:	d104      	bne.n	8005456 <HAL_TIM_PWM_Start+0xd6>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005454:	e013      	b.n	800547e <HAL_TIM_PWM_Start+0xfe>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b0c      	cmp	r3, #12
 800545a:	d104      	bne.n	8005466 <HAL_TIM_PWM_Start+0xe6>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005464:	e00b      	b.n	800547e <HAL_TIM_PWM_Start+0xfe>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b10      	cmp	r3, #16
 800546a:	d104      	bne.n	8005476 <HAL_TIM_PWM_Start+0xf6>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005474:	e003      	b.n	800547e <HAL_TIM_PWM_Start+0xfe>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2202      	movs	r2, #2
 800547a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2201      	movs	r2, #1
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f000 ff44 	bl	8006314 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a38      	ldr	r2, [pc, #224]	@ (8005574 <HAL_TIM_PWM_Start+0x1f4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d013      	beq.n	80054be <HAL_TIM_PWM_Start+0x13e>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a37      	ldr	r2, [pc, #220]	@ (8005578 <HAL_TIM_PWM_Start+0x1f8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00e      	beq.n	80054be <HAL_TIM_PWM_Start+0x13e>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a35      	ldr	r2, [pc, #212]	@ (800557c <HAL_TIM_PWM_Start+0x1fc>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d009      	beq.n	80054be <HAL_TIM_PWM_Start+0x13e>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a34      	ldr	r2, [pc, #208]	@ (8005580 <HAL_TIM_PWM_Start+0x200>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <HAL_TIM_PWM_Start+0x13e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a32      	ldr	r2, [pc, #200]	@ (8005584 <HAL_TIM_PWM_Start+0x204>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d101      	bne.n	80054c2 <HAL_TIM_PWM_Start+0x142>
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <HAL_TIM_PWM_Start+0x144>
 80054c2:	2300      	movs	r3, #0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d007      	beq.n	80054d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a25      	ldr	r2, [pc, #148]	@ (8005574 <HAL_TIM_PWM_Start+0x1f4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d022      	beq.n	8005528 <HAL_TIM_PWM_Start+0x1a8>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ea:	d01d      	beq.n	8005528 <HAL_TIM_PWM_Start+0x1a8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a25      	ldr	r2, [pc, #148]	@ (8005588 <HAL_TIM_PWM_Start+0x208>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d018      	beq.n	8005528 <HAL_TIM_PWM_Start+0x1a8>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a24      	ldr	r2, [pc, #144]	@ (800558c <HAL_TIM_PWM_Start+0x20c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d013      	beq.n	8005528 <HAL_TIM_PWM_Start+0x1a8>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a22      	ldr	r2, [pc, #136]	@ (8005590 <HAL_TIM_PWM_Start+0x210>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00e      	beq.n	8005528 <HAL_TIM_PWM_Start+0x1a8>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1a      	ldr	r2, [pc, #104]	@ (8005578 <HAL_TIM_PWM_Start+0x1f8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d009      	beq.n	8005528 <HAL_TIM_PWM_Start+0x1a8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1e      	ldr	r2, [pc, #120]	@ (8005594 <HAL_TIM_PWM_Start+0x214>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d004      	beq.n	8005528 <HAL_TIM_PWM_Start+0x1a8>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a16      	ldr	r2, [pc, #88]	@ (800557c <HAL_TIM_PWM_Start+0x1fc>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d115      	bne.n	8005554 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	4b1a      	ldr	r3, [pc, #104]	@ (8005598 <HAL_TIM_PWM_Start+0x218>)
 8005530:	4013      	ands	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b06      	cmp	r3, #6
 8005538:	d015      	beq.n	8005566 <HAL_TIM_PWM_Start+0x1e6>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005540:	d011      	beq.n	8005566 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f042 0201 	orr.w	r2, r2, #1
 8005550:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005552:	e008      	b.n	8005566 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0201 	orr.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	e000      	b.n	8005568 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005566:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	40010000 	.word	0x40010000
 8005578:	40010400 	.word	0x40010400
 800557c:	40014000 	.word	0x40014000
 8005580:	40014400 	.word	0x40014400
 8005584:	40014800 	.word	0x40014800
 8005588:	40000400 	.word	0x40000400
 800558c:	40000800 	.word	0x40000800
 8005590:	40000c00 	.word	0x40000c00
 8005594:	40001800 	.word	0x40001800
 8005598:	00010007 	.word	0x00010007

0800559c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2200      	movs	r2, #0
 80055ac:	6839      	ldr	r1, [r7, #0]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 feb0 	bl	8006314 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a3e      	ldr	r2, [pc, #248]	@ (80056b4 <HAL_TIM_PWM_Stop+0x118>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <HAL_TIM_PWM_Stop+0x4a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a3d      	ldr	r2, [pc, #244]	@ (80056b8 <HAL_TIM_PWM_Stop+0x11c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00e      	beq.n	80055e6 <HAL_TIM_PWM_Stop+0x4a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a3b      	ldr	r2, [pc, #236]	@ (80056bc <HAL_TIM_PWM_Stop+0x120>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d009      	beq.n	80055e6 <HAL_TIM_PWM_Stop+0x4a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a3a      	ldr	r2, [pc, #232]	@ (80056c0 <HAL_TIM_PWM_Stop+0x124>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d004      	beq.n	80055e6 <HAL_TIM_PWM_Stop+0x4a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a38      	ldr	r2, [pc, #224]	@ (80056c4 <HAL_TIM_PWM_Stop+0x128>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d101      	bne.n	80055ea <HAL_TIM_PWM_Stop+0x4e>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <HAL_TIM_PWM_Stop+0x50>
 80055ea:	2300      	movs	r3, #0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d017      	beq.n	8005620 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6a1a      	ldr	r2, [r3, #32]
 80055f6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10f      	bne.n	8005620 <HAL_TIM_PWM_Stop+0x84>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6a1a      	ldr	r2, [r3, #32]
 8005606:	f240 4344 	movw	r3, #1092	@ 0x444
 800560a:	4013      	ands	r3, r2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d107      	bne.n	8005620 <HAL_TIM_PWM_Stop+0x84>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800561e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6a1a      	ldr	r2, [r3, #32]
 8005626:	f241 1311 	movw	r3, #4369	@ 0x1111
 800562a:	4013      	ands	r3, r2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10f      	bne.n	8005650 <HAL_TIM_PWM_Stop+0xb4>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6a1a      	ldr	r2, [r3, #32]
 8005636:	f240 4344 	movw	r3, #1092	@ 0x444
 800563a:	4013      	ands	r3, r2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d107      	bne.n	8005650 <HAL_TIM_PWM_Stop+0xb4>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0201 	bic.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d104      	bne.n	8005660 <HAL_TIM_PWM_Stop+0xc4>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800565e:	e023      	b.n	80056a8 <HAL_TIM_PWM_Stop+0x10c>
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	2b04      	cmp	r3, #4
 8005664:	d104      	bne.n	8005670 <HAL_TIM_PWM_Stop+0xd4>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800566e:	e01b      	b.n	80056a8 <HAL_TIM_PWM_Stop+0x10c>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b08      	cmp	r3, #8
 8005674:	d104      	bne.n	8005680 <HAL_TIM_PWM_Stop+0xe4>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800567e:	e013      	b.n	80056a8 <HAL_TIM_PWM_Stop+0x10c>
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b0c      	cmp	r3, #12
 8005684:	d104      	bne.n	8005690 <HAL_TIM_PWM_Stop+0xf4>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800568e:	e00b      	b.n	80056a8 <HAL_TIM_PWM_Stop+0x10c>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2b10      	cmp	r3, #16
 8005694:	d104      	bne.n	80056a0 <HAL_TIM_PWM_Stop+0x104>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800569e:	e003      	b.n	80056a8 <HAL_TIM_PWM_Stop+0x10c>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40010000 	.word	0x40010000
 80056b8:	40010400 	.word	0x40010400
 80056bc:	40014000 	.word	0x40014000
 80056c0:	40014400 	.word	0x40014400
 80056c4:	40014800 	.word	0x40014800

080056c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e0ff      	b.n	80058e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b14      	cmp	r3, #20
 80056f2:	f200 80f0 	bhi.w	80058d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80056f6:	a201      	add	r2, pc, #4	@ (adr r2, 80056fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fc:	08005751 	.word	0x08005751
 8005700:	080058d7 	.word	0x080058d7
 8005704:	080058d7 	.word	0x080058d7
 8005708:	080058d7 	.word	0x080058d7
 800570c:	08005791 	.word	0x08005791
 8005710:	080058d7 	.word	0x080058d7
 8005714:	080058d7 	.word	0x080058d7
 8005718:	080058d7 	.word	0x080058d7
 800571c:	080057d3 	.word	0x080057d3
 8005720:	080058d7 	.word	0x080058d7
 8005724:	080058d7 	.word	0x080058d7
 8005728:	080058d7 	.word	0x080058d7
 800572c:	08005813 	.word	0x08005813
 8005730:	080058d7 	.word	0x080058d7
 8005734:	080058d7 	.word	0x080058d7
 8005738:	080058d7 	.word	0x080058d7
 800573c:	08005855 	.word	0x08005855
 8005740:	080058d7 	.word	0x080058d7
 8005744:	080058d7 	.word	0x080058d7
 8005748:	080058d7 	.word	0x080058d7
 800574c:	08005895 	.word	0x08005895
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fa68 	bl	8005c2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0208 	orr.w	r2, r2, #8
 800576a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0204 	bic.w	r2, r2, #4
 800577a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6999      	ldr	r1, [r3, #24]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	619a      	str	r2, [r3, #24]
      break;
 800578e:	e0a5      	b.n	80058dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fad8 	bl	8005d4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6999      	ldr	r1, [r3, #24]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	021a      	lsls	r2, r3, #8
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	619a      	str	r2, [r3, #24]
      break;
 80057d0:	e084      	b.n	80058dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68b9      	ldr	r1, [r7, #8]
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fb41 	bl	8005e60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0208 	orr.w	r2, r2, #8
 80057ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69da      	ldr	r2, [r3, #28]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 0204 	bic.w	r2, r2, #4
 80057fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69d9      	ldr	r1, [r3, #28]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	691a      	ldr	r2, [r3, #16]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	61da      	str	r2, [r3, #28]
      break;
 8005810:	e064      	b.n	80058dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	4618      	mov	r0, r3
 800581a:	f000 fba9 	bl	8005f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69da      	ldr	r2, [r3, #28]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800582c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800583c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69d9      	ldr	r1, [r3, #28]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	021a      	lsls	r2, r3, #8
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	61da      	str	r2, [r3, #28]
      break;
 8005852:	e043      	b.n	80058dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68b9      	ldr	r1, [r7, #8]
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fbf2 	bl	8006044 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0208 	orr.w	r2, r2, #8
 800586e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0204 	bic.w	r2, r2, #4
 800587e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005892:	e023      	b.n	80058dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fc36 	bl	800610c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	021a      	lsls	r2, r3, #8
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80058d4:	e002      	b.n	80058dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	75fb      	strb	r3, [r7, #23]
      break;
 80058da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop

080058f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_TIM_ConfigClockSource+0x1c>
 8005908:	2302      	movs	r3, #2
 800590a:	e0dc      	b.n	8005ac6 <HAL_TIM_ConfigClockSource+0x1d6>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	4b6a      	ldr	r3, [pc, #424]	@ (8005ad0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005928:	4013      	ands	r3, r2
 800592a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005932:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a64      	ldr	r2, [pc, #400]	@ (8005ad4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	f000 80a9 	beq.w	8005a9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005948:	4a62      	ldr	r2, [pc, #392]	@ (8005ad4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	f200 80ae 	bhi.w	8005aac <HAL_TIM_ConfigClockSource+0x1bc>
 8005950:	4a61      	ldr	r2, [pc, #388]	@ (8005ad8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	f000 80a1 	beq.w	8005a9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005958:	4a5f      	ldr	r2, [pc, #380]	@ (8005ad8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	f200 80a6 	bhi.w	8005aac <HAL_TIM_ConfigClockSource+0x1bc>
 8005960:	4a5e      	ldr	r2, [pc, #376]	@ (8005adc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005962:	4293      	cmp	r3, r2
 8005964:	f000 8099 	beq.w	8005a9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005968:	4a5c      	ldr	r2, [pc, #368]	@ (8005adc <HAL_TIM_ConfigClockSource+0x1ec>)
 800596a:	4293      	cmp	r3, r2
 800596c:	f200 809e 	bhi.w	8005aac <HAL_TIM_ConfigClockSource+0x1bc>
 8005970:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005974:	f000 8091 	beq.w	8005a9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005978:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800597c:	f200 8096 	bhi.w	8005aac <HAL_TIM_ConfigClockSource+0x1bc>
 8005980:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005984:	f000 8089 	beq.w	8005a9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005988:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800598c:	f200 808e 	bhi.w	8005aac <HAL_TIM_ConfigClockSource+0x1bc>
 8005990:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005994:	d03e      	beq.n	8005a14 <HAL_TIM_ConfigClockSource+0x124>
 8005996:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800599a:	f200 8087 	bhi.w	8005aac <HAL_TIM_ConfigClockSource+0x1bc>
 800599e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059a2:	f000 8086 	beq.w	8005ab2 <HAL_TIM_ConfigClockSource+0x1c2>
 80059a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059aa:	d87f      	bhi.n	8005aac <HAL_TIM_ConfigClockSource+0x1bc>
 80059ac:	2b70      	cmp	r3, #112	@ 0x70
 80059ae:	d01a      	beq.n	80059e6 <HAL_TIM_ConfigClockSource+0xf6>
 80059b0:	2b70      	cmp	r3, #112	@ 0x70
 80059b2:	d87b      	bhi.n	8005aac <HAL_TIM_ConfigClockSource+0x1bc>
 80059b4:	2b60      	cmp	r3, #96	@ 0x60
 80059b6:	d050      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0x16a>
 80059b8:	2b60      	cmp	r3, #96	@ 0x60
 80059ba:	d877      	bhi.n	8005aac <HAL_TIM_ConfigClockSource+0x1bc>
 80059bc:	2b50      	cmp	r3, #80	@ 0x50
 80059be:	d03c      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0x14a>
 80059c0:	2b50      	cmp	r3, #80	@ 0x50
 80059c2:	d873      	bhi.n	8005aac <HAL_TIM_ConfigClockSource+0x1bc>
 80059c4:	2b40      	cmp	r3, #64	@ 0x40
 80059c6:	d058      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x18a>
 80059c8:	2b40      	cmp	r3, #64	@ 0x40
 80059ca:	d86f      	bhi.n	8005aac <HAL_TIM_ConfigClockSource+0x1bc>
 80059cc:	2b30      	cmp	r3, #48	@ 0x30
 80059ce:	d064      	beq.n	8005a9a <HAL_TIM_ConfigClockSource+0x1aa>
 80059d0:	2b30      	cmp	r3, #48	@ 0x30
 80059d2:	d86b      	bhi.n	8005aac <HAL_TIM_ConfigClockSource+0x1bc>
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d060      	beq.n	8005a9a <HAL_TIM_ConfigClockSource+0x1aa>
 80059d8:	2b20      	cmp	r3, #32
 80059da:	d867      	bhi.n	8005aac <HAL_TIM_ConfigClockSource+0x1bc>
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d05c      	beq.n	8005a9a <HAL_TIM_ConfigClockSource+0x1aa>
 80059e0:	2b10      	cmp	r3, #16
 80059e2:	d05a      	beq.n	8005a9a <HAL_TIM_ConfigClockSource+0x1aa>
 80059e4:	e062      	b.n	8005aac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059f6:	f000 fc6d 	bl	80062d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	609a      	str	r2, [r3, #8]
      break;
 8005a12:	e04f      	b.n	8005ab4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a24:	f000 fc56 	bl	80062d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a36:	609a      	str	r2, [r3, #8]
      break;
 8005a38:	e03c      	b.n	8005ab4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a46:	461a      	mov	r2, r3
 8005a48:	f000 fbc6 	bl	80061d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2150      	movs	r1, #80	@ 0x50
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fc20 	bl	8006298 <TIM_ITRx_SetConfig>
      break;
 8005a58:	e02c      	b.n	8005ab4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a66:	461a      	mov	r2, r3
 8005a68:	f000 fbe5 	bl	8006236 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2160      	movs	r1, #96	@ 0x60
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fc10 	bl	8006298 <TIM_ITRx_SetConfig>
      break;
 8005a78:	e01c      	b.n	8005ab4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a86:	461a      	mov	r2, r3
 8005a88:	f000 fba6 	bl	80061d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2140      	movs	r1, #64	@ 0x40
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 fc00 	bl	8006298 <TIM_ITRx_SetConfig>
      break;
 8005a98:	e00c      	b.n	8005ab4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	f000 fbf7 	bl	8006298 <TIM_ITRx_SetConfig>
      break;
 8005aaa:	e003      	b.n	8005ab4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	73fb      	strb	r3, [r7, #15]
      break;
 8005ab0:	e000      	b.n	8005ab4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005ab2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	ffceff88 	.word	0xffceff88
 8005ad4:	00100040 	.word	0x00100040
 8005ad8:	00100030 	.word	0x00100030
 8005adc:	00100020 	.word	0x00100020

08005ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a46      	ldr	r2, [pc, #280]	@ (8005c0c <TIM_Base_SetConfig+0x12c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d013      	beq.n	8005b20 <TIM_Base_SetConfig+0x40>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005afe:	d00f      	beq.n	8005b20 <TIM_Base_SetConfig+0x40>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a43      	ldr	r2, [pc, #268]	@ (8005c10 <TIM_Base_SetConfig+0x130>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00b      	beq.n	8005b20 <TIM_Base_SetConfig+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a42      	ldr	r2, [pc, #264]	@ (8005c14 <TIM_Base_SetConfig+0x134>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d007      	beq.n	8005b20 <TIM_Base_SetConfig+0x40>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a41      	ldr	r2, [pc, #260]	@ (8005c18 <TIM_Base_SetConfig+0x138>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d003      	beq.n	8005b20 <TIM_Base_SetConfig+0x40>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a40      	ldr	r2, [pc, #256]	@ (8005c1c <TIM_Base_SetConfig+0x13c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d108      	bne.n	8005b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a35      	ldr	r2, [pc, #212]	@ (8005c0c <TIM_Base_SetConfig+0x12c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d01f      	beq.n	8005b7a <TIM_Base_SetConfig+0x9a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b40:	d01b      	beq.n	8005b7a <TIM_Base_SetConfig+0x9a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a32      	ldr	r2, [pc, #200]	@ (8005c10 <TIM_Base_SetConfig+0x130>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d017      	beq.n	8005b7a <TIM_Base_SetConfig+0x9a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a31      	ldr	r2, [pc, #196]	@ (8005c14 <TIM_Base_SetConfig+0x134>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <TIM_Base_SetConfig+0x9a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a30      	ldr	r2, [pc, #192]	@ (8005c18 <TIM_Base_SetConfig+0x138>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00f      	beq.n	8005b7a <TIM_Base_SetConfig+0x9a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a2f      	ldr	r2, [pc, #188]	@ (8005c1c <TIM_Base_SetConfig+0x13c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00b      	beq.n	8005b7a <TIM_Base_SetConfig+0x9a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a2e      	ldr	r2, [pc, #184]	@ (8005c20 <TIM_Base_SetConfig+0x140>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d007      	beq.n	8005b7a <TIM_Base_SetConfig+0x9a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a2d      	ldr	r2, [pc, #180]	@ (8005c24 <TIM_Base_SetConfig+0x144>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d003      	beq.n	8005b7a <TIM_Base_SetConfig+0x9a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a2c      	ldr	r2, [pc, #176]	@ (8005c28 <TIM_Base_SetConfig+0x148>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d108      	bne.n	8005b8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a16      	ldr	r2, [pc, #88]	@ (8005c0c <TIM_Base_SetConfig+0x12c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00f      	beq.n	8005bd8 <TIM_Base_SetConfig+0xf8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a18      	ldr	r2, [pc, #96]	@ (8005c1c <TIM_Base_SetConfig+0x13c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00b      	beq.n	8005bd8 <TIM_Base_SetConfig+0xf8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a17      	ldr	r2, [pc, #92]	@ (8005c20 <TIM_Base_SetConfig+0x140>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d007      	beq.n	8005bd8 <TIM_Base_SetConfig+0xf8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a16      	ldr	r2, [pc, #88]	@ (8005c24 <TIM_Base_SetConfig+0x144>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d003      	beq.n	8005bd8 <TIM_Base_SetConfig+0xf8>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a15      	ldr	r2, [pc, #84]	@ (8005c28 <TIM_Base_SetConfig+0x148>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d103      	bne.n	8005be0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	691a      	ldr	r2, [r3, #16]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d105      	bne.n	8005bfe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f023 0201 	bic.w	r2, r3, #1
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	611a      	str	r2, [r3, #16]
  }
}
 8005bfe:	bf00      	nop
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40010000 	.word	0x40010000
 8005c10:	40000400 	.word	0x40000400
 8005c14:	40000800 	.word	0x40000800
 8005c18:	40000c00 	.word	0x40000c00
 8005c1c:	40010400 	.word	0x40010400
 8005c20:	40014000 	.word	0x40014000
 8005c24:	40014400 	.word	0x40014400
 8005c28:	40014800 	.word	0x40014800

08005c2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	f023 0201 	bic.w	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4b37      	ldr	r3, [pc, #220]	@ (8005d34 <TIM_OC1_SetConfig+0x108>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 0303 	bic.w	r3, r3, #3
 8005c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f023 0302 	bic.w	r3, r3, #2
 8005c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a2d      	ldr	r2, [pc, #180]	@ (8005d38 <TIM_OC1_SetConfig+0x10c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00f      	beq.n	8005ca8 <TIM_OC1_SetConfig+0x7c>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8005d3c <TIM_OC1_SetConfig+0x110>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d00b      	beq.n	8005ca8 <TIM_OC1_SetConfig+0x7c>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a2b      	ldr	r2, [pc, #172]	@ (8005d40 <TIM_OC1_SetConfig+0x114>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d007      	beq.n	8005ca8 <TIM_OC1_SetConfig+0x7c>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8005d44 <TIM_OC1_SetConfig+0x118>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d003      	beq.n	8005ca8 <TIM_OC1_SetConfig+0x7c>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a29      	ldr	r2, [pc, #164]	@ (8005d48 <TIM_OC1_SetConfig+0x11c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d10c      	bne.n	8005cc2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f023 0308 	bic.w	r3, r3, #8
 8005cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f023 0304 	bic.w	r3, r3, #4
 8005cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d38 <TIM_OC1_SetConfig+0x10c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00f      	beq.n	8005cea <TIM_OC1_SetConfig+0xbe>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8005d3c <TIM_OC1_SetConfig+0x110>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00b      	beq.n	8005cea <TIM_OC1_SetConfig+0xbe>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a1a      	ldr	r2, [pc, #104]	@ (8005d40 <TIM_OC1_SetConfig+0x114>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d007      	beq.n	8005cea <TIM_OC1_SetConfig+0xbe>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a19      	ldr	r2, [pc, #100]	@ (8005d44 <TIM_OC1_SetConfig+0x118>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d003      	beq.n	8005cea <TIM_OC1_SetConfig+0xbe>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a18      	ldr	r2, [pc, #96]	@ (8005d48 <TIM_OC1_SetConfig+0x11c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d111      	bne.n	8005d0e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	621a      	str	r2, [r3, #32]
}
 8005d28:	bf00      	nop
 8005d2a:	371c      	adds	r7, #28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	fffeff8f 	.word	0xfffeff8f
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40010400 	.word	0x40010400
 8005d40:	40014000 	.word	0x40014000
 8005d44:	40014400 	.word	0x40014400
 8005d48:	40014800 	.word	0x40014800

08005d4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	f023 0210 	bic.w	r2, r3, #16
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4b34      	ldr	r3, [pc, #208]	@ (8005e48 <TIM_OC2_SetConfig+0xfc>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	021b      	lsls	r3, r3, #8
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f023 0320 	bic.w	r3, r3, #32
 8005d96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	011b      	lsls	r3, r3, #4
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a29      	ldr	r2, [pc, #164]	@ (8005e4c <TIM_OC2_SetConfig+0x100>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_OC2_SetConfig+0x68>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a28      	ldr	r2, [pc, #160]	@ (8005e50 <TIM_OC2_SetConfig+0x104>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d10d      	bne.n	8005dd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	011b      	lsls	r3, r3, #4
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8005e4c <TIM_OC2_SetConfig+0x100>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00f      	beq.n	8005df8 <TIM_OC2_SetConfig+0xac>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a1d      	ldr	r2, [pc, #116]	@ (8005e50 <TIM_OC2_SetConfig+0x104>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00b      	beq.n	8005df8 <TIM_OC2_SetConfig+0xac>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a1c      	ldr	r2, [pc, #112]	@ (8005e54 <TIM_OC2_SetConfig+0x108>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d007      	beq.n	8005df8 <TIM_OC2_SetConfig+0xac>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a1b      	ldr	r2, [pc, #108]	@ (8005e58 <TIM_OC2_SetConfig+0x10c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d003      	beq.n	8005df8 <TIM_OC2_SetConfig+0xac>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a1a      	ldr	r2, [pc, #104]	@ (8005e5c <TIM_OC2_SetConfig+0x110>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d113      	bne.n	8005e20 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005dfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	621a      	str	r2, [r3, #32]
}
 8005e3a:	bf00      	nop
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	feff8fff 	.word	0xfeff8fff
 8005e4c:	40010000 	.word	0x40010000
 8005e50:	40010400 	.word	0x40010400
 8005e54:	40014000 	.word	0x40014000
 8005e58:	40014400 	.word	0x40014400
 8005e5c:	40014800 	.word	0x40014800

08005e60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	4b33      	ldr	r3, [pc, #204]	@ (8005f58 <TIM_OC3_SetConfig+0xf8>)
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0303 	bic.w	r3, r3, #3
 8005e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	021b      	lsls	r3, r3, #8
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a28      	ldr	r2, [pc, #160]	@ (8005f5c <TIM_OC3_SetConfig+0xfc>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d003      	beq.n	8005ec6 <TIM_OC3_SetConfig+0x66>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a27      	ldr	r2, [pc, #156]	@ (8005f60 <TIM_OC3_SetConfig+0x100>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d10d      	bne.n	8005ee2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ecc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	021b      	lsls	r3, r3, #8
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8005f5c <TIM_OC3_SetConfig+0xfc>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d00f      	beq.n	8005f0a <TIM_OC3_SetConfig+0xaa>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a1c      	ldr	r2, [pc, #112]	@ (8005f60 <TIM_OC3_SetConfig+0x100>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00b      	beq.n	8005f0a <TIM_OC3_SetConfig+0xaa>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8005f64 <TIM_OC3_SetConfig+0x104>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d007      	beq.n	8005f0a <TIM_OC3_SetConfig+0xaa>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a1a      	ldr	r2, [pc, #104]	@ (8005f68 <TIM_OC3_SetConfig+0x108>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d003      	beq.n	8005f0a <TIM_OC3_SetConfig+0xaa>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a19      	ldr	r2, [pc, #100]	@ (8005f6c <TIM_OC3_SetConfig+0x10c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d113      	bne.n	8005f32 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	621a      	str	r2, [r3, #32]
}
 8005f4c:	bf00      	nop
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	fffeff8f 	.word	0xfffeff8f
 8005f5c:	40010000 	.word	0x40010000
 8005f60:	40010400 	.word	0x40010400
 8005f64:	40014000 	.word	0x40014000
 8005f68:	40014400 	.word	0x40014400
 8005f6c:	40014800 	.word	0x40014800

08005f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4b24      	ldr	r3, [pc, #144]	@ (800602c <TIM_OC4_SetConfig+0xbc>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	021b      	lsls	r3, r3, #8
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	031b      	lsls	r3, r3, #12
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a19      	ldr	r2, [pc, #100]	@ (8006030 <TIM_OC4_SetConfig+0xc0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00f      	beq.n	8005ff0 <TIM_OC4_SetConfig+0x80>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a18      	ldr	r2, [pc, #96]	@ (8006034 <TIM_OC4_SetConfig+0xc4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00b      	beq.n	8005ff0 <TIM_OC4_SetConfig+0x80>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a17      	ldr	r2, [pc, #92]	@ (8006038 <TIM_OC4_SetConfig+0xc8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d007      	beq.n	8005ff0 <TIM_OC4_SetConfig+0x80>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a16      	ldr	r2, [pc, #88]	@ (800603c <TIM_OC4_SetConfig+0xcc>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d003      	beq.n	8005ff0 <TIM_OC4_SetConfig+0x80>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a15      	ldr	r2, [pc, #84]	@ (8006040 <TIM_OC4_SetConfig+0xd0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d109      	bne.n	8006004 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ff6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	019b      	lsls	r3, r3, #6
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	4313      	orrs	r3, r2
 8006002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	621a      	str	r2, [r3, #32]
}
 800601e:	bf00      	nop
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	feff8fff 	.word	0xfeff8fff
 8006030:	40010000 	.word	0x40010000
 8006034:	40010400 	.word	0x40010400
 8006038:	40014000 	.word	0x40014000
 800603c:	40014400 	.word	0x40014400
 8006040:	40014800 	.word	0x40014800

08006044 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4b21      	ldr	r3, [pc, #132]	@ (80060f4 <TIM_OC5_SetConfig+0xb0>)
 8006070:	4013      	ands	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006084:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	041b      	lsls	r3, r3, #16
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	4313      	orrs	r3, r2
 8006090:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a18      	ldr	r2, [pc, #96]	@ (80060f8 <TIM_OC5_SetConfig+0xb4>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00f      	beq.n	80060ba <TIM_OC5_SetConfig+0x76>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a17      	ldr	r2, [pc, #92]	@ (80060fc <TIM_OC5_SetConfig+0xb8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00b      	beq.n	80060ba <TIM_OC5_SetConfig+0x76>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a16      	ldr	r2, [pc, #88]	@ (8006100 <TIM_OC5_SetConfig+0xbc>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d007      	beq.n	80060ba <TIM_OC5_SetConfig+0x76>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a15      	ldr	r2, [pc, #84]	@ (8006104 <TIM_OC5_SetConfig+0xc0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d003      	beq.n	80060ba <TIM_OC5_SetConfig+0x76>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a14      	ldr	r2, [pc, #80]	@ (8006108 <TIM_OC5_SetConfig+0xc4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d109      	bne.n	80060ce <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	021b      	lsls	r3, r3, #8
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	621a      	str	r2, [r3, #32]
}
 80060e8:	bf00      	nop
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	fffeff8f 	.word	0xfffeff8f
 80060f8:	40010000 	.word	0x40010000
 80060fc:	40010400 	.word	0x40010400
 8006100:	40014000 	.word	0x40014000
 8006104:	40014400 	.word	0x40014400
 8006108:	40014800 	.word	0x40014800

0800610c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4b22      	ldr	r3, [pc, #136]	@ (80061c0 <TIM_OC6_SetConfig+0xb4>)
 8006138:	4013      	ands	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4313      	orrs	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800614e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	051b      	lsls	r3, r3, #20
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a19      	ldr	r2, [pc, #100]	@ (80061c4 <TIM_OC6_SetConfig+0xb8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d00f      	beq.n	8006184 <TIM_OC6_SetConfig+0x78>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a18      	ldr	r2, [pc, #96]	@ (80061c8 <TIM_OC6_SetConfig+0xbc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00b      	beq.n	8006184 <TIM_OC6_SetConfig+0x78>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a17      	ldr	r2, [pc, #92]	@ (80061cc <TIM_OC6_SetConfig+0xc0>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d007      	beq.n	8006184 <TIM_OC6_SetConfig+0x78>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a16      	ldr	r2, [pc, #88]	@ (80061d0 <TIM_OC6_SetConfig+0xc4>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d003      	beq.n	8006184 <TIM_OC6_SetConfig+0x78>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a15      	ldr	r2, [pc, #84]	@ (80061d4 <TIM_OC6_SetConfig+0xc8>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d109      	bne.n	8006198 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800618a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	029b      	lsls	r3, r3, #10
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	4313      	orrs	r3, r2
 8006196:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	621a      	str	r2, [r3, #32]
}
 80061b2:	bf00      	nop
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	feff8fff 	.word	0xfeff8fff
 80061c4:	40010000 	.word	0x40010000
 80061c8:	40010400 	.word	0x40010400
 80061cc:	40014000 	.word	0x40014000
 80061d0:	40014400 	.word	0x40014400
 80061d4:	40014800 	.word	0x40014800

080061d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	f023 0201 	bic.w	r2, r3, #1
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	4313      	orrs	r3, r2
 800620c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f023 030a 	bic.w	r3, r3, #10
 8006214:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	621a      	str	r2, [r3, #32]
}
 800622a:	bf00      	nop
 800622c:	371c      	adds	r7, #28
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006236:	b480      	push	{r7}
 8006238:	b087      	sub	sp, #28
 800623a:	af00      	add	r7, sp, #0
 800623c:	60f8      	str	r0, [r7, #12]
 800623e:	60b9      	str	r1, [r7, #8]
 8006240:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	f023 0210 	bic.w	r2, r3, #16
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006260:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	031b      	lsls	r3, r3, #12
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	4313      	orrs	r3, r2
 800626a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006272:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	011b      	lsls	r3, r3, #4
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	4313      	orrs	r3, r2
 800627c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	621a      	str	r2, [r3, #32]
}
 800628a:	bf00      	nop
 800628c:	371c      	adds	r7, #28
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
	...

08006298 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4b09      	ldr	r3, [pc, #36]	@ (80062d0 <TIM_ITRx_SetConfig+0x38>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	f043 0307 	orr.w	r3, r3, #7
 80062ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	609a      	str	r2, [r3, #8]
}
 80062c2:	bf00      	nop
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	ffcfff8f 	.word	0xffcfff8f

080062d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	021a      	lsls	r2, r3, #8
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	431a      	orrs	r2, r3
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	609a      	str	r2, [r3, #8]
}
 8006308:	bf00      	nop
 800630a:	371c      	adds	r7, #28
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f003 031f 	and.w	r3, r3, #31
 8006326:	2201      	movs	r2, #1
 8006328:	fa02 f303 	lsl.w	r3, r2, r3
 800632c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a1a      	ldr	r2, [r3, #32]
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	43db      	mvns	r3, r3
 8006336:	401a      	ands	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a1a      	ldr	r2, [r3, #32]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	f003 031f 	and.w	r3, r3, #31
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	fa01 f303 	lsl.w	r3, r1, r3
 800634c:	431a      	orrs	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	621a      	str	r2, [r3, #32]
}
 8006352:	bf00      	nop
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
	...

08006360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006374:	2302      	movs	r3, #2
 8006376:	e06d      	b.n	8006454 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a30      	ldr	r2, [pc, #192]	@ (8006460 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d004      	beq.n	80063ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a2f      	ldr	r2, [pc, #188]	@ (8006464 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d108      	bne.n	80063be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80063b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a20      	ldr	r2, [pc, #128]	@ (8006460 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d022      	beq.n	8006428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ea:	d01d      	beq.n	8006428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006468 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d018      	beq.n	8006428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a1c      	ldr	r2, [pc, #112]	@ (800646c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d013      	beq.n	8006428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a1a      	ldr	r2, [pc, #104]	@ (8006470 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00e      	beq.n	8006428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a15      	ldr	r2, [pc, #84]	@ (8006464 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d009      	beq.n	8006428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a16      	ldr	r2, [pc, #88]	@ (8006474 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d004      	beq.n	8006428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a15      	ldr	r2, [pc, #84]	@ (8006478 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d10c      	bne.n	8006442 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800642e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	4313      	orrs	r3, r2
 8006438:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	40010000 	.word	0x40010000
 8006464:	40010400 	.word	0x40010400
 8006468:	40000400 	.word	0x40000400
 800646c:	40000800 	.word	0x40000800
 8006470:	40000c00 	.word	0x40000c00
 8006474:	40001800 	.word	0x40001800
 8006478:	40014000 	.word	0x40014000

0800647c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e042      	b.n	8006514 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006494:	2b00      	cmp	r3, #0
 8006496:	d106      	bne.n	80064a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7fa fda9 	bl	8000ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2224      	movs	r2, #36	@ 0x24
 80064aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0201 	bic.w	r2, r2, #1
 80064bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fd90 	bl	8006fec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f825 	bl	800651c <UART_SetConfig>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e01b      	b.n	8006514 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0201 	orr.w	r2, r2, #1
 800650a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fe0f 	bl	8007130 <UART_CheckIdleState>
 8006512:	4603      	mov	r3, r0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800651c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006520:	b092      	sub	sp, #72	@ 0x48
 8006522:	af00      	add	r7, sp, #0
 8006524:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	431a      	orrs	r2, r3
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	431a      	orrs	r2, r3
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	4313      	orrs	r3, r2
 8006542:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	4bbe      	ldr	r3, [pc, #760]	@ (8006844 <UART_SetConfig+0x328>)
 800654c:	4013      	ands	r3, r2
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	6812      	ldr	r2, [r2, #0]
 8006552:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006554:	430b      	orrs	r3, r1
 8006556:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4ab3      	ldr	r2, [pc, #716]	@ (8006848 <UART_SetConfig+0x32c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d004      	beq.n	8006588 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006584:	4313      	orrs	r3, r2
 8006586:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689a      	ldr	r2, [r3, #8]
 800658e:	4baf      	ldr	r3, [pc, #700]	@ (800684c <UART_SetConfig+0x330>)
 8006590:	4013      	ands	r3, r2
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	6812      	ldr	r2, [r2, #0]
 8006596:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006598:	430b      	orrs	r3, r1
 800659a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a2:	f023 010f 	bic.w	r1, r3, #15
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4aa6      	ldr	r2, [pc, #664]	@ (8006850 <UART_SetConfig+0x334>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d177      	bne.n	80066ac <UART_SetConfig+0x190>
 80065bc:	4ba5      	ldr	r3, [pc, #660]	@ (8006854 <UART_SetConfig+0x338>)
 80065be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065c4:	2b28      	cmp	r3, #40	@ 0x28
 80065c6:	d86d      	bhi.n	80066a4 <UART_SetConfig+0x188>
 80065c8:	a201      	add	r2, pc, #4	@ (adr r2, 80065d0 <UART_SetConfig+0xb4>)
 80065ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ce:	bf00      	nop
 80065d0:	08006675 	.word	0x08006675
 80065d4:	080066a5 	.word	0x080066a5
 80065d8:	080066a5 	.word	0x080066a5
 80065dc:	080066a5 	.word	0x080066a5
 80065e0:	080066a5 	.word	0x080066a5
 80065e4:	080066a5 	.word	0x080066a5
 80065e8:	080066a5 	.word	0x080066a5
 80065ec:	080066a5 	.word	0x080066a5
 80065f0:	0800667d 	.word	0x0800667d
 80065f4:	080066a5 	.word	0x080066a5
 80065f8:	080066a5 	.word	0x080066a5
 80065fc:	080066a5 	.word	0x080066a5
 8006600:	080066a5 	.word	0x080066a5
 8006604:	080066a5 	.word	0x080066a5
 8006608:	080066a5 	.word	0x080066a5
 800660c:	080066a5 	.word	0x080066a5
 8006610:	08006685 	.word	0x08006685
 8006614:	080066a5 	.word	0x080066a5
 8006618:	080066a5 	.word	0x080066a5
 800661c:	080066a5 	.word	0x080066a5
 8006620:	080066a5 	.word	0x080066a5
 8006624:	080066a5 	.word	0x080066a5
 8006628:	080066a5 	.word	0x080066a5
 800662c:	080066a5 	.word	0x080066a5
 8006630:	0800668d 	.word	0x0800668d
 8006634:	080066a5 	.word	0x080066a5
 8006638:	080066a5 	.word	0x080066a5
 800663c:	080066a5 	.word	0x080066a5
 8006640:	080066a5 	.word	0x080066a5
 8006644:	080066a5 	.word	0x080066a5
 8006648:	080066a5 	.word	0x080066a5
 800664c:	080066a5 	.word	0x080066a5
 8006650:	08006695 	.word	0x08006695
 8006654:	080066a5 	.word	0x080066a5
 8006658:	080066a5 	.word	0x080066a5
 800665c:	080066a5 	.word	0x080066a5
 8006660:	080066a5 	.word	0x080066a5
 8006664:	080066a5 	.word	0x080066a5
 8006668:	080066a5 	.word	0x080066a5
 800666c:	080066a5 	.word	0x080066a5
 8006670:	0800669d 	.word	0x0800669d
 8006674:	2301      	movs	r3, #1
 8006676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667a:	e222      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 800667c:	2304      	movs	r3, #4
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006682:	e21e      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006684:	2308      	movs	r3, #8
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800668a:	e21a      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 800668c:	2310      	movs	r3, #16
 800668e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006692:	e216      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006694:	2320      	movs	r3, #32
 8006696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800669a:	e212      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 800669c:	2340      	movs	r3, #64	@ 0x40
 800669e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066a2:	e20e      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80066a4:	2380      	movs	r3, #128	@ 0x80
 80066a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066aa:	e20a      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a69      	ldr	r2, [pc, #420]	@ (8006858 <UART_SetConfig+0x33c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d130      	bne.n	8006718 <UART_SetConfig+0x1fc>
 80066b6:	4b67      	ldr	r3, [pc, #412]	@ (8006854 <UART_SetConfig+0x338>)
 80066b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	2b05      	cmp	r3, #5
 80066c0:	d826      	bhi.n	8006710 <UART_SetConfig+0x1f4>
 80066c2:	a201      	add	r2, pc, #4	@ (adr r2, 80066c8 <UART_SetConfig+0x1ac>)
 80066c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c8:	080066e1 	.word	0x080066e1
 80066cc:	080066e9 	.word	0x080066e9
 80066d0:	080066f1 	.word	0x080066f1
 80066d4:	080066f9 	.word	0x080066f9
 80066d8:	08006701 	.word	0x08006701
 80066dc:	08006709 	.word	0x08006709
 80066e0:	2300      	movs	r3, #0
 80066e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e6:	e1ec      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80066e8:	2304      	movs	r3, #4
 80066ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ee:	e1e8      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80066f0:	2308      	movs	r3, #8
 80066f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f6:	e1e4      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80066f8:	2310      	movs	r3, #16
 80066fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fe:	e1e0      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006700:	2320      	movs	r3, #32
 8006702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006706:	e1dc      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006708:	2340      	movs	r3, #64	@ 0x40
 800670a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800670e:	e1d8      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006710:	2380      	movs	r3, #128	@ 0x80
 8006712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006716:	e1d4      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a4f      	ldr	r2, [pc, #316]	@ (800685c <UART_SetConfig+0x340>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d130      	bne.n	8006784 <UART_SetConfig+0x268>
 8006722:	4b4c      	ldr	r3, [pc, #304]	@ (8006854 <UART_SetConfig+0x338>)
 8006724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	2b05      	cmp	r3, #5
 800672c:	d826      	bhi.n	800677c <UART_SetConfig+0x260>
 800672e:	a201      	add	r2, pc, #4	@ (adr r2, 8006734 <UART_SetConfig+0x218>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	0800674d 	.word	0x0800674d
 8006738:	08006755 	.word	0x08006755
 800673c:	0800675d 	.word	0x0800675d
 8006740:	08006765 	.word	0x08006765
 8006744:	0800676d 	.word	0x0800676d
 8006748:	08006775 	.word	0x08006775
 800674c:	2300      	movs	r3, #0
 800674e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006752:	e1b6      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006754:	2304      	movs	r3, #4
 8006756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675a:	e1b2      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 800675c:	2308      	movs	r3, #8
 800675e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006762:	e1ae      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006764:	2310      	movs	r3, #16
 8006766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800676a:	e1aa      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 800676c:	2320      	movs	r3, #32
 800676e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006772:	e1a6      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006774:	2340      	movs	r3, #64	@ 0x40
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677a:	e1a2      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 800677c:	2380      	movs	r3, #128	@ 0x80
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006782:	e19e      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a35      	ldr	r2, [pc, #212]	@ (8006860 <UART_SetConfig+0x344>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d130      	bne.n	80067f0 <UART_SetConfig+0x2d4>
 800678e:	4b31      	ldr	r3, [pc, #196]	@ (8006854 <UART_SetConfig+0x338>)
 8006790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006792:	f003 0307 	and.w	r3, r3, #7
 8006796:	2b05      	cmp	r3, #5
 8006798:	d826      	bhi.n	80067e8 <UART_SetConfig+0x2cc>
 800679a:	a201      	add	r2, pc, #4	@ (adr r2, 80067a0 <UART_SetConfig+0x284>)
 800679c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a0:	080067b9 	.word	0x080067b9
 80067a4:	080067c1 	.word	0x080067c1
 80067a8:	080067c9 	.word	0x080067c9
 80067ac:	080067d1 	.word	0x080067d1
 80067b0:	080067d9 	.word	0x080067d9
 80067b4:	080067e1 	.word	0x080067e1
 80067b8:	2300      	movs	r3, #0
 80067ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067be:	e180      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80067c0:	2304      	movs	r3, #4
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c6:	e17c      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80067c8:	2308      	movs	r3, #8
 80067ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ce:	e178      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80067d0:	2310      	movs	r3, #16
 80067d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067d6:	e174      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80067d8:	2320      	movs	r3, #32
 80067da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067de:	e170      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80067e0:	2340      	movs	r3, #64	@ 0x40
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067e6:	e16c      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80067e8:	2380      	movs	r3, #128	@ 0x80
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ee:	e168      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006864 <UART_SetConfig+0x348>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d142      	bne.n	8006880 <UART_SetConfig+0x364>
 80067fa:	4b16      	ldr	r3, [pc, #88]	@ (8006854 <UART_SetConfig+0x338>)
 80067fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	2b05      	cmp	r3, #5
 8006804:	d838      	bhi.n	8006878 <UART_SetConfig+0x35c>
 8006806:	a201      	add	r2, pc, #4	@ (adr r2, 800680c <UART_SetConfig+0x2f0>)
 8006808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680c:	08006825 	.word	0x08006825
 8006810:	0800682d 	.word	0x0800682d
 8006814:	08006835 	.word	0x08006835
 8006818:	0800683d 	.word	0x0800683d
 800681c:	08006869 	.word	0x08006869
 8006820:	08006871 	.word	0x08006871
 8006824:	2300      	movs	r3, #0
 8006826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800682a:	e14a      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 800682c:	2304      	movs	r3, #4
 800682e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006832:	e146      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006834:	2308      	movs	r3, #8
 8006836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800683a:	e142      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 800683c:	2310      	movs	r3, #16
 800683e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006842:	e13e      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006844:	cfff69f3 	.word	0xcfff69f3
 8006848:	58000c00 	.word	0x58000c00
 800684c:	11fff4ff 	.word	0x11fff4ff
 8006850:	40011000 	.word	0x40011000
 8006854:	58024400 	.word	0x58024400
 8006858:	40004400 	.word	0x40004400
 800685c:	40004800 	.word	0x40004800
 8006860:	40004c00 	.word	0x40004c00
 8006864:	40005000 	.word	0x40005000
 8006868:	2320      	movs	r3, #32
 800686a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686e:	e128      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006870:	2340      	movs	r3, #64	@ 0x40
 8006872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006876:	e124      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006878:	2380      	movs	r3, #128	@ 0x80
 800687a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800687e:	e120      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4acb      	ldr	r2, [pc, #812]	@ (8006bb4 <UART_SetConfig+0x698>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d176      	bne.n	8006978 <UART_SetConfig+0x45c>
 800688a:	4bcb      	ldr	r3, [pc, #812]	@ (8006bb8 <UART_SetConfig+0x69c>)
 800688c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800688e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006892:	2b28      	cmp	r3, #40	@ 0x28
 8006894:	d86c      	bhi.n	8006970 <UART_SetConfig+0x454>
 8006896:	a201      	add	r2, pc, #4	@ (adr r2, 800689c <UART_SetConfig+0x380>)
 8006898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689c:	08006941 	.word	0x08006941
 80068a0:	08006971 	.word	0x08006971
 80068a4:	08006971 	.word	0x08006971
 80068a8:	08006971 	.word	0x08006971
 80068ac:	08006971 	.word	0x08006971
 80068b0:	08006971 	.word	0x08006971
 80068b4:	08006971 	.word	0x08006971
 80068b8:	08006971 	.word	0x08006971
 80068bc:	08006949 	.word	0x08006949
 80068c0:	08006971 	.word	0x08006971
 80068c4:	08006971 	.word	0x08006971
 80068c8:	08006971 	.word	0x08006971
 80068cc:	08006971 	.word	0x08006971
 80068d0:	08006971 	.word	0x08006971
 80068d4:	08006971 	.word	0x08006971
 80068d8:	08006971 	.word	0x08006971
 80068dc:	08006951 	.word	0x08006951
 80068e0:	08006971 	.word	0x08006971
 80068e4:	08006971 	.word	0x08006971
 80068e8:	08006971 	.word	0x08006971
 80068ec:	08006971 	.word	0x08006971
 80068f0:	08006971 	.word	0x08006971
 80068f4:	08006971 	.word	0x08006971
 80068f8:	08006971 	.word	0x08006971
 80068fc:	08006959 	.word	0x08006959
 8006900:	08006971 	.word	0x08006971
 8006904:	08006971 	.word	0x08006971
 8006908:	08006971 	.word	0x08006971
 800690c:	08006971 	.word	0x08006971
 8006910:	08006971 	.word	0x08006971
 8006914:	08006971 	.word	0x08006971
 8006918:	08006971 	.word	0x08006971
 800691c:	08006961 	.word	0x08006961
 8006920:	08006971 	.word	0x08006971
 8006924:	08006971 	.word	0x08006971
 8006928:	08006971 	.word	0x08006971
 800692c:	08006971 	.word	0x08006971
 8006930:	08006971 	.word	0x08006971
 8006934:	08006971 	.word	0x08006971
 8006938:	08006971 	.word	0x08006971
 800693c:	08006969 	.word	0x08006969
 8006940:	2301      	movs	r3, #1
 8006942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006946:	e0bc      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006948:	2304      	movs	r3, #4
 800694a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800694e:	e0b8      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006950:	2308      	movs	r3, #8
 8006952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006956:	e0b4      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006958:	2310      	movs	r3, #16
 800695a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800695e:	e0b0      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006960:	2320      	movs	r3, #32
 8006962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006966:	e0ac      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006968:	2340      	movs	r3, #64	@ 0x40
 800696a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800696e:	e0a8      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006970:	2380      	movs	r3, #128	@ 0x80
 8006972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006976:	e0a4      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a8f      	ldr	r2, [pc, #572]	@ (8006bbc <UART_SetConfig+0x6a0>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d130      	bne.n	80069e4 <UART_SetConfig+0x4c8>
 8006982:	4b8d      	ldr	r3, [pc, #564]	@ (8006bb8 <UART_SetConfig+0x69c>)
 8006984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	2b05      	cmp	r3, #5
 800698c:	d826      	bhi.n	80069dc <UART_SetConfig+0x4c0>
 800698e:	a201      	add	r2, pc, #4	@ (adr r2, 8006994 <UART_SetConfig+0x478>)
 8006990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006994:	080069ad 	.word	0x080069ad
 8006998:	080069b5 	.word	0x080069b5
 800699c:	080069bd 	.word	0x080069bd
 80069a0:	080069c5 	.word	0x080069c5
 80069a4:	080069cd 	.word	0x080069cd
 80069a8:	080069d5 	.word	0x080069d5
 80069ac:	2300      	movs	r3, #0
 80069ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069b2:	e086      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80069b4:	2304      	movs	r3, #4
 80069b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ba:	e082      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80069bc:	2308      	movs	r3, #8
 80069be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069c2:	e07e      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80069c4:	2310      	movs	r3, #16
 80069c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ca:	e07a      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80069cc:	2320      	movs	r3, #32
 80069ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069d2:	e076      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80069d4:	2340      	movs	r3, #64	@ 0x40
 80069d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069da:	e072      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80069dc:	2380      	movs	r3, #128	@ 0x80
 80069de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069e2:	e06e      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a75      	ldr	r2, [pc, #468]	@ (8006bc0 <UART_SetConfig+0x6a4>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d130      	bne.n	8006a50 <UART_SetConfig+0x534>
 80069ee:	4b72      	ldr	r3, [pc, #456]	@ (8006bb8 <UART_SetConfig+0x69c>)
 80069f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	2b05      	cmp	r3, #5
 80069f8:	d826      	bhi.n	8006a48 <UART_SetConfig+0x52c>
 80069fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006a00 <UART_SetConfig+0x4e4>)
 80069fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a00:	08006a19 	.word	0x08006a19
 8006a04:	08006a21 	.word	0x08006a21
 8006a08:	08006a29 	.word	0x08006a29
 8006a0c:	08006a31 	.word	0x08006a31
 8006a10:	08006a39 	.word	0x08006a39
 8006a14:	08006a41 	.word	0x08006a41
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a1e:	e050      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006a20:	2304      	movs	r3, #4
 8006a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a26:	e04c      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006a28:	2308      	movs	r3, #8
 8006a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a2e:	e048      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006a30:	2310      	movs	r3, #16
 8006a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a36:	e044      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006a38:	2320      	movs	r3, #32
 8006a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a3e:	e040      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006a40:	2340      	movs	r3, #64	@ 0x40
 8006a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a46:	e03c      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006a48:	2380      	movs	r3, #128	@ 0x80
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a4e:	e038      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a5b      	ldr	r2, [pc, #364]	@ (8006bc4 <UART_SetConfig+0x6a8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d130      	bne.n	8006abc <UART_SetConfig+0x5a0>
 8006a5a:	4b57      	ldr	r3, [pc, #348]	@ (8006bb8 <UART_SetConfig+0x69c>)
 8006a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	2b05      	cmp	r3, #5
 8006a64:	d826      	bhi.n	8006ab4 <UART_SetConfig+0x598>
 8006a66:	a201      	add	r2, pc, #4	@ (adr r2, 8006a6c <UART_SetConfig+0x550>)
 8006a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6c:	08006a85 	.word	0x08006a85
 8006a70:	08006a8d 	.word	0x08006a8d
 8006a74:	08006a95 	.word	0x08006a95
 8006a78:	08006a9d 	.word	0x08006a9d
 8006a7c:	08006aa5 	.word	0x08006aa5
 8006a80:	08006aad 	.word	0x08006aad
 8006a84:	2302      	movs	r3, #2
 8006a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a8a:	e01a      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006a8c:	2304      	movs	r3, #4
 8006a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a92:	e016      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006a94:	2308      	movs	r3, #8
 8006a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a9a:	e012      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006a9c:	2310      	movs	r3, #16
 8006a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aa2:	e00e      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006aa4:	2320      	movs	r3, #32
 8006aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aaa:	e00a      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006aac:	2340      	movs	r3, #64	@ 0x40
 8006aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ab2:	e006      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006ab4:	2380      	movs	r3, #128	@ 0x80
 8006ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aba:	e002      	b.n	8006ac2 <UART_SetConfig+0x5a6>
 8006abc:	2380      	movs	r3, #128	@ 0x80
 8006abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a3f      	ldr	r2, [pc, #252]	@ (8006bc4 <UART_SetConfig+0x6a8>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	f040 80f8 	bne.w	8006cbe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ace:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006ad2:	2b20      	cmp	r3, #32
 8006ad4:	dc46      	bgt.n	8006b64 <UART_SetConfig+0x648>
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	f2c0 8082 	blt.w	8006be0 <UART_SetConfig+0x6c4>
 8006adc:	3b02      	subs	r3, #2
 8006ade:	2b1e      	cmp	r3, #30
 8006ae0:	d87e      	bhi.n	8006be0 <UART_SetConfig+0x6c4>
 8006ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae8 <UART_SetConfig+0x5cc>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006b6b 	.word	0x08006b6b
 8006aec:	08006be1 	.word	0x08006be1
 8006af0:	08006b73 	.word	0x08006b73
 8006af4:	08006be1 	.word	0x08006be1
 8006af8:	08006be1 	.word	0x08006be1
 8006afc:	08006be1 	.word	0x08006be1
 8006b00:	08006b83 	.word	0x08006b83
 8006b04:	08006be1 	.word	0x08006be1
 8006b08:	08006be1 	.word	0x08006be1
 8006b0c:	08006be1 	.word	0x08006be1
 8006b10:	08006be1 	.word	0x08006be1
 8006b14:	08006be1 	.word	0x08006be1
 8006b18:	08006be1 	.word	0x08006be1
 8006b1c:	08006be1 	.word	0x08006be1
 8006b20:	08006b93 	.word	0x08006b93
 8006b24:	08006be1 	.word	0x08006be1
 8006b28:	08006be1 	.word	0x08006be1
 8006b2c:	08006be1 	.word	0x08006be1
 8006b30:	08006be1 	.word	0x08006be1
 8006b34:	08006be1 	.word	0x08006be1
 8006b38:	08006be1 	.word	0x08006be1
 8006b3c:	08006be1 	.word	0x08006be1
 8006b40:	08006be1 	.word	0x08006be1
 8006b44:	08006be1 	.word	0x08006be1
 8006b48:	08006be1 	.word	0x08006be1
 8006b4c:	08006be1 	.word	0x08006be1
 8006b50:	08006be1 	.word	0x08006be1
 8006b54:	08006be1 	.word	0x08006be1
 8006b58:	08006be1 	.word	0x08006be1
 8006b5c:	08006be1 	.word	0x08006be1
 8006b60:	08006bd3 	.word	0x08006bd3
 8006b64:	2b40      	cmp	r3, #64	@ 0x40
 8006b66:	d037      	beq.n	8006bd8 <UART_SetConfig+0x6bc>
 8006b68:	e03a      	b.n	8006be0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006b6a:	f7fd ff2f 	bl	80049cc <HAL_RCCEx_GetD3PCLK1Freq>
 8006b6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b70:	e03c      	b.n	8006bec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fd ff3e 	bl	80049f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b80:	e034      	b.n	8006bec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b82:	f107 0318 	add.w	r3, r7, #24
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fe f88a 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b90:	e02c      	b.n	8006bec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b92:	4b09      	ldr	r3, [pc, #36]	@ (8006bb8 <UART_SetConfig+0x69c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d016      	beq.n	8006bcc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b9e:	4b06      	ldr	r3, [pc, #24]	@ (8006bb8 <UART_SetConfig+0x69c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	08db      	lsrs	r3, r3, #3
 8006ba4:	f003 0303 	and.w	r3, r3, #3
 8006ba8:	4a07      	ldr	r2, [pc, #28]	@ (8006bc8 <UART_SetConfig+0x6ac>)
 8006baa:	fa22 f303 	lsr.w	r3, r2, r3
 8006bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bb0:	e01c      	b.n	8006bec <UART_SetConfig+0x6d0>
 8006bb2:	bf00      	nop
 8006bb4:	40011400 	.word	0x40011400
 8006bb8:	58024400 	.word	0x58024400
 8006bbc:	40007800 	.word	0x40007800
 8006bc0:	40007c00 	.word	0x40007c00
 8006bc4:	58000c00 	.word	0x58000c00
 8006bc8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006bcc:	4b9d      	ldr	r3, [pc, #628]	@ (8006e44 <UART_SetConfig+0x928>)
 8006bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bd0:	e00c      	b.n	8006bec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006bd2:	4b9d      	ldr	r3, [pc, #628]	@ (8006e48 <UART_SetConfig+0x92c>)
 8006bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bd6:	e009      	b.n	8006bec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bde:	e005      	b.n	8006bec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006bea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 81de 	beq.w	8006fb0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf8:	4a94      	ldr	r2, [pc, #592]	@ (8006e4c <UART_SetConfig+0x930>)
 8006bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c02:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c06:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	4413      	add	r3, r2
 8006c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d305      	bcc.n	8006c24 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d903      	bls.n	8006c2c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006c2a:	e1c1      	b.n	8006fb0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c2e:	2200      	movs	r2, #0
 8006c30:	60bb      	str	r3, [r7, #8]
 8006c32:	60fa      	str	r2, [r7, #12]
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c38:	4a84      	ldr	r2, [pc, #528]	@ (8006e4c <UART_SetConfig+0x930>)
 8006c3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	2200      	movs	r2, #0
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	607a      	str	r2, [r7, #4]
 8006c46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c4e:	f7f9 fb43 	bl	80002d8 <__aeabi_uldivmod>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4610      	mov	r0, r2
 8006c58:	4619      	mov	r1, r3
 8006c5a:	f04f 0200 	mov.w	r2, #0
 8006c5e:	f04f 0300 	mov.w	r3, #0
 8006c62:	020b      	lsls	r3, r1, #8
 8006c64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c68:	0202      	lsls	r2, r0, #8
 8006c6a:	6979      	ldr	r1, [r7, #20]
 8006c6c:	6849      	ldr	r1, [r1, #4]
 8006c6e:	0849      	lsrs	r1, r1, #1
 8006c70:	2000      	movs	r0, #0
 8006c72:	460c      	mov	r4, r1
 8006c74:	4605      	mov	r5, r0
 8006c76:	eb12 0804 	adds.w	r8, r2, r4
 8006c7a:	eb43 0905 	adc.w	r9, r3, r5
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	469a      	mov	sl, r3
 8006c86:	4693      	mov	fp, r2
 8006c88:	4652      	mov	r2, sl
 8006c8a:	465b      	mov	r3, fp
 8006c8c:	4640      	mov	r0, r8
 8006c8e:	4649      	mov	r1, r9
 8006c90:	f7f9 fb22 	bl	80002d8 <__aeabi_uldivmod>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4613      	mov	r3, r2
 8006c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ca2:	d308      	bcc.n	8006cb6 <UART_SetConfig+0x79a>
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006caa:	d204      	bcs.n	8006cb6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006cb2:	60da      	str	r2, [r3, #12]
 8006cb4:	e17c      	b.n	8006fb0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006cbc:	e178      	b.n	8006fb0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cc6:	f040 80c5 	bne.w	8006e54 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006cca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006cce:	2b20      	cmp	r3, #32
 8006cd0:	dc48      	bgt.n	8006d64 <UART_SetConfig+0x848>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	db7b      	blt.n	8006dce <UART_SetConfig+0x8b2>
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	d879      	bhi.n	8006dce <UART_SetConfig+0x8b2>
 8006cda:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce0 <UART_SetConfig+0x7c4>)
 8006cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce0:	08006d6b 	.word	0x08006d6b
 8006ce4:	08006d73 	.word	0x08006d73
 8006ce8:	08006dcf 	.word	0x08006dcf
 8006cec:	08006dcf 	.word	0x08006dcf
 8006cf0:	08006d7b 	.word	0x08006d7b
 8006cf4:	08006dcf 	.word	0x08006dcf
 8006cf8:	08006dcf 	.word	0x08006dcf
 8006cfc:	08006dcf 	.word	0x08006dcf
 8006d00:	08006d8b 	.word	0x08006d8b
 8006d04:	08006dcf 	.word	0x08006dcf
 8006d08:	08006dcf 	.word	0x08006dcf
 8006d0c:	08006dcf 	.word	0x08006dcf
 8006d10:	08006dcf 	.word	0x08006dcf
 8006d14:	08006dcf 	.word	0x08006dcf
 8006d18:	08006dcf 	.word	0x08006dcf
 8006d1c:	08006dcf 	.word	0x08006dcf
 8006d20:	08006d9b 	.word	0x08006d9b
 8006d24:	08006dcf 	.word	0x08006dcf
 8006d28:	08006dcf 	.word	0x08006dcf
 8006d2c:	08006dcf 	.word	0x08006dcf
 8006d30:	08006dcf 	.word	0x08006dcf
 8006d34:	08006dcf 	.word	0x08006dcf
 8006d38:	08006dcf 	.word	0x08006dcf
 8006d3c:	08006dcf 	.word	0x08006dcf
 8006d40:	08006dcf 	.word	0x08006dcf
 8006d44:	08006dcf 	.word	0x08006dcf
 8006d48:	08006dcf 	.word	0x08006dcf
 8006d4c:	08006dcf 	.word	0x08006dcf
 8006d50:	08006dcf 	.word	0x08006dcf
 8006d54:	08006dcf 	.word	0x08006dcf
 8006d58:	08006dcf 	.word	0x08006dcf
 8006d5c:	08006dcf 	.word	0x08006dcf
 8006d60:	08006dc1 	.word	0x08006dc1
 8006d64:	2b40      	cmp	r3, #64	@ 0x40
 8006d66:	d02e      	beq.n	8006dc6 <UART_SetConfig+0x8aa>
 8006d68:	e031      	b.n	8006dce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d6a:	f7fc fbf9 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 8006d6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d70:	e033      	b.n	8006dda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d72:	f7fc fc0b 	bl	800358c <HAL_RCC_GetPCLK2Freq>
 8006d76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d78:	e02f      	b.n	8006dda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fd fe3a 	bl	80049f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d88:	e027      	b.n	8006dda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d8a:	f107 0318 	add.w	r3, r7, #24
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fd ff86 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d98:	e01f      	b.n	8006dda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d9a:	4b2d      	ldr	r3, [pc, #180]	@ (8006e50 <UART_SetConfig+0x934>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d009      	beq.n	8006dba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006da6:	4b2a      	ldr	r3, [pc, #168]	@ (8006e50 <UART_SetConfig+0x934>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	08db      	lsrs	r3, r3, #3
 8006dac:	f003 0303 	and.w	r3, r3, #3
 8006db0:	4a24      	ldr	r2, [pc, #144]	@ (8006e44 <UART_SetConfig+0x928>)
 8006db2:	fa22 f303 	lsr.w	r3, r2, r3
 8006db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006db8:	e00f      	b.n	8006dda <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006dba:	4b22      	ldr	r3, [pc, #136]	@ (8006e44 <UART_SetConfig+0x928>)
 8006dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dbe:	e00c      	b.n	8006dda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006dc0:	4b21      	ldr	r3, [pc, #132]	@ (8006e48 <UART_SetConfig+0x92c>)
 8006dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dc4:	e009      	b.n	8006dda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dcc:	e005      	b.n	8006dda <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006dd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 80e7 	beq.w	8006fb0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de6:	4a19      	ldr	r2, [pc, #100]	@ (8006e4c <UART_SetConfig+0x930>)
 8006de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dec:	461a      	mov	r2, r3
 8006dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006df4:	005a      	lsls	r2, r3, #1
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	085b      	lsrs	r3, r3, #1
 8006dfc:	441a      	add	r2, r3
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e06:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0a:	2b0f      	cmp	r3, #15
 8006e0c:	d916      	bls.n	8006e3c <UART_SetConfig+0x920>
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e14:	d212      	bcs.n	8006e3c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	f023 030f 	bic.w	r3, r3, #15
 8006e1e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e22:	085b      	lsrs	r3, r3, #1
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006e38:	60da      	str	r2, [r3, #12]
 8006e3a:	e0b9      	b.n	8006fb0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006e42:	e0b5      	b.n	8006fb0 <UART_SetConfig+0xa94>
 8006e44:	03d09000 	.word	0x03d09000
 8006e48:	003d0900 	.word	0x003d0900
 8006e4c:	08007cc4 	.word	0x08007cc4
 8006e50:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e54:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	dc49      	bgt.n	8006ef0 <UART_SetConfig+0x9d4>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	db7c      	blt.n	8006f5a <UART_SetConfig+0xa3e>
 8006e60:	2b20      	cmp	r3, #32
 8006e62:	d87a      	bhi.n	8006f5a <UART_SetConfig+0xa3e>
 8006e64:	a201      	add	r2, pc, #4	@ (adr r2, 8006e6c <UART_SetConfig+0x950>)
 8006e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6a:	bf00      	nop
 8006e6c:	08006ef7 	.word	0x08006ef7
 8006e70:	08006eff 	.word	0x08006eff
 8006e74:	08006f5b 	.word	0x08006f5b
 8006e78:	08006f5b 	.word	0x08006f5b
 8006e7c:	08006f07 	.word	0x08006f07
 8006e80:	08006f5b 	.word	0x08006f5b
 8006e84:	08006f5b 	.word	0x08006f5b
 8006e88:	08006f5b 	.word	0x08006f5b
 8006e8c:	08006f17 	.word	0x08006f17
 8006e90:	08006f5b 	.word	0x08006f5b
 8006e94:	08006f5b 	.word	0x08006f5b
 8006e98:	08006f5b 	.word	0x08006f5b
 8006e9c:	08006f5b 	.word	0x08006f5b
 8006ea0:	08006f5b 	.word	0x08006f5b
 8006ea4:	08006f5b 	.word	0x08006f5b
 8006ea8:	08006f5b 	.word	0x08006f5b
 8006eac:	08006f27 	.word	0x08006f27
 8006eb0:	08006f5b 	.word	0x08006f5b
 8006eb4:	08006f5b 	.word	0x08006f5b
 8006eb8:	08006f5b 	.word	0x08006f5b
 8006ebc:	08006f5b 	.word	0x08006f5b
 8006ec0:	08006f5b 	.word	0x08006f5b
 8006ec4:	08006f5b 	.word	0x08006f5b
 8006ec8:	08006f5b 	.word	0x08006f5b
 8006ecc:	08006f5b 	.word	0x08006f5b
 8006ed0:	08006f5b 	.word	0x08006f5b
 8006ed4:	08006f5b 	.word	0x08006f5b
 8006ed8:	08006f5b 	.word	0x08006f5b
 8006edc:	08006f5b 	.word	0x08006f5b
 8006ee0:	08006f5b 	.word	0x08006f5b
 8006ee4:	08006f5b 	.word	0x08006f5b
 8006ee8:	08006f5b 	.word	0x08006f5b
 8006eec:	08006f4d 	.word	0x08006f4d
 8006ef0:	2b40      	cmp	r3, #64	@ 0x40
 8006ef2:	d02e      	beq.n	8006f52 <UART_SetConfig+0xa36>
 8006ef4:	e031      	b.n	8006f5a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ef6:	f7fc fb33 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 8006efa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006efc:	e033      	b.n	8006f66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006efe:	f7fc fb45 	bl	800358c <HAL_RCC_GetPCLK2Freq>
 8006f02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006f04:	e02f      	b.n	8006f66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fd fd74 	bl	80049f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f14:	e027      	b.n	8006f66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f16:	f107 0318 	add.w	r3, r7, #24
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fd fec0 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f24:	e01f      	b.n	8006f66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f26:	4b2d      	ldr	r3, [pc, #180]	@ (8006fdc <UART_SetConfig+0xac0>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d009      	beq.n	8006f46 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f32:	4b2a      	ldr	r3, [pc, #168]	@ (8006fdc <UART_SetConfig+0xac0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	08db      	lsrs	r3, r3, #3
 8006f38:	f003 0303 	and.w	r3, r3, #3
 8006f3c:	4a28      	ldr	r2, [pc, #160]	@ (8006fe0 <UART_SetConfig+0xac4>)
 8006f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f44:	e00f      	b.n	8006f66 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006f46:	4b26      	ldr	r3, [pc, #152]	@ (8006fe0 <UART_SetConfig+0xac4>)
 8006f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f4a:	e00c      	b.n	8006f66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f4c:	4b25      	ldr	r3, [pc, #148]	@ (8006fe4 <UART_SetConfig+0xac8>)
 8006f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f50:	e009      	b.n	8006f66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f58:	e005      	b.n	8006f66 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006f64:	bf00      	nop
    }

    if (pclk != 0U)
 8006f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d021      	beq.n	8006fb0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f70:	4a1d      	ldr	r2, [pc, #116]	@ (8006fe8 <UART_SetConfig+0xacc>)
 8006f72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f76:	461a      	mov	r2, r3
 8006f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	085b      	lsrs	r3, r3, #1
 8006f84:	441a      	add	r2, r3
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f92:	2b0f      	cmp	r3, #15
 8006f94:	d909      	bls.n	8006faa <UART_SetConfig+0xa8e>
 8006f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f9c:	d205      	bcs.n	8006faa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	60da      	str	r2, [r3, #12]
 8006fa8:	e002      	b.n	8006fb0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006fcc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3748      	adds	r7, #72	@ 0x48
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fda:	bf00      	nop
 8006fdc:	58024400 	.word	0x58024400
 8006fe0:	03d09000 	.word	0x03d09000
 8006fe4:	003d0900 	.word	0x003d0900
 8006fe8:	08007cc4 	.word	0x08007cc4

08006fec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff8:	f003 0308 	and.w	r3, r3, #8
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00a      	beq.n	800705a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705e:	f003 0304 	and.w	r3, r3, #4
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007080:	f003 0310 	and.w	r3, r3, #16
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00a      	beq.n	800709e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	430a      	orrs	r2, r1
 80070be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d01a      	beq.n	8007102 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070ea:	d10a      	bne.n	8007102 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	605a      	str	r2, [r3, #4]
  }
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b098      	sub	sp, #96	@ 0x60
 8007134:	af02      	add	r7, sp, #8
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007140:	f7fa f9a8 	bl	8001494 <HAL_GetTick>
 8007144:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0308 	and.w	r3, r3, #8
 8007150:	2b08      	cmp	r3, #8
 8007152:	d12f      	bne.n	80071b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007154:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800715c:	2200      	movs	r2, #0
 800715e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f88e 	bl	8007284 <UART_WaitOnFlagUntilTimeout>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d022      	beq.n	80071b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800717c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800717e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007182:	653b      	str	r3, [r7, #80]	@ 0x50
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800718c:	647b      	str	r3, [r7, #68]	@ 0x44
 800718e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007192:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800719a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e6      	bne.n	800716e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e063      	b.n	800727c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0304 	and.w	r3, r3, #4
 80071be:	2b04      	cmp	r3, #4
 80071c0:	d149      	bne.n	8007256 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071ca:	2200      	movs	r2, #0
 80071cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f857 	bl	8007284 <UART_WaitOnFlagUntilTimeout>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d03c      	beq.n	8007256 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	623b      	str	r3, [r7, #32]
   return(result);
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80071fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e6      	bne.n	80071dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3308      	adds	r3, #8
 8007214:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	60fb      	str	r3, [r7, #12]
   return(result);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f023 0301 	bic.w	r3, r3, #1
 8007224:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3308      	adds	r3, #8
 800722c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800722e:	61fa      	str	r2, [r7, #28]
 8007230:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	69b9      	ldr	r1, [r7, #24]
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	617b      	str	r3, [r7, #20]
   return(result);
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e5      	bne.n	800720e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2220      	movs	r2, #32
 8007246:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e012      	b.n	800727c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3758      	adds	r7, #88	@ 0x58
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	603b      	str	r3, [r7, #0]
 8007290:	4613      	mov	r3, r2
 8007292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007294:	e04f      	b.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729c:	d04b      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800729e:	f7fa f8f9 	bl	8001494 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d302      	bcc.n	80072b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e04e      	b.n	8007356 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d037      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2b80      	cmp	r3, #128	@ 0x80
 80072ca:	d034      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2b40      	cmp	r3, #64	@ 0x40
 80072d0:	d031      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d110      	bne.n	8007302 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2208      	movs	r2, #8
 80072e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 f839 	bl	8007360 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2208      	movs	r2, #8
 80072f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e029      	b.n	8007356 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800730c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007310:	d111      	bne.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800731a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 f81f 	bl	8007360 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2220      	movs	r2, #32
 8007326:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e00f      	b.n	8007356 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69da      	ldr	r2, [r3, #28]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	4013      	ands	r3, r2
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	429a      	cmp	r2, r3
 8007344:	bf0c      	ite	eq
 8007346:	2301      	moveq	r3, #1
 8007348:	2300      	movne	r3, #0
 800734a:	b2db      	uxtb	r3, r3
 800734c:	461a      	mov	r2, r3
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	429a      	cmp	r2, r3
 8007352:	d0a0      	beq.n	8007296 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007360:	b480      	push	{r7}
 8007362:	b095      	sub	sp, #84	@ 0x54
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007370:	e853 3f00 	ldrex	r3, [r3]
 8007374:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007378:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800737c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007386:	643b      	str	r3, [r7, #64]	@ 0x40
 8007388:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800738c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800738e:	e841 2300 	strex	r3, r2, [r1]
 8007392:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1e6      	bne.n	8007368 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3308      	adds	r3, #8
 80073a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80073aa:	69fa      	ldr	r2, [r7, #28]
 80073ac:	4b1e      	ldr	r3, [pc, #120]	@ (8007428 <UART_EndRxTransfer+0xc8>)
 80073ae:	4013      	ands	r3, r2
 80073b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3308      	adds	r3, #8
 80073b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073c2:	e841 2300 	strex	r3, r2, [r1]
 80073c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1e5      	bne.n	800739a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d118      	bne.n	8007408 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	e853 3f00 	ldrex	r3, [r3]
 80073e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f023 0310 	bic.w	r3, r3, #16
 80073ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	461a      	mov	r2, r3
 80073f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073f4:	61bb      	str	r3, [r7, #24]
 80073f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f8:	6979      	ldr	r1, [r7, #20]
 80073fa:	69ba      	ldr	r2, [r7, #24]
 80073fc:	e841 2300 	strex	r3, r2, [r1]
 8007400:	613b      	str	r3, [r7, #16]
   return(result);
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1e6      	bne.n	80073d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2220      	movs	r2, #32
 800740c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800741c:	bf00      	nop
 800741e:	3754      	adds	r7, #84	@ 0x54
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	effffffe 	.word	0xeffffffe

0800742c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800743a:	2b01      	cmp	r3, #1
 800743c:	d101      	bne.n	8007442 <HAL_UARTEx_DisableFifoMode+0x16>
 800743e:	2302      	movs	r3, #2
 8007440:	e027      	b.n	8007492 <HAL_UARTEx_DisableFifoMode+0x66>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2224      	movs	r2, #36	@ 0x24
 800744e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0201 	bic.w	r2, r2, #1
 8007468:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007470:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2220      	movs	r2, #32
 8007484:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b084      	sub	sp, #16
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074b2:	2302      	movs	r3, #2
 80074b4:	e02d      	b.n	8007512 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2224      	movs	r2, #36	@ 0x24
 80074c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 0201 	bic.w	r2, r2, #1
 80074dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f850 	bl	8007598 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2220      	movs	r2, #32
 8007504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b084      	sub	sp, #16
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800752a:	2b01      	cmp	r3, #1
 800752c:	d101      	bne.n	8007532 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800752e:	2302      	movs	r3, #2
 8007530:	e02d      	b.n	800758e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2224      	movs	r2, #36	@ 0x24
 800753e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0201 	bic.w	r2, r2, #1
 8007558:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	683a      	ldr	r2, [r7, #0]
 800756a:	430a      	orrs	r2, r1
 800756c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f812 	bl	8007598 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2220      	movs	r2, #32
 8007580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d108      	bne.n	80075ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075b8:	e031      	b.n	800761e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075ba:	2310      	movs	r3, #16
 80075bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075be:	2310      	movs	r3, #16
 80075c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	0e5b      	lsrs	r3, r3, #25
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	f003 0307 	and.w	r3, r3, #7
 80075d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	0f5b      	lsrs	r3, r3, #29
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f003 0307 	and.w	r3, r3, #7
 80075e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	7b3a      	ldrb	r2, [r7, #12]
 80075e6:	4911      	ldr	r1, [pc, #68]	@ (800762c <UARTEx_SetNbDataToProcess+0x94>)
 80075e8:	5c8a      	ldrb	r2, [r1, r2]
 80075ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075ee:	7b3a      	ldrb	r2, [r7, #12]
 80075f0:	490f      	ldr	r1, [pc, #60]	@ (8007630 <UARTEx_SetNbDataToProcess+0x98>)
 80075f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007600:	7bfb      	ldrb	r3, [r7, #15]
 8007602:	7b7a      	ldrb	r2, [r7, #13]
 8007604:	4909      	ldr	r1, [pc, #36]	@ (800762c <UARTEx_SetNbDataToProcess+0x94>)
 8007606:	5c8a      	ldrb	r2, [r1, r2]
 8007608:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800760c:	7b7a      	ldrb	r2, [r7, #13]
 800760e:	4908      	ldr	r1, [pc, #32]	@ (8007630 <UARTEx_SetNbDataToProcess+0x98>)
 8007610:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007612:	fb93 f3f2 	sdiv	r3, r3, r2
 8007616:	b29a      	uxth	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800761e:	bf00      	nop
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	08007cdc 	.word	0x08007cdc
 8007630:	08007ce4 	.word	0x08007ce4

08007634 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007634:	b084      	sub	sp, #16
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	f107 001c 	add.w	r0, r7, #28
 8007642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007646:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800764a:	2b01      	cmp	r3, #1
 800764c:	d121      	bne.n	8007692 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007652:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68da      	ldr	r2, [r3, #12]
 800765e:	4b2c      	ldr	r3, [pc, #176]	@ (8007710 <USB_CoreInit+0xdc>)
 8007660:	4013      	ands	r3, r2
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007672:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007676:	2b01      	cmp	r3, #1
 8007678:	d105      	bne.n	8007686 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 faaa 	bl	8007be0 <USB_CoreReset>
 800768c:	4603      	mov	r3, r0
 800768e:	73fb      	strb	r3, [r7, #15]
 8007690:	e01b      	b.n	80076ca <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fa9e 	bl	8007be0 <USB_CoreReset>
 80076a4:	4603      	mov	r3, r0
 80076a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d106      	bne.n	80076be <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80076bc:	e005      	b.n	80076ca <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076ca:	7fbb      	ldrb	r3, [r7, #30]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d116      	bne.n	80076fe <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80076de:	4b0d      	ldr	r3, [pc, #52]	@ (8007714 <USB_CoreInit+0xe0>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f043 0206 	orr.w	r2, r3, #6
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f043 0220 	orr.w	r2, r3, #32
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800770a:	b004      	add	sp, #16
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	ffbdffbf 	.word	0xffbdffbf
 8007714:	03ee0000 	.word	0x03ee0000

08007718 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f023 0201 	bic.w	r2, r3, #1
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b084      	sub	sp, #16
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	460b      	mov	r3, r1
 8007744:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007756:	78fb      	ldrb	r3, [r7, #3]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d115      	bne.n	8007788 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007768:	200a      	movs	r0, #10
 800776a:	f7f9 fe9f 	bl	80014ac <HAL_Delay>
      ms += 10U;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	330a      	adds	r3, #10
 8007772:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fa25 	bl	8007bc4 <USB_GetMode>
 800777a:	4603      	mov	r3, r0
 800777c:	2b01      	cmp	r3, #1
 800777e:	d01e      	beq.n	80077be <USB_SetCurrentMode+0x84>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2bc7      	cmp	r3, #199	@ 0xc7
 8007784:	d9f0      	bls.n	8007768 <USB_SetCurrentMode+0x2e>
 8007786:	e01a      	b.n	80077be <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d115      	bne.n	80077ba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800779a:	200a      	movs	r0, #10
 800779c:	f7f9 fe86 	bl	80014ac <HAL_Delay>
      ms += 10U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	330a      	adds	r3, #10
 80077a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fa0c 	bl	8007bc4 <USB_GetMode>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <USB_SetCurrentMode+0x84>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2bc7      	cmp	r3, #199	@ 0xc7
 80077b6:	d9f0      	bls.n	800779a <USB_SetCurrentMode+0x60>
 80077b8:	e001      	b.n	80077be <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e005      	b.n	80077ca <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2bc8      	cmp	r3, #200	@ 0xc8
 80077c2:	d101      	bne.n	80077c8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e000      	b.n	80077ca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
	...

080077d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077d4:	b084      	sub	sp, #16
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b086      	sub	sp, #24
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80077e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077ee:	2300      	movs	r3, #0
 80077f0:	613b      	str	r3, [r7, #16]
 80077f2:	e009      	b.n	8007808 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	3340      	adds	r3, #64	@ 0x40
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	2200      	movs	r2, #0
 8007800:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	3301      	adds	r3, #1
 8007806:	613b      	str	r3, [r7, #16]
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	2b0e      	cmp	r3, #14
 800780c:	d9f2      	bls.n	80077f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800780e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007812:	2b00      	cmp	r3, #0
 8007814:	d11c      	bne.n	8007850 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007824:	f043 0302 	orr.w	r3, r3, #2
 8007828:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	e005      	b.n	800785c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007854:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007862:	461a      	mov	r2, r3
 8007864:	2300      	movs	r3, #0
 8007866:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007868:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800786c:	2b01      	cmp	r3, #1
 800786e:	d10d      	bne.n	800788c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007874:	2b00      	cmp	r3, #0
 8007876:	d104      	bne.n	8007882 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007878:	2100      	movs	r1, #0
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f968 	bl	8007b50 <USB_SetDevSpeed>
 8007880:	e008      	b.n	8007894 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007882:	2101      	movs	r1, #1
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f963 	bl	8007b50 <USB_SetDevSpeed>
 800788a:	e003      	b.n	8007894 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800788c:	2103      	movs	r1, #3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f95e 	bl	8007b50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007894:	2110      	movs	r1, #16
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f8fa 	bl	8007a90 <USB_FlushTxFifo>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f924 	bl	8007af4 <USB_FlushRxFifo>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078bc:	461a      	mov	r2, r3
 80078be:	2300      	movs	r3, #0
 80078c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c8:	461a      	mov	r2, r3
 80078ca:	2300      	movs	r3, #0
 80078cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078d4:	461a      	mov	r2, r3
 80078d6:	2300      	movs	r3, #0
 80078d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078da:	2300      	movs	r3, #0
 80078dc:	613b      	str	r3, [r7, #16]
 80078de:	e043      	b.n	8007968 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078f6:	d118      	bne.n	800792a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10a      	bne.n	8007914 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4413      	add	r3, r2
 8007906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800790a:	461a      	mov	r2, r3
 800790c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007910:	6013      	str	r3, [r2, #0]
 8007912:	e013      	b.n	800793c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007920:	461a      	mov	r2, r3
 8007922:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	e008      	b.n	800793c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	4413      	add	r3, r2
 8007932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007936:	461a      	mov	r2, r3
 8007938:	2300      	movs	r3, #0
 800793a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4413      	add	r3, r2
 8007944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007948:	461a      	mov	r2, r3
 800794a:	2300      	movs	r3, #0
 800794c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	015a      	lsls	r2, r3, #5
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	4413      	add	r3, r2
 8007956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800795a:	461a      	mov	r2, r3
 800795c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007960:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	3301      	adds	r3, #1
 8007966:	613b      	str	r3, [r7, #16]
 8007968:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800796c:	461a      	mov	r2, r3
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	4293      	cmp	r3, r2
 8007972:	d3b5      	bcc.n	80078e0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007974:	2300      	movs	r3, #0
 8007976:	613b      	str	r3, [r7, #16]
 8007978:	e043      	b.n	8007a02 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800798c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007990:	d118      	bne.n	80079c4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10a      	bne.n	80079ae <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a4:	461a      	mov	r2, r3
 80079a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	e013      	b.n	80079d6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ba:	461a      	mov	r2, r3
 80079bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80079c0:	6013      	str	r3, [r2, #0]
 80079c2:	e008      	b.n	80079d6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d0:	461a      	mov	r2, r3
 80079d2:	2300      	movs	r3, #0
 80079d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e2:	461a      	mov	r2, r3
 80079e4:	2300      	movs	r3, #0
 80079e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f4:	461a      	mov	r2, r3
 80079f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80079fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	3301      	adds	r3, #1
 8007a00:	613b      	str	r3, [r7, #16]
 8007a02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a06:	461a      	mov	r2, r3
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d3b5      	bcc.n	800797a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a20:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007a2e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d105      	bne.n	8007a44 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	f043 0210 	orr.w	r2, r3, #16
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	699a      	ldr	r2, [r3, #24]
 8007a48:	4b0f      	ldr	r3, [pc, #60]	@ (8007a88 <USB_DevInit+0x2b4>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d005      	beq.n	8007a64 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	f043 0208 	orr.w	r2, r3, #8
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a64:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d105      	bne.n	8007a78 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	699a      	ldr	r2, [r3, #24]
 8007a70:	4b06      	ldr	r3, [pc, #24]	@ (8007a8c <USB_DevInit+0x2b8>)
 8007a72:	4313      	orrs	r3, r2
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a84:	b004      	add	sp, #16
 8007a86:	4770      	bx	lr
 8007a88:	803c3800 	.word	0x803c3800
 8007a8c:	40000004 	.word	0x40000004

08007a90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007aaa:	d901      	bls.n	8007ab0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e01b      	b.n	8007ae8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	daf2      	bge.n	8007a9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	019b      	lsls	r3, r3, #6
 8007ac0:	f043 0220 	orr.w	r2, r3, #32
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	3301      	adds	r3, #1
 8007acc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ad4:	d901      	bls.n	8007ada <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e006      	b.n	8007ae8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b20      	cmp	r3, #32
 8007ae4:	d0f0      	beq.n	8007ac8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3301      	adds	r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b0c:	d901      	bls.n	8007b12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e018      	b.n	8007b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	daf2      	bge.n	8007b00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2210      	movs	r2, #16
 8007b22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	3301      	adds	r3, #1
 8007b28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b30:	d901      	bls.n	8007b36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e006      	b.n	8007b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	f003 0310 	and.w	r3, r3, #16
 8007b3e:	2b10      	cmp	r3, #16
 8007b40:	d0f0      	beq.n	8007b24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	78fb      	ldrb	r3, [r7, #3]
 8007b6a:	68f9      	ldr	r1, [r7, #12]
 8007b6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b70:	4313      	orrs	r3, r2
 8007b72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b085      	sub	sp, #20
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007b9c:	f023 0303 	bic.w	r3, r3, #3
 8007ba0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bb0:	f043 0302 	orr.w	r3, r3, #2
 8007bb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	f003 0301 	and.w	r3, r3, #1
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007be8:	2300      	movs	r3, #0
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bf8:	d901      	bls.n	8007bfe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e01b      	b.n	8007c36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	daf2      	bge.n	8007bec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c06:	2300      	movs	r3, #0
 8007c08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	f043 0201 	orr.w	r2, r3, #1
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c22:	d901      	bls.n	8007c28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e006      	b.n	8007c36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d0f0      	beq.n	8007c16 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <memset>:
 8007c42:	4402      	add	r2, r0
 8007c44:	4603      	mov	r3, r0
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d100      	bne.n	8007c4c <memset+0xa>
 8007c4a:	4770      	bx	lr
 8007c4c:	f803 1b01 	strb.w	r1, [r3], #1
 8007c50:	e7f9      	b.n	8007c46 <memset+0x4>
	...

08007c54 <__libc_init_array>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	4d0d      	ldr	r5, [pc, #52]	@ (8007c8c <__libc_init_array+0x38>)
 8007c58:	4c0d      	ldr	r4, [pc, #52]	@ (8007c90 <__libc_init_array+0x3c>)
 8007c5a:	1b64      	subs	r4, r4, r5
 8007c5c:	10a4      	asrs	r4, r4, #2
 8007c5e:	2600      	movs	r6, #0
 8007c60:	42a6      	cmp	r6, r4
 8007c62:	d109      	bne.n	8007c78 <__libc_init_array+0x24>
 8007c64:	4d0b      	ldr	r5, [pc, #44]	@ (8007c94 <__libc_init_array+0x40>)
 8007c66:	4c0c      	ldr	r4, [pc, #48]	@ (8007c98 <__libc_init_array+0x44>)
 8007c68:	f000 f818 	bl	8007c9c <_init>
 8007c6c:	1b64      	subs	r4, r4, r5
 8007c6e:	10a4      	asrs	r4, r4, #2
 8007c70:	2600      	movs	r6, #0
 8007c72:	42a6      	cmp	r6, r4
 8007c74:	d105      	bne.n	8007c82 <__libc_init_array+0x2e>
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c7c:	4798      	blx	r3
 8007c7e:	3601      	adds	r6, #1
 8007c80:	e7ee      	b.n	8007c60 <__libc_init_array+0xc>
 8007c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c86:	4798      	blx	r3
 8007c88:	3601      	adds	r6, #1
 8007c8a:	e7f2      	b.n	8007c72 <__libc_init_array+0x1e>
 8007c8c:	08007cf4 	.word	0x08007cf4
 8007c90:	08007cf4 	.word	0x08007cf4
 8007c94:	08007cf4 	.word	0x08007cf4
 8007c98:	08007cf8 	.word	0x08007cf8

08007c9c <_init>:
 8007c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9e:	bf00      	nop
 8007ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ca2:	bc08      	pop	{r3}
 8007ca4:	469e      	mov	lr, r3
 8007ca6:	4770      	bx	lr

08007ca8 <_fini>:
 8007ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007caa:	bf00      	nop
 8007cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cae:	bc08      	pop	{r3}
 8007cb0:	469e      	mov	lr, r3
 8007cb2:	4770      	bx	lr
