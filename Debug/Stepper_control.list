
Stepper_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007928  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007bc0  08007bc0  00008bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007bf8  08007bf8  00008bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007c00  08007c00  00008c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007c04  08007c04  00008c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08007c08  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08007c18  00009010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08007c78  00009070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  240000d0  08007cd8  000090d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240007a4  08007cd8  000097a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000090d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9f7  00000000  00000000  000090fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db8  00000000  00000000  00025af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  000288b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001063  00000000  00000000  00029d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038de6  00000000  00000000  0002adfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8ce  00000000  00000000  00063be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016c7bc  00000000  00000000  0007f4af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ebc6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005afc  00000000  00000000  001ebcb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001f17ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007ba8 	.word	0x08007ba8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08007ba8 	.word	0x08007ba8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <accelerate_to_target_speed.0>:
  #define MIN_SPEED 16        // Viteza minimă pentru pornire/oprire

  int current_speed = MIN_SPEED; // Viteza actuală

  /* Funcție pentru accelerarea motorului până la viteza țintă */
  void accelerate_to_target_speed(int target_speed) {
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	4664      	mov	r4, ip
 80005d2:	f8c7 c000 	str.w	ip, [r7]
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005d6:	2100      	movs	r1, #0
 80005d8:	4814      	ldr	r0, [pc, #80]	@ (800062c <accelerate_to_target_speed.0+0x64>)
 80005da:	f004 fe57 	bl	800528c <HAL_TIM_PWM_Start>
      while (current_speed < target_speed) {
 80005de:	e01b      	b.n	8000618 <accelerate_to_target_speed.0+0x50>
          current_speed += ACCELERATION_STEP;
 80005e0:	6823      	ldr	r3, [r4, #0]
 80005e2:	3301      	adds	r3, #1
 80005e4:	6023      	str	r3, [r4, #0]
          if (current_speed > target_speed) {
 80005e6:	6822      	ldr	r2, [r4, #0]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	dd01      	ble.n	80005f2 <accelerate_to_target_speed.0+0x2a>
              current_speed = target_speed;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6023      	str	r3, [r4, #0]
          }

          __HAL_TIM_SET_AUTORELOAD(&htim3, (1000000 / current_speed) - 1);
 80005f2:	6823      	ldr	r3, [r4, #0]
 80005f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000630 <accelerate_to_target_speed.0+0x68>)
 80005f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80005fa:	1e5a      	subs	r2, r3, #1
 80005fc:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <accelerate_to_target_speed.0+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000602:	6823      	ldr	r3, [r4, #0]
 8000604:	4a0a      	ldr	r2, [pc, #40]	@ (8000630 <accelerate_to_target_speed.0+0x68>)
 8000606:	fb92 f3f3 	sdiv	r3, r2, r3
 800060a:	3b01      	subs	r3, #1
 800060c:	461a      	mov	r2, r3
 800060e:	4b07      	ldr	r3, [pc, #28]	@ (800062c <accelerate_to_target_speed.0+0x64>)
 8000610:	60da      	str	r2, [r3, #12]
          HAL_Delay(10); // Pauză pentru a observa modificările
 8000612:	200a      	movs	r0, #10
 8000614:	f000 fed0 	bl	80013b8 <HAL_Delay>
      while (current_speed < target_speed) {
 8000618:	6822      	ldr	r2, [r4, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	429a      	cmp	r2, r3
 800061e:	dbdf      	blt.n	80005e0 <accelerate_to_target_speed.0+0x18>

      }
  }
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bd90      	pop	{r4, r7, pc}
 800062a:	bf00      	nop
 800062c:	240001d4 	.word	0x240001d4
 8000630:	000f4240 	.word	0x000f4240

08000634 <main>:
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
int main(void)
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000640:	f000 fe28 	bl	8001294 <HAL_Init>
  SystemClock_Config();
 8000644:	f000 f860 	bl	8000708 <SystemClock_Config>
  MX_GPIO_Init();
 8000648:	f000 fa22 	bl	8000a90 <MX_GPIO_Init>
  MX_ETH_Init();
 800064c:	f000 f8dc 	bl	8000808 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000650:	f000 f9a0 	bl	8000994 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000654:	f000 f9ea 	bl	8000a2c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000658:	f000 f922 	bl	80008a0 <MX_TIM3_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800065c:	2100      	movs	r1, #0
 800065e:	480f      	ldr	r0, [pc, #60]	@ (800069c <main+0x68>)
 8000660:	f004 fe14 	bl	800528c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2120      	movs	r1, #32
 8000668:	480d      	ldr	r0, [pc, #52]	@ (80006a0 <main+0x6c>)
 800066a:	f001 fdb1 	bl	80021d0 <HAL_GPIO_WritePin>
  int current_speed = MIN_SPEED; // Viteza actuală
 800066e:	2310      	movs	r3, #16
 8000670:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  /* Exemplu de utilizare: accelerează la viteza țintă, apoi decelerează */
	          accelerate_to_target_speed(TARGET_SPEED);
 8000672:	463b      	mov	r3, r7
 8000674:	469c      	mov	ip, r3
 8000676:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 800067a:	f7ff ffa5 	bl	80005c8 <accelerate_to_target_speed.0>
	          HAL_Delay(3000); // Menține viteza țintă timp de 1 secundă
 800067e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000682:	f000 fe99 	bl	80013b8 <HAL_Delay>

	          decelerate_to_stop();
 8000686:	463b      	mov	r3, r7
 8000688:	469c      	mov	ip, r3
 800068a:	f000 f80b 	bl	80006a4 <decelerate_to_stop.1>
	          HAL_Delay(3000); // Oprește motorul timp de 1 secundă
 800068e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000692:	f000 fe91 	bl	80013b8 <HAL_Delay>
	          accelerate_to_target_speed(TARGET_SPEED);
 8000696:	bf00      	nop
 8000698:	e7eb      	b.n	8000672 <main+0x3e>
 800069a:	bf00      	nop
 800069c:	240001d4 	.word	0x240001d4
 80006a0:	58020000 	.word	0x58020000

080006a4 <decelerate_to_stop.1>:
  void decelerate_to_stop(void) {
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4664      	mov	r4, ip
 80006ac:	f8c7 c004 	str.w	ip, [r7, #4]
      while (current_speed > MIN_SPEED) {
 80006b0:	e01a      	b.n	80006e8 <decelerate_to_stop.1+0x44>
          current_speed -= DECELERATION_STEP;
 80006b2:	6823      	ldr	r3, [r4, #0]
 80006b4:	3b01      	subs	r3, #1
 80006b6:	6023      	str	r3, [r4, #0]
          if (current_speed < MIN_SPEED) {
 80006b8:	6823      	ldr	r3, [r4, #0]
 80006ba:	2b0f      	cmp	r3, #15
 80006bc:	dc01      	bgt.n	80006c2 <decelerate_to_stop.1+0x1e>
              current_speed = MIN_SPEED;
 80006be:	2310      	movs	r3, #16
 80006c0:	6023      	str	r3, [r4, #0]
          __HAL_TIM_SET_AUTORELOAD(&htim3, (1000000 / current_speed) - 1);
 80006c2:	6823      	ldr	r3, [r4, #0]
 80006c4:	4a0e      	ldr	r2, [pc, #56]	@ (8000700 <decelerate_to_stop.1+0x5c>)
 80006c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80006ca:	1e5a      	subs	r2, r3, #1
 80006cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <decelerate_to_stop.1+0x60>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006d2:	6823      	ldr	r3, [r4, #0]
 80006d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000700 <decelerate_to_stop.1+0x5c>)
 80006d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80006da:	3b01      	subs	r3, #1
 80006dc:	461a      	mov	r2, r3
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <decelerate_to_stop.1+0x60>)
 80006e0:	60da      	str	r2, [r3, #12]
          HAL_Delay(10); // Pauză pentru a observa modificările
 80006e2:	200a      	movs	r0, #10
 80006e4:	f000 fe68 	bl	80013b8 <HAL_Delay>
      while (current_speed > MIN_SPEED) {
 80006e8:	6823      	ldr	r3, [r4, #0]
 80006ea:	2b10      	cmp	r3, #16
 80006ec:	dce1      	bgt.n	80006b2 <decelerate_to_stop.1+0xe>
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80006ee:	2100      	movs	r1, #0
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <decelerate_to_stop.1+0x60>)
 80006f2:	f004 fed9 	bl	80054a8 <HAL_TIM_PWM_Stop>
  }
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd90      	pop	{r4, r7, pc}
 80006fe:	bf00      	nop
 8000700:	000f4240 	.word	0x000f4240
 8000704:	240001d4 	.word	0x240001d4

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b09c      	sub	sp, #112	@ 0x70
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000712:	224c      	movs	r2, #76	@ 0x4c
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f007 fa19 	bl	8007b4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2220      	movs	r2, #32
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f007 fa13 	bl	8007b4e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000728:	2002      	movs	r0, #2
 800072a:	f001 fe9b 	bl	8002464 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b33      	ldr	r3, [pc, #204]	@ (8000800 <SystemClock_Config+0xf8>)
 8000734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000736:	4a32      	ldr	r2, [pc, #200]	@ (8000800 <SystemClock_Config+0xf8>)
 8000738:	f023 0301 	bic.w	r3, r3, #1
 800073c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800073e:	4b30      	ldr	r3, [pc, #192]	@ (8000800 <SystemClock_Config+0xf8>)
 8000740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	4b2e      	ldr	r3, [pc, #184]	@ (8000804 <SystemClock_Config+0xfc>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000750:	4a2c      	ldr	r2, [pc, #176]	@ (8000804 <SystemClock_Config+0xfc>)
 8000752:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b2a      	ldr	r3, [pc, #168]	@ (8000804 <SystemClock_Config+0xfc>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000764:	bf00      	nop
 8000766:	4b27      	ldr	r3, [pc, #156]	@ (8000804 <SystemClock_Config+0xfc>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800076e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000772:	d1f8      	bne.n	8000766 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000774:	2303      	movs	r3, #3
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000778:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800077e:	2301      	movs	r3, #1
 8000780:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000782:	2340      	movs	r3, #64	@ 0x40
 8000784:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078a:	2302      	movs	r3, #2
 800078c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000792:	2318      	movs	r3, #24
 8000794:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000796:	2302      	movs	r3, #2
 8000798:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800079a:	2304      	movs	r3, #4
 800079c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079e:	2302      	movs	r3, #2
 80007a0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007a2:	230c      	movs	r3, #12
 80007a4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 fea0 	bl	80024f8 <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007be:	f000 fa57 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	233f      	movs	r3, #63	@ 0x3f
 80007c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007d6:	2340      	movs	r3, #64	@ 0x40
 80007d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2101      	movs	r1, #1
 80007e6:	4618      	mov	r0, r3
 80007e8:	f002 fae0 	bl	8002dac <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80007f2:	f000 fa3d 	bl	8000c70 <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3770      	adds	r7, #112	@ 0x70
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	58000400 	.word	0x58000400
 8000804:	58024800 	.word	0x58024800

08000808 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800080c:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_ETH_Init+0x80>)
 800080e:	4a1f      	ldr	r2, [pc, #124]	@ (800088c <MX_ETH_Init+0x84>)
 8000810:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000812:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <MX_ETH_Init+0x88>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000818:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <MX_ETH_Init+0x88>)
 800081a:	2280      	movs	r2, #128	@ 0x80
 800081c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800081e:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <MX_ETH_Init+0x88>)
 8000820:	22e1      	movs	r2, #225	@ 0xe1
 8000822:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000824:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_ETH_Init+0x88>)
 8000826:	2200      	movs	r2, #0
 8000828:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800082a:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <MX_ETH_Init+0x88>)
 800082c:	2200      	movs	r2, #0
 800082e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000830:	4b17      	ldr	r3, [pc, #92]	@ (8000890 <MX_ETH_Init+0x88>)
 8000832:	2200      	movs	r2, #0
 8000834:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_ETH_Init+0x80>)
 8000838:	4a15      	ldr	r2, [pc, #84]	@ (8000890 <MX_ETH_Init+0x88>)
 800083a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_ETH_Init+0x80>)
 800083e:	2201      	movs	r2, #1
 8000840:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_ETH_Init+0x80>)
 8000844:	4a13      	ldr	r2, [pc, #76]	@ (8000894 <MX_ETH_Init+0x8c>)
 8000846:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_ETH_Init+0x80>)
 800084a:	4a13      	ldr	r2, [pc, #76]	@ (8000898 <MX_ETH_Init+0x90>)
 800084c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <MX_ETH_Init+0x80>)
 8000850:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000854:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000856:	480c      	ldr	r0, [pc, #48]	@ (8000888 <MX_ETH_Init+0x80>)
 8000858:	f000 fed6 	bl	8001608 <HAL_ETH_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000862:	f000 fa05 	bl	8000c70 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000866:	2238      	movs	r2, #56	@ 0x38
 8000868:	2100      	movs	r1, #0
 800086a:	480c      	ldr	r0, [pc, #48]	@ (800089c <MX_ETH_Init+0x94>)
 800086c:	f007 f96f 	bl	8007b4e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000870:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <MX_ETH_Init+0x94>)
 8000872:	2221      	movs	r2, #33	@ 0x21
 8000874:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_ETH_Init+0x94>)
 8000878:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800087c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800087e:	4b07      	ldr	r3, [pc, #28]	@ (800089c <MX_ETH_Init+0x94>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	24000124 	.word	0x24000124
 800088c:	40028000 	.word	0x40028000
 8000890:	24000798 	.word	0x24000798
 8000894:	24000070 	.word	0x24000070
 8000898:	24000010 	.word	0x24000010
 800089c:	240000ec 	.word	0x240000ec

080008a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08e      	sub	sp, #56	@ 0x38
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c0:	463b      	mov	r3, r7
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
 80008ce:	615a      	str	r2, [r3, #20]
 80008d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d2:	4b2e      	ldr	r3, [pc, #184]	@ (800098c <MX_TIM3_Init+0xec>)
 80008d4:	4a2e      	ldr	r2, [pc, #184]	@ (8000990 <MX_TIM3_Init+0xf0>)
 80008d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80008d8:	4b2c      	ldr	r3, [pc, #176]	@ (800098c <MX_TIM3_Init+0xec>)
 80008da:	223f      	movs	r2, #63	@ 0x3f
 80008dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b2b      	ldr	r3, [pc, #172]	@ (800098c <MX_TIM3_Init+0xec>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80008e4:	4b29      	ldr	r3, [pc, #164]	@ (800098c <MX_TIM3_Init+0xec>)
 80008e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ec:	4b27      	ldr	r3, [pc, #156]	@ (800098c <MX_TIM3_Init+0xec>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008f2:	4b26      	ldr	r3, [pc, #152]	@ (800098c <MX_TIM3_Init+0xec>)
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008f8:	4824      	ldr	r0, [pc, #144]	@ (800098c <MX_TIM3_Init+0xec>)
 80008fa:	f004 fc0f 	bl	800511c <HAL_TIM_Base_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000904:	f000 f9b4 	bl	8000c70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800090e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000912:	4619      	mov	r1, r3
 8000914:	481d      	ldr	r0, [pc, #116]	@ (800098c <MX_TIM3_Init+0xec>)
 8000916:	f004 ff71 	bl	80057fc <HAL_TIM_ConfigClockSource>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000920:	f000 f9a6 	bl	8000c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000924:	4819      	ldr	r0, [pc, #100]	@ (800098c <MX_TIM3_Init+0xec>)
 8000926:	f004 fc50 	bl	80051ca <HAL_TIM_PWM_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000930:	f000 f99e 	bl	8000c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4812      	ldr	r0, [pc, #72]	@ (800098c <MX_TIM3_Init+0xec>)
 8000944:	f005 fc92 	bl	800626c <HAL_TIMEx_MasterConfigSynchronization>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800094e:	f000 f98f 	bl	8000c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000952:	2360      	movs	r3, #96	@ 0x60
 8000954:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = htim3.Init.Period / 2;
 8000956:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <MX_TIM3_Init+0xec>)
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	085b      	lsrs	r3, r3, #1
 800095c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000966:	463b      	mov	r3, r7
 8000968:	2200      	movs	r2, #0
 800096a:	4619      	mov	r1, r3
 800096c:	4807      	ldr	r0, [pc, #28]	@ (800098c <MX_TIM3_Init+0xec>)
 800096e:	f004 fe31 	bl	80055d4 <HAL_TIM_PWM_ConfigChannel>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8000978:	f000 f97a 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800097c:	4803      	ldr	r0, [pc, #12]	@ (800098c <MX_TIM3_Init+0xec>)
 800097e:	f000 fa87 	bl	8000e90 <HAL_TIM_MspPostInit>


}
 8000982:	bf00      	nop
 8000984:	3738      	adds	r7, #56	@ 0x38
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	240001d4 	.word	0x240001d4
 8000990:	40000400 	.word	0x40000400

08000994 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000998:	4b22      	ldr	r3, [pc, #136]	@ (8000a24 <MX_USART3_UART_Init+0x90>)
 800099a:	4a23      	ldr	r2, [pc, #140]	@ (8000a28 <MX_USART3_UART_Init+0x94>)
 800099c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800099e:	4b21      	ldr	r3, [pc, #132]	@ (8000a24 <MX_USART3_UART_Init+0x90>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a24 <MX_USART3_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000a24 <MX_USART3_UART_Init+0x90>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <MX_USART3_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <MX_USART3_UART_Init+0x90>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <MX_USART3_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <MX_USART3_UART_Init+0x90>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ca:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <MX_USART3_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d0:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <MX_USART3_UART_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <MX_USART3_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009dc:	4811      	ldr	r0, [pc, #68]	@ (8000a24 <MX_USART3_UART_Init+0x90>)
 80009de:	f005 fcd3 	bl	8006388 <HAL_UART_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009e8:	f000 f942 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ec:	2100      	movs	r1, #0
 80009ee:	480d      	ldr	r0, [pc, #52]	@ (8000a24 <MX_USART3_UART_Init+0x90>)
 80009f0:	f006 fcdb 	bl	80073aa <HAL_UARTEx_SetTxFifoThreshold>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009fa:	f000 f939 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fe:	2100      	movs	r1, #0
 8000a00:	4808      	ldr	r0, [pc, #32]	@ (8000a24 <MX_USART3_UART_Init+0x90>)
 8000a02:	f006 fd10 	bl	8007426 <HAL_UARTEx_SetRxFifoThreshold>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a0c:	f000 f930 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	@ (8000a24 <MX_USART3_UART_Init+0x90>)
 8000a12:	f006 fc91 	bl	8007338 <HAL_UARTEx_DisableFifoMode>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a1c:	f000 f928 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	24000220 	.word	0x24000220
 8000a28:	40004800 	.word	0x40004800

08000a2c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a32:	4a16      	ldr	r2, [pc, #88]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a34:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3e:	2202      	movs	r2, #2
 8000a40:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a74:	f001 fbc5 	bl	8002202 <HAL_PCD_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a7e:	f000 f8f7 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	240002b4 	.word	0x240002b4
 8000a8c:	40080000 	.word	0x40080000

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	@ 0x30
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	4b6b      	ldr	r3, [pc, #428]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aac:	4a69      	ldr	r2, [pc, #420]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab6:	4b67      	ldr	r3, [pc, #412]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac4:	4b63      	ldr	r3, [pc, #396]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aca:	4a62      	ldr	r2, [pc, #392]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad4:	4b5f      	ldr	r3, [pc, #380]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b5c      	ldr	r3, [pc, #368]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae8:	4a5a      	ldr	r2, [pc, #360]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af2:	4b58      	ldr	r3, [pc, #352]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b00:	4b54      	ldr	r3, [pc, #336]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b06:	4a53      	ldr	r2, [pc, #332]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b10:	4b50      	ldr	r3, [pc, #320]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1e:	4b4d      	ldr	r3, [pc, #308]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b24:	4a4b      	ldr	r2, [pc, #300]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000b26:	f043 0308 	orr.w	r3, r3, #8
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2e:	4b49      	ldr	r3, [pc, #292]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b34:	f003 0308 	and.w	r3, r3, #8
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b3c:	4b45      	ldr	r3, [pc, #276]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b42:	4a44      	ldr	r2, [pc, #272]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000b44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b4c:	4b41      	ldr	r3, [pc, #260]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b60:	4a3c      	ldr	r2, [pc, #240]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b6a:	4b3a      	ldr	r3, [pc, #232]	@ (8000c54 <MX_GPIO_Init+0x1c4>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	4836      	ldr	r0, [pc, #216]	@ (8000c58 <MX_GPIO_Init+0x1c8>)
 8000b7e:	f001 fb27 	bl	80021d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b88:	4834      	ldr	r0, [pc, #208]	@ (8000c5c <MX_GPIO_Init+0x1cc>)
 8000b8a:	f001 fb21 	bl	80021d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b94:	4832      	ldr	r0, [pc, #200]	@ (8000c60 <MX_GPIO_Init+0x1d0>)
 8000b96:	f001 fb1b 	bl	80021d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	4831      	ldr	r0, [pc, #196]	@ (8000c64 <MX_GPIO_Init+0x1d4>)
 8000ba0:	f001 fb16 	bl	80021d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	482b      	ldr	r0, [pc, #172]	@ (8000c68 <MX_GPIO_Init+0x1d8>)
 8000bba:	f001 f959 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bbe:	2320      	movs	r3, #32
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4820      	ldr	r0, [pc, #128]	@ (8000c58 <MX_GPIO_Init+0x1c8>)
 8000bd6:	f001 f94b 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bda:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	481a      	ldr	r0, [pc, #104]	@ (8000c5c <MX_GPIO_Init+0x1cc>)
 8000bf4:	f001 f93c 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000bf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4813      	ldr	r0, [pc, #76]	@ (8000c60 <MX_GPIO_Init+0x1d0>)
 8000c12:	f001 f92d 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c16:	2380      	movs	r3, #128	@ 0x80
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4810      	ldr	r0, [pc, #64]	@ (8000c6c <MX_GPIO_Init+0x1dc>)
 8000c2c:	f001 f920 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4807      	ldr	r0, [pc, #28]	@ (8000c64 <MX_GPIO_Init+0x1d4>)
 8000c48:	f001 f912 	bl	8001e70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4c:	bf00      	nop
 8000c4e:	3730      	adds	r7, #48	@ 0x30
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	58024400 	.word	0x58024400
 8000c58:	58020000 	.word	0x58020000
 8000c5c:	58020400 	.word	0x58020400
 8000c60:	58020c00 	.word	0x58020c00
 8000c64:	58021000 	.word	0x58021000
 8000c68:	58020800 	.word	0x58020800
 8000c6c:	58021800 	.word	0x58021800

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <Error_Handler+0x8>

08000c7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <HAL_MspInit+0x30>)
 8000c84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c88:	4a08      	ldr	r2, [pc, #32]	@ (8000cac <HAL_MspInit+0x30>)
 8000c8a:	f043 0302 	orr.w	r3, r3, #2
 8000c8e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_MspInit+0x30>)
 8000c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	58024400 	.word	0x58024400

08000cb0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08e      	sub	sp, #56	@ 0x38
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a59      	ldr	r2, [pc, #356]	@ (8000e34 <HAL_ETH_MspInit+0x184>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	f040 80ab 	bne.w	8000e2a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000cd4:	4b58      	ldr	r3, [pc, #352]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000cd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cda:	4a57      	ldr	r2, [pc, #348]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000cdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ce0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ce4:	4b54      	ldr	r3, [pc, #336]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000ce6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cee:	623b      	str	r3, [r7, #32]
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000cf2:	4b51      	ldr	r3, [pc, #324]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000cf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cf8:	4a4f      	ldr	r2, [pc, #316]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000cfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cfe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d02:	4b4d      	ldr	r3, [pc, #308]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000d04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d0c:	61fb      	str	r3, [r7, #28]
 8000d0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d10:	4b49      	ldr	r3, [pc, #292]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000d12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d16:	4a48      	ldr	r2, [pc, #288]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d1c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d20:	4b45      	ldr	r3, [pc, #276]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000d22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d2a:	61bb      	str	r3, [r7, #24]
 8000d2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2e:	4b42      	ldr	r3, [pc, #264]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d34:	4a40      	ldr	r2, [pc, #256]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b3a      	ldr	r3, [pc, #232]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d52:	4a39      	ldr	r2, [pc, #228]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d5c:	4b36      	ldr	r3, [pc, #216]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	4b33      	ldr	r3, [pc, #204]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d70:	4a31      	ldr	r2, [pc, #196]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000d72:	f043 0302 	orr.w	r3, r3, #2
 8000d76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d88:	4b2b      	ldr	r3, [pc, #172]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000d90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d98:	4b27      	ldr	r3, [pc, #156]	@ (8000e38 <HAL_ETH_MspInit+0x188>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000da6:	2332      	movs	r3, #50	@ 0x32
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db6:	230b      	movs	r3, #11
 8000db8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	481e      	ldr	r0, [pc, #120]	@ (8000e3c <HAL_ETH_MspInit+0x18c>)
 8000dc2:	f001 f855 	bl	8001e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000dc6:	2386      	movs	r3, #134	@ 0x86
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd6:	230b      	movs	r3, #11
 8000dd8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	4817      	ldr	r0, [pc, #92]	@ (8000e40 <HAL_ETH_MspInit+0x190>)
 8000de2:	f001 f845 	bl	8001e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000de6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df8:	230b      	movs	r3, #11
 8000dfa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	4810      	ldr	r0, [pc, #64]	@ (8000e44 <HAL_ETH_MspInit+0x194>)
 8000e04:	f001 f834 	bl	8001e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e08:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e1a:	230b      	movs	r3, #11
 8000e1c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	4808      	ldr	r0, [pc, #32]	@ (8000e48 <HAL_ETH_MspInit+0x198>)
 8000e26:	f001 f823 	bl	8001e70 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3738      	adds	r7, #56	@ 0x38
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40028000 	.word	0x40028000
 8000e38:	58024400 	.word	0x58024400
 8000e3c:	58020800 	.word	0x58020800
 8000e40:	58020000 	.word	0x58020000
 8000e44:	58020400 	.word	0x58020400
 8000e48:	58021800 	.word	0x58021800

08000e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0b      	ldr	r2, [pc, #44]	@ (8000e88 <HAL_TIM_Base_MspInit+0x3c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d10e      	bne.n	8000e7c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <HAL_TIM_Base_MspInit+0x40>)
 8000e60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e64:	4a09      	ldr	r2, [pc, #36]	@ (8000e8c <HAL_TIM_Base_MspInit+0x40>)
 8000e66:	f043 0302 	orr.w	r3, r3, #2
 8000e6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e6e:	4b07      	ldr	r3, [pc, #28]	@ (8000e8c <HAL_TIM_Base_MspInit+0x40>)
 8000e70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	40000400 	.word	0x40000400
 8000e8c:	58024400 	.word	0x58024400

08000e90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a12      	ldr	r2, [pc, #72]	@ (8000ef8 <HAL_TIM_MspPostInit+0x68>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d11e      	bne.n	8000ef0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <HAL_TIM_MspPostInit+0x6c>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb8:	4a10      	ldr	r2, [pc, #64]	@ (8000efc <HAL_TIM_MspPostInit+0x6c>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_TIM_MspPostInit+0x6c>)
 8000ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ed0:	2340      	movs	r3, #64	@ 0x40
 8000ed2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <HAL_TIM_MspPostInit+0x70>)
 8000eec:	f000 ffc0 	bl	8001e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40000400 	.word	0x40000400
 8000efc:	58024400 	.word	0x58024400
 8000f00:	58020000 	.word	0x58020000

08000f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0ba      	sub	sp, #232	@ 0xe8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	22c0      	movs	r2, #192	@ 0xc0
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f006 fe12 	bl	8007b4e <memset>
  if(huart->Instance==USART3)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a27      	ldr	r2, [pc, #156]	@ (8000fcc <HAL_UART_MspInit+0xc8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d146      	bne.n	8000fc2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f34:	f04f 0202 	mov.w	r2, #2
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 faba 	bl	80034c4 <HAL_RCCEx_PeriphCLKConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f56:	f7ff fe8b 	bl	8000c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd0 <HAL_UART_MspInit+0xcc>)
 8000f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f60:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd0 <HAL_UART_MspInit+0xcc>)
 8000f62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <HAL_UART_MspInit+0xcc>)
 8000f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f78:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <HAL_UART_MspInit+0xcc>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7e:	4a14      	ldr	r2, [pc, #80]	@ (8000fd0 <HAL_UART_MspInit+0xcc>)
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f88:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <HAL_UART_MspInit+0xcc>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fb0:	2307      	movs	r3, #7
 8000fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <HAL_UART_MspInit+0xd0>)
 8000fbe:	f000 ff57 	bl	8001e70 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000fc2:	bf00      	nop
 8000fc4:	37e8      	adds	r7, #232	@ 0xe8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40004800 	.word	0x40004800
 8000fd0:	58024400 	.word	0x58024400
 8000fd4:	58020c00 	.word	0x58020c00

08000fd8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0ba      	sub	sp, #232	@ 0xe8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	22c0      	movs	r2, #192	@ 0xc0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f006 fda8 	bl	8007b4e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a30      	ldr	r2, [pc, #192]	@ (80010c4 <HAL_PCD_MspInit+0xec>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d159      	bne.n	80010bc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001008:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001014:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001018:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4618      	mov	r0, r3
 8001022:	f002 fa4f 	bl	80034c4 <HAL_RCCEx_PeriphCLKConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800102c:	f7ff fe20 	bl	8000c70 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001030:	f001 fa52 	bl	80024d8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b24      	ldr	r3, [pc, #144]	@ (80010c8 <HAL_PCD_MspInit+0xf0>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103a:	4a23      	ldr	r2, [pc, #140]	@ (80010c8 <HAL_PCD_MspInit+0xf0>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001044:	4b20      	ldr	r3, [pc, #128]	@ (80010c8 <HAL_PCD_MspInit+0xf0>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001052:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001056:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800106c:	230a      	movs	r3, #10
 800106e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001076:	4619      	mov	r1, r3
 8001078:	4814      	ldr	r0, [pc, #80]	@ (80010cc <HAL_PCD_MspInit+0xf4>)
 800107a:	f000 fef9 	bl	8001e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800107e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001082:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001086:	2300      	movs	r3, #0
 8001088:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001096:	4619      	mov	r1, r3
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <HAL_PCD_MspInit+0xf4>)
 800109a:	f000 fee9 	bl	8001e70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <HAL_PCD_MspInit+0xf0>)
 80010a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010a4:	4a08      	ldr	r2, [pc, #32]	@ (80010c8 <HAL_PCD_MspInit+0xf0>)
 80010a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80010aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010ae:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <HAL_PCD_MspInit+0xf0>)
 80010b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80010bc:	bf00      	nop
 80010be:	37e8      	adds	r7, #232	@ 0xe8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40080000 	.word	0x40080000
 80010c8:	58024400 	.word	0x58024400
 80010cc:	58020000 	.word	0x58020000

080010d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <NMI_Handler+0x4>

080010d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <HardFault_Handler+0x4>

080010e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <MemManage_Handler+0x4>

080010e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001126:	f000 f927 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001134:	4b37      	ldr	r3, [pc, #220]	@ (8001214 <SystemInit+0xe4>)
 8001136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800113a:	4a36      	ldr	r2, [pc, #216]	@ (8001214 <SystemInit+0xe4>)
 800113c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001140:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001144:	4b34      	ldr	r3, [pc, #208]	@ (8001218 <SystemInit+0xe8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 030f 	and.w	r3, r3, #15
 800114c:	2b06      	cmp	r3, #6
 800114e:	d807      	bhi.n	8001160 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001150:	4b31      	ldr	r3, [pc, #196]	@ (8001218 <SystemInit+0xe8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f023 030f 	bic.w	r3, r3, #15
 8001158:	4a2f      	ldr	r2, [pc, #188]	@ (8001218 <SystemInit+0xe8>)
 800115a:	f043 0307 	orr.w	r3, r3, #7
 800115e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001160:	4b2e      	ldr	r3, [pc, #184]	@ (800121c <SystemInit+0xec>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a2d      	ldr	r2, [pc, #180]	@ (800121c <SystemInit+0xec>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800116c:	4b2b      	ldr	r3, [pc, #172]	@ (800121c <SystemInit+0xec>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001172:	4b2a      	ldr	r3, [pc, #168]	@ (800121c <SystemInit+0xec>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4929      	ldr	r1, [pc, #164]	@ (800121c <SystemInit+0xec>)
 8001178:	4b29      	ldr	r3, [pc, #164]	@ (8001220 <SystemInit+0xf0>)
 800117a:	4013      	ands	r3, r2
 800117c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800117e:	4b26      	ldr	r3, [pc, #152]	@ (8001218 <SystemInit+0xe8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	2b00      	cmp	r3, #0
 8001188:	d007      	beq.n	800119a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800118a:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <SystemInit+0xe8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 030f 	bic.w	r3, r3, #15
 8001192:	4a21      	ldr	r2, [pc, #132]	@ (8001218 <SystemInit+0xe8>)
 8001194:	f043 0307 	orr.w	r3, r3, #7
 8001198:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800119a:	4b20      	ldr	r3, [pc, #128]	@ (800121c <SystemInit+0xec>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011a0:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <SystemInit+0xec>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011a6:	4b1d      	ldr	r3, [pc, #116]	@ (800121c <SystemInit+0xec>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <SystemInit+0xec>)
 80011ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001224 <SystemInit+0xf4>)
 80011b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <SystemInit+0xec>)
 80011b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001228 <SystemInit+0xf8>)
 80011b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <SystemInit+0xec>)
 80011ba:	4a1c      	ldr	r2, [pc, #112]	@ (800122c <SystemInit+0xfc>)
 80011bc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <SystemInit+0xec>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011c4:	4b15      	ldr	r3, [pc, #84]	@ (800121c <SystemInit+0xec>)
 80011c6:	4a19      	ldr	r2, [pc, #100]	@ (800122c <SystemInit+0xfc>)
 80011c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <SystemInit+0xec>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <SystemInit+0xec>)
 80011d2:	4a16      	ldr	r2, [pc, #88]	@ (800122c <SystemInit+0xfc>)
 80011d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <SystemInit+0xec>)
 80011d8:	2200      	movs	r2, #0
 80011da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <SystemInit+0xec>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0e      	ldr	r2, [pc, #56]	@ (800121c <SystemInit+0xec>)
 80011e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <SystemInit+0xec>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011ee:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <SystemInit+0x100>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <SystemInit+0x104>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011fa:	d202      	bcs.n	8001202 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <SystemInit+0x108>)
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <SystemInit+0x10c>)
 8001204:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001208:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00
 8001218:	52002000 	.word	0x52002000
 800121c:	58024400 	.word	0x58024400
 8001220:	eaf6ed7f 	.word	0xeaf6ed7f
 8001224:	02020200 	.word	0x02020200
 8001228:	01ff0000 	.word	0x01ff0000
 800122c:	01010280 	.word	0x01010280
 8001230:	5c001000 	.word	0x5c001000
 8001234:	ffff0000 	.word	0xffff0000
 8001238:	51008108 	.word	0x51008108
 800123c:	52004000 	.word	0x52004000

08001240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001240:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001278 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001244:	f7ff ff74 	bl	8001130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001248:	480c      	ldr	r0, [pc, #48]	@ (800127c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800124a:	490d      	ldr	r1, [pc, #52]	@ (8001280 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800124c:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001260:	4c0a      	ldr	r4, [pc, #40]	@ (800128c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126e:	f006 fc77 	bl	8007b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001272:	f7ff f9df 	bl	8000634 <main>
  bx  lr
 8001276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001278:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800127c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001280:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001284:	08007c08 	.word	0x08007c08
  ldr r2, =_sbss
 8001288:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 800128c:	240007a4 	.word	0x240007a4

08001290 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001290:	e7fe      	b.n	8001290 <ADC3_IRQHandler>
	...

08001294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129a:	2003      	movs	r0, #3
 800129c:	f000 f982 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012a0:	f001 ff3a 	bl	8003118 <HAL_RCC_GetSysClockFreq>
 80012a4:	4602      	mov	r2, r0
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <HAL_Init+0x68>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	0a1b      	lsrs	r3, r3, #8
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	4913      	ldr	r1, [pc, #76]	@ (8001300 <HAL_Init+0x6c>)
 80012b2:	5ccb      	ldrb	r3, [r1, r3]
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	fa22 f303 	lsr.w	r3, r2, r3
 80012bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012be:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <HAL_Init+0x68>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001300 <HAL_Init+0x6c>)
 80012c8:	5cd3      	ldrb	r3, [r2, r3]
 80012ca:	f003 031f 	and.w	r3, r3, #31
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	fa22 f303 	lsr.w	r3, r2, r3
 80012d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <HAL_Init+0x70>)
 80012d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001308 <HAL_Init+0x74>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 f814 	bl	800130c <HAL_InitTick>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e002      	b.n	80012f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012ee:	f7ff fcc5 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	58024400 	.word	0x58024400
 8001300:	08007bc0 	.word	0x08007bc0
 8001304:	24000004 	.word	0x24000004
 8001308:	24000000 	.word	0x24000000

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <HAL_InitTick+0x60>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e021      	b.n	8001364 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001320:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <HAL_InitTick+0x64>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <HAL_InitTick+0x60>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f959 	bl	80015ee <HAL_SYSTICK_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00e      	b.n	8001364 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d80a      	bhi.n	8001362 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f000 f931 	bl	80015ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001358:	4a06      	ldr	r2, [pc, #24]	@ (8001374 <HAL_InitTick+0x68>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2400000c 	.word	0x2400000c
 8001370:	24000000 	.word	0x24000000
 8001374:	24000008 	.word	0x24000008

08001378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_IncTick+0x20>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <HAL_IncTick+0x24>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a04      	ldr	r2, [pc, #16]	@ (800139c <HAL_IncTick+0x24>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	2400000c 	.word	0x2400000c
 800139c:	240007a0 	.word	0x240007a0

080013a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b03      	ldr	r3, [pc, #12]	@ (80013b4 <HAL_GetTick+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	240007a0 	.word	0x240007a0

080013b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff ffee 	bl	80013a0 <HAL_GetTick>
 80013c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d0:	d005      	beq.n	80013de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d2:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <HAL_Delay+0x44>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013de:	bf00      	nop
 80013e0:	f7ff ffde 	bl	80013a0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d8f7      	bhi.n	80013e0 <HAL_Delay+0x28>
  {
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2400000c 	.word	0x2400000c

08001400 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001404:	4b03      	ldr	r3, [pc, #12]	@ (8001414 <HAL_GetREVID+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0c1b      	lsrs	r3, r3, #16
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	5c001000 	.word	0x5c001000

08001418 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001428:	4904      	ldr	r1, [pc, #16]	@ (800143c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	58000400 	.word	0x58000400

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <__NVIC_SetPriorityGrouping+0x40>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 800146a:	4313      	orrs	r3, r2
 800146c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146e:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <__NVIC_SetPriorityGrouping+0x40>)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	60d3      	str	r3, [r2, #12]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00
 8001484:	05fa0000 	.word	0x05fa0000

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	@ (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	@ (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	@ 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	@ 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	@ (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f7ff ff8e 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff47 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015c8:	f7ff ff5e 	bl	8001488 <__NVIC_GetPriorityGrouping>
 80015cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	f7ff ff90 	bl	80014f8 <NVIC_EncodePriority>
 80015d8:	4602      	mov	r2, r0
 80015da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff5f 	bl	80014a4 <__NVIC_SetPriority>
}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ffb2 	bl	8001560 <SysTick_Config>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e0e3      	b.n	80017e2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001620:	2b00      	cmp	r3, #0
 8001622:	d106      	bne.n	8001632 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2223      	movs	r2, #35	@ 0x23
 8001628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff fb3f 	bl	8000cb0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	4b6e      	ldr	r3, [pc, #440]	@ (80017ec <HAL_ETH_Init+0x1e4>)
 8001634:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001638:	4a6c      	ldr	r2, [pc, #432]	@ (80017ec <HAL_ETH_Init+0x1e4>)
 800163a:	f043 0302 	orr.w	r3, r3, #2
 800163e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001642:	4b6a      	ldr	r3, [pc, #424]	@ (80017ec <HAL_ETH_Init+0x1e4>)
 8001644:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7a1b      	ldrb	r3, [r3, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d103      	bne.n	8001660 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001658:	2000      	movs	r0, #0
 800165a:	f7ff fedd 	bl	8001418 <HAL_SYSCFG_ETHInterfaceSelect>
 800165e:	e003      	b.n	8001668 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001660:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001664:	f7ff fed8 	bl	8001418 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001668:	4b61      	ldr	r3, [pc, #388]	@ (80017f0 <HAL_ETH_Init+0x1e8>)
 800166a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001682:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001684:	f7ff fe8c 	bl	80013a0 <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800168a:	e011      	b.n	80016b0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800168c:	f7ff fe88 	bl	80013a0 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800169a:	d909      	bls.n	80016b0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2204      	movs	r2, #4
 80016a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	22e0      	movs	r2, #224	@ 0xe0
 80016a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e098      	b.n	80017e2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1e4      	bne.n	800168c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f89e 	bl	8001804 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80016c8:	f001 fea0 	bl	800340c <HAL_RCC_GetHCLKFreq>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4a49      	ldr	r2, [pc, #292]	@ (80017f4 <HAL_ETH_Init+0x1ec>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	0c9a      	lsrs	r2, r3, #18
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3a01      	subs	r2, #1
 80016dc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 fa81 	bl	8001be8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80016f2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001702:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d009      	beq.n	8001726 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	22e0      	movs	r2, #224	@ 0xe0
 800171e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e05d      	b.n	80017e2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800172e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001732:	4b31      	ldr	r3, [pc, #196]	@ (80017f8 <HAL_ETH_Init+0x1f0>)
 8001734:	4013      	ands	r3, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6952      	ldr	r2, [r2, #20]
 800173a:	0051      	lsls	r1, r2, #1
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	430b      	orrs	r3, r1
 8001742:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001746:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 fae9 	bl	8001d22 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fb2f 	bl	8001db4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	3305      	adds	r3, #5
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	021a      	lsls	r2, r3, #8
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	3304      	adds	r3, #4
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	4619      	mov	r1, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	3303      	adds	r3, #3
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	061a      	lsls	r2, r3, #24
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	3302      	adds	r3, #2
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	041b      	lsls	r3, r3, #16
 8001788:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	3301      	adds	r3, #1
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001794:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017a2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017a4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <HAL_ETH_Init+0x1f4>)
 80017b6:	430b      	orrs	r3, r1
 80017b8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <HAL_ETH_Init+0x1f8>)
 80017ca:	430b      	orrs	r3, r1
 80017cc:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2210      	movs	r2, #16
 80017dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	58024400 	.word	0x58024400
 80017f0:	58000400 	.word	0x58000400
 80017f4:	431bde83 	.word	0x431bde83
 80017f8:	ffff8001 	.word	0xffff8001
 80017fc:	0c020060 	.word	0x0c020060
 8001800:	0c20c000 	.word	0x0c20c000

08001804 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001814:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800181c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800181e:	f001 fdf5 	bl	800340c <HAL_RCC_GetHCLKFreq>
 8001822:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4a1a      	ldr	r2, [pc, #104]	@ (8001890 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d804      	bhi.n	8001836 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	e022      	b.n	800187c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	4a16      	ldr	r2, [pc, #88]	@ (8001894 <HAL_ETH_SetMDIOClockRange+0x90>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d204      	bcs.n	8001848 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	e019      	b.n	800187c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4a13      	ldr	r2, [pc, #76]	@ (8001898 <HAL_ETH_SetMDIOClockRange+0x94>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d915      	bls.n	800187c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4a12      	ldr	r2, [pc, #72]	@ (800189c <HAL_ETH_SetMDIOClockRange+0x98>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d804      	bhi.n	8001862 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	e00c      	b.n	800187c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	4a0e      	ldr	r2, [pc, #56]	@ (80018a0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d804      	bhi.n	8001874 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	e003      	b.n	800187c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800187a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	02160ebf 	.word	0x02160ebf
 8001894:	03938700 	.word	0x03938700
 8001898:	05f5e0ff 	.word	0x05f5e0ff
 800189c:	08f0d17f 	.word	0x08f0d17f
 80018a0:	0ee6b27f 	.word	0x0ee6b27f

080018a4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80018b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	791b      	ldrb	r3, [r3, #4]
 80018bc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80018be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	7b1b      	ldrb	r3, [r3, #12]
 80018c4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80018c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	7b5b      	ldrb	r3, [r3, #13]
 80018cc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80018ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	7b9b      	ldrb	r3, [r3, #14]
 80018d4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80018d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	7bdb      	ldrb	r3, [r3, #15]
 80018dc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80018de:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	7c12      	ldrb	r2, [r2, #16]
 80018e4:	2a00      	cmp	r2, #0
 80018e6:	d102      	bne.n	80018ee <ETH_SetMACConfig+0x4a>
 80018e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80018ec:	e000      	b.n	80018f0 <ETH_SetMACConfig+0x4c>
 80018ee:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80018f0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	7c52      	ldrb	r2, [r2, #17]
 80018f6:	2a00      	cmp	r2, #0
 80018f8:	d102      	bne.n	8001900 <ETH_SetMACConfig+0x5c>
 80018fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018fe:	e000      	b.n	8001902 <ETH_SetMACConfig+0x5e>
 8001900:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001902:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	7c9b      	ldrb	r3, [r3, #18]
 8001908:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800190a:	431a      	orrs	r2, r3
               macconf->Speed |
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001910:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001916:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	7f1b      	ldrb	r3, [r3, #28]
 800191c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800191e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	7f5b      	ldrb	r3, [r3, #29]
 8001924:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001926:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	7f92      	ldrb	r2, [r2, #30]
 800192c:	2a00      	cmp	r2, #0
 800192e:	d102      	bne.n	8001936 <ETH_SetMACConfig+0x92>
 8001930:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001934:	e000      	b.n	8001938 <ETH_SetMACConfig+0x94>
 8001936:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001938:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	7fdb      	ldrb	r3, [r3, #31]
 800193e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001940:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001948:	2a00      	cmp	r2, #0
 800194a:	d102      	bne.n	8001952 <ETH_SetMACConfig+0xae>
 800194c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001950:	e000      	b.n	8001954 <ETH_SetMACConfig+0xb0>
 8001952:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001954:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800195a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001962:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001964:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b56      	ldr	r3, [pc, #344]	@ (8001ad0 <ETH_SetMACConfig+0x22c>)
 8001976:	4013      	ands	r3, r2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	68f9      	ldr	r1, [r7, #12]
 800197e:	430b      	orrs	r3, r1
 8001980:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001986:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800198e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001990:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001998:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800199a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80019a2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80019a4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80019ac:	2a00      	cmp	r2, #0
 80019ae:	d102      	bne.n	80019b6 <ETH_SetMACConfig+0x112>
 80019b0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019b4:	e000      	b.n	80019b8 <ETH_SetMACConfig+0x114>
 80019b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80019b8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019be:	4313      	orrs	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	4b42      	ldr	r3, [pc, #264]	@ (8001ad4 <ETH_SetMACConfig+0x230>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	68f9      	ldr	r1, [r7, #12]
 80019d2:	430b      	orrs	r3, r1
 80019d4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019dc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80019e2:	4313      	orrs	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad8 <ETH_SetMACConfig+0x234>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	68f9      	ldr	r1, [r7, #12]
 80019f6:	430b      	orrs	r3, r1
 80019f8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a00:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a06:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001a0e:	2a00      	cmp	r2, #0
 8001a10:	d101      	bne.n	8001a16 <ETH_SetMACConfig+0x172>
 8001a12:	2280      	movs	r2, #128	@ 0x80
 8001a14:	e000      	b.n	8001a18 <ETH_SetMACConfig+0x174>
 8001a16:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001a18:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a1e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a20:	4313      	orrs	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001a2a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001a2e:	4013      	ands	r3, r2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	68f9      	ldr	r1, [r7, #12]
 8001a36:	430b      	orrs	r3, r1
 8001a38:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001a40:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001a48:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a56:	f023 0103 	bic.w	r1, r3, #3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001a6e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001a8a:	2a00      	cmp	r2, #0
 8001a8c:	d101      	bne.n	8001a92 <ETH_SetMACConfig+0x1ee>
 8001a8e:	2240      	movs	r2, #64	@ 0x40
 8001a90:	e000      	b.n	8001a94 <ETH_SetMACConfig+0x1f0>
 8001a92:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a94:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001a9c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001aa6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001ab4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	00048083 	.word	0x00048083
 8001ad4:	c0f88000 	.word	0xc0f88000
 8001ad8:	fffffef0 	.word	0xfffffef0

08001adc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b38      	ldr	r3, [pc, #224]	@ (8001bd4 <ETH_SetDMAConfig+0xf8>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	6811      	ldr	r1, [r2, #0]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	430b      	orrs	r3, r1
 8001afe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b02:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	791b      	ldrb	r3, [r3, #4]
 8001b08:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b0e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	7b1b      	ldrb	r3, [r3, #12]
 8001b14:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd8 <ETH_SetDMAConfig+0xfc>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	68f9      	ldr	r1, [r7, #12]
 8001b2e:	430b      	orrs	r3, r1
 8001b30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b34:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	7b5b      	ldrb	r3, [r3, #13]
 8001b3a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b40:	4313      	orrs	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b4c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001b50:	4b22      	ldr	r3, [pc, #136]	@ (8001bdc <ETH_SetDMAConfig+0x100>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	68f9      	ldr	r1, [r7, #12]
 8001b5a:	430b      	orrs	r3, r1
 8001b5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b60:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	7d1b      	ldrb	r3, [r3, #20]
 8001b6c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b6e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	7f5b      	ldrb	r3, [r3, #29]
 8001b74:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b76:	4313      	orrs	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b82:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001b86:	4b16      	ldr	r3, [pc, #88]	@ (8001be0 <ETH_SetDMAConfig+0x104>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	68f9      	ldr	r1, [r7, #12]
 8001b90:	430b      	orrs	r3, r1
 8001b92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b96:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	7f1b      	ldrb	r3, [r3, #28]
 8001b9e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bb0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <ETH_SetDMAConfig+0x108>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	68f9      	ldr	r1, [r7, #12]
 8001bbe:	430b      	orrs	r3, r1
 8001bc0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bc4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	ffff87fd 	.word	0xffff87fd
 8001bd8:	ffff2ffe 	.word	0xffff2ffe
 8001bdc:	fffec000 	.word	0xfffec000
 8001be0:	ffc0efef 	.word	0xffc0efef
 8001be4:	7fc0ffff 	.word	0x7fc0ffff

08001be8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b0a4      	sub	sp, #144	@ 0x90
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c06:	2301      	movs	r3, #1
 8001c08:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001c12:	2301      	movs	r3, #1
 8001c14:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c28:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001c40:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001c44:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001c50:	2301      	movs	r3, #1
 8001c52:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001c62:	2300      	movs	r3, #0
 8001c64:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c80:	2320      	movs	r3, #32
 8001c82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c86:	2301      	movs	r3, #1
 8001c88:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c92:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c9c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ccc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff fde6 	bl	80018a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001cf2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001cf6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001cfc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d00:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001d08:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d0e:	f107 0308 	add.w	r3, r7, #8
 8001d12:	4619      	mov	r1, r3
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff fee1 	bl	8001adc <ETH_SetDMAConfig>
}
 8001d1a:	bf00      	nop
 8001d1c:	3790      	adds	r7, #144	@ 0x90
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b085      	sub	sp, #20
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	e01d      	b.n	8001d6c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68d9      	ldr	r1, [r3, #12]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d5a:	68b9      	ldr	r1, [r7, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	3206      	adds	r2, #6
 8001d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d9de      	bls.n	8001d30 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d80:	461a      	mov	r2, r3
 8001d82:	2303      	movs	r3, #3
 8001d84:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d94:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001da4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	e023      	b.n	8001e0a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6919      	ldr	r1, [r3, #16]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	440b      	add	r3, r1
 8001dd2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2200      	movs	r2, #0
 8001dea:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2200      	movs	r2, #0
 8001df6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	3212      	adds	r2, #18
 8001e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	3301      	adds	r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d9d8      	bls.n	8001dc2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e36:	461a      	mov	r2, r3
 8001e38:	2303      	movs	r3, #3
 8001e3a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691a      	ldr	r2, [r3, #16]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e4a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e5e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	@ 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e7e:	4b89      	ldr	r3, [pc, #548]	@ (80020a4 <HAL_GPIO_Init+0x234>)
 8001e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e82:	e194      	b.n	80021ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	2101      	movs	r1, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8186 	beq.w	80021a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d005      	beq.n	8001eb4 <HAL_GPIO_Init+0x44>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d130      	bne.n	8001f16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eea:	2201      	movs	r2, #1
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	f003 0201 	and.w	r2, r3, #1
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d017      	beq.n	8001f52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d123      	bne.n	8001fa6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	08da      	lsrs	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3208      	adds	r2, #8
 8001f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	220f      	movs	r2, #15
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	08da      	lsrs	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3208      	adds	r2, #8
 8001fa0:	69b9      	ldr	r1, [r7, #24]
 8001fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0203 	and.w	r2, r3, #3
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80e0 	beq.w	80021a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe8:	4b2f      	ldr	r3, [pc, #188]	@ (80020a8 <HAL_GPIO_Init+0x238>)
 8001fea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fee:	4a2e      	ldr	r2, [pc, #184]	@ (80020a8 <HAL_GPIO_Init+0x238>)
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80020a8 <HAL_GPIO_Init+0x238>)
 8001ffa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002006:	4a29      	ldr	r2, [pc, #164]	@ (80020ac <HAL_GPIO_Init+0x23c>)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	220f      	movs	r2, #15
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a20      	ldr	r2, [pc, #128]	@ (80020b0 <HAL_GPIO_Init+0x240>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d052      	beq.n	80020d8 <HAL_GPIO_Init+0x268>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a1f      	ldr	r2, [pc, #124]	@ (80020b4 <HAL_GPIO_Init+0x244>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d031      	beq.n	800209e <HAL_GPIO_Init+0x22e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a1e      	ldr	r2, [pc, #120]	@ (80020b8 <HAL_GPIO_Init+0x248>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d02b      	beq.n	800209a <HAL_GPIO_Init+0x22a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a1d      	ldr	r2, [pc, #116]	@ (80020bc <HAL_GPIO_Init+0x24c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d025      	beq.n	8002096 <HAL_GPIO_Init+0x226>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a1c      	ldr	r2, [pc, #112]	@ (80020c0 <HAL_GPIO_Init+0x250>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01f      	beq.n	8002092 <HAL_GPIO_Init+0x222>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a1b      	ldr	r2, [pc, #108]	@ (80020c4 <HAL_GPIO_Init+0x254>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d019      	beq.n	800208e <HAL_GPIO_Init+0x21e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a1a      	ldr	r2, [pc, #104]	@ (80020c8 <HAL_GPIO_Init+0x258>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_GPIO_Init+0x21a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a19      	ldr	r2, [pc, #100]	@ (80020cc <HAL_GPIO_Init+0x25c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00d      	beq.n	8002086 <HAL_GPIO_Init+0x216>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a18      	ldr	r2, [pc, #96]	@ (80020d0 <HAL_GPIO_Init+0x260>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d007      	beq.n	8002082 <HAL_GPIO_Init+0x212>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a17      	ldr	r2, [pc, #92]	@ (80020d4 <HAL_GPIO_Init+0x264>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d101      	bne.n	800207e <HAL_GPIO_Init+0x20e>
 800207a:	2309      	movs	r3, #9
 800207c:	e02d      	b.n	80020da <HAL_GPIO_Init+0x26a>
 800207e:	230a      	movs	r3, #10
 8002080:	e02b      	b.n	80020da <HAL_GPIO_Init+0x26a>
 8002082:	2308      	movs	r3, #8
 8002084:	e029      	b.n	80020da <HAL_GPIO_Init+0x26a>
 8002086:	2307      	movs	r3, #7
 8002088:	e027      	b.n	80020da <HAL_GPIO_Init+0x26a>
 800208a:	2306      	movs	r3, #6
 800208c:	e025      	b.n	80020da <HAL_GPIO_Init+0x26a>
 800208e:	2305      	movs	r3, #5
 8002090:	e023      	b.n	80020da <HAL_GPIO_Init+0x26a>
 8002092:	2304      	movs	r3, #4
 8002094:	e021      	b.n	80020da <HAL_GPIO_Init+0x26a>
 8002096:	2303      	movs	r3, #3
 8002098:	e01f      	b.n	80020da <HAL_GPIO_Init+0x26a>
 800209a:	2302      	movs	r3, #2
 800209c:	e01d      	b.n	80020da <HAL_GPIO_Init+0x26a>
 800209e:	2301      	movs	r3, #1
 80020a0:	e01b      	b.n	80020da <HAL_GPIO_Init+0x26a>
 80020a2:	bf00      	nop
 80020a4:	58000080 	.word	0x58000080
 80020a8:	58024400 	.word	0x58024400
 80020ac:	58000400 	.word	0x58000400
 80020b0:	58020000 	.word	0x58020000
 80020b4:	58020400 	.word	0x58020400
 80020b8:	58020800 	.word	0x58020800
 80020bc:	58020c00 	.word	0x58020c00
 80020c0:	58021000 	.word	0x58021000
 80020c4:	58021400 	.word	0x58021400
 80020c8:	58021800 	.word	0x58021800
 80020cc:	58021c00 	.word	0x58021c00
 80020d0:	58022000 	.word	0x58022000
 80020d4:	58022400 	.word	0x58022400
 80020d8:	2300      	movs	r3, #0
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	f002 0203 	and.w	r2, r2, #3
 80020e0:	0092      	lsls	r2, r2, #2
 80020e2:	4093      	lsls	r3, r2
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ea:	4938      	ldr	r1, [pc, #224]	@ (80021cc <HAL_GPIO_Init+0x35c>)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800211e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800214c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	3301      	adds	r3, #1
 80021ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f47f ae63 	bne.w	8001e84 <HAL_GPIO_Init+0x14>
  }
}
 80021be:	bf00      	nop
 80021c0:	bf00      	nop
 80021c2:	3724      	adds	r7, #36	@ 0x24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	58000400 	.word	0x58000400

080021d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	807b      	strh	r3, [r7, #2]
 80021dc:	4613      	mov	r3, r2
 80021de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021e0:	787b      	ldrb	r3, [r7, #1]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80021ec:	e003      	b.n	80021f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021ee:	887b      	ldrh	r3, [r7, #2]
 80021f0:	041a      	lsls	r2, r3, #16
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	619a      	str	r2, [r3, #24]
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af02      	add	r7, sp, #8
 8002208:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0fe      	b.n	8002412 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d106      	bne.n	800222e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7fe fed5 	bl	8000fd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2203      	movs	r2, #3
 8002232:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f005 f9f2 	bl	8007624 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	7c1a      	ldrb	r2, [r3, #16]
 8002248:	f88d 2000 	strb.w	r2, [sp]
 800224c:	3304      	adds	r3, #4
 800224e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002250:	f005 f976 	bl	8007540 <USB_CoreInit>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2202      	movs	r2, #2
 800225e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e0d5      	b.n	8002412 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f005 f9ea 	bl	8007646 <USB_SetCurrentMode>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0c6      	b.n	8002412 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]
 8002288:	e04a      	b.n	8002320 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	3315      	adds	r3, #21
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	3314      	adds	r3, #20
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	b298      	uxth	r0, r3
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	332e      	adds	r3, #46	@ 0x2e
 80022c6:	4602      	mov	r2, r0
 80022c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	3318      	adds	r3, #24
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	331c      	adds	r3, #28
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	3320      	adds	r3, #32
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	3324      	adds	r3, #36	@ 0x24
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	3301      	adds	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	791b      	ldrb	r3, [r3, #4]
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	429a      	cmp	r2, r3
 8002328:	d3af      	bcc.n	800228a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
 800232e:	e044      	b.n	80023ba <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	3301      	adds	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	791b      	ldrb	r3, [r3, #4]
 80023be:	7bfa      	ldrb	r2, [r7, #15]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d3b5      	bcc.n	8002330 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	7c1a      	ldrb	r2, [r3, #16]
 80023cc:	f88d 2000 	strb.w	r2, [sp]
 80023d0:	3304      	adds	r3, #4
 80023d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d4:	f005 f984 	bl	80076e0 <USB_DevInit>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2202      	movs	r2, #2
 80023e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e013      	b.n	8002412 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7b1b      	ldrb	r3, [r3, #12]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d102      	bne.n	8002406 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f80b 	bl	800241c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f005 fb3f 	bl	8007a8e <USB_DevDisconnect>

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800244a:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <HAL_PCDEx_ActivateLPM+0x44>)
 800244c:	4313      	orrs	r3, r2
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	10000003 	.word	0x10000003

08002464 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800246c:	4b19      	ldr	r3, [pc, #100]	@ (80024d4 <HAL_PWREx_ConfigSupply+0x70>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b04      	cmp	r3, #4
 8002476:	d00a      	beq.n	800248e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002478:	4b16      	ldr	r3, [pc, #88]	@ (80024d4 <HAL_PWREx_ConfigSupply+0x70>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	429a      	cmp	r2, r3
 8002484:	d001      	beq.n	800248a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e01f      	b.n	80024ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	e01d      	b.n	80024ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800248e:	4b11      	ldr	r3, [pc, #68]	@ (80024d4 <HAL_PWREx_ConfigSupply+0x70>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f023 0207 	bic.w	r2, r3, #7
 8002496:	490f      	ldr	r1, [pc, #60]	@ (80024d4 <HAL_PWREx_ConfigSupply+0x70>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4313      	orrs	r3, r2
 800249c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800249e:	f7fe ff7f 	bl	80013a0 <HAL_GetTick>
 80024a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024a4:	e009      	b.n	80024ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024a6:	f7fe ff7b 	bl	80013a0 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024b4:	d901      	bls.n	80024ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e007      	b.n	80024ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_PWREx_ConfigSupply+0x70>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024c6:	d1ee      	bne.n	80024a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	58024800 	.word	0x58024800

080024d8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80024dc:	4b05      	ldr	r3, [pc, #20]	@ (80024f4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a04      	ldr	r2, [pc, #16]	@ (80024f4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024e6:	60d3      	str	r3, [r2, #12]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	58024800 	.word	0x58024800

080024f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08c      	sub	sp, #48	@ 0x30
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d102      	bne.n	800250c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	f000 bc48 	b.w	8002d9c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 8088 	beq.w	800262a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251a:	4b99      	ldr	r3, [pc, #612]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002522:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002524:	4b96      	ldr	r3, [pc, #600]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002528:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800252a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800252c:	2b10      	cmp	r3, #16
 800252e:	d007      	beq.n	8002540 <HAL_RCC_OscConfig+0x48>
 8002530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002532:	2b18      	cmp	r3, #24
 8002534:	d111      	bne.n	800255a <HAL_RCC_OscConfig+0x62>
 8002536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d10c      	bne.n	800255a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	4b8f      	ldr	r3, [pc, #572]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d06d      	beq.n	8002628 <HAL_RCC_OscConfig+0x130>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d169      	bne.n	8002628 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	f000 bc21 	b.w	8002d9c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002562:	d106      	bne.n	8002572 <HAL_RCC_OscConfig+0x7a>
 8002564:	4b86      	ldr	r3, [pc, #536]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a85      	ldr	r2, [pc, #532]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800256a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	e02e      	b.n	80025d0 <HAL_RCC_OscConfig+0xd8>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10c      	bne.n	8002594 <HAL_RCC_OscConfig+0x9c>
 800257a:	4b81      	ldr	r3, [pc, #516]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a80      	ldr	r2, [pc, #512]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b7e      	ldr	r3, [pc, #504]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a7d      	ldr	r2, [pc, #500]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800258c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e01d      	b.n	80025d0 <HAL_RCC_OscConfig+0xd8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0xc0>
 800259e:	4b78      	ldr	r3, [pc, #480]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a77      	ldr	r2, [pc, #476]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b75      	ldr	r3, [pc, #468]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a74      	ldr	r2, [pc, #464]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0xd8>
 80025b8:	4b71      	ldr	r3, [pc, #452]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a70      	ldr	r2, [pc, #448]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80025be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b6e      	ldr	r3, [pc, #440]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a6d      	ldr	r2, [pc, #436]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80025ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe fee2 	bl	80013a0 <HAL_GetTick>
 80025dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e0:	f7fe fede 	bl	80013a0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	@ 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e3d4      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025f2:	4b63      	ldr	r3, [pc, #396]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0xe8>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe fece 	bl	80013a0 <HAL_GetTick>
 8002604:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002608:	f7fe feca 	bl	80013a0 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	@ 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e3c0      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800261a:	4b59      	ldr	r3, [pc, #356]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x110>
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80ca 	beq.w	80027cc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002638:	4b51      	ldr	r3, [pc, #324]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002640:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002642:	4b4f      	ldr	r3, [pc, #316]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002646:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d007      	beq.n	800265e <HAL_RCC_OscConfig+0x166>
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	2b18      	cmp	r3, #24
 8002652:	d156      	bne.n	8002702 <HAL_RCC_OscConfig+0x20a>
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d151      	bne.n	8002702 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800265e:	4b48      	ldr	r3, [pc, #288]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_RCC_OscConfig+0x17e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e392      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002676:	4b42      	ldr	r3, [pc, #264]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 0219 	bic.w	r2, r3, #25
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	493f      	ldr	r1, [pc, #252]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002684:	4313      	orrs	r3, r2
 8002686:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7fe fe8a 	bl	80013a0 <HAL_GetTick>
 800268c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002690:	f7fe fe86 	bl	80013a0 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e37c      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026a2:	4b37      	ldr	r3, [pc, #220]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ae:	f7fe fea7 	bl	8001400 <HAL_GetREVID>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d817      	bhi.n	80026ec <HAL_RCC_OscConfig+0x1f4>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	2b40      	cmp	r3, #64	@ 0x40
 80026c2:	d108      	bne.n	80026d6 <HAL_RCC_OscConfig+0x1de>
 80026c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80026cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80026ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d4:	e07a      	b.n	80027cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	031b      	lsls	r3, r3, #12
 80026e4:	4926      	ldr	r1, [pc, #152]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ea:	e06f      	b.n	80027cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ec:	4b24      	ldr	r3, [pc, #144]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	061b      	lsls	r3, r3, #24
 80026fa:	4921      	ldr	r1, [pc, #132]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002700:	e064      	b.n	80027cc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d047      	beq.n	800279a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800270a:	4b1d      	ldr	r3, [pc, #116]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 0219 	bic.w	r2, r3, #25
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	491a      	ldr	r1, [pc, #104]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002718:	4313      	orrs	r3, r2
 800271a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fe40 	bl	80013a0 <HAL_GetTick>
 8002720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002724:	f7fe fe3c 	bl	80013a0 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e332      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002736:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002742:	f7fe fe5d 	bl	8001400 <HAL_GetREVID>
 8002746:	4603      	mov	r3, r0
 8002748:	f241 0203 	movw	r2, #4099	@ 0x1003
 800274c:	4293      	cmp	r3, r2
 800274e:	d819      	bhi.n	8002784 <HAL_RCC_OscConfig+0x28c>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b40      	cmp	r3, #64	@ 0x40
 8002756:	d108      	bne.n	800276a <HAL_RCC_OscConfig+0x272>
 8002758:	4b09      	ldr	r3, [pc, #36]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002760:	4a07      	ldr	r2, [pc, #28]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002766:	6053      	str	r3, [r2, #4]
 8002768:	e030      	b.n	80027cc <HAL_RCC_OscConfig+0x2d4>
 800276a:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	031b      	lsls	r3, r3, #12
 8002778:	4901      	ldr	r1, [pc, #4]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800277a:	4313      	orrs	r3, r2
 800277c:	604b      	str	r3, [r1, #4]
 800277e:	e025      	b.n	80027cc <HAL_RCC_OscConfig+0x2d4>
 8002780:	58024400 	.word	0x58024400
 8002784:	4b9a      	ldr	r3, [pc, #616]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	061b      	lsls	r3, r3, #24
 8002792:	4997      	ldr	r1, [pc, #604]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
 8002798:	e018      	b.n	80027cc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279a:	4b95      	ldr	r3, [pc, #596]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a94      	ldr	r2, [pc, #592]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80027a0:	f023 0301 	bic.w	r3, r3, #1
 80027a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7fe fdfb 	bl	80013a0 <HAL_GetTick>
 80027aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ae:	f7fe fdf7 	bl	80013a0 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e2ed      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027c0:	4b8b      	ldr	r3, [pc, #556]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f0      	bne.n	80027ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80a9 	beq.w	800292c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027da:	4b85      	ldr	r3, [pc, #532]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027e4:	4b82      	ldr	r3, [pc, #520]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80027e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d007      	beq.n	8002800 <HAL_RCC_OscConfig+0x308>
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	2b18      	cmp	r3, #24
 80027f4:	d13a      	bne.n	800286c <HAL_RCC_OscConfig+0x374>
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d135      	bne.n	800286c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002800:	4b7b      	ldr	r3, [pc, #492]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_OscConfig+0x320>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	2b80      	cmp	r3, #128	@ 0x80
 8002812:	d001      	beq.n	8002818 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e2c1      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002818:	f7fe fdf2 	bl	8001400 <HAL_GetREVID>
 800281c:	4603      	mov	r3, r0
 800281e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002822:	4293      	cmp	r3, r2
 8002824:	d817      	bhi.n	8002856 <HAL_RCC_OscConfig+0x35e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	2b20      	cmp	r3, #32
 800282c:	d108      	bne.n	8002840 <HAL_RCC_OscConfig+0x348>
 800282e:	4b70      	ldr	r3, [pc, #448]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002836:	4a6e      	ldr	r2, [pc, #440]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002838:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800283c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800283e:	e075      	b.n	800292c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002840:	4b6b      	ldr	r3, [pc, #428]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	069b      	lsls	r3, r3, #26
 800284e:	4968      	ldr	r1, [pc, #416]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002854:	e06a      	b.n	800292c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002856:	4b66      	ldr	r3, [pc, #408]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	061b      	lsls	r3, r3, #24
 8002864:	4962      	ldr	r1, [pc, #392]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002866:	4313      	orrs	r3, r2
 8002868:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800286a:	e05f      	b.n	800292c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d042      	beq.n	80028fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002874:	4b5e      	ldr	r3, [pc, #376]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a5d      	ldr	r2, [pc, #372]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 800287a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800287e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7fe fd8e 	bl	80013a0 <HAL_GetTick>
 8002884:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002888:	f7fe fd8a 	bl	80013a0 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e280      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800289a:	4b55      	ldr	r3, [pc, #340]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028a6:	f7fe fdab 	bl	8001400 <HAL_GetREVID>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d817      	bhi.n	80028e4 <HAL_RCC_OscConfig+0x3ec>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d108      	bne.n	80028ce <HAL_RCC_OscConfig+0x3d6>
 80028bc:	4b4c      	ldr	r3, [pc, #304]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80028c4:	4a4a      	ldr	r2, [pc, #296]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80028c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028ca:	6053      	str	r3, [r2, #4]
 80028cc:	e02e      	b.n	800292c <HAL_RCC_OscConfig+0x434>
 80028ce:	4b48      	ldr	r3, [pc, #288]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	069b      	lsls	r3, r3, #26
 80028dc:	4944      	ldr	r1, [pc, #272]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	604b      	str	r3, [r1, #4]
 80028e2:	e023      	b.n	800292c <HAL_RCC_OscConfig+0x434>
 80028e4:	4b42      	ldr	r3, [pc, #264]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	061b      	lsls	r3, r3, #24
 80028f2:	493f      	ldr	r1, [pc, #252]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60cb      	str	r3, [r1, #12]
 80028f8:	e018      	b.n	800292c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028fa:	4b3d      	ldr	r3, [pc, #244]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a3c      	ldr	r2, [pc, #240]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002900:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002906:	f7fe fd4b 	bl	80013a0 <HAL_GetTick>
 800290a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800290e:	f7fe fd47 	bl	80013a0 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e23d      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002920:	4b33      	ldr	r3, [pc, #204]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f0      	bne.n	800290e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d036      	beq.n	80029a6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d019      	beq.n	8002974 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002940:	4b2b      	ldr	r3, [pc, #172]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002944:	4a2a      	ldr	r2, [pc, #168]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7fe fd28 	bl	80013a0 <HAL_GetTick>
 8002950:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002954:	f7fe fd24 	bl	80013a0 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e21a      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002966:	4b22      	ldr	r3, [pc, #136]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x45c>
 8002972:	e018      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002974:	4b1e      	ldr	r3, [pc, #120]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002978:	4a1d      	ldr	r2, [pc, #116]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 800297a:	f023 0301 	bic.w	r3, r3, #1
 800297e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002980:	f7fe fd0e 	bl	80013a0 <HAL_GetTick>
 8002984:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002988:	f7fe fd0a 	bl	80013a0 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e200      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800299a:	4b15      	ldr	r3, [pc, #84]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 800299c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d039      	beq.n	8002a26 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01c      	beq.n	80029f4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029ba:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a0c      	ldr	r2, [pc, #48]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80029c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029c6:	f7fe fceb 	bl	80013a0 <HAL_GetTick>
 80029ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029ce:	f7fe fce7 	bl	80013a0 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e1dd      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029e0:	4b03      	ldr	r3, [pc, #12]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x4d6>
 80029ec:	e01b      	b.n	8002a26 <HAL_RCC_OscConfig+0x52e>
 80029ee:	bf00      	nop
 80029f0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029f4:	4b9b      	ldr	r3, [pc, #620]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a9a      	ldr	r2, [pc, #616]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 80029fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a00:	f7fe fcce 	bl	80013a0 <HAL_GetTick>
 8002a04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a08:	f7fe fcca 	bl	80013a0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e1c0      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a1a:	4b92      	ldr	r3, [pc, #584]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8081 	beq.w	8002b36 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a34:	4b8c      	ldr	r3, [pc, #560]	@ (8002c68 <HAL_RCC_OscConfig+0x770>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a8b      	ldr	r2, [pc, #556]	@ (8002c68 <HAL_RCC_OscConfig+0x770>)
 8002a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a40:	f7fe fcae 	bl	80013a0 <HAL_GetTick>
 8002a44:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a48:	f7fe fcaa 	bl	80013a0 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	@ 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e1a0      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a5a:	4b83      	ldr	r3, [pc, #524]	@ (8002c68 <HAL_RCC_OscConfig+0x770>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d106      	bne.n	8002a7c <HAL_RCC_OscConfig+0x584>
 8002a6e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a72:	4a7c      	ldr	r2, [pc, #496]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a7a:	e02d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x5e0>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10c      	bne.n	8002a9e <HAL_RCC_OscConfig+0x5a6>
 8002a84:	4b77      	ldr	r3, [pc, #476]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a88:	4a76      	ldr	r2, [pc, #472]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a90:	4b74      	ldr	r3, [pc, #464]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a94:	4a73      	ldr	r2, [pc, #460]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002a96:	f023 0304 	bic.w	r3, r3, #4
 8002a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a9c:	e01c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x5e0>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b05      	cmp	r3, #5
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x5c8>
 8002aa6:	4b6f      	ldr	r3, [pc, #444]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aaa:	4a6e      	ldr	r2, [pc, #440]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab2:	4b6c      	ldr	r3, [pc, #432]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab6:	4a6b      	ldr	r2, [pc, #428]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0x5e0>
 8002ac0:	4b68      	ldr	r3, [pc, #416]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac4:	4a67      	ldr	r2, [pc, #412]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002acc:	4b65      	ldr	r3, [pc, #404]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad0:	4a64      	ldr	r2, [pc, #400]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002ad2:	f023 0304 	bic.w	r3, r3, #4
 8002ad6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d015      	beq.n	8002b0c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae0:	f7fe fc5e 	bl	80013a0 <HAL_GetTick>
 8002ae4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae8:	f7fe fc5a 	bl	80013a0 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e14e      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002afe:	4b59      	ldr	r3, [pc, #356]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0ee      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x5f0>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0c:	f7fe fc48 	bl	80013a0 <HAL_GetTick>
 8002b10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b14:	f7fe fc44 	bl	80013a0 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e138      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b2a:	4b4e      	ldr	r3, [pc, #312]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1ee      	bne.n	8002b14 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 812d 	beq.w	8002d9a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b40:	4b48      	ldr	r3, [pc, #288]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b48:	2b18      	cmp	r3, #24
 8002b4a:	f000 80bd 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	f040 809e 	bne.w	8002c94 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b58:	4b42      	ldr	r3, [pc, #264]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a41      	ldr	r2, [pc, #260]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7fe fc1c 	bl	80013a0 <HAL_GetTick>
 8002b68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fe fc18 	bl	80013a0 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e10e      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b7e:	4b39      	ldr	r3, [pc, #228]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b8a:	4b36      	ldr	r3, [pc, #216]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002b8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b8e:	4b37      	ldr	r3, [pc, #220]	@ (8002c6c <HAL_RCC_OscConfig+0x774>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b9a:	0112      	lsls	r2, r2, #4
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	4931      	ldr	r1, [pc, #196]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	628b      	str	r3, [r1, #40]	@ 0x28
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	025b      	lsls	r3, r3, #9
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	041b      	lsls	r3, r3, #16
 8002bc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	061b      	lsls	r3, r3, #24
 8002bd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002bd4:	4923      	ldr	r1, [pc, #140]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002bda:	4b22      	ldr	r3, [pc, #136]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	4a21      	ldr	r2, [pc, #132]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002be6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002be8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bea:	4b21      	ldr	r3, [pc, #132]	@ (8002c70 <HAL_RCC_OscConfig+0x778>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bf2:	00d2      	lsls	r2, r2, #3
 8002bf4:	491b      	ldr	r1, [pc, #108]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfe:	f023 020c 	bic.w	r2, r3, #12
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	4917      	ldr	r1, [pc, #92]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c0c:	4b15      	ldr	r3, [pc, #84]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c10:	f023 0202 	bic.w	r2, r3, #2
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c18:	4912      	ldr	r1, [pc, #72]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c1e:	4b11      	ldr	r3, [pc, #68]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c22:	4a10      	ldr	r2, [pc, #64]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c36:	4b0b      	ldr	r3, [pc, #44]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c42:	4b08      	ldr	r3, [pc, #32]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c46:	4a07      	ldr	r2, [pc, #28]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c4e:	4b05      	ldr	r3, [pc, #20]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a04      	ldr	r2, [pc, #16]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fe fba1 	bl	80013a0 <HAL_GetTick>
 8002c5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c60:	e011      	b.n	8002c86 <HAL_RCC_OscConfig+0x78e>
 8002c62:	bf00      	nop
 8002c64:	58024400 	.word	0x58024400
 8002c68:	58024800 	.word	0x58024800
 8002c6c:	fffffc0c 	.word	0xfffffc0c
 8002c70:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c74:	f7fe fb94 	bl	80013a0 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e08a      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c86:	4b47      	ldr	r3, [pc, #284]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x77c>
 8002c92:	e082      	b.n	8002d9a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c94:	4b43      	ldr	r3, [pc, #268]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a42      	ldr	r2, [pc, #264]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002c9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fb7e 	bl	80013a0 <HAL_GetTick>
 8002ca4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fe fb7a 	bl	80013a0 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e070      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cba:	4b3a      	ldr	r3, [pc, #232]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x7b0>
 8002cc6:	e068      	b.n	8002d9a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002cc8:	4b36      	ldr	r3, [pc, #216]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ccc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cce:	4b35      	ldr	r3, [pc, #212]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d031      	beq.n	8002d40 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f003 0203 	and.w	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d12a      	bne.n	8002d40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d122      	bne.n	8002d40 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d04:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d11a      	bne.n	8002d40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	0a5b      	lsrs	r3, r3, #9
 8002d0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d16:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d111      	bne.n	8002d40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	0c1b      	lsrs	r3, r3, #16
 8002d20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d28:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d108      	bne.n	8002d40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	0e1b      	lsrs	r3, r3, #24
 8002d32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e02b      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d44:	4b17      	ldr	r3, [pc, #92]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d48:	08db      	lsrs	r3, r3, #3
 8002d4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d4e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d01f      	beq.n	8002d9a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d5a:	4b12      	ldr	r3, [pc, #72]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5e:	4a11      	ldr	r2, [pc, #68]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d66:	f7fe fb1b 	bl	80013a0 <HAL_GetTick>
 8002d6a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d6c:	bf00      	nop
 8002d6e:	f7fe fb17 	bl	80013a0 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d0f9      	beq.n	8002d6e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002da8 <HAL_RCC_OscConfig+0x8b0>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d86:	00d2      	lsls	r2, r2, #3
 8002d88:	4906      	ldr	r1, [pc, #24]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d8e:	4b05      	ldr	r3, [pc, #20]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d92:	4a04      	ldr	r2, [pc, #16]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3730      	adds	r7, #48	@ 0x30
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	58024400 	.word	0x58024400
 8002da8:	ffff0007 	.word	0xffff0007

08002dac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e19c      	b.n	80030fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b8a      	ldr	r3, [pc, #552]	@ (8002fec <HAL_RCC_ClockConfig+0x240>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d910      	bls.n	8002df0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b87      	ldr	r3, [pc, #540]	@ (8002fec <HAL_RCC_ClockConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 020f 	bic.w	r2, r3, #15
 8002dd6:	4985      	ldr	r1, [pc, #532]	@ (8002fec <HAL_RCC_ClockConfig+0x240>)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dde:	4b83      	ldr	r3, [pc, #524]	@ (8002fec <HAL_RCC_ClockConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e184      	b.n	80030fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d010      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	4b7b      	ldr	r3, [pc, #492]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d908      	bls.n	8002e1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e0c:	4b78      	ldr	r3, [pc, #480]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	4975      	ldr	r1, [pc, #468]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d010      	beq.n	8002e4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	4b70      	ldr	r3, [pc, #448]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d908      	bls.n	8002e4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	496a      	ldr	r1, [pc, #424]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d010      	beq.n	8002e7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699a      	ldr	r2, [r3, #24]
 8002e5c:	4b64      	ldr	r3, [pc, #400]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d908      	bls.n	8002e7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e68:	4b61      	ldr	r3, [pc, #388]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	495e      	ldr	r1, [pc, #376]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d010      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69da      	ldr	r2, [r3, #28]
 8002e8a:	4b59      	ldr	r3, [pc, #356]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d908      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e96:	4b56      	ldr	r3, [pc, #344]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	4953      	ldr	r1, [pc, #332]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d010      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	4b4d      	ldr	r3, [pc, #308]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d908      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f023 020f 	bic.w	r2, r3, #15
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4947      	ldr	r1, [pc, #284]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d055      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ee2:	4b43      	ldr	r3, [pc, #268]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	4940      	ldr	r1, [pc, #256]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d107      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002efc:	4b3c      	ldr	r3, [pc, #240]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d121      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0f6      	b.n	80030fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f14:	4b36      	ldr	r3, [pc, #216]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d115      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0ea      	b.n	80030fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f2c:	4b30      	ldr	r3, [pc, #192]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0de      	b.n	80030fa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f3c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0d6      	b.n	80030fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f4c:	4b28      	ldr	r3, [pc, #160]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f023 0207 	bic.w	r2, r3, #7
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4925      	ldr	r1, [pc, #148]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f5e:	f7fe fa1f 	bl	80013a0 <HAL_GetTick>
 8002f62:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f64:	e00a      	b.n	8002f7c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f66:	f7fe fa1b 	bl	80013a0 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e0be      	b.n	80030fa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d1eb      	bne.n	8002f66 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d010      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	4b14      	ldr	r3, [pc, #80]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d208      	bcs.n	8002fbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002faa:	4b11      	ldr	r3, [pc, #68]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f023 020f 	bic.w	r2, r3, #15
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	490e      	ldr	r1, [pc, #56]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <HAL_RCC_ClockConfig+0x240>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d214      	bcs.n	8002ff4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b08      	ldr	r3, [pc, #32]	@ (8002fec <HAL_RCC_ClockConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 020f 	bic.w	r2, r3, #15
 8002fd2:	4906      	ldr	r1, [pc, #24]	@ (8002fec <HAL_RCC_ClockConfig+0x240>)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	4b04      	ldr	r3, [pc, #16]	@ (8002fec <HAL_RCC_ClockConfig+0x240>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e086      	b.n	80030fa <HAL_RCC_ClockConfig+0x34e>
 8002fec:	52002000 	.word	0x52002000
 8002ff0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d010      	beq.n	8003022 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	4b3f      	ldr	r3, [pc, #252]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800300c:	429a      	cmp	r2, r3
 800300e:	d208      	bcs.n	8003022 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003010:	4b3c      	ldr	r3, [pc, #240]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	4939      	ldr	r1, [pc, #228]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 800301e:	4313      	orrs	r3, r2
 8003020:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d010      	beq.n	8003050 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	4b34      	ldr	r3, [pc, #208]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800303a:	429a      	cmp	r2, r3
 800303c:	d208      	bcs.n	8003050 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800303e:	4b31      	ldr	r3, [pc, #196]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	492e      	ldr	r1, [pc, #184]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 800304c:	4313      	orrs	r3, r2
 800304e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b00      	cmp	r3, #0
 800305a:	d010      	beq.n	800307e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	4b28      	ldr	r3, [pc, #160]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003068:	429a      	cmp	r2, r3
 800306a:	d208      	bcs.n	800307e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800306c:	4b25      	ldr	r3, [pc, #148]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	4922      	ldr	r1, [pc, #136]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 800307a:	4313      	orrs	r3, r2
 800307c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	2b00      	cmp	r3, #0
 8003088:	d010      	beq.n	80030ac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69da      	ldr	r2, [r3, #28]
 800308e:	4b1d      	ldr	r3, [pc, #116]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003096:	429a      	cmp	r2, r3
 8003098:	d208      	bcs.n	80030ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800309a:	4b1a      	ldr	r3, [pc, #104]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	4917      	ldr	r1, [pc, #92]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030ac:	f000 f834 	bl	8003118 <HAL_RCC_GetSysClockFreq>
 80030b0:	4602      	mov	r2, r0
 80030b2:	4b14      	ldr	r3, [pc, #80]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	0a1b      	lsrs	r3, r3, #8
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	4912      	ldr	r1, [pc, #72]	@ (8003108 <HAL_RCC_ClockConfig+0x35c>)
 80030be:	5ccb      	ldrb	r3, [r1, r3]
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
 80030c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003108 <HAL_RCC_ClockConfig+0x35c>)
 80030d4:	5cd3      	ldrb	r3, [r2, r3]
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
 80030e0:	4a0a      	ldr	r2, [pc, #40]	@ (800310c <HAL_RCC_ClockConfig+0x360>)
 80030e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003110 <HAL_RCC_ClockConfig+0x364>)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80030ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003114 <HAL_RCC_ClockConfig+0x368>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe f90c 	bl	800130c <HAL_InitTick>
 80030f4:	4603      	mov	r3, r0
 80030f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	58024400 	.word	0x58024400
 8003108:	08007bc0 	.word	0x08007bc0
 800310c:	24000004 	.word	0x24000004
 8003110:	24000000 	.word	0x24000000
 8003114:	24000008 	.word	0x24000008

08003118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003118:	b480      	push	{r7}
 800311a:	b089      	sub	sp, #36	@ 0x24
 800311c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800311e:	4bb3      	ldr	r3, [pc, #716]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003126:	2b18      	cmp	r3, #24
 8003128:	f200 8155 	bhi.w	80033d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800312c:	a201      	add	r2, pc, #4	@ (adr r2, 8003134 <HAL_RCC_GetSysClockFreq+0x1c>)
 800312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003132:	bf00      	nop
 8003134:	08003199 	.word	0x08003199
 8003138:	080033d7 	.word	0x080033d7
 800313c:	080033d7 	.word	0x080033d7
 8003140:	080033d7 	.word	0x080033d7
 8003144:	080033d7 	.word	0x080033d7
 8003148:	080033d7 	.word	0x080033d7
 800314c:	080033d7 	.word	0x080033d7
 8003150:	080033d7 	.word	0x080033d7
 8003154:	080031bf 	.word	0x080031bf
 8003158:	080033d7 	.word	0x080033d7
 800315c:	080033d7 	.word	0x080033d7
 8003160:	080033d7 	.word	0x080033d7
 8003164:	080033d7 	.word	0x080033d7
 8003168:	080033d7 	.word	0x080033d7
 800316c:	080033d7 	.word	0x080033d7
 8003170:	080033d7 	.word	0x080033d7
 8003174:	080031c5 	.word	0x080031c5
 8003178:	080033d7 	.word	0x080033d7
 800317c:	080033d7 	.word	0x080033d7
 8003180:	080033d7 	.word	0x080033d7
 8003184:	080033d7 	.word	0x080033d7
 8003188:	080033d7 	.word	0x080033d7
 800318c:	080033d7 	.word	0x080033d7
 8003190:	080033d7 	.word	0x080033d7
 8003194:	080031cb 	.word	0x080031cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003198:	4b94      	ldr	r3, [pc, #592]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0320 	and.w	r3, r3, #32
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d009      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031a4:	4b91      	ldr	r3, [pc, #580]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	08db      	lsrs	r3, r3, #3
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	4a90      	ldr	r2, [pc, #576]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
 80031b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80031b6:	e111      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031b8:	4b8d      	ldr	r3, [pc, #564]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031ba:	61bb      	str	r3, [r7, #24]
      break;
 80031bc:	e10e      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80031be:	4b8d      	ldr	r3, [pc, #564]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031c0:	61bb      	str	r3, [r7, #24]
      break;
 80031c2:	e10b      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80031c4:	4b8c      	ldr	r3, [pc, #560]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031c6:	61bb      	str	r3, [r7, #24]
      break;
 80031c8:	e108      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031ca:	4b88      	ldr	r3, [pc, #544]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80031d4:	4b85      	ldr	r3, [pc, #532]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031e0:	4b82      	ldr	r3, [pc, #520]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80031ea:	4b80      	ldr	r3, [pc, #512]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ee:	08db      	lsrs	r3, r3, #3
 80031f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003202:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80e1 	beq.w	80033d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b02      	cmp	r3, #2
 8003212:	f000 8083 	beq.w	800331c <HAL_RCC_GetSysClockFreq+0x204>
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b02      	cmp	r3, #2
 800321a:	f200 80a1 	bhi.w	8003360 <HAL_RCC_GetSysClockFreq+0x248>
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x114>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d056      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800322a:	e099      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800322c:	4b6f      	ldr	r3, [pc, #444]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0320 	and.w	r3, r3, #32
 8003234:	2b00      	cmp	r3, #0
 8003236:	d02d      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003238:	4b6c      	ldr	r3, [pc, #432]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	08db      	lsrs	r3, r3, #3
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	4a6b      	ldr	r2, [pc, #428]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
 8003248:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	ee07 3a90 	vmov	s15, r3
 8003250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003262:	4b62      	ldr	r3, [pc, #392]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800326a:	ee07 3a90 	vmov	s15, r3
 800326e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003272:	ed97 6a02 	vldr	s12, [r7, #8]
 8003276:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80033fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800327a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800327e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800328a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003292:	e087      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	ee07 3a90 	vmov	s15, r3
 800329a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003400 <HAL_RCC_GetSysClockFreq+0x2e8>
 80032a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032a6:	4b51      	ldr	r3, [pc, #324]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ae:	ee07 3a90 	vmov	s15, r3
 80032b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80033fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80032be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032d6:	e065      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003404 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ea:	4b40      	ldr	r3, [pc, #256]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80032fe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80033fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800330a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800330e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003316:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800331a:	e043      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003326:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003408 <HAL_RCC_GetSysClockFreq+0x2f0>
 800332a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332e:	4b2f      	ldr	r3, [pc, #188]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800333e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003342:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80033fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800334a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800334e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800335e:	e021      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	ee07 3a90 	vmov	s15, r3
 8003366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003404 <HAL_RCC_GetSysClockFreq+0x2ec>
 800336e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003372:	4b1e      	ldr	r3, [pc, #120]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337a:	ee07 3a90 	vmov	s15, r3
 800337e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003382:	ed97 6a02 	vldr	s12, [r7, #8]
 8003386:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80033fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800338a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800338e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800339a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80033a4:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a8:	0a5b      	lsrs	r3, r3, #9
 80033aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033ae:	3301      	adds	r3, #1
 80033b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	ee07 3a90 	vmov	s15, r3
 80033b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80033c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033c8:	ee17 3a90 	vmov	r3, s15
 80033cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80033ce:	e005      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
      break;
 80033d4:	e002      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80033d6:	4b07      	ldr	r3, [pc, #28]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033d8:	61bb      	str	r3, [r7, #24]
      break;
 80033da:	bf00      	nop
  }

  return sysclockfreq;
 80033dc:	69bb      	ldr	r3, [r7, #24]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3724      	adds	r7, #36	@ 0x24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	58024400 	.word	0x58024400
 80033f0:	03d09000 	.word	0x03d09000
 80033f4:	003d0900 	.word	0x003d0900
 80033f8:	007a1200 	.word	0x007a1200
 80033fc:	46000000 	.word	0x46000000
 8003400:	4c742400 	.word	0x4c742400
 8003404:	4a742400 	.word	0x4a742400
 8003408:	4af42400 	.word	0x4af42400

0800340c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003412:	f7ff fe81 	bl	8003118 <HAL_RCC_GetSysClockFreq>
 8003416:	4602      	mov	r2, r0
 8003418:	4b10      	ldr	r3, [pc, #64]	@ (800345c <HAL_RCC_GetHCLKFreq+0x50>)
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	0a1b      	lsrs	r3, r3, #8
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	490f      	ldr	r1, [pc, #60]	@ (8003460 <HAL_RCC_GetHCLKFreq+0x54>)
 8003424:	5ccb      	ldrb	r3, [r1, r3]
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	fa22 f303 	lsr.w	r3, r2, r3
 800342e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003430:	4b0a      	ldr	r3, [pc, #40]	@ (800345c <HAL_RCC_GetHCLKFreq+0x50>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	4a09      	ldr	r2, [pc, #36]	@ (8003460 <HAL_RCC_GetHCLKFreq+0x54>)
 800343a:	5cd3      	ldrb	r3, [r2, r3]
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	fa22 f303 	lsr.w	r3, r2, r3
 8003446:	4a07      	ldr	r2, [pc, #28]	@ (8003464 <HAL_RCC_GetHCLKFreq+0x58>)
 8003448:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800344a:	4a07      	ldr	r2, [pc, #28]	@ (8003468 <HAL_RCC_GetHCLKFreq+0x5c>)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003450:	4b04      	ldr	r3, [pc, #16]	@ (8003464 <HAL_RCC_GetHCLKFreq+0x58>)
 8003452:	681b      	ldr	r3, [r3, #0]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	58024400 	.word	0x58024400
 8003460:	08007bc0 	.word	0x08007bc0
 8003464:	24000004 	.word	0x24000004
 8003468:	24000000 	.word	0x24000000

0800346c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003470:	f7ff ffcc 	bl	800340c <HAL_RCC_GetHCLKFreq>
 8003474:	4602      	mov	r2, r0
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	091b      	lsrs	r3, r3, #4
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	4904      	ldr	r1, [pc, #16]	@ (8003494 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003482:	5ccb      	ldrb	r3, [r1, r3]
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800348c:	4618      	mov	r0, r3
 800348e:	bd80      	pop	{r7, pc}
 8003490:	58024400 	.word	0x58024400
 8003494:	08007bc0 	.word	0x08007bc0

08003498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800349c:	f7ff ffb6 	bl	800340c <HAL_RCC_GetHCLKFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b06      	ldr	r3, [pc, #24]	@ (80034bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4904      	ldr	r1, [pc, #16]	@ (80034c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	58024400 	.word	0x58024400
 80034c0:	08007bc0 	.word	0x08007bc0

080034c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c8:	b0ca      	sub	sp, #296	@ 0x128
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034d0:	2300      	movs	r3, #0
 80034d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034d6:	2300      	movs	r3, #0
 80034d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80034e8:	2500      	movs	r5, #0
 80034ea:	ea54 0305 	orrs.w	r3, r4, r5
 80034ee:	d049      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80034f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034fa:	d02f      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80034fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003500:	d828      	bhi.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003502:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003506:	d01a      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003508:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800350c:	d822      	bhi.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003512:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003516:	d007      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003518:	e01c      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800351a:	4bb8      	ldr	r3, [pc, #736]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800351c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351e:	4ab7      	ldr	r2, [pc, #732]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003524:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003526:	e01a      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352c:	3308      	adds	r3, #8
 800352e:	2102      	movs	r1, #2
 8003530:	4618      	mov	r0, r3
 8003532:	f001 fc8f 	bl	8004e54 <RCCEx_PLL2_Config>
 8003536:	4603      	mov	r3, r0
 8003538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800353c:	e00f      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800353e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003542:	3328      	adds	r3, #40	@ 0x28
 8003544:	2102      	movs	r1, #2
 8003546:	4618      	mov	r0, r3
 8003548:	f001 fd36 	bl	8004fb8 <RCCEx_PLL3_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003552:	e004      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800355a:	e000      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800355c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800355e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10a      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003566:	4ba5      	ldr	r3, [pc, #660]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800356a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800356e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003572:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003574:	4aa1      	ldr	r2, [pc, #644]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003576:	430b      	orrs	r3, r1
 8003578:	6513      	str	r3, [r2, #80]	@ 0x50
 800357a:	e003      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800357c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003580:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003590:	f04f 0900 	mov.w	r9, #0
 8003594:	ea58 0309 	orrs.w	r3, r8, r9
 8003598:	d047      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800359a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d82a      	bhi.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80035a4:	a201      	add	r2, pc, #4	@ (adr r2, 80035ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80035a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035aa:	bf00      	nop
 80035ac:	080035c1 	.word	0x080035c1
 80035b0:	080035cf 	.word	0x080035cf
 80035b4:	080035e5 	.word	0x080035e5
 80035b8:	08003603 	.word	0x08003603
 80035bc:	08003603 	.word	0x08003603
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c0:	4b8e      	ldr	r3, [pc, #568]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c4:	4a8d      	ldr	r2, [pc, #564]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035cc:	e01a      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d2:	3308      	adds	r3, #8
 80035d4:	2100      	movs	r1, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f001 fc3c 	bl	8004e54 <RCCEx_PLL2_Config>
 80035dc:	4603      	mov	r3, r0
 80035de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035e2:	e00f      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e8:	3328      	adds	r3, #40	@ 0x28
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 fce3 	bl	8004fb8 <RCCEx_PLL3_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035f8:	e004      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003600:	e000      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003604:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10a      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800360c:	4b7b      	ldr	r3, [pc, #492]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800360e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003610:	f023 0107 	bic.w	r1, r3, #7
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	4a78      	ldr	r2, [pc, #480]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800361c:	430b      	orrs	r3, r1
 800361e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003620:	e003      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003626:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800362a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003632:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003636:	f04f 0b00 	mov.w	fp, #0
 800363a:	ea5a 030b 	orrs.w	r3, sl, fp
 800363e:	d04c      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800364a:	d030      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800364c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003650:	d829      	bhi.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003652:	2bc0      	cmp	r3, #192	@ 0xc0
 8003654:	d02d      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003656:	2bc0      	cmp	r3, #192	@ 0xc0
 8003658:	d825      	bhi.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800365a:	2b80      	cmp	r3, #128	@ 0x80
 800365c:	d018      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800365e:	2b80      	cmp	r3, #128	@ 0x80
 8003660:	d821      	bhi.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003666:	2b40      	cmp	r3, #64	@ 0x40
 8003668:	d007      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800366a:	e01c      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800366c:	4b63      	ldr	r3, [pc, #396]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800366e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003670:	4a62      	ldr	r2, [pc, #392]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003676:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003678:	e01c      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800367a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367e:	3308      	adds	r3, #8
 8003680:	2100      	movs	r1, #0
 8003682:	4618      	mov	r0, r3
 8003684:	f001 fbe6 	bl	8004e54 <RCCEx_PLL2_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800368e:	e011      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003694:	3328      	adds	r3, #40	@ 0x28
 8003696:	2100      	movs	r1, #0
 8003698:	4618      	mov	r0, r3
 800369a:	f001 fc8d 	bl	8004fb8 <RCCEx_PLL3_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036a4:	e006      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036ac:	e002      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036ae:	bf00      	nop
 80036b0:	e000      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80036bc:	4b4f      	ldr	r3, [pc, #316]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80036c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ca:	4a4c      	ldr	r2, [pc, #304]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036cc:	430b      	orrs	r3, r1
 80036ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80036d0:	e003      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80036e6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80036ea:	2300      	movs	r3, #0
 80036ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80036f0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80036f4:	460b      	mov	r3, r1
 80036f6:	4313      	orrs	r3, r2
 80036f8:	d053      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80036fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003702:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003706:	d035      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003708:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800370c:	d82e      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800370e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003712:	d031      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003714:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003718:	d828      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800371a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800371e:	d01a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003720:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003724:	d822      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800372a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800372e:	d007      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003730:	e01c      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003732:	4b32      	ldr	r3, [pc, #200]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003736:	4a31      	ldr	r2, [pc, #196]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800373c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800373e:	e01c      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003744:	3308      	adds	r3, #8
 8003746:	2100      	movs	r1, #0
 8003748:	4618      	mov	r0, r3
 800374a:	f001 fb83 	bl	8004e54 <RCCEx_PLL2_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003754:	e011      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375a:	3328      	adds	r3, #40	@ 0x28
 800375c:	2100      	movs	r1, #0
 800375e:	4618      	mov	r0, r3
 8003760:	f001 fc2a 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800376a:	e006      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003772:	e002      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003774:	bf00      	nop
 8003776:	e000      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800377a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10b      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003782:	4b1e      	ldr	r3, [pc, #120]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003786:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800378a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003792:	4a1a      	ldr	r2, [pc, #104]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003794:	430b      	orrs	r3, r1
 8003796:	6593      	str	r3, [r2, #88]	@ 0x58
 8003798:	e003      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800379e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037aa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80037ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80037b2:	2300      	movs	r3, #0
 80037b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80037b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80037bc:	460b      	mov	r3, r1
 80037be:	4313      	orrs	r3, r2
 80037c0:	d056      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80037c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037ce:	d038      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80037d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037d4:	d831      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037da:	d034      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80037dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037e0:	d82b      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037e6:	d01d      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80037e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037ec:	d825      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d006      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80037f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037f6:	d00a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80037f8:	e01f      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037fa:	bf00      	nop
 80037fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003800:	4ba2      	ldr	r3, [pc, #648]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003804:	4aa1      	ldr	r2, [pc, #644]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800380a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800380c:	e01c      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003812:	3308      	adds	r3, #8
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f001 fb1c 	bl	8004e54 <RCCEx_PLL2_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003822:	e011      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003828:	3328      	adds	r3, #40	@ 0x28
 800382a:	2100      	movs	r1, #0
 800382c:	4618      	mov	r0, r3
 800382e:	f001 fbc3 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003838:	e006      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003840:	e002      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003842:	bf00      	nop
 8003844:	e000      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003846:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10b      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003850:	4b8e      	ldr	r3, [pc, #568]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003854:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003860:	4a8a      	ldr	r2, [pc, #552]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003862:	430b      	orrs	r3, r1
 8003864:	6593      	str	r3, [r2, #88]	@ 0x58
 8003866:	e003      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800386c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800387c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003880:	2300      	movs	r3, #0
 8003882:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003886:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800388a:	460b      	mov	r3, r1
 800388c:	4313      	orrs	r3, r2
 800388e:	d03a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003896:	2b30      	cmp	r3, #48	@ 0x30
 8003898:	d01f      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x416>
 800389a:	2b30      	cmp	r3, #48	@ 0x30
 800389c:	d819      	bhi.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d00c      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	d815      	bhi.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d019      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d111      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ae:	4b77      	ldr	r3, [pc, #476]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b2:	4a76      	ldr	r2, [pc, #472]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038ba:	e011      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c0:	3308      	adds	r3, #8
 80038c2:	2102      	movs	r1, #2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f001 fac5 	bl	8004e54 <RCCEx_PLL2_Config>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038d0:	e006      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038d8:	e002      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038da:	bf00      	nop
 80038dc:	e000      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80038e8:	4b68      	ldr	r3, [pc, #416]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f6:	4a65      	ldr	r2, [pc, #404]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038f8:	430b      	orrs	r3, r1
 80038fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038fc:	e003      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003902:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003912:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003916:	2300      	movs	r3, #0
 8003918:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800391c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003920:	460b      	mov	r3, r1
 8003922:	4313      	orrs	r3, r2
 8003924:	d051      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003930:	d035      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003932:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003936:	d82e      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003938:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800393c:	d031      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800393e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003942:	d828      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003944:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003948:	d01a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800394a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800394e:	d822      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003958:	d007      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800395a:	e01c      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800395c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800395e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003960:	4a4a      	ldr	r2, [pc, #296]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003962:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003966:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003968:	e01c      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396e:	3308      	adds	r3, #8
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f001 fa6e 	bl	8004e54 <RCCEx_PLL2_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800397e:	e011      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003984:	3328      	adds	r3, #40	@ 0x28
 8003986:	2100      	movs	r1, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f001 fb15 	bl	8004fb8 <RCCEx_PLL3_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003994:	e006      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800399c:	e002      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800399e:	bf00      	nop
 80039a0:	e000      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039ac:	4b37      	ldr	r3, [pc, #220]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ba:	4a34      	ldr	r2, [pc, #208]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039bc:	430b      	orrs	r3, r1
 80039be:	6513      	str	r3, [r2, #80]	@ 0x50
 80039c0:	e003      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80039d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039da:	2300      	movs	r3, #0
 80039dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80039e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80039e4:	460b      	mov	r3, r1
 80039e6:	4313      	orrs	r3, r2
 80039e8:	d056      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80039ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039f4:	d033      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80039f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039fa:	d82c      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a00:	d02f      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a06:	d826      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a0c:	d02b      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a12:	d820      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a18:	d012      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a1e:	d81a      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d022      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a28:	d115      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2e:	3308      	adds	r3, #8
 8003a30:	2101      	movs	r1, #1
 8003a32:	4618      	mov	r0, r3
 8003a34:	f001 fa0e 	bl	8004e54 <RCCEx_PLL2_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a3e:	e015      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a44:	3328      	adds	r3, #40	@ 0x28
 8003a46:	2101      	movs	r1, #1
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f001 fab5 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a54:	e00a      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a5c:	e006      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a5e:	bf00      	nop
 8003a60:	e004      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a62:	bf00      	nop
 8003a64:	e002      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a66:	bf00      	nop
 8003a68:	e000      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10d      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a74:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a78:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a82:	4a02      	ldr	r2, [pc, #8]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a88:	e006      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a8a:	bf00      	nop
 8003a8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003aae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	d055      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ac4:	d033      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aca:	d82c      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad0:	d02f      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad6:	d826      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ad8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003adc:	d02b      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003ade:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ae2:	d820      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ae4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ae8:	d012      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003aea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aee:	d81a      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d022      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003af4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003af8:	d115      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afe:	3308      	adds	r3, #8
 8003b00:	2101      	movs	r1, #1
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 f9a6 	bl	8004e54 <RCCEx_PLL2_Config>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b0e:	e015      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b14:	3328      	adds	r3, #40	@ 0x28
 8003b16:	2101      	movs	r1, #1
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f001 fa4d 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b24:	e00a      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b2c:	e006      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b2e:	bf00      	nop
 8003b30:	e004      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b32:	bf00      	nop
 8003b34:	e002      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b36:	bf00      	nop
 8003b38:	e000      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10b      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b44:	4ba3      	ldr	r3, [pc, #652]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b48:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b54:	4a9f      	ldr	r2, [pc, #636]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b56:	430b      	orrs	r3, r1
 8003b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b5a:	e003      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003b70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b74:	2300      	movs	r3, #0
 8003b76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003b7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4313      	orrs	r3, r2
 8003b82:	d037      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b8e:	d00e      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003b90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b94:	d816      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d018      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003b9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b9e:	d111      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba0:	4b8c      	ldr	r3, [pc, #560]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba4:	4a8b      	ldr	r2, [pc, #556]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003baa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bac:	e00f      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f001 f94c 	bl	8004e54 <RCCEx_PLL2_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bc2:	e004      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bca:	e000      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bd6:	4b7f      	ldr	r3, [pc, #508]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bda:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be4:	4a7b      	ldr	r2, [pc, #492]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be6:	430b      	orrs	r3, r1
 8003be8:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bea:	e003      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003c00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c04:	2300      	movs	r3, #0
 8003c06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c0a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4313      	orrs	r3, r2
 8003c12:	d039      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d81c      	bhi.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c24 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c61 	.word	0x08003c61
 8003c28:	08003c35 	.word	0x08003c35
 8003c2c:	08003c43 	.word	0x08003c43
 8003c30:	08003c61 	.word	0x08003c61
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c34:	4b67      	ldr	r3, [pc, #412]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c38:	4a66      	ldr	r2, [pc, #408]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c40:	e00f      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c46:	3308      	adds	r3, #8
 8003c48:	2102      	movs	r1, #2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f001 f902 	bl	8004e54 <RCCEx_PLL2_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c56:	e004      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c5e:	e000      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10a      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c6a:	4b5a      	ldr	r3, [pc, #360]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6e:	f023 0103 	bic.w	r1, r3, #3
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c78:	4a56      	ldr	r2, [pc, #344]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c7a:	430b      	orrs	r3, r1
 8003c7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c7e:	e003      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003c94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c9e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f000 809f 	beq.w	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003caa:	4b4b      	ldr	r3, [pc, #300]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a4a      	ldr	r2, [pc, #296]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cb6:	f7fd fb73 	bl	80013a0 <HAL_GetTick>
 8003cba:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cbe:	e00b      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc0:	f7fd fb6e 	bl	80013a0 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b64      	cmp	r3, #100	@ 0x64
 8003cce:	d903      	bls.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cd6:	e005      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cd8:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0ed      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d179      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003cec:	4b39      	ldr	r3, [pc, #228]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cf8:	4053      	eors	r3, r2
 8003cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d015      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d02:	4b34      	ldr	r3, [pc, #208]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d0a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d0e:	4b31      	ldr	r3, [pc, #196]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d12:	4a30      	ldr	r2, [pc, #192]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d18:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d24:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d26:	4a2b      	ldr	r2, [pc, #172]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d2c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d3a:	d118      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fd fb30 	bl	80013a0 <HAL_GetTick>
 8003d40:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d44:	e00d      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d46:	f7fd fb2b 	bl	80013a0 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d50:	1ad2      	subs	r2, r2, r3
 8003d52:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d903      	bls.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003d60:	e005      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d62:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0eb      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d129      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d86:	d10e      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003d88:	4b12      	ldr	r3, [pc, #72]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d98:	091a      	lsrs	r2, r3, #4
 8003d9a:	4b10      	ldr	r3, [pc, #64]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da0:	430b      	orrs	r3, r1
 8003da2:	6113      	str	r3, [r2, #16]
 8003da4:	e005      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003da6:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003db0:	6113      	str	r3, [r2, #16]
 8003db2:	4b08      	ldr	r3, [pc, #32]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003db4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc2:	4a04      	ldr	r2, [pc, #16]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc8:	e00e      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003dd2:	e009      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003dd4:	58024400 	.word	0x58024400
 8003dd8:	58024800 	.word	0x58024800
 8003ddc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003de4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f002 0301 	and.w	r3, r2, #1
 8003df4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003dfe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f000 8089 	beq.w	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e10:	2b28      	cmp	r3, #40	@ 0x28
 8003e12:	d86b      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e14:	a201      	add	r2, pc, #4	@ (adr r2, 8003e1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003ef5 	.word	0x08003ef5
 8003e20:	08003eed 	.word	0x08003eed
 8003e24:	08003eed 	.word	0x08003eed
 8003e28:	08003eed 	.word	0x08003eed
 8003e2c:	08003eed 	.word	0x08003eed
 8003e30:	08003eed 	.word	0x08003eed
 8003e34:	08003eed 	.word	0x08003eed
 8003e38:	08003eed 	.word	0x08003eed
 8003e3c:	08003ec1 	.word	0x08003ec1
 8003e40:	08003eed 	.word	0x08003eed
 8003e44:	08003eed 	.word	0x08003eed
 8003e48:	08003eed 	.word	0x08003eed
 8003e4c:	08003eed 	.word	0x08003eed
 8003e50:	08003eed 	.word	0x08003eed
 8003e54:	08003eed 	.word	0x08003eed
 8003e58:	08003eed 	.word	0x08003eed
 8003e5c:	08003ed7 	.word	0x08003ed7
 8003e60:	08003eed 	.word	0x08003eed
 8003e64:	08003eed 	.word	0x08003eed
 8003e68:	08003eed 	.word	0x08003eed
 8003e6c:	08003eed 	.word	0x08003eed
 8003e70:	08003eed 	.word	0x08003eed
 8003e74:	08003eed 	.word	0x08003eed
 8003e78:	08003eed 	.word	0x08003eed
 8003e7c:	08003ef5 	.word	0x08003ef5
 8003e80:	08003eed 	.word	0x08003eed
 8003e84:	08003eed 	.word	0x08003eed
 8003e88:	08003eed 	.word	0x08003eed
 8003e8c:	08003eed 	.word	0x08003eed
 8003e90:	08003eed 	.word	0x08003eed
 8003e94:	08003eed 	.word	0x08003eed
 8003e98:	08003eed 	.word	0x08003eed
 8003e9c:	08003ef5 	.word	0x08003ef5
 8003ea0:	08003eed 	.word	0x08003eed
 8003ea4:	08003eed 	.word	0x08003eed
 8003ea8:	08003eed 	.word	0x08003eed
 8003eac:	08003eed 	.word	0x08003eed
 8003eb0:	08003eed 	.word	0x08003eed
 8003eb4:	08003eed 	.word	0x08003eed
 8003eb8:	08003eed 	.word	0x08003eed
 8003ebc:	08003ef5 	.word	0x08003ef5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 ffc3 	bl	8004e54 <RCCEx_PLL2_Config>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ed4:	e00f      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eda:	3328      	adds	r3, #40	@ 0x28
 8003edc:	2101      	movs	r1, #1
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 f86a 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003eea:	e004      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ef2:	e000      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003efe:	4bbf      	ldr	r3, [pc, #764]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f02:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f0c:	4abb      	ldr	r2, [pc, #748]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f12:	e003      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f002 0302 	and.w	r3, r2, #2
 8003f28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f36:	460b      	mov	r3, r1
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	d041      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	d824      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003f46:	a201      	add	r2, pc, #4	@ (adr r2, 8003f4c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4c:	08003f99 	.word	0x08003f99
 8003f50:	08003f65 	.word	0x08003f65
 8003f54:	08003f7b 	.word	0x08003f7b
 8003f58:	08003f99 	.word	0x08003f99
 8003f5c:	08003f99 	.word	0x08003f99
 8003f60:	08003f99 	.word	0x08003f99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f68:	3308      	adds	r3, #8
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 ff71 	bl	8004e54 <RCCEx_PLL2_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f78:	e00f      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7e:	3328      	adds	r3, #40	@ 0x28
 8003f80:	2101      	movs	r1, #1
 8003f82:	4618      	mov	r0, r3
 8003f84:	f001 f818 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f8e:	e004      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f96:	e000      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fa2:	4b96      	ldr	r3, [pc, #600]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa6:	f023 0107 	bic.w	r1, r3, #7
 8003faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fb0:	4a92      	ldr	r2, [pc, #584]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fb2:	430b      	orrs	r3, r1
 8003fb4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fb6:	e003      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc8:	f002 0304 	and.w	r3, r2, #4
 8003fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fd6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	d044      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fe8:	2b05      	cmp	r3, #5
 8003fea:	d825      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003fec:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	08004041 	.word	0x08004041
 8003ff8:	0800400d 	.word	0x0800400d
 8003ffc:	08004023 	.word	0x08004023
 8004000:	08004041 	.word	0x08004041
 8004004:	08004041 	.word	0x08004041
 8004008:	08004041 	.word	0x08004041
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800400c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004010:	3308      	adds	r3, #8
 8004012:	2101      	movs	r1, #1
 8004014:	4618      	mov	r0, r3
 8004016:	f000 ff1d 	bl	8004e54 <RCCEx_PLL2_Config>
 800401a:	4603      	mov	r3, r0
 800401c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004020:	e00f      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004026:	3328      	adds	r3, #40	@ 0x28
 8004028:	2101      	movs	r1, #1
 800402a:	4618      	mov	r0, r3
 800402c:	f000 ffc4 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004036:	e004      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800403e:	e000      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10b      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800404a:	4b6c      	ldr	r3, [pc, #432]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800404c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404e:	f023 0107 	bic.w	r1, r3, #7
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800405a:	4a68      	ldr	r2, [pc, #416]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800405c:	430b      	orrs	r3, r1
 800405e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004060:	e003      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	f002 0320 	and.w	r3, r2, #32
 8004076:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800407a:	2300      	movs	r3, #0
 800407c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004080:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004084:	460b      	mov	r3, r1
 8004086:	4313      	orrs	r3, r2
 8004088:	d055      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800408a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004092:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004096:	d033      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004098:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800409c:	d82c      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800409e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a2:	d02f      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80040a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a8:	d826      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040ae:	d02b      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80040b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040b4:	d820      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040ba:	d012      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80040bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040c0:	d81a      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d022      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80040c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040ca:	d115      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d0:	3308      	adds	r3, #8
 80040d2:	2100      	movs	r1, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 febd 	bl	8004e54 <RCCEx_PLL2_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040e0:	e015      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e6:	3328      	adds	r3, #40	@ 0x28
 80040e8:	2102      	movs	r1, #2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 ff64 	bl	8004fb8 <RCCEx_PLL3_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040f6:	e00a      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040fe:	e006      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004100:	bf00      	nop
 8004102:	e004      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004104:	bf00      	nop
 8004106:	e002      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004108:	bf00      	nop
 800410a:	e000      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800410c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800410e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10b      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004116:	4b39      	ldr	r3, [pc, #228]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800411a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800411e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004126:	4a35      	ldr	r2, [pc, #212]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004128:	430b      	orrs	r3, r1
 800412a:	6553      	str	r3, [r2, #84]	@ 0x54
 800412c:	e003      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004132:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004146:	2300      	movs	r3, #0
 8004148:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800414c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004150:	460b      	mov	r3, r1
 8004152:	4313      	orrs	r3, r2
 8004154:	d058      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800415e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004162:	d033      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004164:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004168:	d82c      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800416a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800416e:	d02f      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004174:	d826      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004176:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800417a:	d02b      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800417c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004180:	d820      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004182:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004186:	d012      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800418c:	d81a      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800418e:	2b00      	cmp	r3, #0
 8004190:	d022      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004196:	d115      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419c:	3308      	adds	r3, #8
 800419e:	2100      	movs	r1, #0
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fe57 	bl	8004e54 <RCCEx_PLL2_Config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041ac:	e015      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b2:	3328      	adds	r3, #40	@ 0x28
 80041b4:	2102      	movs	r1, #2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fefe 	bl	8004fb8 <RCCEx_PLL3_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041c2:	e00a      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041ca:	e006      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041cc:	bf00      	nop
 80041ce:	e004      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041d0:	bf00      	nop
 80041d2:	e002      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041d4:	bf00      	nop
 80041d6:	e000      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10e      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041e2:	4b06      	ldr	r3, [pc, #24]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041f2:	4a02      	ldr	r2, [pc, #8]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041f4:	430b      	orrs	r3, r1
 80041f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041f8:	e006      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80041fa:	bf00      	nop
 80041fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004200:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004204:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004214:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004218:	2300      	movs	r3, #0
 800421a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800421e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004222:	460b      	mov	r3, r1
 8004224:	4313      	orrs	r3, r2
 8004226:	d055      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004230:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004234:	d033      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004236:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800423a:	d82c      	bhi.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800423c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004240:	d02f      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004246:	d826      	bhi.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004248:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800424c:	d02b      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800424e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004252:	d820      	bhi.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004254:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004258:	d012      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800425a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800425e:	d81a      	bhi.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d022      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004264:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004268:	d115      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800426a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426e:	3308      	adds	r3, #8
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fdee 	bl	8004e54 <RCCEx_PLL2_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800427e:	e015      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004284:	3328      	adds	r3, #40	@ 0x28
 8004286:	2102      	movs	r1, #2
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fe95 	bl	8004fb8 <RCCEx_PLL3_Config>
 800428e:	4603      	mov	r3, r0
 8004290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004294:	e00a      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800429c:	e006      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800429e:	bf00      	nop
 80042a0:	e004      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042a2:	bf00      	nop
 80042a4:	e002      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042a6:	bf00      	nop
 80042a8:	e000      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10b      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042b4:	4ba1      	ldr	r3, [pc, #644]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80042bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042c4:	4a9d      	ldr	r2, [pc, #628]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042c6:	430b      	orrs	r3, r1
 80042c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80042ca:	e003      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042dc:	f002 0308 	and.w	r3, r2, #8
 80042e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042e4:	2300      	movs	r3, #0
 80042e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80042ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80042ee:	460b      	mov	r3, r1
 80042f0:	4313      	orrs	r3, r2
 80042f2:	d01e      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80042f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004300:	d10c      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004306:	3328      	adds	r3, #40	@ 0x28
 8004308:	2102      	movs	r1, #2
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fe54 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800431c:	4b87      	ldr	r3, [pc, #540]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800431e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004320:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004328:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800432c:	4a83      	ldr	r2, [pc, #524]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800432e:	430b      	orrs	r3, r1
 8004330:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	f002 0310 	and.w	r3, r2, #16
 800433e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004342:	2300      	movs	r3, #0
 8004344:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004348:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800434c:	460b      	mov	r3, r1
 800434e:	4313      	orrs	r3, r2
 8004350:	d01e      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004356:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800435a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800435e:	d10c      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004364:	3328      	adds	r3, #40	@ 0x28
 8004366:	2102      	movs	r1, #2
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fe25 	bl	8004fb8 <RCCEx_PLL3_Config>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800437a:	4b70      	ldr	r3, [pc, #448]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800437c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004386:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800438a:	4a6c      	ldr	r2, [pc, #432]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800438c:	430b      	orrs	r3, r1
 800438e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800439c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043a0:	2300      	movs	r3, #0
 80043a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80043aa:	460b      	mov	r3, r1
 80043ac:	4313      	orrs	r3, r2
 80043ae:	d03e      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043bc:	d022      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80043be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043c2:	d81b      	bhi.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043cc:	d00b      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80043ce:	e015      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d4:	3308      	adds	r3, #8
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fd3b 	bl	8004e54 <RCCEx_PLL2_Config>
 80043de:	4603      	mov	r3, r0
 80043e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043e4:	e00f      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ea:	3328      	adds	r3, #40	@ 0x28
 80043ec:	2102      	movs	r1, #2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fde2 	bl	8004fb8 <RCCEx_PLL3_Config>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043fa:	e004      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004402:	e000      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10b      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800440e:	4b4b      	ldr	r3, [pc, #300]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004412:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800441e:	4a47      	ldr	r2, [pc, #284]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004420:	430b      	orrs	r3, r1
 8004422:	6593      	str	r3, [r2, #88]	@ 0x58
 8004424:	e003      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800442a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800442e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004436:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800443a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800443c:	2300      	movs	r3, #0
 800443e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004440:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004444:	460b      	mov	r3, r1
 8004446:	4313      	orrs	r3, r2
 8004448:	d03b      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800444a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004452:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004456:	d01f      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004458:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800445c:	d818      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800445e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004462:	d003      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004464:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004468:	d007      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800446a:	e011      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446c:	4b33      	ldr	r3, [pc, #204]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800446e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004470:	4a32      	ldr	r2, [pc, #200]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004476:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004478:	e00f      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447e:	3328      	adds	r3, #40	@ 0x28
 8004480:	2101      	movs	r1, #1
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fd98 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800448e:	e004      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004496:	e000      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800449a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10b      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044a2:	4b26      	ldr	r3, [pc, #152]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b2:	4a22      	ldr	r2, [pc, #136]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044b4:	430b      	orrs	r3, r1
 80044b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80044b8:	e003      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80044ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80044d0:	2300      	movs	r3, #0
 80044d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80044d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80044d8:	460b      	mov	r3, r1
 80044da:	4313      	orrs	r3, r2
 80044dc:	d034      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80044e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ec:	d007      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80044ee:	e011      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f0:	4b12      	ldr	r3, [pc, #72]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f4:	4a11      	ldr	r2, [pc, #68]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044fc:	e00e      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004502:	3308      	adds	r3, #8
 8004504:	2102      	movs	r1, #2
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fca4 	bl	8004e54 <RCCEx_PLL2_Config>
 800450c:	4603      	mov	r3, r0
 800450e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004512:	e003      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800451a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800451c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10d      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004524:	4b05      	ldr	r3, [pc, #20]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004528:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800452c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004532:	4a02      	ldr	r2, [pc, #8]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004534:	430b      	orrs	r3, r1
 8004536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004538:	e006      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800453a:	bf00      	nop
 800453c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004540:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004544:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004550:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004554:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004556:	2300      	movs	r3, #0
 8004558:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800455a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800455e:	460b      	mov	r3, r1
 8004560:	4313      	orrs	r3, r2
 8004562:	d00c      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004568:	3328      	adds	r3, #40	@ 0x28
 800456a:	2102      	movs	r1, #2
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fd23 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800458a:	663b      	str	r3, [r7, #96]	@ 0x60
 800458c:	2300      	movs	r3, #0
 800458e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004590:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004594:	460b      	mov	r3, r1
 8004596:	4313      	orrs	r3, r2
 8004598:	d038      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045a6:	d018      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80045a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045ac:	d811      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045b2:	d014      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80045b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045b8:	d80b      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d011      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80045be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045c2:	d106      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c4:	4bc3      	ldr	r3, [pc, #780]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c8:	4ac2      	ldr	r2, [pc, #776]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80045d0:	e008      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045d8:	e004      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045da:	bf00      	nop
 80045dc:	e002      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045de:	bf00      	nop
 80045e0:	e000      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045ec:	4bb9      	ldr	r3, [pc, #740]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045fc:	4ab5      	ldr	r2, [pc, #724]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045fe:	430b      	orrs	r3, r1
 8004600:	6553      	str	r3, [r2, #84]	@ 0x54
 8004602:	e003      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004604:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004608:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800460c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004618:	65bb      	str	r3, [r7, #88]	@ 0x58
 800461a:	2300      	movs	r3, #0
 800461c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800461e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004622:	460b      	mov	r3, r1
 8004624:	4313      	orrs	r3, r2
 8004626:	d009      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004628:	4baa      	ldr	r3, [pc, #680]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800462a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800462c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004636:	4aa7      	ldr	r2, [pc, #668]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004638:	430b      	orrs	r3, r1
 800463a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800463c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004648:	653b      	str	r3, [r7, #80]	@ 0x50
 800464a:	2300      	movs	r3, #0
 800464c:	657b      	str	r3, [r7, #84]	@ 0x54
 800464e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004652:	460b      	mov	r3, r1
 8004654:	4313      	orrs	r3, r2
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004658:	4b9e      	ldr	r3, [pc, #632]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004664:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004668:	4a9a      	ldr	r2, [pc, #616]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800466a:	430b      	orrs	r3, r1
 800466c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800467a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800467c:	2300      	movs	r3, #0
 800467e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004680:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004684:	460b      	mov	r3, r1
 8004686:	4313      	orrs	r3, r2
 8004688:	d009      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800468a:	4b92      	ldr	r3, [pc, #584]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800468c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800468e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004698:	4a8e      	ldr	r2, [pc, #568]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800469a:	430b      	orrs	r3, r1
 800469c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80046aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80046ac:	2300      	movs	r3, #0
 80046ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80046b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80046b4:	460b      	mov	r3, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d00e      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046ba:	4b86      	ldr	r3, [pc, #536]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	4a85      	ldr	r2, [pc, #532]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046c4:	6113      	str	r3, [r2, #16]
 80046c6:	4b83      	ldr	r3, [pc, #524]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c8:	6919      	ldr	r1, [r3, #16]
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80046d2:	4a80      	ldr	r2, [pc, #512]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046d4:	430b      	orrs	r3, r1
 80046d6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80046e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046e6:	2300      	movs	r3, #0
 80046e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046ea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80046ee:	460b      	mov	r3, r1
 80046f0:	4313      	orrs	r3, r2
 80046f2:	d009      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046f4:	4b77      	ldr	r3, [pc, #476]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046f8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80046fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004702:	4a74      	ldr	r2, [pc, #464]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004704:	430b      	orrs	r3, r1
 8004706:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004714:	633b      	str	r3, [r7, #48]	@ 0x30
 8004716:	2300      	movs	r3, #0
 8004718:	637b      	str	r3, [r7, #52]	@ 0x34
 800471a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800471e:	460b      	mov	r3, r1
 8004720:	4313      	orrs	r3, r2
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004724:	4b6b      	ldr	r3, [pc, #428]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004728:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004730:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004734:	4a67      	ldr	r2, [pc, #412]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004736:	430b      	orrs	r3, r1
 8004738:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800473a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004742:	2100      	movs	r1, #0
 8004744:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800474c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004750:	460b      	mov	r3, r1
 8004752:	4313      	orrs	r3, r2
 8004754:	d011      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475a:	3308      	adds	r3, #8
 800475c:	2100      	movs	r1, #0
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fb78 	bl	8004e54 <RCCEx_PLL2_Config>
 8004764:	4603      	mov	r3, r0
 8004766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800476a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004776:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800477a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	2100      	movs	r1, #0
 8004784:	6239      	str	r1, [r7, #32]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	627b      	str	r3, [r7, #36]	@ 0x24
 800478c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004790:	460b      	mov	r3, r1
 8004792:	4313      	orrs	r3, r2
 8004794:	d011      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479a:	3308      	adds	r3, #8
 800479c:	2101      	movs	r1, #1
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fb58 	bl	8004e54 <RCCEx_PLL2_Config>
 80047a4:	4603      	mov	r3, r0
 80047a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80047ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	2100      	movs	r1, #0
 80047c4:	61b9      	str	r1, [r7, #24]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	61fb      	str	r3, [r7, #28]
 80047cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80047d0:	460b      	mov	r3, r1
 80047d2:	4313      	orrs	r3, r2
 80047d4:	d011      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047da:	3308      	adds	r3, #8
 80047dc:	2102      	movs	r1, #2
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fb38 	bl	8004e54 <RCCEx_PLL2_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	2100      	movs	r1, #0
 8004804:	6139      	str	r1, [r7, #16]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004810:	460b      	mov	r3, r1
 8004812:	4313      	orrs	r3, r2
 8004814:	d011      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481a:	3328      	adds	r3, #40	@ 0x28
 800481c:	2100      	movs	r1, #0
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fbca 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800482a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	2100      	movs	r1, #0
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	f003 0310 	and.w	r3, r3, #16
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004850:	460b      	mov	r3, r1
 8004852:	4313      	orrs	r3, r2
 8004854:	d011      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485a:	3328      	adds	r3, #40	@ 0x28
 800485c:	2101      	movs	r1, #1
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fbaa 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800486a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004876:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800487a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	2100      	movs	r1, #0
 8004884:	6039      	str	r1, [r7, #0]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	607b      	str	r3, [r7, #4]
 800488c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004890:	460b      	mov	r3, r1
 8004892:	4313      	orrs	r3, r2
 8004894:	d011      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489a:	3328      	adds	r3, #40	@ 0x28
 800489c:	2102      	movs	r1, #2
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fb8a 	bl	8004fb8 <RCCEx_PLL3_Config>
 80048a4:	4603      	mov	r3, r0
 80048a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80048ba:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e000      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80048ce:	46bd      	mov	sp, r7
 80048d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048d4:	58024400 	.word	0x58024400

080048d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80048dc:	f7fe fd96 	bl	800340c <HAL_RCC_GetHCLKFreq>
 80048e0:	4602      	mov	r2, r0
 80048e2:	4b06      	ldr	r3, [pc, #24]	@ (80048fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	4904      	ldr	r1, [pc, #16]	@ (8004900 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80048ee:	5ccb      	ldrb	r3, [r1, r3]
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	58024400 	.word	0x58024400
 8004900:	08007bc0 	.word	0x08007bc0

08004904 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004904:	b480      	push	{r7}
 8004906:	b089      	sub	sp, #36	@ 0x24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800490c:	4ba1      	ldr	r3, [pc, #644]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800490e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004916:	4b9f      	ldr	r3, [pc, #636]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491a:	0b1b      	lsrs	r3, r3, #12
 800491c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004920:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004922:	4b9c      	ldr	r3, [pc, #624]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004926:	091b      	lsrs	r3, r3, #4
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800492e:	4b99      	ldr	r3, [pc, #612]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004932:	08db      	lsrs	r3, r3, #3
 8004934:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	fb02 f303 	mul.w	r3, r2, r3
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004946:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 8111 	beq.w	8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b02      	cmp	r3, #2
 8004956:	f000 8083 	beq.w	8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b02      	cmp	r3, #2
 800495e:	f200 80a1 	bhi.w	8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d056      	beq.n	8004a1c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800496e:	e099      	b.n	8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004970:	4b88      	ldr	r3, [pc, #544]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b00      	cmp	r3, #0
 800497a:	d02d      	beq.n	80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800497c:	4b85      	ldr	r3, [pc, #532]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	08db      	lsrs	r3, r3, #3
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	4a84      	ldr	r2, [pc, #528]	@ (8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004988:	fa22 f303 	lsr.w	r3, r2, r3
 800498c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	ee07 3a90 	vmov	s15, r3
 8004994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049a6:	4b7b      	ldr	r3, [pc, #492]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049d6:	e087      	b.n	8004ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80049e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ea:	4b6a      	ldr	r3, [pc, #424]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80049fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a1a:	e065      	b.n	8004ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a26:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a2e:	4b59      	ldr	r3, [pc, #356]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a42:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a5e:	e043      	b.n	8004ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a72:	4b48      	ldr	r3, [pc, #288]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a86:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aa2:	e021      	b.n	8004ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab6:	4b37      	ldr	r3, [pc, #220]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ae6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aec:	0a5b      	lsrs	r3, r3, #9
 8004aee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004afe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b02:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b0e:	ee17 2a90 	vmov	r2, s15
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b16:	4b1f      	ldr	r3, [pc, #124]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1a:	0c1b      	lsrs	r3, r3, #16
 8004b1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b20:	ee07 3a90 	vmov	s15, r3
 8004b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b30:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b3c:	ee17 2a90 	vmov	r2, s15
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b44:	4b13      	ldr	r3, [pc, #76]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b48:	0e1b      	lsrs	r3, r3, #24
 8004b4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b6a:	ee17 2a90 	vmov	r2, s15
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b72:	e008      	b.n	8004b86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	609a      	str	r2, [r3, #8]
}
 8004b86:	bf00      	nop
 8004b88:	3724      	adds	r7, #36	@ 0x24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	58024400 	.word	0x58024400
 8004b98:	03d09000 	.word	0x03d09000
 8004b9c:	46000000 	.word	0x46000000
 8004ba0:	4c742400 	.word	0x4c742400
 8004ba4:	4a742400 	.word	0x4a742400
 8004ba8:	4af42400 	.word	0x4af42400

08004bac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b089      	sub	sp, #36	@ 0x24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bb4:	4ba1      	ldr	r3, [pc, #644]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb8:	f003 0303 	and.w	r3, r3, #3
 8004bbc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004bbe:	4b9f      	ldr	r3, [pc, #636]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc2:	0d1b      	lsrs	r3, r3, #20
 8004bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bc8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004bca:	4b9c      	ldr	r3, [pc, #624]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bce:	0a1b      	lsrs	r3, r3, #8
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004bd6:	4b99      	ldr	r3, [pc, #612]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bda:	08db      	lsrs	r3, r3, #3
 8004bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	fb02 f303 	mul.w	r3, r2, r3
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 8111 	beq.w	8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	f000 8083 	beq.w	8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	f200 80a1 	bhi.w	8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d056      	beq.n	8004cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c16:	e099      	b.n	8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c18:	4b88      	ldr	r3, [pc, #544]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d02d      	beq.n	8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c24:	4b85      	ldr	r3, [pc, #532]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	08db      	lsrs	r3, r3, #3
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	4a84      	ldr	r2, [pc, #528]	@ (8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
 8004c34:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	ee07 3a90 	vmov	s15, r3
 8004c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c4e:	4b7b      	ldr	r3, [pc, #492]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c56:	ee07 3a90 	vmov	s15, r3
 8004c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c7e:	e087      	b.n	8004d90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c92:	4b6a      	ldr	r3, [pc, #424]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ca6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cc2:	e065      	b.n	8004d90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd6:	4b59      	ldr	r3, [pc, #356]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cde:	ee07 3a90 	vmov	s15, r3
 8004ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d06:	e043      	b.n	8004d90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d1a:	4b48      	ldr	r3, [pc, #288]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d4a:	e021      	b.n	8004d90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d5e:	4b37      	ldr	r3, [pc, #220]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004d90:	4b2a      	ldr	r3, [pc, #168]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d94:	0a5b      	lsrs	r3, r3, #9
 8004d96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004da6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004daa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004db6:	ee17 2a90 	vmov	r2, s15
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	0c1b      	lsrs	r3, r3, #16
 8004dc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dc8:	ee07 3a90 	vmov	s15, r3
 8004dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de4:	ee17 2a90 	vmov	r2, s15
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004dec:	4b13      	ldr	r3, [pc, #76]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df0:	0e1b      	lsrs	r3, r3, #24
 8004df2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e12:	ee17 2a90 	vmov	r2, s15
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e1a:	e008      	b.n	8004e2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	609a      	str	r2, [r3, #8]
}
 8004e2e:	bf00      	nop
 8004e30:	3724      	adds	r7, #36	@ 0x24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	58024400 	.word	0x58024400
 8004e40:	03d09000 	.word	0x03d09000
 8004e44:	46000000 	.word	0x46000000
 8004e48:	4c742400 	.word	0x4c742400
 8004e4c:	4a742400 	.word	0x4a742400
 8004e50:	4af42400 	.word	0x4af42400

08004e54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e62:	4b53      	ldr	r3, [pc, #332]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d101      	bne.n	8004e72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e099      	b.n	8004fa6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e72:	4b4f      	ldr	r3, [pc, #316]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a4e      	ldr	r2, [pc, #312]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004e78:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7e:	f7fc fa8f 	bl	80013a0 <HAL_GetTick>
 8004e82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e84:	e008      	b.n	8004e98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e86:	f7fc fa8b 	bl	80013a0 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e086      	b.n	8004fa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e98:	4b45      	ldr	r3, [pc, #276]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1f0      	bne.n	8004e86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ea4:	4b42      	ldr	r3, [pc, #264]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	031b      	lsls	r3, r3, #12
 8004eb2:	493f      	ldr	r1, [pc, #252]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	025b      	lsls	r3, r3, #9
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	041b      	lsls	r3, r3, #16
 8004ed6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	061b      	lsls	r3, r3, #24
 8004ee4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ee8:	4931      	ldr	r1, [pc, #196]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004eee:	4b30      	ldr	r3, [pc, #192]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	492d      	ldr	r1, [pc, #180]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f00:	4b2b      	ldr	r3, [pc, #172]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f04:	f023 0220 	bic.w	r2, r3, #32
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	4928      	ldr	r1, [pc, #160]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f12:	4b27      	ldr	r3, [pc, #156]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f16:	4a26      	ldr	r2, [pc, #152]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f18:	f023 0310 	bic.w	r3, r3, #16
 8004f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f1e:	4b24      	ldr	r3, [pc, #144]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f22:	4b24      	ldr	r3, [pc, #144]	@ (8004fb4 <RCCEx_PLL2_Config+0x160>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	69d2      	ldr	r2, [r2, #28]
 8004f2a:	00d2      	lsls	r2, r2, #3
 8004f2c:	4920      	ldr	r1, [pc, #128]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f32:	4b1f      	ldr	r3, [pc, #124]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f36:	4a1e      	ldr	r2, [pc, #120]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f38:	f043 0310 	orr.w	r3, r3, #16
 8004f3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d106      	bne.n	8004f52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f44:	4b1a      	ldr	r3, [pc, #104]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f48:	4a19      	ldr	r2, [pc, #100]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f50:	e00f      	b.n	8004f72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d106      	bne.n	8004f66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f58:	4b15      	ldr	r3, [pc, #84]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5c:	4a14      	ldr	r2, [pc, #80]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f64:	e005      	b.n	8004f72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f66:	4b12      	ldr	r3, [pc, #72]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6a:	4a11      	ldr	r2, [pc, #68]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f72:	4b0f      	ldr	r3, [pc, #60]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a0e      	ldr	r2, [pc, #56]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7e:	f7fc fa0f 	bl	80013a0 <HAL_GetTick>
 8004f82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f84:	e008      	b.n	8004f98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f86:	f7fc fa0b 	bl	80013a0 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e006      	b.n	8004fa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f98:	4b05      	ldr	r3, [pc, #20]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f0      	beq.n	8004f86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	58024400 	.word	0x58024400
 8004fb4:	ffff0007 	.word	0xffff0007

08004fb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fc6:	4b53      	ldr	r3, [pc, #332]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d101      	bne.n	8004fd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e099      	b.n	800510a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004fd6:	4b4f      	ldr	r3, [pc, #316]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a4e      	ldr	r2, [pc, #312]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8004fdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe2:	f7fc f9dd 	bl	80013a0 <HAL_GetTick>
 8004fe6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fe8:	e008      	b.n	8004ffc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fea:	f7fc f9d9 	bl	80013a0 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e086      	b.n	800510a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ffc:	4b45      	ldr	r3, [pc, #276]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1f0      	bne.n	8004fea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005008:	4b42      	ldr	r3, [pc, #264]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 800500a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	051b      	lsls	r3, r3, #20
 8005016:	493f      	ldr	r1, [pc, #252]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005018:	4313      	orrs	r3, r2
 800501a:	628b      	str	r3, [r1, #40]	@ 0x28
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	3b01      	subs	r3, #1
 8005022:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	3b01      	subs	r3, #1
 800502c:	025b      	lsls	r3, r3, #9
 800502e:	b29b      	uxth	r3, r3
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	3b01      	subs	r3, #1
 8005038:	041b      	lsls	r3, r3, #16
 800503a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	3b01      	subs	r3, #1
 8005046:	061b      	lsls	r3, r3, #24
 8005048:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800504c:	4931      	ldr	r1, [pc, #196]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 800504e:	4313      	orrs	r3, r2
 8005050:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005052:	4b30      	ldr	r3, [pc, #192]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005056:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	492d      	ldr	r1, [pc, #180]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005060:	4313      	orrs	r3, r2
 8005062:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005064:	4b2b      	ldr	r3, [pc, #172]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005068:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	4928      	ldr	r1, [pc, #160]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005072:	4313      	orrs	r3, r2
 8005074:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005076:	4b27      	ldr	r3, [pc, #156]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507a:	4a26      	ldr	r2, [pc, #152]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 800507c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005080:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005082:	4b24      	ldr	r3, [pc, #144]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005084:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005086:	4b24      	ldr	r3, [pc, #144]	@ (8005118 <RCCEx_PLL3_Config+0x160>)
 8005088:	4013      	ands	r3, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	69d2      	ldr	r2, [r2, #28]
 800508e:	00d2      	lsls	r2, r2, #3
 8005090:	4920      	ldr	r1, [pc, #128]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005092:	4313      	orrs	r3, r2
 8005094:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005096:	4b1f      	ldr	r3, [pc, #124]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	4a1e      	ldr	r2, [pc, #120]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 800509c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d106      	bne.n	80050b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ac:	4a19      	ldr	r2, [pc, #100]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050b4:	e00f      	b.n	80050d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d106      	bne.n	80050ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050bc:	4b15      	ldr	r3, [pc, #84]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c0:	4a14      	ldr	r2, [pc, #80]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050c8:	e005      	b.n	80050d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050ca:	4b12      	ldr	r3, [pc, #72]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ce:	4a11      	ldr	r2, [pc, #68]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a0e      	ldr	r2, [pc, #56]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e2:	f7fc f95d 	bl	80013a0 <HAL_GetTick>
 80050e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050e8:	e008      	b.n	80050fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050ea:	f7fc f959 	bl	80013a0 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e006      	b.n	800510a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050fc:	4b05      	ldr	r3, [pc, #20]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0f0      	beq.n	80050ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	58024400 	.word	0x58024400
 8005118:	ffff0007 	.word	0xffff0007

0800511c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e049      	b.n	80051c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fb fe82 	bl	8000e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	4619      	mov	r1, r3
 800515a:	4610      	mov	r0, r2
 800515c:	f000 fc46 	bl	80059ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b082      	sub	sp, #8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e049      	b.n	8005270 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d106      	bne.n	80051f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f841 	bl	8005278 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3304      	adds	r3, #4
 8005206:	4619      	mov	r1, r3
 8005208:	4610      	mov	r0, r2
 800520a:	f000 fbef 	bl	80059ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d109      	bne.n	80052b0 <HAL_TIM_PWM_Start+0x24>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	bf14      	ite	ne
 80052a8:	2301      	movne	r3, #1
 80052aa:	2300      	moveq	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	e03c      	b.n	800532a <HAL_TIM_PWM_Start+0x9e>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d109      	bne.n	80052ca <HAL_TIM_PWM_Start+0x3e>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b01      	cmp	r3, #1
 80052c0:	bf14      	ite	ne
 80052c2:	2301      	movne	r3, #1
 80052c4:	2300      	moveq	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	e02f      	b.n	800532a <HAL_TIM_PWM_Start+0x9e>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d109      	bne.n	80052e4 <HAL_TIM_PWM_Start+0x58>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	bf14      	ite	ne
 80052dc:	2301      	movne	r3, #1
 80052de:	2300      	moveq	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	e022      	b.n	800532a <HAL_TIM_PWM_Start+0x9e>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b0c      	cmp	r3, #12
 80052e8:	d109      	bne.n	80052fe <HAL_TIM_PWM_Start+0x72>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	bf14      	ite	ne
 80052f6:	2301      	movne	r3, #1
 80052f8:	2300      	moveq	r3, #0
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	e015      	b.n	800532a <HAL_TIM_PWM_Start+0x9e>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b10      	cmp	r3, #16
 8005302:	d109      	bne.n	8005318 <HAL_TIM_PWM_Start+0x8c>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b01      	cmp	r3, #1
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	e008      	b.n	800532a <HAL_TIM_PWM_Start+0x9e>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b01      	cmp	r3, #1
 8005322:	bf14      	ite	ne
 8005324:	2301      	movne	r3, #1
 8005326:	2300      	moveq	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e0a1      	b.n	8005476 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d104      	bne.n	8005342 <HAL_TIM_PWM_Start+0xb6>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005340:	e023      	b.n	800538a <HAL_TIM_PWM_Start+0xfe>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b04      	cmp	r3, #4
 8005346:	d104      	bne.n	8005352 <HAL_TIM_PWM_Start+0xc6>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005350:	e01b      	b.n	800538a <HAL_TIM_PWM_Start+0xfe>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b08      	cmp	r3, #8
 8005356:	d104      	bne.n	8005362 <HAL_TIM_PWM_Start+0xd6>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005360:	e013      	b.n	800538a <HAL_TIM_PWM_Start+0xfe>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b0c      	cmp	r3, #12
 8005366:	d104      	bne.n	8005372 <HAL_TIM_PWM_Start+0xe6>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005370:	e00b      	b.n	800538a <HAL_TIM_PWM_Start+0xfe>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b10      	cmp	r3, #16
 8005376:	d104      	bne.n	8005382 <HAL_TIM_PWM_Start+0xf6>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005380:	e003      	b.n	800538a <HAL_TIM_PWM_Start+0xfe>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2202      	movs	r2, #2
 8005386:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2201      	movs	r2, #1
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	4618      	mov	r0, r3
 8005394:	f000 ff44 	bl	8006220 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a38      	ldr	r2, [pc, #224]	@ (8005480 <HAL_TIM_PWM_Start+0x1f4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d013      	beq.n	80053ca <HAL_TIM_PWM_Start+0x13e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a37      	ldr	r2, [pc, #220]	@ (8005484 <HAL_TIM_PWM_Start+0x1f8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00e      	beq.n	80053ca <HAL_TIM_PWM_Start+0x13e>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a35      	ldr	r2, [pc, #212]	@ (8005488 <HAL_TIM_PWM_Start+0x1fc>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d009      	beq.n	80053ca <HAL_TIM_PWM_Start+0x13e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a34      	ldr	r2, [pc, #208]	@ (800548c <HAL_TIM_PWM_Start+0x200>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d004      	beq.n	80053ca <HAL_TIM_PWM_Start+0x13e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a32      	ldr	r2, [pc, #200]	@ (8005490 <HAL_TIM_PWM_Start+0x204>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d101      	bne.n	80053ce <HAL_TIM_PWM_Start+0x142>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <HAL_TIM_PWM_Start+0x144>
 80053ce:	2300      	movs	r3, #0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a25      	ldr	r2, [pc, #148]	@ (8005480 <HAL_TIM_PWM_Start+0x1f4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d022      	beq.n	8005434 <HAL_TIM_PWM_Start+0x1a8>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f6:	d01d      	beq.n	8005434 <HAL_TIM_PWM_Start+0x1a8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a25      	ldr	r2, [pc, #148]	@ (8005494 <HAL_TIM_PWM_Start+0x208>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d018      	beq.n	8005434 <HAL_TIM_PWM_Start+0x1a8>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a24      	ldr	r2, [pc, #144]	@ (8005498 <HAL_TIM_PWM_Start+0x20c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d013      	beq.n	8005434 <HAL_TIM_PWM_Start+0x1a8>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a22      	ldr	r2, [pc, #136]	@ (800549c <HAL_TIM_PWM_Start+0x210>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00e      	beq.n	8005434 <HAL_TIM_PWM_Start+0x1a8>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1a      	ldr	r2, [pc, #104]	@ (8005484 <HAL_TIM_PWM_Start+0x1f8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d009      	beq.n	8005434 <HAL_TIM_PWM_Start+0x1a8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1e      	ldr	r2, [pc, #120]	@ (80054a0 <HAL_TIM_PWM_Start+0x214>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_TIM_PWM_Start+0x1a8>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a16      	ldr	r2, [pc, #88]	@ (8005488 <HAL_TIM_PWM_Start+0x1fc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d115      	bne.n	8005460 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	4b1a      	ldr	r3, [pc, #104]	@ (80054a4 <HAL_TIM_PWM_Start+0x218>)
 800543c:	4013      	ands	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b06      	cmp	r3, #6
 8005444:	d015      	beq.n	8005472 <HAL_TIM_PWM_Start+0x1e6>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800544c:	d011      	beq.n	8005472 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0201 	orr.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545e:	e008      	b.n	8005472 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	e000      	b.n	8005474 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005472:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40010000 	.word	0x40010000
 8005484:	40010400 	.word	0x40010400
 8005488:	40014000 	.word	0x40014000
 800548c:	40014400 	.word	0x40014400
 8005490:	40014800 	.word	0x40014800
 8005494:	40000400 	.word	0x40000400
 8005498:	40000800 	.word	0x40000800
 800549c:	40000c00 	.word	0x40000c00
 80054a0:	40001800 	.word	0x40001800
 80054a4:	00010007 	.word	0x00010007

080054a8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2200      	movs	r2, #0
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 feb0 	bl	8006220 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a3e      	ldr	r2, [pc, #248]	@ (80055c0 <HAL_TIM_PWM_Stop+0x118>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <HAL_TIM_PWM_Stop+0x4a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a3d      	ldr	r2, [pc, #244]	@ (80055c4 <HAL_TIM_PWM_Stop+0x11c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00e      	beq.n	80054f2 <HAL_TIM_PWM_Stop+0x4a>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a3b      	ldr	r2, [pc, #236]	@ (80055c8 <HAL_TIM_PWM_Stop+0x120>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d009      	beq.n	80054f2 <HAL_TIM_PWM_Stop+0x4a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a3a      	ldr	r2, [pc, #232]	@ (80055cc <HAL_TIM_PWM_Stop+0x124>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d004      	beq.n	80054f2 <HAL_TIM_PWM_Stop+0x4a>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a38      	ldr	r2, [pc, #224]	@ (80055d0 <HAL_TIM_PWM_Stop+0x128>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d101      	bne.n	80054f6 <HAL_TIM_PWM_Stop+0x4e>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <HAL_TIM_PWM_Stop+0x50>
 80054f6:	2300      	movs	r3, #0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d017      	beq.n	800552c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6a1a      	ldr	r2, [r3, #32]
 8005502:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005506:	4013      	ands	r3, r2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10f      	bne.n	800552c <HAL_TIM_PWM_Stop+0x84>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6a1a      	ldr	r2, [r3, #32]
 8005512:	f240 4344 	movw	r3, #1092	@ 0x444
 8005516:	4013      	ands	r3, r2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d107      	bne.n	800552c <HAL_TIM_PWM_Stop+0x84>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800552a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6a1a      	ldr	r2, [r3, #32]
 8005532:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005536:	4013      	ands	r3, r2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10f      	bne.n	800555c <HAL_TIM_PWM_Stop+0xb4>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6a1a      	ldr	r2, [r3, #32]
 8005542:	f240 4344 	movw	r3, #1092	@ 0x444
 8005546:	4013      	ands	r3, r2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d107      	bne.n	800555c <HAL_TIM_PWM_Stop+0xb4>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0201 	bic.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d104      	bne.n	800556c <HAL_TIM_PWM_Stop+0xc4>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800556a:	e023      	b.n	80055b4 <HAL_TIM_PWM_Stop+0x10c>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b04      	cmp	r3, #4
 8005570:	d104      	bne.n	800557c <HAL_TIM_PWM_Stop+0xd4>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800557a:	e01b      	b.n	80055b4 <HAL_TIM_PWM_Stop+0x10c>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b08      	cmp	r3, #8
 8005580:	d104      	bne.n	800558c <HAL_TIM_PWM_Stop+0xe4>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800558a:	e013      	b.n	80055b4 <HAL_TIM_PWM_Stop+0x10c>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b0c      	cmp	r3, #12
 8005590:	d104      	bne.n	800559c <HAL_TIM_PWM_Stop+0xf4>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800559a:	e00b      	b.n	80055b4 <HAL_TIM_PWM_Stop+0x10c>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b10      	cmp	r3, #16
 80055a0:	d104      	bne.n	80055ac <HAL_TIM_PWM_Stop+0x104>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055aa:	e003      	b.n	80055b4 <HAL_TIM_PWM_Stop+0x10c>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40010400 	.word	0x40010400
 80055c8:	40014000 	.word	0x40014000
 80055cc:	40014400 	.word	0x40014400
 80055d0:	40014800 	.word	0x40014800

080055d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e0ff      	b.n	80057f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b14      	cmp	r3, #20
 80055fe:	f200 80f0 	bhi.w	80057e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005602:	a201      	add	r2, pc, #4	@ (adr r2, 8005608 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005608:	0800565d 	.word	0x0800565d
 800560c:	080057e3 	.word	0x080057e3
 8005610:	080057e3 	.word	0x080057e3
 8005614:	080057e3 	.word	0x080057e3
 8005618:	0800569d 	.word	0x0800569d
 800561c:	080057e3 	.word	0x080057e3
 8005620:	080057e3 	.word	0x080057e3
 8005624:	080057e3 	.word	0x080057e3
 8005628:	080056df 	.word	0x080056df
 800562c:	080057e3 	.word	0x080057e3
 8005630:	080057e3 	.word	0x080057e3
 8005634:	080057e3 	.word	0x080057e3
 8005638:	0800571f 	.word	0x0800571f
 800563c:	080057e3 	.word	0x080057e3
 8005640:	080057e3 	.word	0x080057e3
 8005644:	080057e3 	.word	0x080057e3
 8005648:	08005761 	.word	0x08005761
 800564c:	080057e3 	.word	0x080057e3
 8005650:	080057e3 	.word	0x080057e3
 8005654:	080057e3 	.word	0x080057e3
 8005658:	080057a1 	.word	0x080057a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fa68 	bl	8005b38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0208 	orr.w	r2, r2, #8
 8005676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0204 	bic.w	r2, r2, #4
 8005686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6999      	ldr	r1, [r3, #24]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	619a      	str	r2, [r3, #24]
      break;
 800569a:	e0a5      	b.n	80057e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fad8 	bl	8005c58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6999      	ldr	r1, [r3, #24]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	021a      	lsls	r2, r3, #8
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	619a      	str	r2, [r3, #24]
      break;
 80056dc:	e084      	b.n	80057e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fb41 	bl	8005d6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69da      	ldr	r2, [r3, #28]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0208 	orr.w	r2, r2, #8
 80056f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0204 	bic.w	r2, r2, #4
 8005708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69d9      	ldr	r1, [r3, #28]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	61da      	str	r2, [r3, #28]
      break;
 800571c:	e064      	b.n	80057e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68b9      	ldr	r1, [r7, #8]
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fba9 	bl	8005e7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69da      	ldr	r2, [r3, #28]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69d9      	ldr	r1, [r3, #28]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	021a      	lsls	r2, r3, #8
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	61da      	str	r2, [r3, #28]
      break;
 800575e:	e043      	b.n	80057e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fbf2 	bl	8005f50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0208 	orr.w	r2, r2, #8
 800577a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0204 	bic.w	r2, r2, #4
 800578a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	691a      	ldr	r2, [r3, #16]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800579e:	e023      	b.n	80057e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68b9      	ldr	r1, [r7, #8]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fc36 	bl	8006018 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	021a      	lsls	r2, r3, #8
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80057e0:	e002      	b.n	80057e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	75fb      	strb	r3, [r7, #23]
      break;
 80057e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop

080057fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_TIM_ConfigClockSource+0x1c>
 8005814:	2302      	movs	r3, #2
 8005816:	e0dc      	b.n	80059d2 <HAL_TIM_ConfigClockSource+0x1d6>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	4b6a      	ldr	r3, [pc, #424]	@ (80059dc <HAL_TIM_ConfigClockSource+0x1e0>)
 8005834:	4013      	ands	r3, r2
 8005836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800583e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a64      	ldr	r2, [pc, #400]	@ (80059e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	f000 80a9 	beq.w	80059a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005854:	4a62      	ldr	r2, [pc, #392]	@ (80059e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005856:	4293      	cmp	r3, r2
 8005858:	f200 80ae 	bhi.w	80059b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800585c:	4a61      	ldr	r2, [pc, #388]	@ (80059e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	f000 80a1 	beq.w	80059a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005864:	4a5f      	ldr	r2, [pc, #380]	@ (80059e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005866:	4293      	cmp	r3, r2
 8005868:	f200 80a6 	bhi.w	80059b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800586c:	4a5e      	ldr	r2, [pc, #376]	@ (80059e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800586e:	4293      	cmp	r3, r2
 8005870:	f000 8099 	beq.w	80059a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005874:	4a5c      	ldr	r2, [pc, #368]	@ (80059e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005876:	4293      	cmp	r3, r2
 8005878:	f200 809e 	bhi.w	80059b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800587c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005880:	f000 8091 	beq.w	80059a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005884:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005888:	f200 8096 	bhi.w	80059b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800588c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005890:	f000 8089 	beq.w	80059a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005894:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005898:	f200 808e 	bhi.w	80059b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800589c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058a0:	d03e      	beq.n	8005920 <HAL_TIM_ConfigClockSource+0x124>
 80058a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058a6:	f200 8087 	bhi.w	80059b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80058aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ae:	f000 8086 	beq.w	80059be <HAL_TIM_ConfigClockSource+0x1c2>
 80058b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058b6:	d87f      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80058b8:	2b70      	cmp	r3, #112	@ 0x70
 80058ba:	d01a      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0xf6>
 80058bc:	2b70      	cmp	r3, #112	@ 0x70
 80058be:	d87b      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80058c0:	2b60      	cmp	r3, #96	@ 0x60
 80058c2:	d050      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x16a>
 80058c4:	2b60      	cmp	r3, #96	@ 0x60
 80058c6:	d877      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80058c8:	2b50      	cmp	r3, #80	@ 0x50
 80058ca:	d03c      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0x14a>
 80058cc:	2b50      	cmp	r3, #80	@ 0x50
 80058ce:	d873      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80058d0:	2b40      	cmp	r3, #64	@ 0x40
 80058d2:	d058      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x18a>
 80058d4:	2b40      	cmp	r3, #64	@ 0x40
 80058d6:	d86f      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80058d8:	2b30      	cmp	r3, #48	@ 0x30
 80058da:	d064      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x1aa>
 80058dc:	2b30      	cmp	r3, #48	@ 0x30
 80058de:	d86b      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80058e0:	2b20      	cmp	r3, #32
 80058e2:	d060      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x1aa>
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d867      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d05c      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x1aa>
 80058ec:	2b10      	cmp	r3, #16
 80058ee:	d05a      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x1aa>
 80058f0:	e062      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005902:	f000 fc6d 	bl	80061e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005914:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	609a      	str	r2, [r3, #8]
      break;
 800591e:	e04f      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005930:	f000 fc56 	bl	80061e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005942:	609a      	str	r2, [r3, #8]
      break;
 8005944:	e03c      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005952:	461a      	mov	r2, r3
 8005954:	f000 fbc6 	bl	80060e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2150      	movs	r1, #80	@ 0x50
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fc20 	bl	80061a4 <TIM_ITRx_SetConfig>
      break;
 8005964:	e02c      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005972:	461a      	mov	r2, r3
 8005974:	f000 fbe5 	bl	8006142 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2160      	movs	r1, #96	@ 0x60
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fc10 	bl	80061a4 <TIM_ITRx_SetConfig>
      break;
 8005984:	e01c      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005992:	461a      	mov	r2, r3
 8005994:	f000 fba6 	bl	80060e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2140      	movs	r1, #64	@ 0x40
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fc00 	bl	80061a4 <TIM_ITRx_SetConfig>
      break;
 80059a4:	e00c      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f000 fbf7 	bl	80061a4 <TIM_ITRx_SetConfig>
      break;
 80059b6:	e003      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]
      break;
 80059bc:	e000      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80059be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	ffceff88 	.word	0xffceff88
 80059e0:	00100040 	.word	0x00100040
 80059e4:	00100030 	.word	0x00100030
 80059e8:	00100020 	.word	0x00100020

080059ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a46      	ldr	r2, [pc, #280]	@ (8005b18 <TIM_Base_SetConfig+0x12c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d013      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a0a:	d00f      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a43      	ldr	r2, [pc, #268]	@ (8005b1c <TIM_Base_SetConfig+0x130>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00b      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a42      	ldr	r2, [pc, #264]	@ (8005b20 <TIM_Base_SetConfig+0x134>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d007      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a41      	ldr	r2, [pc, #260]	@ (8005b24 <TIM_Base_SetConfig+0x138>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d003      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a40      	ldr	r2, [pc, #256]	@ (8005b28 <TIM_Base_SetConfig+0x13c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d108      	bne.n	8005a3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a35      	ldr	r2, [pc, #212]	@ (8005b18 <TIM_Base_SetConfig+0x12c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d01f      	beq.n	8005a86 <TIM_Base_SetConfig+0x9a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a4c:	d01b      	beq.n	8005a86 <TIM_Base_SetConfig+0x9a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a32      	ldr	r2, [pc, #200]	@ (8005b1c <TIM_Base_SetConfig+0x130>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d017      	beq.n	8005a86 <TIM_Base_SetConfig+0x9a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a31      	ldr	r2, [pc, #196]	@ (8005b20 <TIM_Base_SetConfig+0x134>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d013      	beq.n	8005a86 <TIM_Base_SetConfig+0x9a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a30      	ldr	r2, [pc, #192]	@ (8005b24 <TIM_Base_SetConfig+0x138>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00f      	beq.n	8005a86 <TIM_Base_SetConfig+0x9a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a2f      	ldr	r2, [pc, #188]	@ (8005b28 <TIM_Base_SetConfig+0x13c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00b      	beq.n	8005a86 <TIM_Base_SetConfig+0x9a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a2e      	ldr	r2, [pc, #184]	@ (8005b2c <TIM_Base_SetConfig+0x140>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d007      	beq.n	8005a86 <TIM_Base_SetConfig+0x9a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a2d      	ldr	r2, [pc, #180]	@ (8005b30 <TIM_Base_SetConfig+0x144>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d003      	beq.n	8005a86 <TIM_Base_SetConfig+0x9a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a2c      	ldr	r2, [pc, #176]	@ (8005b34 <TIM_Base_SetConfig+0x148>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d108      	bne.n	8005a98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a16      	ldr	r2, [pc, #88]	@ (8005b18 <TIM_Base_SetConfig+0x12c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00f      	beq.n	8005ae4 <TIM_Base_SetConfig+0xf8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a18      	ldr	r2, [pc, #96]	@ (8005b28 <TIM_Base_SetConfig+0x13c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00b      	beq.n	8005ae4 <TIM_Base_SetConfig+0xf8>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a17      	ldr	r2, [pc, #92]	@ (8005b2c <TIM_Base_SetConfig+0x140>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d007      	beq.n	8005ae4 <TIM_Base_SetConfig+0xf8>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a16      	ldr	r2, [pc, #88]	@ (8005b30 <TIM_Base_SetConfig+0x144>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d003      	beq.n	8005ae4 <TIM_Base_SetConfig+0xf8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a15      	ldr	r2, [pc, #84]	@ (8005b34 <TIM_Base_SetConfig+0x148>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d103      	bne.n	8005aec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d105      	bne.n	8005b0a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f023 0201 	bic.w	r2, r3, #1
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	611a      	str	r2, [r3, #16]
  }
}
 8005b0a:	bf00      	nop
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40010000 	.word	0x40010000
 8005b1c:	40000400 	.word	0x40000400
 8005b20:	40000800 	.word	0x40000800
 8005b24:	40000c00 	.word	0x40000c00
 8005b28:	40010400 	.word	0x40010400
 8005b2c:	40014000 	.word	0x40014000
 8005b30:	40014400 	.word	0x40014400
 8005b34:	40014800 	.word	0x40014800

08005b38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	f023 0201 	bic.w	r2, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4b37      	ldr	r3, [pc, #220]	@ (8005c40 <TIM_OC1_SetConfig+0x108>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0303 	bic.w	r3, r3, #3
 8005b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f023 0302 	bic.w	r3, r3, #2
 8005b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a2d      	ldr	r2, [pc, #180]	@ (8005c44 <TIM_OC1_SetConfig+0x10c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00f      	beq.n	8005bb4 <TIM_OC1_SetConfig+0x7c>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a2c      	ldr	r2, [pc, #176]	@ (8005c48 <TIM_OC1_SetConfig+0x110>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00b      	beq.n	8005bb4 <TIM_OC1_SetConfig+0x7c>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a2b      	ldr	r2, [pc, #172]	@ (8005c4c <TIM_OC1_SetConfig+0x114>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d007      	beq.n	8005bb4 <TIM_OC1_SetConfig+0x7c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a2a      	ldr	r2, [pc, #168]	@ (8005c50 <TIM_OC1_SetConfig+0x118>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_OC1_SetConfig+0x7c>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a29      	ldr	r2, [pc, #164]	@ (8005c54 <TIM_OC1_SetConfig+0x11c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d10c      	bne.n	8005bce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f023 0308 	bic.w	r3, r3, #8
 8005bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f023 0304 	bic.w	r3, r3, #4
 8005bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8005c44 <TIM_OC1_SetConfig+0x10c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00f      	beq.n	8005bf6 <TIM_OC1_SetConfig+0xbe>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c48 <TIM_OC1_SetConfig+0x110>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00b      	beq.n	8005bf6 <TIM_OC1_SetConfig+0xbe>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1a      	ldr	r2, [pc, #104]	@ (8005c4c <TIM_OC1_SetConfig+0x114>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d007      	beq.n	8005bf6 <TIM_OC1_SetConfig+0xbe>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a19      	ldr	r2, [pc, #100]	@ (8005c50 <TIM_OC1_SetConfig+0x118>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d003      	beq.n	8005bf6 <TIM_OC1_SetConfig+0xbe>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a18      	ldr	r2, [pc, #96]	@ (8005c54 <TIM_OC1_SetConfig+0x11c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d111      	bne.n	8005c1a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	621a      	str	r2, [r3, #32]
}
 8005c34:	bf00      	nop
 8005c36:	371c      	adds	r7, #28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	fffeff8f 	.word	0xfffeff8f
 8005c44:	40010000 	.word	0x40010000
 8005c48:	40010400 	.word	0x40010400
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	40014400 	.word	0x40014400
 8005c54:	40014800 	.word	0x40014800

08005c58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	f023 0210 	bic.w	r2, r3, #16
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4b34      	ldr	r3, [pc, #208]	@ (8005d54 <TIM_OC2_SetConfig+0xfc>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	021b      	lsls	r3, r3, #8
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f023 0320 	bic.w	r3, r3, #32
 8005ca2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a29      	ldr	r2, [pc, #164]	@ (8005d58 <TIM_OC2_SetConfig+0x100>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <TIM_OC2_SetConfig+0x68>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a28      	ldr	r2, [pc, #160]	@ (8005d5c <TIM_OC2_SetConfig+0x104>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d10d      	bne.n	8005cdc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a1e      	ldr	r2, [pc, #120]	@ (8005d58 <TIM_OC2_SetConfig+0x100>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d00f      	beq.n	8005d04 <TIM_OC2_SetConfig+0xac>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a1d      	ldr	r2, [pc, #116]	@ (8005d5c <TIM_OC2_SetConfig+0x104>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d00b      	beq.n	8005d04 <TIM_OC2_SetConfig+0xac>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a1c      	ldr	r2, [pc, #112]	@ (8005d60 <TIM_OC2_SetConfig+0x108>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d007      	beq.n	8005d04 <TIM_OC2_SetConfig+0xac>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8005d64 <TIM_OC2_SetConfig+0x10c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d003      	beq.n	8005d04 <TIM_OC2_SetConfig+0xac>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8005d68 <TIM_OC2_SetConfig+0x110>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d113      	bne.n	8005d2c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	feff8fff 	.word	0xfeff8fff
 8005d58:	40010000 	.word	0x40010000
 8005d5c:	40010400 	.word	0x40010400
 8005d60:	40014000 	.word	0x40014000
 8005d64:	40014400 	.word	0x40014400
 8005d68:	40014800 	.word	0x40014800

08005d6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4b33      	ldr	r3, [pc, #204]	@ (8005e64 <TIM_OC3_SetConfig+0xf8>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 0303 	bic.w	r3, r3, #3
 8005da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	021b      	lsls	r3, r3, #8
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a28      	ldr	r2, [pc, #160]	@ (8005e68 <TIM_OC3_SetConfig+0xfc>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d003      	beq.n	8005dd2 <TIM_OC3_SetConfig+0x66>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a27      	ldr	r2, [pc, #156]	@ (8005e6c <TIM_OC3_SetConfig+0x100>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d10d      	bne.n	8005dee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	021b      	lsls	r3, r3, #8
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e68 <TIM_OC3_SetConfig+0xfc>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d00f      	beq.n	8005e16 <TIM_OC3_SetConfig+0xaa>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a1c      	ldr	r2, [pc, #112]	@ (8005e6c <TIM_OC3_SetConfig+0x100>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00b      	beq.n	8005e16 <TIM_OC3_SetConfig+0xaa>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a1b      	ldr	r2, [pc, #108]	@ (8005e70 <TIM_OC3_SetConfig+0x104>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d007      	beq.n	8005e16 <TIM_OC3_SetConfig+0xaa>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a1a      	ldr	r2, [pc, #104]	@ (8005e74 <TIM_OC3_SetConfig+0x108>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d003      	beq.n	8005e16 <TIM_OC3_SetConfig+0xaa>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a19      	ldr	r2, [pc, #100]	@ (8005e78 <TIM_OC3_SetConfig+0x10c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d113      	bne.n	8005e3e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	621a      	str	r2, [r3, #32]
}
 8005e58:	bf00      	nop
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	fffeff8f 	.word	0xfffeff8f
 8005e68:	40010000 	.word	0x40010000
 8005e6c:	40010400 	.word	0x40010400
 8005e70:	40014000 	.word	0x40014000
 8005e74:	40014400 	.word	0x40014400
 8005e78:	40014800 	.word	0x40014800

08005e7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4b24      	ldr	r3, [pc, #144]	@ (8005f38 <TIM_OC4_SetConfig+0xbc>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	021b      	lsls	r3, r3, #8
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	031b      	lsls	r3, r3, #12
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a19      	ldr	r2, [pc, #100]	@ (8005f3c <TIM_OC4_SetConfig+0xc0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d00f      	beq.n	8005efc <TIM_OC4_SetConfig+0x80>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a18      	ldr	r2, [pc, #96]	@ (8005f40 <TIM_OC4_SetConfig+0xc4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00b      	beq.n	8005efc <TIM_OC4_SetConfig+0x80>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a17      	ldr	r2, [pc, #92]	@ (8005f44 <TIM_OC4_SetConfig+0xc8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d007      	beq.n	8005efc <TIM_OC4_SetConfig+0x80>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a16      	ldr	r2, [pc, #88]	@ (8005f48 <TIM_OC4_SetConfig+0xcc>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d003      	beq.n	8005efc <TIM_OC4_SetConfig+0x80>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a15      	ldr	r2, [pc, #84]	@ (8005f4c <TIM_OC4_SetConfig+0xd0>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d109      	bne.n	8005f10 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	019b      	lsls	r3, r3, #6
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	621a      	str	r2, [r3, #32]
}
 8005f2a:	bf00      	nop
 8005f2c:	371c      	adds	r7, #28
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	feff8fff 	.word	0xfeff8fff
 8005f3c:	40010000 	.word	0x40010000
 8005f40:	40010400 	.word	0x40010400
 8005f44:	40014000 	.word	0x40014000
 8005f48:	40014400 	.word	0x40014400
 8005f4c:	40014800 	.word	0x40014800

08005f50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	4b21      	ldr	r3, [pc, #132]	@ (8006000 <TIM_OC5_SetConfig+0xb0>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005f90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	041b      	lsls	r3, r3, #16
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a18      	ldr	r2, [pc, #96]	@ (8006004 <TIM_OC5_SetConfig+0xb4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00f      	beq.n	8005fc6 <TIM_OC5_SetConfig+0x76>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a17      	ldr	r2, [pc, #92]	@ (8006008 <TIM_OC5_SetConfig+0xb8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00b      	beq.n	8005fc6 <TIM_OC5_SetConfig+0x76>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a16      	ldr	r2, [pc, #88]	@ (800600c <TIM_OC5_SetConfig+0xbc>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d007      	beq.n	8005fc6 <TIM_OC5_SetConfig+0x76>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a15      	ldr	r2, [pc, #84]	@ (8006010 <TIM_OC5_SetConfig+0xc0>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d003      	beq.n	8005fc6 <TIM_OC5_SetConfig+0x76>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a14      	ldr	r2, [pc, #80]	@ (8006014 <TIM_OC5_SetConfig+0xc4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d109      	bne.n	8005fda <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	021b      	lsls	r3, r3, #8
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	621a      	str	r2, [r3, #32]
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	fffeff8f 	.word	0xfffeff8f
 8006004:	40010000 	.word	0x40010000
 8006008:	40010400 	.word	0x40010400
 800600c:	40014000 	.word	0x40014000
 8006010:	40014400 	.word	0x40014400
 8006014:	40014800 	.word	0x40014800

08006018 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006018:	b480      	push	{r7}
 800601a:	b087      	sub	sp, #28
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4b22      	ldr	r3, [pc, #136]	@ (80060cc <TIM_OC6_SetConfig+0xb4>)
 8006044:	4013      	ands	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800605a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	051b      	lsls	r3, r3, #20
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a19      	ldr	r2, [pc, #100]	@ (80060d0 <TIM_OC6_SetConfig+0xb8>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d00f      	beq.n	8006090 <TIM_OC6_SetConfig+0x78>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a18      	ldr	r2, [pc, #96]	@ (80060d4 <TIM_OC6_SetConfig+0xbc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d00b      	beq.n	8006090 <TIM_OC6_SetConfig+0x78>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a17      	ldr	r2, [pc, #92]	@ (80060d8 <TIM_OC6_SetConfig+0xc0>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d007      	beq.n	8006090 <TIM_OC6_SetConfig+0x78>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a16      	ldr	r2, [pc, #88]	@ (80060dc <TIM_OC6_SetConfig+0xc4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_OC6_SetConfig+0x78>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a15      	ldr	r2, [pc, #84]	@ (80060e0 <TIM_OC6_SetConfig+0xc8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d109      	bne.n	80060a4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006096:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	029b      	lsls	r3, r3, #10
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	feff8fff 	.word	0xfeff8fff
 80060d0:	40010000 	.word	0x40010000
 80060d4:	40010400 	.word	0x40010400
 80060d8:	40014000 	.word	0x40014000
 80060dc:	40014400 	.word	0x40014400
 80060e0:	40014800 	.word	0x40014800

080060e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f023 0201 	bic.w	r2, r3, #1
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800610e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f023 030a 	bic.w	r3, r3, #10
 8006120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	4313      	orrs	r3, r2
 8006128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	621a      	str	r2, [r3, #32]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006142:	b480      	push	{r7}
 8006144:	b087      	sub	sp, #28
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	f023 0210 	bic.w	r2, r3, #16
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800616c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	031b      	lsls	r3, r3, #12
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800617e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	011b      	lsls	r3, r3, #4
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
	...

080061a4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4b09      	ldr	r3, [pc, #36]	@ (80061dc <TIM_ITRx_SetConfig+0x38>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	f043 0307 	orr.w	r3, r3, #7
 80061c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	609a      	str	r2, [r3, #8]
}
 80061ce:	bf00      	nop
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	ffcfff8f 	.word	0xffcfff8f

080061e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	021a      	lsls	r2, r3, #8
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	431a      	orrs	r2, r3
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	4313      	orrs	r3, r2
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	609a      	str	r2, [r3, #8]
}
 8006214:	bf00      	nop
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f003 031f 	and.w	r3, r3, #31
 8006232:	2201      	movs	r2, #1
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a1a      	ldr	r2, [r3, #32]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	43db      	mvns	r3, r3
 8006242:	401a      	ands	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a1a      	ldr	r2, [r3, #32]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f003 031f 	and.w	r3, r3, #31
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	fa01 f303 	lsl.w	r3, r1, r3
 8006258:	431a      	orrs	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	621a      	str	r2, [r3, #32]
}
 800625e:	bf00      	nop
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
	...

0800626c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006280:	2302      	movs	r3, #2
 8006282:	e06d      	b.n	8006360 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a30      	ldr	r2, [pc, #192]	@ (800636c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d004      	beq.n	80062b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a2f      	ldr	r2, [pc, #188]	@ (8006370 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d108      	bne.n	80062ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80062be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a20      	ldr	r2, [pc, #128]	@ (800636c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d022      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f6:	d01d      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006374 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d018      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a1c      	ldr	r2, [pc, #112]	@ (8006378 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d013      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a1a      	ldr	r2, [pc, #104]	@ (800637c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00e      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a15      	ldr	r2, [pc, #84]	@ (8006370 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d009      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a16      	ldr	r2, [pc, #88]	@ (8006380 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d004      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a15      	ldr	r2, [pc, #84]	@ (8006384 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d10c      	bne.n	800634e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800633a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	4313      	orrs	r3, r2
 8006344:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	40010000 	.word	0x40010000
 8006370:	40010400 	.word	0x40010400
 8006374:	40000400 	.word	0x40000400
 8006378:	40000800 	.word	0x40000800
 800637c:	40000c00 	.word	0x40000c00
 8006380:	40001800 	.word	0x40001800
 8006384:	40014000 	.word	0x40014000

08006388 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e042      	b.n	8006420 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d106      	bne.n	80063b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7fa fda9 	bl	8000f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2224      	movs	r2, #36	@ 0x24
 80063b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0201 	bic.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fd90 	bl	8006ef8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f825 	bl	8006428 <UART_SetConfig>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e01b      	b.n	8006420 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0201 	orr.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fe0f 	bl	800703c <UART_CheckIdleState>
 800641e:	4603      	mov	r3, r0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800642c:	b092      	sub	sp, #72	@ 0x48
 800642e:	af00      	add	r7, sp, #0
 8006430:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	431a      	orrs	r2, r3
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	431a      	orrs	r2, r3
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	4313      	orrs	r3, r2
 800644e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	4bbe      	ldr	r3, [pc, #760]	@ (8006750 <UART_SetConfig+0x328>)
 8006458:	4013      	ands	r3, r2
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	6812      	ldr	r2, [r2, #0]
 800645e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006460:	430b      	orrs	r3, r1
 8006462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4ab3      	ldr	r2, [pc, #716]	@ (8006754 <UART_SetConfig+0x32c>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d004      	beq.n	8006494 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006490:	4313      	orrs	r3, r2
 8006492:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	4baf      	ldr	r3, [pc, #700]	@ (8006758 <UART_SetConfig+0x330>)
 800649c:	4013      	ands	r3, r2
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	6812      	ldr	r2, [r2, #0]
 80064a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80064a4:	430b      	orrs	r3, r1
 80064a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ae:	f023 010f 	bic.w	r1, r3, #15
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4aa6      	ldr	r2, [pc, #664]	@ (800675c <UART_SetConfig+0x334>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d177      	bne.n	80065b8 <UART_SetConfig+0x190>
 80064c8:	4ba5      	ldr	r3, [pc, #660]	@ (8006760 <UART_SetConfig+0x338>)
 80064ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064d0:	2b28      	cmp	r3, #40	@ 0x28
 80064d2:	d86d      	bhi.n	80065b0 <UART_SetConfig+0x188>
 80064d4:	a201      	add	r2, pc, #4	@ (adr r2, 80064dc <UART_SetConfig+0xb4>)
 80064d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064da:	bf00      	nop
 80064dc:	08006581 	.word	0x08006581
 80064e0:	080065b1 	.word	0x080065b1
 80064e4:	080065b1 	.word	0x080065b1
 80064e8:	080065b1 	.word	0x080065b1
 80064ec:	080065b1 	.word	0x080065b1
 80064f0:	080065b1 	.word	0x080065b1
 80064f4:	080065b1 	.word	0x080065b1
 80064f8:	080065b1 	.word	0x080065b1
 80064fc:	08006589 	.word	0x08006589
 8006500:	080065b1 	.word	0x080065b1
 8006504:	080065b1 	.word	0x080065b1
 8006508:	080065b1 	.word	0x080065b1
 800650c:	080065b1 	.word	0x080065b1
 8006510:	080065b1 	.word	0x080065b1
 8006514:	080065b1 	.word	0x080065b1
 8006518:	080065b1 	.word	0x080065b1
 800651c:	08006591 	.word	0x08006591
 8006520:	080065b1 	.word	0x080065b1
 8006524:	080065b1 	.word	0x080065b1
 8006528:	080065b1 	.word	0x080065b1
 800652c:	080065b1 	.word	0x080065b1
 8006530:	080065b1 	.word	0x080065b1
 8006534:	080065b1 	.word	0x080065b1
 8006538:	080065b1 	.word	0x080065b1
 800653c:	08006599 	.word	0x08006599
 8006540:	080065b1 	.word	0x080065b1
 8006544:	080065b1 	.word	0x080065b1
 8006548:	080065b1 	.word	0x080065b1
 800654c:	080065b1 	.word	0x080065b1
 8006550:	080065b1 	.word	0x080065b1
 8006554:	080065b1 	.word	0x080065b1
 8006558:	080065b1 	.word	0x080065b1
 800655c:	080065a1 	.word	0x080065a1
 8006560:	080065b1 	.word	0x080065b1
 8006564:	080065b1 	.word	0x080065b1
 8006568:	080065b1 	.word	0x080065b1
 800656c:	080065b1 	.word	0x080065b1
 8006570:	080065b1 	.word	0x080065b1
 8006574:	080065b1 	.word	0x080065b1
 8006578:	080065b1 	.word	0x080065b1
 800657c:	080065a9 	.word	0x080065a9
 8006580:	2301      	movs	r3, #1
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006586:	e222      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006588:	2304      	movs	r3, #4
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800658e:	e21e      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006590:	2308      	movs	r3, #8
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006596:	e21a      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006598:	2310      	movs	r3, #16
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659e:	e216      	b.n	80069ce <UART_SetConfig+0x5a6>
 80065a0:	2320      	movs	r3, #32
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a6:	e212      	b.n	80069ce <UART_SetConfig+0x5a6>
 80065a8:	2340      	movs	r3, #64	@ 0x40
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ae:	e20e      	b.n	80069ce <UART_SetConfig+0x5a6>
 80065b0:	2380      	movs	r3, #128	@ 0x80
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b6:	e20a      	b.n	80069ce <UART_SetConfig+0x5a6>
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a69      	ldr	r2, [pc, #420]	@ (8006764 <UART_SetConfig+0x33c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d130      	bne.n	8006624 <UART_SetConfig+0x1fc>
 80065c2:	4b67      	ldr	r3, [pc, #412]	@ (8006760 <UART_SetConfig+0x338>)
 80065c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	2b05      	cmp	r3, #5
 80065cc:	d826      	bhi.n	800661c <UART_SetConfig+0x1f4>
 80065ce:	a201      	add	r2, pc, #4	@ (adr r2, 80065d4 <UART_SetConfig+0x1ac>)
 80065d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d4:	080065ed 	.word	0x080065ed
 80065d8:	080065f5 	.word	0x080065f5
 80065dc:	080065fd 	.word	0x080065fd
 80065e0:	08006605 	.word	0x08006605
 80065e4:	0800660d 	.word	0x0800660d
 80065e8:	08006615 	.word	0x08006615
 80065ec:	2300      	movs	r3, #0
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f2:	e1ec      	b.n	80069ce <UART_SetConfig+0x5a6>
 80065f4:	2304      	movs	r3, #4
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fa:	e1e8      	b.n	80069ce <UART_SetConfig+0x5a6>
 80065fc:	2308      	movs	r3, #8
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006602:	e1e4      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006604:	2310      	movs	r3, #16
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800660a:	e1e0      	b.n	80069ce <UART_SetConfig+0x5a6>
 800660c:	2320      	movs	r3, #32
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006612:	e1dc      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006614:	2340      	movs	r3, #64	@ 0x40
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800661a:	e1d8      	b.n	80069ce <UART_SetConfig+0x5a6>
 800661c:	2380      	movs	r3, #128	@ 0x80
 800661e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006622:	e1d4      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a4f      	ldr	r2, [pc, #316]	@ (8006768 <UART_SetConfig+0x340>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d130      	bne.n	8006690 <UART_SetConfig+0x268>
 800662e:	4b4c      	ldr	r3, [pc, #304]	@ (8006760 <UART_SetConfig+0x338>)
 8006630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	2b05      	cmp	r3, #5
 8006638:	d826      	bhi.n	8006688 <UART_SetConfig+0x260>
 800663a:	a201      	add	r2, pc, #4	@ (adr r2, 8006640 <UART_SetConfig+0x218>)
 800663c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006640:	08006659 	.word	0x08006659
 8006644:	08006661 	.word	0x08006661
 8006648:	08006669 	.word	0x08006669
 800664c:	08006671 	.word	0x08006671
 8006650:	08006679 	.word	0x08006679
 8006654:	08006681 	.word	0x08006681
 8006658:	2300      	movs	r3, #0
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800665e:	e1b6      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006660:	2304      	movs	r3, #4
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006666:	e1b2      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006668:	2308      	movs	r3, #8
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800666e:	e1ae      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006670:	2310      	movs	r3, #16
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006676:	e1aa      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006678:	2320      	movs	r3, #32
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667e:	e1a6      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006680:	2340      	movs	r3, #64	@ 0x40
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006686:	e1a2      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006688:	2380      	movs	r3, #128	@ 0x80
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800668e:	e19e      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a35      	ldr	r2, [pc, #212]	@ (800676c <UART_SetConfig+0x344>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d130      	bne.n	80066fc <UART_SetConfig+0x2d4>
 800669a:	4b31      	ldr	r3, [pc, #196]	@ (8006760 <UART_SetConfig+0x338>)
 800669c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	2b05      	cmp	r3, #5
 80066a4:	d826      	bhi.n	80066f4 <UART_SetConfig+0x2cc>
 80066a6:	a201      	add	r2, pc, #4	@ (adr r2, 80066ac <UART_SetConfig+0x284>)
 80066a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ac:	080066c5 	.word	0x080066c5
 80066b0:	080066cd 	.word	0x080066cd
 80066b4:	080066d5 	.word	0x080066d5
 80066b8:	080066dd 	.word	0x080066dd
 80066bc:	080066e5 	.word	0x080066e5
 80066c0:	080066ed 	.word	0x080066ed
 80066c4:	2300      	movs	r3, #0
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ca:	e180      	b.n	80069ce <UART_SetConfig+0x5a6>
 80066cc:	2304      	movs	r3, #4
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d2:	e17c      	b.n	80069ce <UART_SetConfig+0x5a6>
 80066d4:	2308      	movs	r3, #8
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066da:	e178      	b.n	80069ce <UART_SetConfig+0x5a6>
 80066dc:	2310      	movs	r3, #16
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e2:	e174      	b.n	80069ce <UART_SetConfig+0x5a6>
 80066e4:	2320      	movs	r3, #32
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ea:	e170      	b.n	80069ce <UART_SetConfig+0x5a6>
 80066ec:	2340      	movs	r3, #64	@ 0x40
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f2:	e16c      	b.n	80069ce <UART_SetConfig+0x5a6>
 80066f4:	2380      	movs	r3, #128	@ 0x80
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fa:	e168      	b.n	80069ce <UART_SetConfig+0x5a6>
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a1b      	ldr	r2, [pc, #108]	@ (8006770 <UART_SetConfig+0x348>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d142      	bne.n	800678c <UART_SetConfig+0x364>
 8006706:	4b16      	ldr	r3, [pc, #88]	@ (8006760 <UART_SetConfig+0x338>)
 8006708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670a:	f003 0307 	and.w	r3, r3, #7
 800670e:	2b05      	cmp	r3, #5
 8006710:	d838      	bhi.n	8006784 <UART_SetConfig+0x35c>
 8006712:	a201      	add	r2, pc, #4	@ (adr r2, 8006718 <UART_SetConfig+0x2f0>)
 8006714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006718:	08006731 	.word	0x08006731
 800671c:	08006739 	.word	0x08006739
 8006720:	08006741 	.word	0x08006741
 8006724:	08006749 	.word	0x08006749
 8006728:	08006775 	.word	0x08006775
 800672c:	0800677d 	.word	0x0800677d
 8006730:	2300      	movs	r3, #0
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006736:	e14a      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006738:	2304      	movs	r3, #4
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673e:	e146      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006740:	2308      	movs	r3, #8
 8006742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006746:	e142      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006748:	2310      	movs	r3, #16
 800674a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674e:	e13e      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006750:	cfff69f3 	.word	0xcfff69f3
 8006754:	58000c00 	.word	0x58000c00
 8006758:	11fff4ff 	.word	0x11fff4ff
 800675c:	40011000 	.word	0x40011000
 8006760:	58024400 	.word	0x58024400
 8006764:	40004400 	.word	0x40004400
 8006768:	40004800 	.word	0x40004800
 800676c:	40004c00 	.word	0x40004c00
 8006770:	40005000 	.word	0x40005000
 8006774:	2320      	movs	r3, #32
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677a:	e128      	b.n	80069ce <UART_SetConfig+0x5a6>
 800677c:	2340      	movs	r3, #64	@ 0x40
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006782:	e124      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006784:	2380      	movs	r3, #128	@ 0x80
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800678a:	e120      	b.n	80069ce <UART_SetConfig+0x5a6>
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4acb      	ldr	r2, [pc, #812]	@ (8006ac0 <UART_SetConfig+0x698>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d176      	bne.n	8006884 <UART_SetConfig+0x45c>
 8006796:	4bcb      	ldr	r3, [pc, #812]	@ (8006ac4 <UART_SetConfig+0x69c>)
 8006798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800679a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800679e:	2b28      	cmp	r3, #40	@ 0x28
 80067a0:	d86c      	bhi.n	800687c <UART_SetConfig+0x454>
 80067a2:	a201      	add	r2, pc, #4	@ (adr r2, 80067a8 <UART_SetConfig+0x380>)
 80067a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a8:	0800684d 	.word	0x0800684d
 80067ac:	0800687d 	.word	0x0800687d
 80067b0:	0800687d 	.word	0x0800687d
 80067b4:	0800687d 	.word	0x0800687d
 80067b8:	0800687d 	.word	0x0800687d
 80067bc:	0800687d 	.word	0x0800687d
 80067c0:	0800687d 	.word	0x0800687d
 80067c4:	0800687d 	.word	0x0800687d
 80067c8:	08006855 	.word	0x08006855
 80067cc:	0800687d 	.word	0x0800687d
 80067d0:	0800687d 	.word	0x0800687d
 80067d4:	0800687d 	.word	0x0800687d
 80067d8:	0800687d 	.word	0x0800687d
 80067dc:	0800687d 	.word	0x0800687d
 80067e0:	0800687d 	.word	0x0800687d
 80067e4:	0800687d 	.word	0x0800687d
 80067e8:	0800685d 	.word	0x0800685d
 80067ec:	0800687d 	.word	0x0800687d
 80067f0:	0800687d 	.word	0x0800687d
 80067f4:	0800687d 	.word	0x0800687d
 80067f8:	0800687d 	.word	0x0800687d
 80067fc:	0800687d 	.word	0x0800687d
 8006800:	0800687d 	.word	0x0800687d
 8006804:	0800687d 	.word	0x0800687d
 8006808:	08006865 	.word	0x08006865
 800680c:	0800687d 	.word	0x0800687d
 8006810:	0800687d 	.word	0x0800687d
 8006814:	0800687d 	.word	0x0800687d
 8006818:	0800687d 	.word	0x0800687d
 800681c:	0800687d 	.word	0x0800687d
 8006820:	0800687d 	.word	0x0800687d
 8006824:	0800687d 	.word	0x0800687d
 8006828:	0800686d 	.word	0x0800686d
 800682c:	0800687d 	.word	0x0800687d
 8006830:	0800687d 	.word	0x0800687d
 8006834:	0800687d 	.word	0x0800687d
 8006838:	0800687d 	.word	0x0800687d
 800683c:	0800687d 	.word	0x0800687d
 8006840:	0800687d 	.word	0x0800687d
 8006844:	0800687d 	.word	0x0800687d
 8006848:	08006875 	.word	0x08006875
 800684c:	2301      	movs	r3, #1
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006852:	e0bc      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006854:	2304      	movs	r3, #4
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800685a:	e0b8      	b.n	80069ce <UART_SetConfig+0x5a6>
 800685c:	2308      	movs	r3, #8
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006862:	e0b4      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006864:	2310      	movs	r3, #16
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686a:	e0b0      	b.n	80069ce <UART_SetConfig+0x5a6>
 800686c:	2320      	movs	r3, #32
 800686e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006872:	e0ac      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006874:	2340      	movs	r3, #64	@ 0x40
 8006876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800687a:	e0a8      	b.n	80069ce <UART_SetConfig+0x5a6>
 800687c:	2380      	movs	r3, #128	@ 0x80
 800687e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006882:	e0a4      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a8f      	ldr	r2, [pc, #572]	@ (8006ac8 <UART_SetConfig+0x6a0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d130      	bne.n	80068f0 <UART_SetConfig+0x4c8>
 800688e:	4b8d      	ldr	r3, [pc, #564]	@ (8006ac4 <UART_SetConfig+0x69c>)
 8006890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	2b05      	cmp	r3, #5
 8006898:	d826      	bhi.n	80068e8 <UART_SetConfig+0x4c0>
 800689a:	a201      	add	r2, pc, #4	@ (adr r2, 80068a0 <UART_SetConfig+0x478>)
 800689c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a0:	080068b9 	.word	0x080068b9
 80068a4:	080068c1 	.word	0x080068c1
 80068a8:	080068c9 	.word	0x080068c9
 80068ac:	080068d1 	.word	0x080068d1
 80068b0:	080068d9 	.word	0x080068d9
 80068b4:	080068e1 	.word	0x080068e1
 80068b8:	2300      	movs	r3, #0
 80068ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068be:	e086      	b.n	80069ce <UART_SetConfig+0x5a6>
 80068c0:	2304      	movs	r3, #4
 80068c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068c6:	e082      	b.n	80069ce <UART_SetConfig+0x5a6>
 80068c8:	2308      	movs	r3, #8
 80068ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ce:	e07e      	b.n	80069ce <UART_SetConfig+0x5a6>
 80068d0:	2310      	movs	r3, #16
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068d6:	e07a      	b.n	80069ce <UART_SetConfig+0x5a6>
 80068d8:	2320      	movs	r3, #32
 80068da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068de:	e076      	b.n	80069ce <UART_SetConfig+0x5a6>
 80068e0:	2340      	movs	r3, #64	@ 0x40
 80068e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068e6:	e072      	b.n	80069ce <UART_SetConfig+0x5a6>
 80068e8:	2380      	movs	r3, #128	@ 0x80
 80068ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ee:	e06e      	b.n	80069ce <UART_SetConfig+0x5a6>
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a75      	ldr	r2, [pc, #468]	@ (8006acc <UART_SetConfig+0x6a4>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d130      	bne.n	800695c <UART_SetConfig+0x534>
 80068fa:	4b72      	ldr	r3, [pc, #456]	@ (8006ac4 <UART_SetConfig+0x69c>)
 80068fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068fe:	f003 0307 	and.w	r3, r3, #7
 8006902:	2b05      	cmp	r3, #5
 8006904:	d826      	bhi.n	8006954 <UART_SetConfig+0x52c>
 8006906:	a201      	add	r2, pc, #4	@ (adr r2, 800690c <UART_SetConfig+0x4e4>)
 8006908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690c:	08006925 	.word	0x08006925
 8006910:	0800692d 	.word	0x0800692d
 8006914:	08006935 	.word	0x08006935
 8006918:	0800693d 	.word	0x0800693d
 800691c:	08006945 	.word	0x08006945
 8006920:	0800694d 	.word	0x0800694d
 8006924:	2300      	movs	r3, #0
 8006926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800692a:	e050      	b.n	80069ce <UART_SetConfig+0x5a6>
 800692c:	2304      	movs	r3, #4
 800692e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006932:	e04c      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006934:	2308      	movs	r3, #8
 8006936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693a:	e048      	b.n	80069ce <UART_SetConfig+0x5a6>
 800693c:	2310      	movs	r3, #16
 800693e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006942:	e044      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006944:	2320      	movs	r3, #32
 8006946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800694a:	e040      	b.n	80069ce <UART_SetConfig+0x5a6>
 800694c:	2340      	movs	r3, #64	@ 0x40
 800694e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006952:	e03c      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006954:	2380      	movs	r3, #128	@ 0x80
 8006956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800695a:	e038      	b.n	80069ce <UART_SetConfig+0x5a6>
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a5b      	ldr	r2, [pc, #364]	@ (8006ad0 <UART_SetConfig+0x6a8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d130      	bne.n	80069c8 <UART_SetConfig+0x5a0>
 8006966:	4b57      	ldr	r3, [pc, #348]	@ (8006ac4 <UART_SetConfig+0x69c>)
 8006968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	2b05      	cmp	r3, #5
 8006970:	d826      	bhi.n	80069c0 <UART_SetConfig+0x598>
 8006972:	a201      	add	r2, pc, #4	@ (adr r2, 8006978 <UART_SetConfig+0x550>)
 8006974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006978:	08006991 	.word	0x08006991
 800697c:	08006999 	.word	0x08006999
 8006980:	080069a1 	.word	0x080069a1
 8006984:	080069a9 	.word	0x080069a9
 8006988:	080069b1 	.word	0x080069b1
 800698c:	080069b9 	.word	0x080069b9
 8006990:	2302      	movs	r3, #2
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006996:	e01a      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006998:	2304      	movs	r3, #4
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699e:	e016      	b.n	80069ce <UART_SetConfig+0x5a6>
 80069a0:	2308      	movs	r3, #8
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a6:	e012      	b.n	80069ce <UART_SetConfig+0x5a6>
 80069a8:	2310      	movs	r3, #16
 80069aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ae:	e00e      	b.n	80069ce <UART_SetConfig+0x5a6>
 80069b0:	2320      	movs	r3, #32
 80069b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069b6:	e00a      	b.n	80069ce <UART_SetConfig+0x5a6>
 80069b8:	2340      	movs	r3, #64	@ 0x40
 80069ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069be:	e006      	b.n	80069ce <UART_SetConfig+0x5a6>
 80069c0:	2380      	movs	r3, #128	@ 0x80
 80069c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069c6:	e002      	b.n	80069ce <UART_SetConfig+0x5a6>
 80069c8:	2380      	movs	r3, #128	@ 0x80
 80069ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a3f      	ldr	r2, [pc, #252]	@ (8006ad0 <UART_SetConfig+0x6a8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	f040 80f8 	bne.w	8006bca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80069de:	2b20      	cmp	r3, #32
 80069e0:	dc46      	bgt.n	8006a70 <UART_SetConfig+0x648>
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	f2c0 8082 	blt.w	8006aec <UART_SetConfig+0x6c4>
 80069e8:	3b02      	subs	r3, #2
 80069ea:	2b1e      	cmp	r3, #30
 80069ec:	d87e      	bhi.n	8006aec <UART_SetConfig+0x6c4>
 80069ee:	a201      	add	r2, pc, #4	@ (adr r2, 80069f4 <UART_SetConfig+0x5cc>)
 80069f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f4:	08006a77 	.word	0x08006a77
 80069f8:	08006aed 	.word	0x08006aed
 80069fc:	08006a7f 	.word	0x08006a7f
 8006a00:	08006aed 	.word	0x08006aed
 8006a04:	08006aed 	.word	0x08006aed
 8006a08:	08006aed 	.word	0x08006aed
 8006a0c:	08006a8f 	.word	0x08006a8f
 8006a10:	08006aed 	.word	0x08006aed
 8006a14:	08006aed 	.word	0x08006aed
 8006a18:	08006aed 	.word	0x08006aed
 8006a1c:	08006aed 	.word	0x08006aed
 8006a20:	08006aed 	.word	0x08006aed
 8006a24:	08006aed 	.word	0x08006aed
 8006a28:	08006aed 	.word	0x08006aed
 8006a2c:	08006a9f 	.word	0x08006a9f
 8006a30:	08006aed 	.word	0x08006aed
 8006a34:	08006aed 	.word	0x08006aed
 8006a38:	08006aed 	.word	0x08006aed
 8006a3c:	08006aed 	.word	0x08006aed
 8006a40:	08006aed 	.word	0x08006aed
 8006a44:	08006aed 	.word	0x08006aed
 8006a48:	08006aed 	.word	0x08006aed
 8006a4c:	08006aed 	.word	0x08006aed
 8006a50:	08006aed 	.word	0x08006aed
 8006a54:	08006aed 	.word	0x08006aed
 8006a58:	08006aed 	.word	0x08006aed
 8006a5c:	08006aed 	.word	0x08006aed
 8006a60:	08006aed 	.word	0x08006aed
 8006a64:	08006aed 	.word	0x08006aed
 8006a68:	08006aed 	.word	0x08006aed
 8006a6c:	08006adf 	.word	0x08006adf
 8006a70:	2b40      	cmp	r3, #64	@ 0x40
 8006a72:	d037      	beq.n	8006ae4 <UART_SetConfig+0x6bc>
 8006a74:	e03a      	b.n	8006aec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006a76:	f7fd ff2f 	bl	80048d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006a7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a7c:	e03c      	b.n	8006af8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fd ff3e 	bl	8004904 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a8c:	e034      	b.n	8006af8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a8e:	f107 0318 	add.w	r3, r7, #24
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fe f88a 	bl	8004bac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a9c:	e02c      	b.n	8006af8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a9e:	4b09      	ldr	r3, [pc, #36]	@ (8006ac4 <UART_SetConfig+0x69c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d016      	beq.n	8006ad8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006aaa:	4b06      	ldr	r3, [pc, #24]	@ (8006ac4 <UART_SetConfig+0x69c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	08db      	lsrs	r3, r3, #3
 8006ab0:	f003 0303 	and.w	r3, r3, #3
 8006ab4:	4a07      	ldr	r2, [pc, #28]	@ (8006ad4 <UART_SetConfig+0x6ac>)
 8006ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8006aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006abc:	e01c      	b.n	8006af8 <UART_SetConfig+0x6d0>
 8006abe:	bf00      	nop
 8006ac0:	40011400 	.word	0x40011400
 8006ac4:	58024400 	.word	0x58024400
 8006ac8:	40007800 	.word	0x40007800
 8006acc:	40007c00 	.word	0x40007c00
 8006ad0:	58000c00 	.word	0x58000c00
 8006ad4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006ad8:	4b9d      	ldr	r3, [pc, #628]	@ (8006d50 <UART_SetConfig+0x928>)
 8006ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006adc:	e00c      	b.n	8006af8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ade:	4b9d      	ldr	r3, [pc, #628]	@ (8006d54 <UART_SetConfig+0x92c>)
 8006ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ae2:	e009      	b.n	8006af8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ae4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aea:	e005      	b.n	8006af8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006af6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 81de 	beq.w	8006ebc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b04:	4a94      	ldr	r2, [pc, #592]	@ (8006d58 <UART_SetConfig+0x930>)
 8006b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b12:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	4413      	add	r3, r2
 8006b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d305      	bcc.n	8006b30 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d903      	bls.n	8006b38 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006b36:	e1c1      	b.n	8006ebc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	60bb      	str	r3, [r7, #8]
 8006b3e:	60fa      	str	r2, [r7, #12]
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b44:	4a84      	ldr	r2, [pc, #528]	@ (8006d58 <UART_SetConfig+0x930>)
 8006b46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	603b      	str	r3, [r7, #0]
 8006b50:	607a      	str	r2, [r7, #4]
 8006b52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b5a:	f7f9 fbbd 	bl	80002d8 <__aeabi_uldivmod>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4610      	mov	r0, r2
 8006b64:	4619      	mov	r1, r3
 8006b66:	f04f 0200 	mov.w	r2, #0
 8006b6a:	f04f 0300 	mov.w	r3, #0
 8006b6e:	020b      	lsls	r3, r1, #8
 8006b70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b74:	0202      	lsls	r2, r0, #8
 8006b76:	6979      	ldr	r1, [r7, #20]
 8006b78:	6849      	ldr	r1, [r1, #4]
 8006b7a:	0849      	lsrs	r1, r1, #1
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	460c      	mov	r4, r1
 8006b80:	4605      	mov	r5, r0
 8006b82:	eb12 0804 	adds.w	r8, r2, r4
 8006b86:	eb43 0905 	adc.w	r9, r3, r5
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	469a      	mov	sl, r3
 8006b92:	4693      	mov	fp, r2
 8006b94:	4652      	mov	r2, sl
 8006b96:	465b      	mov	r3, fp
 8006b98:	4640      	mov	r0, r8
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	f7f9 fb9c 	bl	80002d8 <__aeabi_uldivmod>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bae:	d308      	bcc.n	8006bc2 <UART_SetConfig+0x79a>
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bb6:	d204      	bcs.n	8006bc2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bbe:	60da      	str	r2, [r3, #12]
 8006bc0:	e17c      	b.n	8006ebc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006bc8:	e178      	b.n	8006ebc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bd2:	f040 80c5 	bne.w	8006d60 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006bd6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	dc48      	bgt.n	8006c70 <UART_SetConfig+0x848>
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	db7b      	blt.n	8006cda <UART_SetConfig+0x8b2>
 8006be2:	2b20      	cmp	r3, #32
 8006be4:	d879      	bhi.n	8006cda <UART_SetConfig+0x8b2>
 8006be6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bec <UART_SetConfig+0x7c4>)
 8006be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bec:	08006c77 	.word	0x08006c77
 8006bf0:	08006c7f 	.word	0x08006c7f
 8006bf4:	08006cdb 	.word	0x08006cdb
 8006bf8:	08006cdb 	.word	0x08006cdb
 8006bfc:	08006c87 	.word	0x08006c87
 8006c00:	08006cdb 	.word	0x08006cdb
 8006c04:	08006cdb 	.word	0x08006cdb
 8006c08:	08006cdb 	.word	0x08006cdb
 8006c0c:	08006c97 	.word	0x08006c97
 8006c10:	08006cdb 	.word	0x08006cdb
 8006c14:	08006cdb 	.word	0x08006cdb
 8006c18:	08006cdb 	.word	0x08006cdb
 8006c1c:	08006cdb 	.word	0x08006cdb
 8006c20:	08006cdb 	.word	0x08006cdb
 8006c24:	08006cdb 	.word	0x08006cdb
 8006c28:	08006cdb 	.word	0x08006cdb
 8006c2c:	08006ca7 	.word	0x08006ca7
 8006c30:	08006cdb 	.word	0x08006cdb
 8006c34:	08006cdb 	.word	0x08006cdb
 8006c38:	08006cdb 	.word	0x08006cdb
 8006c3c:	08006cdb 	.word	0x08006cdb
 8006c40:	08006cdb 	.word	0x08006cdb
 8006c44:	08006cdb 	.word	0x08006cdb
 8006c48:	08006cdb 	.word	0x08006cdb
 8006c4c:	08006cdb 	.word	0x08006cdb
 8006c50:	08006cdb 	.word	0x08006cdb
 8006c54:	08006cdb 	.word	0x08006cdb
 8006c58:	08006cdb 	.word	0x08006cdb
 8006c5c:	08006cdb 	.word	0x08006cdb
 8006c60:	08006cdb 	.word	0x08006cdb
 8006c64:	08006cdb 	.word	0x08006cdb
 8006c68:	08006cdb 	.word	0x08006cdb
 8006c6c:	08006ccd 	.word	0x08006ccd
 8006c70:	2b40      	cmp	r3, #64	@ 0x40
 8006c72:	d02e      	beq.n	8006cd2 <UART_SetConfig+0x8aa>
 8006c74:	e031      	b.n	8006cda <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c76:	f7fc fbf9 	bl	800346c <HAL_RCC_GetPCLK1Freq>
 8006c7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c7c:	e033      	b.n	8006ce6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c7e:	f7fc fc0b 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 8006c82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c84:	e02f      	b.n	8006ce6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fd fe3a 	bl	8004904 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c94:	e027      	b.n	8006ce6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c96:	f107 0318 	add.w	r3, r7, #24
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fd ff86 	bl	8004bac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ca4:	e01f      	b.n	8006ce6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8006d5c <UART_SetConfig+0x934>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d009      	beq.n	8006cc6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8006d5c <UART_SetConfig+0x934>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	08db      	lsrs	r3, r3, #3
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	4a24      	ldr	r2, [pc, #144]	@ (8006d50 <UART_SetConfig+0x928>)
 8006cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cc4:	e00f      	b.n	8006ce6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006cc6:	4b22      	ldr	r3, [pc, #136]	@ (8006d50 <UART_SetConfig+0x928>)
 8006cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cca:	e00c      	b.n	8006ce6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ccc:	4b21      	ldr	r3, [pc, #132]	@ (8006d54 <UART_SetConfig+0x92c>)
 8006cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cd0:	e009      	b.n	8006ce6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cd8:	e005      	b.n	8006ce6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006ce4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 80e7 	beq.w	8006ebc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf2:	4a19      	ldr	r2, [pc, #100]	@ (8006d58 <UART_SetConfig+0x930>)
 8006cf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d00:	005a      	lsls	r2, r3, #1
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	085b      	lsrs	r3, r3, #1
 8006d08:	441a      	add	r2, r3
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d12:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d16:	2b0f      	cmp	r3, #15
 8006d18:	d916      	bls.n	8006d48 <UART_SetConfig+0x920>
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d20:	d212      	bcs.n	8006d48 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	f023 030f 	bic.w	r3, r3, #15
 8006d2a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2e:	085b      	lsrs	r3, r3, #1
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006d44:	60da      	str	r2, [r3, #12]
 8006d46:	e0b9      	b.n	8006ebc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006d4e:	e0b5      	b.n	8006ebc <UART_SetConfig+0xa94>
 8006d50:	03d09000 	.word	0x03d09000
 8006d54:	003d0900 	.word	0x003d0900
 8006d58:	08007bd0 	.word	0x08007bd0
 8006d5c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d60:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	dc49      	bgt.n	8006dfc <UART_SetConfig+0x9d4>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	db7c      	blt.n	8006e66 <UART_SetConfig+0xa3e>
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d87a      	bhi.n	8006e66 <UART_SetConfig+0xa3e>
 8006d70:	a201      	add	r2, pc, #4	@ (adr r2, 8006d78 <UART_SetConfig+0x950>)
 8006d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d76:	bf00      	nop
 8006d78:	08006e03 	.word	0x08006e03
 8006d7c:	08006e0b 	.word	0x08006e0b
 8006d80:	08006e67 	.word	0x08006e67
 8006d84:	08006e67 	.word	0x08006e67
 8006d88:	08006e13 	.word	0x08006e13
 8006d8c:	08006e67 	.word	0x08006e67
 8006d90:	08006e67 	.word	0x08006e67
 8006d94:	08006e67 	.word	0x08006e67
 8006d98:	08006e23 	.word	0x08006e23
 8006d9c:	08006e67 	.word	0x08006e67
 8006da0:	08006e67 	.word	0x08006e67
 8006da4:	08006e67 	.word	0x08006e67
 8006da8:	08006e67 	.word	0x08006e67
 8006dac:	08006e67 	.word	0x08006e67
 8006db0:	08006e67 	.word	0x08006e67
 8006db4:	08006e67 	.word	0x08006e67
 8006db8:	08006e33 	.word	0x08006e33
 8006dbc:	08006e67 	.word	0x08006e67
 8006dc0:	08006e67 	.word	0x08006e67
 8006dc4:	08006e67 	.word	0x08006e67
 8006dc8:	08006e67 	.word	0x08006e67
 8006dcc:	08006e67 	.word	0x08006e67
 8006dd0:	08006e67 	.word	0x08006e67
 8006dd4:	08006e67 	.word	0x08006e67
 8006dd8:	08006e67 	.word	0x08006e67
 8006ddc:	08006e67 	.word	0x08006e67
 8006de0:	08006e67 	.word	0x08006e67
 8006de4:	08006e67 	.word	0x08006e67
 8006de8:	08006e67 	.word	0x08006e67
 8006dec:	08006e67 	.word	0x08006e67
 8006df0:	08006e67 	.word	0x08006e67
 8006df4:	08006e67 	.word	0x08006e67
 8006df8:	08006e59 	.word	0x08006e59
 8006dfc:	2b40      	cmp	r3, #64	@ 0x40
 8006dfe:	d02e      	beq.n	8006e5e <UART_SetConfig+0xa36>
 8006e00:	e031      	b.n	8006e66 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e02:	f7fc fb33 	bl	800346c <HAL_RCC_GetPCLK1Freq>
 8006e06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e08:	e033      	b.n	8006e72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e0a:	f7fc fb45 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 8006e0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e10:	e02f      	b.n	8006e72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fd fd74 	bl	8004904 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e20:	e027      	b.n	8006e72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e22:	f107 0318 	add.w	r3, r7, #24
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fd fec0 	bl	8004bac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e30:	e01f      	b.n	8006e72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e32:	4b2d      	ldr	r3, [pc, #180]	@ (8006ee8 <UART_SetConfig+0xac0>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0320 	and.w	r3, r3, #32
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d009      	beq.n	8006e52 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8006ee8 <UART_SetConfig+0xac0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	08db      	lsrs	r3, r3, #3
 8006e44:	f003 0303 	and.w	r3, r3, #3
 8006e48:	4a28      	ldr	r2, [pc, #160]	@ (8006eec <UART_SetConfig+0xac4>)
 8006e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e50:	e00f      	b.n	8006e72 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006e52:	4b26      	ldr	r3, [pc, #152]	@ (8006eec <UART_SetConfig+0xac4>)
 8006e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e56:	e00c      	b.n	8006e72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e58:	4b25      	ldr	r3, [pc, #148]	@ (8006ef0 <UART_SetConfig+0xac8>)
 8006e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e5c:	e009      	b.n	8006e72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e64:	e005      	b.n	8006e72 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006e70:	bf00      	nop
    }

    if (pclk != 0U)
 8006e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d021      	beq.n	8006ebc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ef4 <UART_SetConfig+0xacc>)
 8006e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e82:	461a      	mov	r2, r3
 8006e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e86:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	085b      	lsrs	r3, r3, #1
 8006e90:	441a      	add	r2, r3
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9e:	2b0f      	cmp	r3, #15
 8006ea0:	d909      	bls.n	8006eb6 <UART_SetConfig+0xa8e>
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ea8:	d205      	bcs.n	8006eb6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	60da      	str	r2, [r3, #12]
 8006eb4:	e002      	b.n	8006ebc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006ed8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3748      	adds	r7, #72	@ 0x48
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ee6:	bf00      	nop
 8006ee8:	58024400 	.word	0x58024400
 8006eec:	03d09000 	.word	0x03d09000
 8006ef0:	003d0900 	.word	0x003d0900
 8006ef4:	08007bd0 	.word	0x08007bd0

08006ef8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f04:	f003 0308 	and.w	r3, r3, #8
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00a      	beq.n	8006f22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00a      	beq.n	8006f44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00a      	beq.n	8006f66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6a:	f003 0304 	and.w	r3, r3, #4
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00a      	beq.n	8006f88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	430a      	orrs	r2, r1
 8006f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8c:	f003 0310 	and.w	r3, r3, #16
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00a      	beq.n	8006faa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00a      	beq.n	8006fcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d01a      	beq.n	800700e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ff6:	d10a      	bne.n	800700e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	605a      	str	r2, [r3, #4]
  }
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b098      	sub	sp, #96	@ 0x60
 8007040:	af02      	add	r7, sp, #8
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800704c:	f7fa f9a8 	bl	80013a0 <HAL_GetTick>
 8007050:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0308 	and.w	r3, r3, #8
 800705c:	2b08      	cmp	r3, #8
 800705e:	d12f      	bne.n	80070c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007060:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007068:	2200      	movs	r2, #0
 800706a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f88e 	bl	8007190 <UART_WaitOnFlagUntilTimeout>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d022      	beq.n	80070c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007082:	e853 3f00 	ldrex	r3, [r3]
 8007086:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800708a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800708e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	461a      	mov	r2, r3
 8007096:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007098:	647b      	str	r3, [r7, #68]	@ 0x44
 800709a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800709e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070a0:	e841 2300 	strex	r3, r2, [r1]
 80070a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1e6      	bne.n	800707a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e063      	b.n	8007188 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0304 	and.w	r3, r3, #4
 80070ca:	2b04      	cmp	r3, #4
 80070cc:	d149      	bne.n	8007162 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070d6:	2200      	movs	r2, #0
 80070d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f857 	bl	8007190 <UART_WaitOnFlagUntilTimeout>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d03c      	beq.n	8007162 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f0:	e853 3f00 	ldrex	r3, [r3]
 80070f4:	623b      	str	r3, [r7, #32]
   return(result);
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007106:	633b      	str	r3, [r7, #48]	@ 0x30
 8007108:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800710c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800710e:	e841 2300 	strex	r3, r2, [r1]
 8007112:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1e6      	bne.n	80070e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3308      	adds	r3, #8
 8007120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	e853 3f00 	ldrex	r3, [r3]
 8007128:	60fb      	str	r3, [r7, #12]
   return(result);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f023 0301 	bic.w	r3, r3, #1
 8007130:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3308      	adds	r3, #8
 8007138:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800713a:	61fa      	str	r2, [r7, #28]
 800713c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713e:	69b9      	ldr	r1, [r7, #24]
 8007140:	69fa      	ldr	r2, [r7, #28]
 8007142:	e841 2300 	strex	r3, r2, [r1]
 8007146:	617b      	str	r3, [r7, #20]
   return(result);
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1e5      	bne.n	800711a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2220      	movs	r2, #32
 8007152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e012      	b.n	8007188 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2220      	movs	r2, #32
 8007166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2220      	movs	r2, #32
 800716e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3758      	adds	r7, #88	@ 0x58
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	4613      	mov	r3, r2
 800719e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071a0:	e04f      	b.n	8007242 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a8:	d04b      	beq.n	8007242 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071aa:	f7fa f8f9 	bl	80013a0 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d302      	bcc.n	80071c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e04e      	b.n	8007262 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0304 	and.w	r3, r3, #4
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d037      	beq.n	8007242 <UART_WaitOnFlagUntilTimeout+0xb2>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b80      	cmp	r3, #128	@ 0x80
 80071d6:	d034      	beq.n	8007242 <UART_WaitOnFlagUntilTimeout+0xb2>
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2b40      	cmp	r3, #64	@ 0x40
 80071dc:	d031      	beq.n	8007242 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69db      	ldr	r3, [r3, #28]
 80071e4:	f003 0308 	and.w	r3, r3, #8
 80071e8:	2b08      	cmp	r3, #8
 80071ea:	d110      	bne.n	800720e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2208      	movs	r2, #8
 80071f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 f839 	bl	800726c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2208      	movs	r2, #8
 80071fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e029      	b.n	8007262 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800721c:	d111      	bne.n	8007242 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007226:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 f81f 	bl	800726c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2220      	movs	r2, #32
 8007232:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e00f      	b.n	8007262 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	69da      	ldr	r2, [r3, #28]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	4013      	ands	r3, r2
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	429a      	cmp	r2, r3
 8007250:	bf0c      	ite	eq
 8007252:	2301      	moveq	r3, #1
 8007254:	2300      	movne	r3, #0
 8007256:	b2db      	uxtb	r3, r3
 8007258:	461a      	mov	r2, r3
 800725a:	79fb      	ldrb	r3, [r7, #7]
 800725c:	429a      	cmp	r2, r3
 800725e:	d0a0      	beq.n	80071a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800726c:	b480      	push	{r7}
 800726e:	b095      	sub	sp, #84	@ 0x54
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007288:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007292:	643b      	str	r3, [r7, #64]	@ 0x40
 8007294:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007296:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007298:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1e6      	bne.n	8007274 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3308      	adds	r3, #8
 80072ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	4b1e      	ldr	r3, [pc, #120]	@ (8007334 <UART_EndRxTransfer+0xc8>)
 80072ba:	4013      	ands	r3, r2
 80072bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3308      	adds	r3, #8
 80072c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e5      	bne.n	80072a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d118      	bne.n	8007314 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f023 0310 	bic.w	r3, r3, #16
 80072f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	461a      	mov	r2, r3
 80072fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007300:	61bb      	str	r3, [r7, #24]
 8007302:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	6979      	ldr	r1, [r7, #20]
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	613b      	str	r3, [r7, #16]
   return(result);
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e6      	bne.n	80072e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2220      	movs	r2, #32
 8007318:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007328:	bf00      	nop
 800732a:	3754      	adds	r7, #84	@ 0x54
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	effffffe 	.word	0xeffffffe

08007338 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007346:	2b01      	cmp	r3, #1
 8007348:	d101      	bne.n	800734e <HAL_UARTEx_DisableFifoMode+0x16>
 800734a:	2302      	movs	r3, #2
 800734c:	e027      	b.n	800739e <HAL_UARTEx_DisableFifoMode+0x66>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2224      	movs	r2, #36	@ 0x24
 800735a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0201 	bic.w	r2, r2, #1
 8007374:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800737c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d101      	bne.n	80073c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073be:	2302      	movs	r3, #2
 80073c0:	e02d      	b.n	800741e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2224      	movs	r2, #36	@ 0x24
 80073ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0201 	bic.w	r2, r2, #1
 80073e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f850 	bl	80074a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2220      	movs	r2, #32
 8007410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007436:	2b01      	cmp	r3, #1
 8007438:	d101      	bne.n	800743e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800743a:	2302      	movs	r3, #2
 800743c:	e02d      	b.n	800749a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2224      	movs	r2, #36	@ 0x24
 800744a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f022 0201 	bic.w	r2, r2, #1
 8007464:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f812 	bl	80074a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2220      	movs	r2, #32
 800748c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
	...

080074a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d108      	bne.n	80074c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074c4:	e031      	b.n	800752a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074c6:	2310      	movs	r3, #16
 80074c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074ca:	2310      	movs	r3, #16
 80074cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	0e5b      	lsrs	r3, r3, #25
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	f003 0307 	and.w	r3, r3, #7
 80074dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	0f5b      	lsrs	r3, r3, #29
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074ee:	7bbb      	ldrb	r3, [r7, #14]
 80074f0:	7b3a      	ldrb	r2, [r7, #12]
 80074f2:	4911      	ldr	r1, [pc, #68]	@ (8007538 <UARTEx_SetNbDataToProcess+0x94>)
 80074f4:	5c8a      	ldrb	r2, [r1, r2]
 80074f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074fa:	7b3a      	ldrb	r2, [r7, #12]
 80074fc:	490f      	ldr	r1, [pc, #60]	@ (800753c <UARTEx_SetNbDataToProcess+0x98>)
 80074fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007500:	fb93 f3f2 	sdiv	r3, r3, r2
 8007504:	b29a      	uxth	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	7b7a      	ldrb	r2, [r7, #13]
 8007510:	4909      	ldr	r1, [pc, #36]	@ (8007538 <UARTEx_SetNbDataToProcess+0x94>)
 8007512:	5c8a      	ldrb	r2, [r1, r2]
 8007514:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007518:	7b7a      	ldrb	r2, [r7, #13]
 800751a:	4908      	ldr	r1, [pc, #32]	@ (800753c <UARTEx_SetNbDataToProcess+0x98>)
 800751c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800751e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007522:	b29a      	uxth	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800752a:	bf00      	nop
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	08007be8 	.word	0x08007be8
 800753c:	08007bf0 	.word	0x08007bf0

08007540 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007540:	b084      	sub	sp, #16
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	f107 001c 	add.w	r0, r7, #28
 800754e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007552:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007556:	2b01      	cmp	r3, #1
 8007558:	d121      	bne.n	800759e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68da      	ldr	r2, [r3, #12]
 800756a:	4b2c      	ldr	r3, [pc, #176]	@ (800761c <USB_CoreInit+0xdc>)
 800756c:	4013      	ands	r3, r2
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800757e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007582:	2b01      	cmp	r3, #1
 8007584:	d105      	bne.n	8007592 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 faaa 	bl	8007aec <USB_CoreReset>
 8007598:	4603      	mov	r3, r0
 800759a:	73fb      	strb	r3, [r7, #15]
 800759c:	e01b      	b.n	80075d6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa9e 	bl	8007aec <USB_CoreReset>
 80075b0:	4603      	mov	r3, r0
 80075b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80075b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d106      	bne.n	80075ca <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80075c8:	e005      	b.n	80075d6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80075d6:	7fbb      	ldrb	r3, [r7, #30]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d116      	bne.n	800760a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80075ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007620 <USB_CoreInit+0xe0>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f043 0206 	orr.w	r2, r3, #6
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f043 0220 	orr.w	r2, r3, #32
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800760a:	7bfb      	ldrb	r3, [r7, #15]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007616:	b004      	add	sp, #16
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	ffbdffbf 	.word	0xffbdffbf
 8007620:	03ee0000 	.word	0x03ee0000

08007624 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f023 0201 	bic.w	r2, r3, #1
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d115      	bne.n	8007694 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007674:	200a      	movs	r0, #10
 8007676:	f7f9 fe9f 	bl	80013b8 <HAL_Delay>
      ms += 10U;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	330a      	adds	r3, #10
 800767e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fa25 	bl	8007ad0 <USB_GetMode>
 8007686:	4603      	mov	r3, r0
 8007688:	2b01      	cmp	r3, #1
 800768a:	d01e      	beq.n	80076ca <USB_SetCurrentMode+0x84>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007690:	d9f0      	bls.n	8007674 <USB_SetCurrentMode+0x2e>
 8007692:	e01a      	b.n	80076ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007694:	78fb      	ldrb	r3, [r7, #3]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d115      	bne.n	80076c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80076a6:	200a      	movs	r0, #10
 80076a8:	f7f9 fe86 	bl	80013b8 <HAL_Delay>
      ms += 10U;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	330a      	adds	r3, #10
 80076b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fa0c 	bl	8007ad0 <USB_GetMode>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d005      	beq.n	80076ca <USB_SetCurrentMode+0x84>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80076c2:	d9f0      	bls.n	80076a6 <USB_SetCurrentMode+0x60>
 80076c4:	e001      	b.n	80076ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e005      	b.n	80076d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2bc8      	cmp	r3, #200	@ 0xc8
 80076ce:	d101      	bne.n	80076d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e000      	b.n	80076d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076e0:	b084      	sub	sp, #16
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b086      	sub	sp, #24
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80076ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80076fa:	2300      	movs	r3, #0
 80076fc:	613b      	str	r3, [r7, #16]
 80076fe:	e009      	b.n	8007714 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	3340      	adds	r3, #64	@ 0x40
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	2200      	movs	r2, #0
 800770c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	3301      	adds	r3, #1
 8007712:	613b      	str	r3, [r7, #16]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	2b0e      	cmp	r3, #14
 8007718:	d9f2      	bls.n	8007700 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800771a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800771e:	2b00      	cmp	r3, #0
 8007720:	d11c      	bne.n	800775c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007730:	f043 0302 	orr.w	r3, r3, #2
 8007734:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	e005      	b.n	8007768 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007760:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800776e:	461a      	mov	r2, r3
 8007770:	2300      	movs	r3, #0
 8007772:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007774:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007778:	2b01      	cmp	r3, #1
 800777a:	d10d      	bne.n	8007798 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800777c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007780:	2b00      	cmp	r3, #0
 8007782:	d104      	bne.n	800778e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007784:	2100      	movs	r1, #0
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f968 	bl	8007a5c <USB_SetDevSpeed>
 800778c:	e008      	b.n	80077a0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800778e:	2101      	movs	r1, #1
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f963 	bl	8007a5c <USB_SetDevSpeed>
 8007796:	e003      	b.n	80077a0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007798:	2103      	movs	r1, #3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f95e 	bl	8007a5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077a0:	2110      	movs	r1, #16
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f8fa 	bl	800799c <USB_FlushTxFifo>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f924 	bl	8007a00 <USB_FlushRxFifo>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c8:	461a      	mov	r2, r3
 80077ca:	2300      	movs	r3, #0
 80077cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077d4:	461a      	mov	r2, r3
 80077d6:	2300      	movs	r3, #0
 80077d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077e0:	461a      	mov	r2, r3
 80077e2:	2300      	movs	r3, #0
 80077e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077e6:	2300      	movs	r3, #0
 80077e8:	613b      	str	r3, [r7, #16]
 80077ea:	e043      	b.n	8007874 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007802:	d118      	bne.n	8007836 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10a      	bne.n	8007820 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4413      	add	r3, r2
 8007812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007816:	461a      	mov	r2, r3
 8007818:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800781c:	6013      	str	r3, [r2, #0]
 800781e:	e013      	b.n	8007848 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800782c:	461a      	mov	r2, r3
 800782e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	e008      	b.n	8007848 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	015a      	lsls	r2, r3, #5
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	4413      	add	r3, r2
 800783e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007842:	461a      	mov	r2, r3
 8007844:	2300      	movs	r3, #0
 8007846:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4413      	add	r3, r2
 8007850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007854:	461a      	mov	r2, r3
 8007856:	2300      	movs	r3, #0
 8007858:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	015a      	lsls	r2, r3, #5
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4413      	add	r3, r2
 8007862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007866:	461a      	mov	r2, r3
 8007868:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800786c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	3301      	adds	r3, #1
 8007872:	613b      	str	r3, [r7, #16]
 8007874:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007878:	461a      	mov	r2, r3
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	4293      	cmp	r3, r2
 800787e:	d3b5      	bcc.n	80077ec <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007880:	2300      	movs	r3, #0
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	e043      	b.n	800790e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	4413      	add	r3, r2
 800788e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007898:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800789c:	d118      	bne.n	80078d0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10a      	bne.n	80078ba <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078b0:	461a      	mov	r2, r3
 80078b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	e013      	b.n	80078e2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078c6:	461a      	mov	r2, r3
 80078c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	e008      	b.n	80078e2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078dc:	461a      	mov	r2, r3
 80078de:	2300      	movs	r3, #0
 80078e0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ee:	461a      	mov	r2, r3
 80078f0:	2300      	movs	r3, #0
 80078f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007900:	461a      	mov	r2, r3
 8007902:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007906:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	3301      	adds	r3, #1
 800790c:	613b      	str	r3, [r7, #16]
 800790e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007912:	461a      	mov	r2, r3
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	4293      	cmp	r3, r2
 8007918:	d3b5      	bcc.n	8007886 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800792c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800793a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800793c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007940:	2b00      	cmp	r3, #0
 8007942:	d105      	bne.n	8007950 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	f043 0210 	orr.w	r2, r3, #16
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	699a      	ldr	r2, [r3, #24]
 8007954:	4b0f      	ldr	r3, [pc, #60]	@ (8007994 <USB_DevInit+0x2b4>)
 8007956:	4313      	orrs	r3, r2
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800795c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007960:	2b00      	cmp	r3, #0
 8007962:	d005      	beq.n	8007970 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	f043 0208 	orr.w	r2, r3, #8
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007970:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007974:	2b01      	cmp	r3, #1
 8007976:	d105      	bne.n	8007984 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	699a      	ldr	r2, [r3, #24]
 800797c:	4b06      	ldr	r3, [pc, #24]	@ (8007998 <USB_DevInit+0x2b8>)
 800797e:	4313      	orrs	r3, r2
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007984:	7dfb      	ldrb	r3, [r7, #23]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007990:	b004      	add	sp, #16
 8007992:	4770      	bx	lr
 8007994:	803c3800 	.word	0x803c3800
 8007998:	40000004 	.word	0x40000004

0800799c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079a6:	2300      	movs	r3, #0
 80079a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3301      	adds	r3, #1
 80079ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079b6:	d901      	bls.n	80079bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e01b      	b.n	80079f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	daf2      	bge.n	80079aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	019b      	lsls	r3, r3, #6
 80079cc:	f043 0220 	orr.w	r2, r3, #32
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	3301      	adds	r3, #1
 80079d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079e0:	d901      	bls.n	80079e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e006      	b.n	80079f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f003 0320 	and.w	r3, r3, #32
 80079ee:	2b20      	cmp	r3, #32
 80079f0:	d0f0      	beq.n	80079d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a18:	d901      	bls.n	8007a1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e018      	b.n	8007a50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	daf2      	bge.n	8007a0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2210      	movs	r2, #16
 8007a2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3301      	adds	r3, #1
 8007a34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a3c:	d901      	bls.n	8007a42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e006      	b.n	8007a50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f003 0310 	and.w	r3, r3, #16
 8007a4a:	2b10      	cmp	r3, #16
 8007a4c:	d0f0      	beq.n	8007a30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	78fb      	ldrb	r3, [r7, #3]
 8007a76:	68f9      	ldr	r1, [r7, #12]
 8007a78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b085      	sub	sp, #20
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007aa8:	f023 0303 	bic.w	r3, r3, #3
 8007aac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007abc:	f043 0302 	orr.w	r3, r3, #2
 8007ac0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	f003 0301 	and.w	r3, r3, #1
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	3301      	adds	r3, #1
 8007afc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b04:	d901      	bls.n	8007b0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e01b      	b.n	8007b42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	daf2      	bge.n	8007af8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f043 0201 	orr.w	r2, r3, #1
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3301      	adds	r3, #1
 8007b26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b2e:	d901      	bls.n	8007b34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e006      	b.n	8007b42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d0f0      	beq.n	8007b22 <USB_CoreReset+0x36>

  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <memset>:
 8007b4e:	4402      	add	r2, r0
 8007b50:	4603      	mov	r3, r0
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d100      	bne.n	8007b58 <memset+0xa>
 8007b56:	4770      	bx	lr
 8007b58:	f803 1b01 	strb.w	r1, [r3], #1
 8007b5c:	e7f9      	b.n	8007b52 <memset+0x4>
	...

08007b60 <__libc_init_array>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	4d0d      	ldr	r5, [pc, #52]	@ (8007b98 <__libc_init_array+0x38>)
 8007b64:	4c0d      	ldr	r4, [pc, #52]	@ (8007b9c <__libc_init_array+0x3c>)
 8007b66:	1b64      	subs	r4, r4, r5
 8007b68:	10a4      	asrs	r4, r4, #2
 8007b6a:	2600      	movs	r6, #0
 8007b6c:	42a6      	cmp	r6, r4
 8007b6e:	d109      	bne.n	8007b84 <__libc_init_array+0x24>
 8007b70:	4d0b      	ldr	r5, [pc, #44]	@ (8007ba0 <__libc_init_array+0x40>)
 8007b72:	4c0c      	ldr	r4, [pc, #48]	@ (8007ba4 <__libc_init_array+0x44>)
 8007b74:	f000 f818 	bl	8007ba8 <_init>
 8007b78:	1b64      	subs	r4, r4, r5
 8007b7a:	10a4      	asrs	r4, r4, #2
 8007b7c:	2600      	movs	r6, #0
 8007b7e:	42a6      	cmp	r6, r4
 8007b80:	d105      	bne.n	8007b8e <__libc_init_array+0x2e>
 8007b82:	bd70      	pop	{r4, r5, r6, pc}
 8007b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b88:	4798      	blx	r3
 8007b8a:	3601      	adds	r6, #1
 8007b8c:	e7ee      	b.n	8007b6c <__libc_init_array+0xc>
 8007b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b92:	4798      	blx	r3
 8007b94:	3601      	adds	r6, #1
 8007b96:	e7f2      	b.n	8007b7e <__libc_init_array+0x1e>
 8007b98:	08007c00 	.word	0x08007c00
 8007b9c:	08007c00 	.word	0x08007c00
 8007ba0:	08007c00 	.word	0x08007c00
 8007ba4:	08007c04 	.word	0x08007c04

08007ba8 <_init>:
 8007ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007baa:	bf00      	nop
 8007bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bae:	bc08      	pop	{r3}
 8007bb0:	469e      	mov	lr, r3
 8007bb2:	4770      	bx	lr

08007bb4 <_fini>:
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	bf00      	nop
 8007bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bba:	bc08      	pop	{r3}
 8007bbc:	469e      	mov	lr, r3
 8007bbe:	4770      	bx	lr
