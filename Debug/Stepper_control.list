
Stepper_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079d8  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007c70  08007c70  00008c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007ca8  08007ca8  00008ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007cb0  08007cb0  00008cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007cb4  08007cb4  00008cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  08007cb8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  08007ccc  00009014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  08007d2c  00009074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  240000d4  08007d8c  000090d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240007a8  08007d8c  000097a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000090d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca44  00000000  00000000  00009102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d83  00000000  00000000  00025b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  000288d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001071  00000000  00000000  00029dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038de2  00000000  00000000  0002ae39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b96b  00000000  00000000  00063c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016c7fb  00000000  00000000  0007f586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ebd81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b30  00000000  00000000  001ebdc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001f18f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d4 	.word	0x240000d4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007c58 	.word	0x08007c58

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d8 	.word	0x240000d8
 80002d4:	08007c58 	.word	0x08007c58

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <accelerate_RPM>:

}



void accelerate_RPM(int target_speed_RPM) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

	//Porneste generarea de semnal PWM
	int target_frequency = (target_speed_RPM / 60.0) * 200;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	ee07 3a90 	vmov	s15, r3
 80005d6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80005da:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 8000658 <accelerate_RPM+0x90>
 80005de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005e2:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8000660 <accelerate_RPM+0x98>
 80005e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005ea:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80005ee:	ee17 3a90 	vmov	r3, s15
 80005f2:	60fb      	str	r3, [r7, #12]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005f4:	2100      	movs	r1, #0
 80005f6:	481c      	ldr	r0, [pc, #112]	@ (8000668 <accelerate_RPM+0xa0>)
 80005f8:	f004 fea0 	bl	800533c <HAL_TIM_PWM_Start>

	while (current_frequency < target_frequency) {
 80005fc:	e021      	b.n	8000642 <accelerate_RPM+0x7a>

		current_frequency += ACCELERATION_STEP;
 80005fe:	4b1b      	ldr	r3, [pc, #108]	@ (800066c <accelerate_RPM+0xa4>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	4a19      	ldr	r2, [pc, #100]	@ (800066c <accelerate_RPM+0xa4>)
 8000606:	6013      	str	r3, [r2, #0]

		if (current_frequency > target_frequency) {
 8000608:	4b18      	ldr	r3, [pc, #96]	@ (800066c <accelerate_RPM+0xa4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	68fa      	ldr	r2, [r7, #12]
 800060e:	429a      	cmp	r2, r3
 8000610:	da02      	bge.n	8000618 <accelerate_RPM+0x50>
			current_frequency = target_frequency;
 8000612:	4a16      	ldr	r2, [pc, #88]	@ (800066c <accelerate_RPM+0xa4>)
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	6013      	str	r3, [r2, #0]
		}

		//Actualizeaza ARR cu noua valoare (1000000 este frecventa ceasului folosita pentru pwm -64mhz cu prescalar de 64)
		__HAL_TIM_SET_AUTORELOAD(&htim3, (1000000 / current_frequency) - 1);
 8000618:	4b14      	ldr	r3, [pc, #80]	@ (800066c <accelerate_RPM+0xa4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a14      	ldr	r2, [pc, #80]	@ (8000670 <accelerate_RPM+0xa8>)
 800061e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000622:	1e5a      	subs	r2, r3, #1
 8000624:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <accelerate_RPM+0xa0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	62da      	str	r2, [r3, #44]	@ 0x2c
 800062a:	4b10      	ldr	r3, [pc, #64]	@ (800066c <accelerate_RPM+0xa4>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a10      	ldr	r2, [pc, #64]	@ (8000670 <accelerate_RPM+0xa8>)
 8000630:	fb92 f3f3 	sdiv	r3, r2, r3
 8000634:	3b01      	subs	r3, #1
 8000636:	461a      	mov	r2, r3
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <accelerate_RPM+0xa0>)
 800063a:	60da      	str	r2, [r3, #12]
		HAL_Delay(10);
 800063c:	200a      	movs	r0, #10
 800063e:	f000 ff13 	bl	8001468 <HAL_Delay>
	while (current_frequency < target_frequency) {
 8000642:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <accelerate_RPM+0xa4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	429a      	cmp	r2, r3
 800064a:	dcd8      	bgt.n	80005fe <accelerate_RPM+0x36>
	}
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	00000000 	.word	0x00000000
 800065c:	404e0000 	.word	0x404e0000
 8000660:	00000000 	.word	0x00000000
 8000664:	40690000 	.word	0x40690000
 8000668:	240001d8 	.word	0x240001d8
 800066c:	24000000 	.word	0x24000000
 8000670:	000f4240 	.word	0x000f4240
 8000674:	00000000 	.word	0x00000000

08000678 <decelerate_to_RPM>:

void decelerate_to_RPM(int target_speed_RPM) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	int target_frequency = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]

	if (target_speed_RPM == 0) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d102      	bne.n	8000690 <decelerate_to_RPM+0x18>
		target_frequency = MIN_FREQUENCY;
 800068a:	2310      	movs	r3, #16
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	e034      	b.n	80006fa <decelerate_to_RPM+0x82>
	} else {
		target_frequency = (target_speed_RPM / 60.0) * 200;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	ee07 3a90 	vmov	s15, r3
 8000696:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800069a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8000720 <decelerate_to_RPM+0xa8>
 800069e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006a2:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 8000728 <decelerate_to_RPM+0xb0>
 80006a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006aa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80006ae:	ee17 3a90 	vmov	r3, s15
 80006b2:	60fb      	str	r3, [r7, #12]
	}
	while (current_frequency > target_frequency) {
 80006b4:	e021      	b.n	80006fa <decelerate_to_RPM+0x82>

		current_frequency -= DECELERATION_STEP;
 80006b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000730 <decelerate_to_RPM+0xb8>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000730 <decelerate_to_RPM+0xb8>)
 80006be:	6013      	str	r3, [r2, #0]

		if (current_frequency < target_frequency) {
 80006c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <decelerate_to_RPM+0xb8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	dd02      	ble.n	80006d0 <decelerate_to_RPM+0x58>
			current_frequency = target_frequency;
 80006ca:	4a19      	ldr	r2, [pc, #100]	@ (8000730 <decelerate_to_RPM+0xb8>)
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	6013      	str	r3, [r2, #0]
		}

		//Actualizeaza ARR cu noua valoare (1000000 este frecventa ceasului folosita pentru pwm -64mhz cu prescalar de 64)
		__HAL_TIM_SET_AUTORELOAD(&htim3, (1000000 / current_frequency) - 1);
 80006d0:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <decelerate_to_RPM+0xb8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a17      	ldr	r2, [pc, #92]	@ (8000734 <decelerate_to_RPM+0xbc>)
 80006d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80006da:	1e5a      	subs	r2, r3, #1
 80006dc:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <decelerate_to_RPM+0xc0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006e2:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <decelerate_to_RPM+0xb8>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a13      	ldr	r2, [pc, #76]	@ (8000734 <decelerate_to_RPM+0xbc>)
 80006e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80006ec:	3b01      	subs	r3, #1
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <decelerate_to_RPM+0xc0>)
 80006f2:	60da      	str	r2, [r3, #12]
		HAL_Delay(10);
 80006f4:	200a      	movs	r0, #10
 80006f6:	f000 feb7 	bl	8001468 <HAL_Delay>
	while (current_frequency > target_frequency) {
 80006fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <decelerate_to_RPM+0xb8>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	429a      	cmp	r2, r3
 8000702:	dbd8      	blt.n	80006b6 <decelerate_to_RPM+0x3e>
	}
	if (target_speed_RPM == 0 && target_frequency == 16) {
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d106      	bne.n	8000718 <decelerate_to_RPM+0xa0>
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2b10      	cmp	r3, #16
 800070e:	d103      	bne.n	8000718 <decelerate_to_RPM+0xa0>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000710:	2100      	movs	r1, #0
 8000712:	4809      	ldr	r0, [pc, #36]	@ (8000738 <decelerate_to_RPM+0xc0>)
 8000714:	f004 ff20 	bl	8005558 <HAL_TIM_PWM_Stop>
	}
}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	00000000 	.word	0x00000000
 8000724:	404e0000 	.word	0x404e0000
 8000728:	00000000 	.word	0x00000000
 800072c:	40690000 	.word	0x40690000
 8000730:	24000000 	.word	0x24000000
 8000734:	000f4240 	.word	0x000f4240
 8000738:	240001d8 	.word	0x240001d8

0800073c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000740:	f000 fe00 	bl	8001344 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000744:	f000 f838 	bl	80007b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000748:	f000 f9fa 	bl	8000b40 <MX_GPIO_Init>
	MX_ETH_Init();
 800074c:	f000 f8b4 	bl	80008b8 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000750:	f000 f978 	bl	8000a44 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000754:	f000 f9c2 	bl	8000adc <MX_USB_OTG_FS_PCD_Init>
	MX_TIM3_Init();
 8000758:	f000 f8fa 	bl	8000950 <MX_TIM3_Init>

	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800075c:	2100      	movs	r1, #0
 800075e:	4814      	ldr	r0, [pc, #80]	@ (80007b0 <main+0x74>)
 8000760:	f004 fdec 	bl	800533c <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2120      	movs	r1, #32
 8000768:	4812      	ldr	r0, [pc, #72]	@ (80007b4 <main+0x78>)
 800076a:	f001 fd89 	bl	8002280 <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		accelerate_RPM(430);
 800076e:	f44f 70d7 	mov.w	r0, #430	@ 0x1ae
 8000772:	f7ff ff29 	bl	80005c8 <accelerate_RPM>
		HAL_Delay(1000);
 8000776:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800077a:	f000 fe75 	bl	8001468 <HAL_Delay>

		decelerate_to_RPM(200);
 800077e:	20c8      	movs	r0, #200	@ 0xc8
 8000780:	f7ff ff7a 	bl	8000678 <decelerate_to_RPM>
		HAL_Delay(1000);
 8000784:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000788:	f000 fe6e 	bl	8001468 <HAL_Delay>

		accelerate_RPM(330);
 800078c:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8000790:	f7ff ff1a 	bl	80005c8 <accelerate_RPM>
		HAL_Delay(1000);
 8000794:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000798:	f000 fe66 	bl	8001468 <HAL_Delay>

		decelerate_to_RPM(0);
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff ff6b 	bl	8000678 <decelerate_to_RPM>
		HAL_Delay(1000);
 80007a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007a6:	f000 fe5f 	bl	8001468 <HAL_Delay>
		accelerate_RPM(430);
 80007aa:	bf00      	nop
 80007ac:	e7df      	b.n	800076e <main+0x32>
 80007ae:	bf00      	nop
 80007b0:	240001d8 	.word	0x240001d8
 80007b4:	58020000 	.word	0x58020000

080007b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b09c      	sub	sp, #112	@ 0x70
 80007bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c2:	224c      	movs	r2, #76	@ 0x4c
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f007 fa19 	bl	8007bfe <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2220      	movs	r2, #32
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f007 fa13 	bl	8007bfe <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007d8:	2002      	movs	r0, #2
 80007da:	f001 fe9b 	bl	8002514 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b33      	ldr	r3, [pc, #204]	@ (80008b0 <SystemClock_Config+0xf8>)
 80007e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007e6:	4a32      	ldr	r2, [pc, #200]	@ (80008b0 <SystemClock_Config+0xf8>)
 80007e8:	f023 0301 	bic.w	r3, r3, #1
 80007ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007ee:	4b30      	ldr	r3, [pc, #192]	@ (80008b0 <SystemClock_Config+0xf8>)
 80007f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	4b2e      	ldr	r3, [pc, #184]	@ (80008b4 <SystemClock_Config+0xfc>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000800:	4a2c      	ldr	r2, [pc, #176]	@ (80008b4 <SystemClock_Config+0xfc>)
 8000802:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <SystemClock_Config+0xfc>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000814:	bf00      	nop
 8000816:	4b27      	ldr	r3, [pc, #156]	@ (80008b4 <SystemClock_Config+0xfc>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800081e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000822:	d1f8      	bne.n	8000816 <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000824:	2303      	movs	r3, #3
 8000826:	627b      	str	r3, [r7, #36]	@ 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000828:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800082c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800082e:	2301      	movs	r3, #1
 8000830:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000832:	2340      	movs	r3, #64	@ 0x40
 8000834:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	2302      	movs	r3, #2
 800083c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 800083e:	2301      	movs	r3, #1
 8000840:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 24;
 8000842:	2318      	movs	r3, #24
 8000844:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800084a:	2304      	movs	r3, #4
 800084c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000852:	230c      	movs	r3, #12
 8000854:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000856:	2300      	movs	r3, #0
 8000858:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800085e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fea0 	bl	80025a8 <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xba>
		Error_Handler();
 800086e:	f000 fa57 	bl	8000d20 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000872:	233f      	movs	r3, #63	@ 0x3f
 8000874:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000886:	2340      	movs	r3, #64	@ 0x40
 8000888:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2101      	movs	r1, #1
 8000896:	4618      	mov	r0, r3
 8000898:	f002 fae0 	bl	8002e5c <HAL_RCC_ClockConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xee>
		Error_Handler();
 80008a2:	f000 fa3d 	bl	8000d20 <Error_Handler>
	}
}
 80008a6:	bf00      	nop
 80008a8:	3770      	adds	r7, #112	@ 0x70
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	58000400 	.word	0x58000400
 80008b4:	58024800 	.word	0x58024800

080008b8 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 80008bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <MX_ETH_Init+0x80>)
 80008be:	4a1f      	ldr	r2, [pc, #124]	@ (800093c <MX_ETH_Init+0x84>)
 80008c0:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 80008c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <MX_ETH_Init+0x88>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000940 <MX_ETH_Init+0x88>)
 80008ca:	2280      	movs	r2, #128	@ 0x80
 80008cc:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <MX_ETH_Init+0x88>)
 80008d0:	22e1      	movs	r2, #225	@ 0xe1
 80008d2:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000940 <MX_ETH_Init+0x88>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 80008da:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <MX_ETH_Init+0x88>)
 80008dc:	2200      	movs	r2, #0
 80008de:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 80008e0:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <MX_ETH_Init+0x88>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 80008e6:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_ETH_Init+0x80>)
 80008e8:	4a15      	ldr	r2, [pc, #84]	@ (8000940 <MX_ETH_Init+0x88>)
 80008ea:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <MX_ETH_Init+0x80>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	721a      	strb	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_ETH_Init+0x80>)
 80008f4:	4a13      	ldr	r2, [pc, #76]	@ (8000944 <MX_ETH_Init+0x8c>)
 80008f6:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_ETH_Init+0x80>)
 80008fa:	4a13      	ldr	r2, [pc, #76]	@ (8000948 <MX_ETH_Init+0x90>)
 80008fc:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_ETH_Init+0x80>)
 8000900:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000904:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000906:	480c      	ldr	r0, [pc, #48]	@ (8000938 <MX_ETH_Init+0x80>)
 8000908:	f000 fed6 	bl	80016b8 <HAL_ETH_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ETH_Init+0x5e>
		Error_Handler();
 8000912:	f000 fa05 	bl	8000d20 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000916:	2238      	movs	r2, #56	@ 0x38
 8000918:	2100      	movs	r1, #0
 800091a:	480c      	ldr	r0, [pc, #48]	@ (800094c <MX_ETH_Init+0x94>)
 800091c:	f007 f96f 	bl	8007bfe <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8000920:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <MX_ETH_Init+0x94>)
 8000922:	2221      	movs	r2, #33	@ 0x21
 8000924:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_ETH_Init+0x94>)
 8000928:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800092c:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800092e:	4b07      	ldr	r3, [pc, #28]	@ (800094c <MX_ETH_Init+0x94>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	24000128 	.word	0x24000128
 800093c:	40028000 	.word	0x40028000
 8000940:	2400079c 	.word	0x2400079c
 8000944:	24000074 	.word	0x24000074
 8000948:	24000014 	.word	0x24000014
 800094c:	240000f0 	.word	0x240000f0

08000950 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b08e      	sub	sp, #56	@ 0x38
 8000954:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000956:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
 800097e:	615a      	str	r2, [r3, #20]
 8000980:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000982:	4b2e      	ldr	r3, [pc, #184]	@ (8000a3c <MX_TIM3_Init+0xec>)
 8000984:	4a2e      	ldr	r2, [pc, #184]	@ (8000a40 <MX_TIM3_Init+0xf0>)
 8000986:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 64 - 1;
 8000988:	4b2c      	ldr	r3, [pc, #176]	@ (8000a3c <MX_TIM3_Init+0xec>)
 800098a:	223f      	movs	r2, #63	@ 0x3f
 800098c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098e:	4b2b      	ldr	r3, [pc, #172]	@ (8000a3c <MX_TIM3_Init+0xec>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 8000994:	4b29      	ldr	r3, [pc, #164]	@ (8000a3c <MX_TIM3_Init+0xec>)
 8000996:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800099a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099c:	4b27      	ldr	r3, [pc, #156]	@ (8000a3c <MX_TIM3_Init+0xec>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009a2:	4b26      	ldr	r3, [pc, #152]	@ (8000a3c <MX_TIM3_Init+0xec>)
 80009a4:	2280      	movs	r2, #128	@ 0x80
 80009a6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80009a8:	4824      	ldr	r0, [pc, #144]	@ (8000a3c <MX_TIM3_Init+0xec>)
 80009aa:	f004 fc0f 	bl	80051cc <HAL_TIM_Base_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM3_Init+0x68>
		Error_Handler();
 80009b4:	f000 f9b4 	bl	8000d20 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80009be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009c2:	4619      	mov	r1, r3
 80009c4:	481d      	ldr	r0, [pc, #116]	@ (8000a3c <MX_TIM3_Init+0xec>)
 80009c6:	f004 ff71 	bl	80058ac <HAL_TIM_ConfigClockSource>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM3_Init+0x84>
		Error_Handler();
 80009d0:	f000 f9a6 	bl	8000d20 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80009d4:	4819      	ldr	r0, [pc, #100]	@ (8000a3c <MX_TIM3_Init+0xec>)
 80009d6:	f004 fc50 	bl	800527a <HAL_TIM_PWM_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM3_Init+0x94>
		Error_Handler();
 80009e0:	f000 f99e 	bl	8000d20 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4812      	ldr	r0, [pc, #72]	@ (8000a3c <MX_TIM3_Init+0xec>)
 80009f4:	f005 fc92 	bl	800631c <HAL_TIMEx_MasterConfigSynchronization>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80009fe:	f000 f98f 	bl	8000d20 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a02:	2360      	movs	r3, #96	@ 0x60
 8000a04:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = htim3.Init.Period / 2;
 8000a06:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <MX_TIM3_Init+0xec>)
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	085b      	lsrs	r3, r3, #1
 8000a0c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000a16:	463b      	mov	r3, r7
 8000a18:	2200      	movs	r2, #0
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4807      	ldr	r0, [pc, #28]	@ (8000a3c <MX_TIM3_Init+0xec>)
 8000a1e:	f004 fe31 	bl	8005684 <HAL_TIM_PWM_ConfigChannel>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM3_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 8000a28:	f000 f97a 	bl	8000d20 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000a2c:	4803      	ldr	r0, [pc, #12]	@ (8000a3c <MX_TIM3_Init+0xec>)
 8000a2e:	f000 fa87 	bl	8000f40 <HAL_TIM_MspPostInit>

}
 8000a32:	bf00      	nop
 8000a34:	3738      	adds	r7, #56	@ 0x38
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	240001d8 	.word	0x240001d8
 8000a40:	40000400 	.word	0x40000400

08000a44 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000a48:	4b22      	ldr	r3, [pc, #136]	@ (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a4a:	4a23      	ldr	r2, [pc, #140]	@ (8000ad8 <MX_USART3_UART_Init+0x94>)
 8000a4c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000a4e:	4b21      	ldr	r3, [pc, #132]	@ (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a80:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	@ 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a86:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000a8c:	4811      	ldr	r0, [pc, #68]	@ (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a8e:	f005 fcd3 	bl	8006438 <HAL_UART_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART3_UART_Init+0x58>
		Error_Handler();
 8000a98:	f000 f942 	bl	8000d20 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	480d      	ldr	r0, [pc, #52]	@ (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000aa0:	f006 fcdb 	bl	800745a <HAL_UARTEx_SetTxFifoThreshold>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART3_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000aaa:	f000 f939 	bl	8000d20 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4808      	ldr	r0, [pc, #32]	@ (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000ab2:	f006 fd10 	bl	80074d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000abc:	f000 f930 	bl	8000d20 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000ac0:	4804      	ldr	r0, [pc, #16]	@ (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000ac2:	f006 fc91 	bl	80073e8 <HAL_UARTEx_DisableFifoMode>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 8000acc:	f000 f928 	bl	8000d20 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	24000224 	.word	0x24000224
 8000ad8:	40004800 	.word	0x40004800

08000adc <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae2:	4a16      	ldr	r2, [pc, #88]	@ (8000b3c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ae4:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae8:	2209      	movs	r2, #9
 8000aea:	711a      	strb	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	71da      	strb	r2, [r3, #7]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	719a      	strb	r2, [r3, #6]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000afa:	2202      	movs	r2, #2
 8000afc:	725a      	strb	r2, [r3, #9]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	729a      	strb	r2, [r3, #10]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	72da      	strb	r2, [r3, #11]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	731a      	strb	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b10:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	735a      	strb	r2, [r3, #13]
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	739a      	strb	r2, [r3, #14]
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	73da      	strb	r2, [r3, #15]
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000b22:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b24:	f001 fbc5 	bl	80022b2 <HAL_PCD_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USB_OTG_FS_PCD_Init+0x56>
		Error_Handler();
 8000b2e:	f000 f8f7 	bl	8000d20 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	240002b8 	.word	0x240002b8
 8000b3c:	40080000 	.word	0x40080000

08000b40 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	@ 0x30
 8000b44:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	4b6b      	ldr	r3, [pc, #428]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	4a69      	ldr	r2, [pc, #420]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b66:	4b67      	ldr	r3, [pc, #412]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b74:	4b63      	ldr	r3, [pc, #396]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7a:	4a62      	ldr	r2, [pc, #392]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b84:	4b5f      	ldr	r3, [pc, #380]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b5c      	ldr	r3, [pc, #368]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b98:	4a5a      	ldr	r2, [pc, #360]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba2:	4b58      	ldr	r3, [pc, #352]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb0:	4b54      	ldr	r3, [pc, #336]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb6:	4a53      	ldr	r2, [pc, #332]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc0:	4b50      	ldr	r3, [pc, #320]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	4b4d      	ldr	r3, [pc, #308]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd4:	4a4b      	ldr	r2, [pc, #300]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000bd6:	f043 0308 	orr.w	r3, r3, #8
 8000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bde:	4b49      	ldr	r3, [pc, #292]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be4:	f003 0308 	and.w	r3, r3, #8
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000bec:	4b45      	ldr	r3, [pc, #276]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf2:	4a44      	ldr	r2, [pc, #272]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000bf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bfc:	4b41      	ldr	r3, [pc, #260]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c10:	4a3c      	ldr	r2, [pc, #240]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c1a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d04 <MX_GPIO_Init+0x1c4>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c20:	f003 0310 	and.w	r3, r3, #16
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2120      	movs	r1, #32
 8000c2c:	4836      	ldr	r0, [pc, #216]	@ (8000d08 <MX_GPIO_Init+0x1c8>)
 8000c2e:	f001 fb27 	bl	8002280 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000c38:	4834      	ldr	r0, [pc, #208]	@ (8000d0c <MX_GPIO_Init+0x1cc>)
 8000c3a:	f001 fb21 	bl	8002280 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin,
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c44:	4832      	ldr	r0, [pc, #200]	@ (8000d10 <MX_GPIO_Init+0x1d0>)
 8000c46:	f001 fb1b 	bl	8002280 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	4831      	ldr	r0, [pc, #196]	@ (8000d14 <MX_GPIO_Init+0x1d4>)
 8000c50:	f001 fb16 	bl	8002280 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000c54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c58:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	482b      	ldr	r0, [pc, #172]	@ (8000d18 <MX_GPIO_Init+0x1d8>)
 8000c6a:	f001 f959 	bl	8001f20 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c6e:	2320      	movs	r3, #32
 8000c70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4820      	ldr	r0, [pc, #128]	@ (8000d08 <MX_GPIO_Init+0x1c8>)
 8000c86:	f001 f94b 	bl	8001f20 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 8000c8a:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c8e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	481a      	ldr	r0, [pc, #104]	@ (8000d0c <MX_GPIO_Init+0x1cc>)
 8000ca4:	f001 f93c 	bl	8001f20 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ca8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4813      	ldr	r0, [pc, #76]	@ (8000d10 <MX_GPIO_Init+0x1d0>)
 8000cc2:	f001 f92d 	bl	8001f20 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000cc6:	2380      	movs	r3, #128	@ 0x80
 8000cc8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cce:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4810      	ldr	r0, [pc, #64]	@ (8000d1c <MX_GPIO_Init+0x1dc>)
 8000cdc:	f001 f920 	bl	8001f20 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4807      	ldr	r0, [pc, #28]	@ (8000d14 <MX_GPIO_Init+0x1d4>)
 8000cf8:	f001 f912 	bl	8001f20 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000cfc:	bf00      	nop
 8000cfe:	3730      	adds	r7, #48	@ 0x30
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	58024400 	.word	0x58024400
 8000d08:	58020000 	.word	0x58020000
 8000d0c:	58020400 	.word	0x58020400
 8000d10:	58020c00 	.word	0x58020c00
 8000d14:	58021000 	.word	0x58021000
 8000d18:	58020800 	.word	0x58020800
 8000d1c:	58021800 	.word	0x58021800

08000d20 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <Error_Handler+0x8>

08000d2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <HAL_MspInit+0x30>)
 8000d34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d38:	4a08      	ldr	r2, [pc, #32]	@ (8000d5c <HAL_MspInit+0x30>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_MspInit+0x30>)
 8000d44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	58024400 	.word	0x58024400

08000d60 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08e      	sub	sp, #56	@ 0x38
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a59      	ldr	r2, [pc, #356]	@ (8000ee4 <HAL_ETH_MspInit+0x184>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	f040 80ab 	bne.w	8000eda <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d84:	4b58      	ldr	r3, [pc, #352]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000d86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d8a:	4a57      	ldr	r2, [pc, #348]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000d8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d90:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d94:	4b54      	ldr	r3, [pc, #336]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000d96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d9e:	623b      	str	r3, [r7, #32]
 8000da0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000da2:	4b51      	ldr	r3, [pc, #324]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000da4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000da8:	4a4f      	ldr	r2, [pc, #316]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000db2:	4b4d      	ldr	r3, [pc, #308]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000db4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dbc:	61fb      	str	r3, [r7, #28]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000dc0:	4b49      	ldr	r3, [pc, #292]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000dc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dc6:	4a48      	ldr	r2, [pc, #288]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dcc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dd0:	4b45      	ldr	r3, [pc, #276]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000dd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	4b42      	ldr	r3, [pc, #264]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de4:	4a40      	ldr	r2, [pc, #256]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000de6:	f043 0304 	orr.w	r3, r3, #4
 8000dea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dee:	4b3e      	ldr	r3, [pc, #248]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e02:	4a39      	ldr	r2, [pc, #228]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e0c:	4b36      	ldr	r3, [pc, #216]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	4b33      	ldr	r3, [pc, #204]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e20:	4a31      	ldr	r2, [pc, #196]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e38:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3e:	4a2a      	ldr	r2, [pc, #168]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e48:	4b27      	ldr	r3, [pc, #156]	@ (8000ee8 <HAL_ETH_MspInit+0x188>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e56:	2332      	movs	r3, #50	@ 0x32
 8000e58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e66:	230b      	movs	r3, #11
 8000e68:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6e:	4619      	mov	r1, r3
 8000e70:	481e      	ldr	r0, [pc, #120]	@ (8000eec <HAL_ETH_MspInit+0x18c>)
 8000e72:	f001 f855 	bl	8001f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e76:	2386      	movs	r3, #134	@ 0x86
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e86:	230b      	movs	r3, #11
 8000e88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4817      	ldr	r0, [pc, #92]	@ (8000ef0 <HAL_ETH_MspInit+0x190>)
 8000e92:	f001 f845 	bl	8001f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea8:	230b      	movs	r3, #11
 8000eaa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4810      	ldr	r0, [pc, #64]	@ (8000ef4 <HAL_ETH_MspInit+0x194>)
 8000eb4:	f001 f834 	bl	8001f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000eb8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eca:	230b      	movs	r3, #11
 8000ecc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4808      	ldr	r0, [pc, #32]	@ (8000ef8 <HAL_ETH_MspInit+0x198>)
 8000ed6:	f001 f823 	bl	8001f20 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000eda:	bf00      	nop
 8000edc:	3738      	adds	r7, #56	@ 0x38
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40028000 	.word	0x40028000
 8000ee8:	58024400 	.word	0x58024400
 8000eec:	58020800 	.word	0x58020800
 8000ef0:	58020000 	.word	0x58020000
 8000ef4:	58020400 	.word	0x58020400
 8000ef8:	58021800 	.word	0x58021800

08000efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0b      	ldr	r2, [pc, #44]	@ (8000f38 <HAL_TIM_Base_MspInit+0x3c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d10e      	bne.n	8000f2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <HAL_TIM_Base_MspInit+0x40>)
 8000f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f14:	4a09      	ldr	r2, [pc, #36]	@ (8000f3c <HAL_TIM_Base_MspInit+0x40>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f1e:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <HAL_TIM_Base_MspInit+0x40>)
 8000f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	40000400 	.word	0x40000400
 8000f3c:	58024400 	.word	0x58024400

08000f40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a12      	ldr	r2, [pc, #72]	@ (8000fa8 <HAL_TIM_MspPostInit+0x68>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d11e      	bne.n	8000fa0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <HAL_TIM_MspPostInit+0x6c>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f68:	4a10      	ldr	r2, [pc, #64]	@ (8000fac <HAL_TIM_MspPostInit+0x6c>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f72:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <HAL_TIM_MspPostInit+0x6c>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f80:	2340      	movs	r3, #64	@ 0x40
 8000f82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f90:	2302      	movs	r3, #2
 8000f92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <HAL_TIM_MspPostInit+0x70>)
 8000f9c:	f000 ffc0 	bl	8001f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fa0:	bf00      	nop
 8000fa2:	3720      	adds	r7, #32
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40000400 	.word	0x40000400
 8000fac:	58024400 	.word	0x58024400
 8000fb0:	58020000 	.word	0x58020000

08000fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0ba      	sub	sp, #232	@ 0xe8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	22c0      	movs	r2, #192	@ 0xc0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f006 fe12 	bl	8007bfe <memset>
  if(huart->Instance==USART3)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a27      	ldr	r2, [pc, #156]	@ (800107c <HAL_UART_MspInit+0xc8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d146      	bne.n	8001072 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fe4:	f04f 0202 	mov.w	r2, #2
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 faba 	bl	8003574 <HAL_RCCEx_PeriphCLKConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001006:	f7ff fe8b 	bl	8000d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800100a:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <HAL_UART_MspInit+0xcc>)
 800100c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001010:	4a1b      	ldr	r2, [pc, #108]	@ (8001080 <HAL_UART_MspInit+0xcc>)
 8001012:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001016:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800101a:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <HAL_UART_MspInit+0xcc>)
 800101c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001020:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001028:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <HAL_UART_MspInit+0xcc>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102e:	4a14      	ldr	r2, [pc, #80]	@ (8001080 <HAL_UART_MspInit+0xcc>)
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <HAL_UART_MspInit+0xcc>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001046:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800104a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001060:	2307      	movs	r3, #7
 8001062:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001066:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	@ (8001084 <HAL_UART_MspInit+0xd0>)
 800106e:	f000 ff57 	bl	8001f20 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001072:	bf00      	nop
 8001074:	37e8      	adds	r7, #232	@ 0xe8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40004800 	.word	0x40004800
 8001080:	58024400 	.word	0x58024400
 8001084:	58020c00 	.word	0x58020c00

08001088 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0ba      	sub	sp, #232	@ 0xe8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	22c0      	movs	r2, #192	@ 0xc0
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f006 fda8 	bl	8007bfe <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a30      	ldr	r2, [pc, #192]	@ (8001174 <HAL_PCD_MspInit+0xec>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d159      	bne.n	800116c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010b8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010bc:	f04f 0300 	mov.w	r3, #0
 80010c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80010c4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80010c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	4618      	mov	r0, r3
 80010d2:	f002 fa4f 	bl	8003574 <HAL_RCCEx_PeriphCLKConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80010dc:	f7ff fe20 	bl	8000d20 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80010e0:	f001 fa52 	bl	8002588 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <HAL_PCD_MspInit+0xf0>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ea:	4a23      	ldr	r2, [pc, #140]	@ (8001178 <HAL_PCD_MspInit+0xf0>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f4:	4b20      	ldr	r3, [pc, #128]	@ (8001178 <HAL_PCD_MspInit+0xf0>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001102:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001106:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800111c:	230a      	movs	r3, #10
 800111e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001126:	4619      	mov	r1, r3
 8001128:	4814      	ldr	r0, [pc, #80]	@ (800117c <HAL_PCD_MspInit+0xf4>)
 800112a:	f000 fef9 	bl	8001f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800112e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001132:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001136:	2300      	movs	r3, #0
 8001138:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001146:	4619      	mov	r1, r3
 8001148:	480c      	ldr	r0, [pc, #48]	@ (800117c <HAL_PCD_MspInit+0xf4>)
 800114a:	f000 fee9 	bl	8001f20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <HAL_PCD_MspInit+0xf0>)
 8001150:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001154:	4a08      	ldr	r2, [pc, #32]	@ (8001178 <HAL_PCD_MspInit+0xf0>)
 8001156:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800115a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <HAL_PCD_MspInit+0xf0>)
 8001160:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001164:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800116c:	bf00      	nop
 800116e:	37e8      	adds	r7, #232	@ 0xe8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40080000 	.word	0x40080000
 8001178:	58024400 	.word	0x58024400
 800117c:	58020000 	.word	0x58020000

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <NMI_Handler+0x4>

08001188 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <MemManage_Handler+0x4>

08001198 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d6:	f000 f927 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011e4:	4b37      	ldr	r3, [pc, #220]	@ (80012c4 <SystemInit+0xe4>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ea:	4a36      	ldr	r2, [pc, #216]	@ (80012c4 <SystemInit+0xe4>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011f4:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <SystemInit+0xe8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 030f 	and.w	r3, r3, #15
 80011fc:	2b06      	cmp	r3, #6
 80011fe:	d807      	bhi.n	8001210 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001200:	4b31      	ldr	r3, [pc, #196]	@ (80012c8 <SystemInit+0xe8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f023 030f 	bic.w	r3, r3, #15
 8001208:	4a2f      	ldr	r2, [pc, #188]	@ (80012c8 <SystemInit+0xe8>)
 800120a:	f043 0307 	orr.w	r3, r3, #7
 800120e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001210:	4b2e      	ldr	r3, [pc, #184]	@ (80012cc <SystemInit+0xec>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a2d      	ldr	r2, [pc, #180]	@ (80012cc <SystemInit+0xec>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800121c:	4b2b      	ldr	r3, [pc, #172]	@ (80012cc <SystemInit+0xec>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001222:	4b2a      	ldr	r3, [pc, #168]	@ (80012cc <SystemInit+0xec>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4929      	ldr	r1, [pc, #164]	@ (80012cc <SystemInit+0xec>)
 8001228:	4b29      	ldr	r3, [pc, #164]	@ (80012d0 <SystemInit+0xf0>)
 800122a:	4013      	ands	r3, r2
 800122c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800122e:	4b26      	ldr	r3, [pc, #152]	@ (80012c8 <SystemInit+0xe8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b00      	cmp	r3, #0
 8001238:	d007      	beq.n	800124a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800123a:	4b23      	ldr	r3, [pc, #140]	@ (80012c8 <SystemInit+0xe8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 030f 	bic.w	r3, r3, #15
 8001242:	4a21      	ldr	r2, [pc, #132]	@ (80012c8 <SystemInit+0xe8>)
 8001244:	f043 0307 	orr.w	r3, r3, #7
 8001248:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800124a:	4b20      	ldr	r3, [pc, #128]	@ (80012cc <SystemInit+0xec>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001250:	4b1e      	ldr	r3, [pc, #120]	@ (80012cc <SystemInit+0xec>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001256:	4b1d      	ldr	r3, [pc, #116]	@ (80012cc <SystemInit+0xec>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800125c:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <SystemInit+0xec>)
 800125e:	4a1d      	ldr	r2, [pc, #116]	@ (80012d4 <SystemInit+0xf4>)
 8001260:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001262:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <SystemInit+0xec>)
 8001264:	4a1c      	ldr	r2, [pc, #112]	@ (80012d8 <SystemInit+0xf8>)
 8001266:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001268:	4b18      	ldr	r3, [pc, #96]	@ (80012cc <SystemInit+0xec>)
 800126a:	4a1c      	ldr	r2, [pc, #112]	@ (80012dc <SystemInit+0xfc>)
 800126c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800126e:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <SystemInit+0xec>)
 8001270:	2200      	movs	r2, #0
 8001272:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001274:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <SystemInit+0xec>)
 8001276:	4a19      	ldr	r2, [pc, #100]	@ (80012dc <SystemInit+0xfc>)
 8001278:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800127a:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <SystemInit+0xec>)
 800127c:	2200      	movs	r2, #0
 800127e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <SystemInit+0xec>)
 8001282:	4a16      	ldr	r2, [pc, #88]	@ (80012dc <SystemInit+0xfc>)
 8001284:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <SystemInit+0xec>)
 8001288:	2200      	movs	r2, #0
 800128a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <SystemInit+0xec>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0e      	ldr	r2, [pc, #56]	@ (80012cc <SystemInit+0xec>)
 8001292:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001296:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001298:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <SystemInit+0xec>)
 800129a:	2200      	movs	r2, #0
 800129c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800129e:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <SystemInit+0x100>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <SystemInit+0x104>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012aa:	d202      	bcs.n	80012b2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012ac:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <SystemInit+0x108>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <SystemInit+0x10c>)
 80012b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80012b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00
 80012c8:	52002000 	.word	0x52002000
 80012cc:	58024400 	.word	0x58024400
 80012d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80012d4:	02020200 	.word	0x02020200
 80012d8:	01ff0000 	.word	0x01ff0000
 80012dc:	01010280 	.word	0x01010280
 80012e0:	5c001000 	.word	0x5c001000
 80012e4:	ffff0000 	.word	0xffff0000
 80012e8:	51008108 	.word	0x51008108
 80012ec:	52004000 	.word	0x52004000

080012f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001328 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012f4:	f7ff ff74 	bl	80011e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f8:	480c      	ldr	r0, [pc, #48]	@ (800132c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012fa:	490d      	ldr	r1, [pc, #52]	@ (8001330 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001334 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001310:	4c0a      	ldr	r4, [pc, #40]	@ (800133c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800131e:	f006 fc77 	bl	8007c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001322:	f7ff fa0b 	bl	800073c <main>
  bx  lr
 8001326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001328:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800132c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001330:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001334:	08007cb8 	.word	0x08007cb8
  ldr r2, =_sbss
 8001338:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 800133c:	240007a8 	.word	0x240007a8

08001340 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC3_IRQHandler>
	...

08001344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134a:	2003      	movs	r0, #3
 800134c:	f000 f982 	bl	8001654 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001350:	f001 ff3a 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8001354:	4602      	mov	r2, r0
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_Init+0x68>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	f003 030f 	and.w	r3, r3, #15
 8001360:	4913      	ldr	r1, [pc, #76]	@ (80013b0 <HAL_Init+0x6c>)
 8001362:	5ccb      	ldrb	r3, [r1, r3]
 8001364:	f003 031f 	and.w	r3, r3, #31
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800136e:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <HAL_Init+0x68>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	4a0e      	ldr	r2, [pc, #56]	@ (80013b0 <HAL_Init+0x6c>)
 8001378:	5cd3      	ldrb	r3, [r2, r3]
 800137a:	f003 031f 	and.w	r3, r3, #31
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	4a0b      	ldr	r2, [pc, #44]	@ (80013b4 <HAL_Init+0x70>)
 8001386:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001388:	4a0b      	ldr	r2, [pc, #44]	@ (80013b8 <HAL_Init+0x74>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800138e:	2000      	movs	r0, #0
 8001390:	f000 f814 	bl	80013bc <HAL_InitTick>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e002      	b.n	80013a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800139e:	f7ff fcc5 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	58024400 	.word	0x58024400
 80013b0:	08007c70 	.word	0x08007c70
 80013b4:	24000008 	.word	0x24000008
 80013b8:	24000004 	.word	0x24000004

080013bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013c4:	4b15      	ldr	r3, [pc, #84]	@ (800141c <HAL_InitTick+0x60>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e021      	b.n	8001414 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013d0:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <HAL_InitTick+0x64>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <HAL_InitTick+0x60>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f959 	bl	800169e <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 f931 	bl	800166a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	@ (8001424 <HAL_InitTick+0x68>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	24000010 	.word	0x24000010
 8001420:	24000004 	.word	0x24000004
 8001424:	2400000c 	.word	0x2400000c

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	@ (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	24000010 	.word	0x24000010
 800144c:	240007a4 	.word	0x240007a4

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	240007a4 	.word	0x240007a4

08001468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001470:	f7ff ffee 	bl	8001450 <HAL_GetTick>
 8001474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001480:	d005      	beq.n	800148e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001482:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <HAL_Delay+0x44>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800148e:	bf00      	nop
 8001490:	f7ff ffde 	bl	8001450 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d8f7      	bhi.n	8001490 <HAL_Delay+0x28>
  {
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	24000010 	.word	0x24000010

080014b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014b4:	4b03      	ldr	r3, [pc, #12]	@ (80014c4 <HAL_GetREVID+0x14>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0c1b      	lsrs	r3, r3, #16
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	5c001000 	.word	0x5c001000

080014c8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80014d8:	4904      	ldr	r1, [pc, #16]	@ (80014ec <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	58000400 	.word	0x58000400

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <__NVIC_SetPriorityGrouping+0x40>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 800151a:	4313      	orrs	r3, r2
 800151c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151e:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <__NVIC_SetPriorityGrouping+0x40>)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	60d3      	str	r3, [r2, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00
 8001534:	05fa0000 	.word	0x05fa0000

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001560:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001564:	2b00      	cmp	r3, #0
 8001566:	db0a      	blt.n	800157e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	b2da      	uxtb	r2, r3
 800156c:	490c      	ldr	r1, [pc, #48]	@ (80015a0 <__NVIC_SetPriority+0x4c>)
 800156e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001572:	0112      	lsls	r2, r2, #4
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	440b      	add	r3, r1
 8001578:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800157c:	e00a      	b.n	8001594 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4908      	ldr	r1, [pc, #32]	@ (80015a4 <__NVIC_SetPriority+0x50>)
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	3b04      	subs	r3, #4
 800158c:	0112      	lsls	r2, r2, #4
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	440b      	add	r3, r1
 8001592:	761a      	strb	r2, [r3, #24]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000e100 	.word	0xe000e100
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	@ 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f1c3 0307 	rsb	r3, r3, #7
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	bf28      	it	cs
 80015c6:	2304      	movcs	r3, #4
 80015c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3304      	adds	r3, #4
 80015ce:	2b06      	cmp	r3, #6
 80015d0:	d902      	bls.n	80015d8 <NVIC_EncodePriority+0x30>
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3b03      	subs	r3, #3
 80015d6:	e000      	b.n	80015da <NVIC_EncodePriority+0x32>
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	f04f 32ff 	mov.w	r2, #4294967295
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43da      	mvns	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	401a      	ands	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f0:	f04f 31ff 	mov.w	r1, #4294967295
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	43d9      	mvns	r1, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	4313      	orrs	r3, r2
         );
}
 8001602:	4618      	mov	r0, r3
 8001604:	3724      	adds	r7, #36	@ 0x24
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001620:	d301      	bcc.n	8001626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001622:	2301      	movs	r3, #1
 8001624:	e00f      	b.n	8001646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001626:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <SysTick_Config+0x40>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162e:	210f      	movs	r1, #15
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f7ff ff8e 	bl	8001554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001638:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <SysTick_Config+0x40>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163e:	4b04      	ldr	r3, [pc, #16]	@ (8001650 <SysTick_Config+0x40>)
 8001640:	2207      	movs	r2, #7
 8001642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	e000e010 	.word	0xe000e010

08001654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff47 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001678:	f7ff ff5e 	bl	8001538 <__NVIC_GetPriorityGrouping>
 800167c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	6978      	ldr	r0, [r7, #20]
 8001684:	f7ff ff90 	bl	80015a8 <NVIC_EncodePriority>
 8001688:	4602      	mov	r2, r0
 800168a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff5f 	bl	8001554 <__NVIC_SetPriority>
}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffb2 	bl	8001610 <SysTick_Config>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0e3      	b.n	8001892 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d106      	bne.n	80016e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2223      	movs	r2, #35	@ 0x23
 80016d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fb3f 	bl	8000d60 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	4b6e      	ldr	r3, [pc, #440]	@ (800189c <HAL_ETH_Init+0x1e4>)
 80016e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016e8:	4a6c      	ldr	r2, [pc, #432]	@ (800189c <HAL_ETH_Init+0x1e4>)
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016f2:	4b6a      	ldr	r3, [pc, #424]	@ (800189c <HAL_ETH_Init+0x1e4>)
 80016f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7a1b      	ldrb	r3, [r3, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d103      	bne.n	8001710 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff fedd 	bl	80014c8 <HAL_SYSCFG_ETHInterfaceSelect>
 800170e:	e003      	b.n	8001718 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001710:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001714:	f7ff fed8 	bl	80014c8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001718:	4b61      	ldr	r3, [pc, #388]	@ (80018a0 <HAL_ETH_Init+0x1e8>)
 800171a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001732:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001734:	f7ff fe8c 	bl	8001450 <HAL_GetTick>
 8001738:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800173a:	e011      	b.n	8001760 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800173c:	f7ff fe88 	bl	8001450 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800174a:	d909      	bls.n	8001760 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2204      	movs	r2, #4
 8001750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	22e0      	movs	r2, #224	@ 0xe0
 8001758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e098      	b.n	8001892 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1e4      	bne.n	800173c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f89e 	bl	80018b4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001778:	f001 fea0 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 800177c:	4603      	mov	r3, r0
 800177e:	4a49      	ldr	r2, [pc, #292]	@ (80018a4 <HAL_ETH_Init+0x1ec>)
 8001780:	fba2 2303 	umull	r2, r3, r2, r3
 8001784:	0c9a      	lsrs	r2, r3, #18
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	3a01      	subs	r2, #1
 800178c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fa81 	bl	8001c98 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800179e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80017a2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017b2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d009      	beq.n	80017d6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	22e0      	movs	r2, #224	@ 0xe0
 80017ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e05d      	b.n	8001892 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017de:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80017e2:	4b31      	ldr	r3, [pc, #196]	@ (80018a8 <HAL_ETH_Init+0x1f0>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6952      	ldr	r2, [r2, #20]
 80017ea:	0051      	lsls	r1, r2, #1
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	430b      	orrs	r3, r1
 80017f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017f6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 fae9 	bl	8001dd2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 fb2f 	bl	8001e64 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	3305      	adds	r3, #5
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	021a      	lsls	r2, r3, #8
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	3304      	adds	r3, #4
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4619      	mov	r1, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	3303      	adds	r3, #3
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	061a      	lsls	r2, r3, #24
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	3302      	adds	r3, #2
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	3301      	adds	r3, #1
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001844:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001852:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001854:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <HAL_ETH_Init+0x1f4>)
 8001866:	430b      	orrs	r3, r1
 8001868:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <HAL_ETH_Init+0x1f8>)
 800187a:	430b      	orrs	r3, r1
 800187c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2210      	movs	r2, #16
 800188c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	58024400 	.word	0x58024400
 80018a0:	58000400 	.word	0x58000400
 80018a4:	431bde83 	.word	0x431bde83
 80018a8:	ffff8001 	.word	0xffff8001
 80018ac:	0c020060 	.word	0x0c020060
 80018b0:	0c20c000 	.word	0x0c20c000

080018b4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80018ce:	f001 fdf5 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80018d2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001940 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d804      	bhi.n	80018e6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	e022      	b.n	800192c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	4a16      	ldr	r2, [pc, #88]	@ (8001944 <HAL_ETH_SetMDIOClockRange+0x90>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d204      	bcs.n	80018f8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	e019      	b.n	800192c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4a13      	ldr	r2, [pc, #76]	@ (8001948 <HAL_ETH_SetMDIOClockRange+0x94>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d915      	bls.n	800192c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4a12      	ldr	r2, [pc, #72]	@ (800194c <HAL_ETH_SetMDIOClockRange+0x98>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d804      	bhi.n	8001912 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e00c      	b.n	800192c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	4a0e      	ldr	r2, [pc, #56]	@ (8001950 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d804      	bhi.n	8001924 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	e003      	b.n	800192c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800192a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	02160ebf 	.word	0x02160ebf
 8001944:	03938700 	.word	0x03938700
 8001948:	05f5e0ff 	.word	0x05f5e0ff
 800194c:	08f0d17f 	.word	0x08f0d17f
 8001950:	0ee6b27f 	.word	0x0ee6b27f

08001954 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001966:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	791b      	ldrb	r3, [r3, #4]
 800196c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800196e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	7b1b      	ldrb	r3, [r3, #12]
 8001974:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001976:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	7b5b      	ldrb	r3, [r3, #13]
 800197c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800197e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	7b9b      	ldrb	r3, [r3, #14]
 8001984:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001986:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	7bdb      	ldrb	r3, [r3, #15]
 800198c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800198e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	7c12      	ldrb	r2, [r2, #16]
 8001994:	2a00      	cmp	r2, #0
 8001996:	d102      	bne.n	800199e <ETH_SetMACConfig+0x4a>
 8001998:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800199c:	e000      	b.n	80019a0 <ETH_SetMACConfig+0x4c>
 800199e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80019a0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	7c52      	ldrb	r2, [r2, #17]
 80019a6:	2a00      	cmp	r2, #0
 80019a8:	d102      	bne.n	80019b0 <ETH_SetMACConfig+0x5c>
 80019aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019ae:	e000      	b.n	80019b2 <ETH_SetMACConfig+0x5e>
 80019b0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80019b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	7c9b      	ldrb	r3, [r3, #18]
 80019b8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80019ba:	431a      	orrs	r2, r3
               macconf->Speed |
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80019c0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80019c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	7f1b      	ldrb	r3, [r3, #28]
 80019cc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80019ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	7f5b      	ldrb	r3, [r3, #29]
 80019d4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80019d6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	7f92      	ldrb	r2, [r2, #30]
 80019dc:	2a00      	cmp	r2, #0
 80019de:	d102      	bne.n	80019e6 <ETH_SetMACConfig+0x92>
 80019e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019e4:	e000      	b.n	80019e8 <ETH_SetMACConfig+0x94>
 80019e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80019e8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	7fdb      	ldrb	r3, [r3, #31]
 80019ee:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80019f0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019f8:	2a00      	cmp	r2, #0
 80019fa:	d102      	bne.n	8001a02 <ETH_SetMACConfig+0xae>
 80019fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a00:	e000      	b.n	8001a04 <ETH_SetMACConfig+0xb0>
 8001a02:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a04:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001a12:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001a14:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b56      	ldr	r3, [pc, #344]	@ (8001b80 <ETH_SetMACConfig+0x22c>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	68f9      	ldr	r1, [r7, #12]
 8001a2e:	430b      	orrs	r3, r1
 8001a30:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a36:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a3e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a40:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a48:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001a52:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a54:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001a5c:	2a00      	cmp	r2, #0
 8001a5e:	d102      	bne.n	8001a66 <ETH_SetMACConfig+0x112>
 8001a60:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a64:	e000      	b.n	8001a68 <ETH_SetMACConfig+0x114>
 8001a66:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a68:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	4b42      	ldr	r3, [pc, #264]	@ (8001b84 <ETH_SetMACConfig+0x230>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	68f9      	ldr	r1, [r7, #12]
 8001a82:	430b      	orrs	r3, r1
 8001a84:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a8c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b88 <ETH_SetMACConfig+0x234>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	68f9      	ldr	r1, [r7, #12]
 8001aa6:	430b      	orrs	r3, r1
 8001aa8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001ab0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ab6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001abe:	2a00      	cmp	r2, #0
 8001ac0:	d101      	bne.n	8001ac6 <ETH_SetMACConfig+0x172>
 8001ac2:	2280      	movs	r2, #128	@ 0x80
 8001ac4:	e000      	b.n	8001ac8 <ETH_SetMACConfig+0x174>
 8001ac6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001ac8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ace:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001ada:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001ade:	4013      	ands	r3, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	68f9      	ldr	r1, [r7, #12]
 8001ae6:	430b      	orrs	r3, r1
 8001ae8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001af0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001af8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b06:	f023 0103 	bic.w	r1, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001b1e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001b3a:	2a00      	cmp	r2, #0
 8001b3c:	d101      	bne.n	8001b42 <ETH_SetMACConfig+0x1ee>
 8001b3e:	2240      	movs	r2, #64	@ 0x40
 8001b40:	e000      	b.n	8001b44 <ETH_SetMACConfig+0x1f0>
 8001b42:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001b44:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001b4c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001b56:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001b64:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	00048083 	.word	0x00048083
 8001b84:	c0f88000 	.word	0xc0f88000
 8001b88:	fffffef0 	.word	0xfffffef0

08001b8c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b38      	ldr	r3, [pc, #224]	@ (8001c84 <ETH_SetDMAConfig+0xf8>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	6811      	ldr	r1, [r2, #0]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	430b      	orrs	r3, r1
 8001bae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bb2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	791b      	ldrb	r3, [r3, #4]
 8001bb8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bbe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	7b1b      	ldrb	r3, [r3, #12]
 8001bc4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c88 <ETH_SetDMAConfig+0xfc>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	68f9      	ldr	r1, [r7, #12]
 8001bde:	430b      	orrs	r3, r1
 8001be0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001be4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	7b5b      	ldrb	r3, [r3, #13]
 8001bea:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bfc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001c00:	4b22      	ldr	r3, [pc, #136]	@ (8001c8c <ETH_SetDMAConfig+0x100>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	68f9      	ldr	r1, [r7, #12]
 8001c0a:	430b      	orrs	r3, r1
 8001c0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c10:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	7d1b      	ldrb	r3, [r3, #20]
 8001c1c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c1e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	7f5b      	ldrb	r3, [r3, #29]
 8001c24:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c26:	4313      	orrs	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c32:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001c36:	4b16      	ldr	r3, [pc, #88]	@ (8001c90 <ETH_SetDMAConfig+0x104>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	68f9      	ldr	r1, [r7, #12]
 8001c40:	430b      	orrs	r3, r1
 8001c42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c46:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	7f1b      	ldrb	r3, [r3, #28]
 8001c4e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c60:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <ETH_SetDMAConfig+0x108>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	68f9      	ldr	r1, [r7, #12]
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c74:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	ffff87fd 	.word	0xffff87fd
 8001c88:	ffff2ffe 	.word	0xffff2ffe
 8001c8c:	fffec000 	.word	0xfffec000
 8001c90:	ffc0efef 	.word	0xffc0efef
 8001c94:	7fc0ffff 	.word	0x7fc0ffff

08001c98 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b0a4      	sub	sp, #144	@ 0x90
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001cd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cd8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001cf0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001cf4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001d00:	2301      	movs	r3, #1
 8001d02:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001d12:	2300      	movs	r3, #0
 8001d14:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001d30:	2320      	movs	r3, #32
 8001d32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001d36:	2301      	movs	r3, #1
 8001d38:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001d42:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d48:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d4c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001d54:	2302      	movs	r3, #2
 8001d56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001d72:	2300      	movs	r3, #0
 8001d74:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001d76:	2301      	movs	r3, #1
 8001d78:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d80:	4619      	mov	r1, r3
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fde6 	bl	8001954 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001da2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001da6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001dac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001db0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001db8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001dbc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001dbe:	f107 0308 	add.w	r3, r7, #8
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff fee1 	bl	8001b8c <ETH_SetDMAConfig>
}
 8001dca:	bf00      	nop
 8001dcc:	3790      	adds	r7, #144	@ 0x90
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	e01d      	b.n	8001e1c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68d9      	ldr	r1, [r3, #12]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4613      	mov	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	3206      	adds	r2, #6
 8001e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d9de      	bls.n	8001de0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e30:	461a      	mov	r2, r3
 8001e32:	2303      	movs	r3, #3
 8001e34:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e44:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e54:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	e023      	b.n	8001eba <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6919      	ldr	r1, [r3, #16]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	440b      	add	r3, r1
 8001e82:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	3212      	adds	r2, #18
 8001eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d9d8      	bls.n	8001e72 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	2303      	movs	r3, #3
 8001eea:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691a      	ldr	r2, [r3, #16]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001efa:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f0e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	@ 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f2e:	4b89      	ldr	r3, [pc, #548]	@ (8002154 <HAL_GPIO_Init+0x234>)
 8001f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f32:	e194      	b.n	800225e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2101      	movs	r1, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8186 	beq.w	8002258 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d005      	beq.n	8001f64 <HAL_GPIO_Init+0x44>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d130      	bne.n	8001fc6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	f003 0201 	and.w	r2, r3, #1
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d017      	beq.n	8002002 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	2203      	movs	r2, #3
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d123      	bne.n	8002056 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	08da      	lsrs	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3208      	adds	r2, #8
 8002016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	691a      	ldr	r2, [r3, #16]
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	08da      	lsrs	r2, r3, #3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3208      	adds	r2, #8
 8002050:	69b9      	ldr	r1, [r7, #24]
 8002052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	2203      	movs	r2, #3
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0203 	and.w	r2, r3, #3
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 80e0 	beq.w	8002258 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002098:	4b2f      	ldr	r3, [pc, #188]	@ (8002158 <HAL_GPIO_Init+0x238>)
 800209a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800209e:	4a2e      	ldr	r2, [pc, #184]	@ (8002158 <HAL_GPIO_Init+0x238>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80020a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002158 <HAL_GPIO_Init+0x238>)
 80020aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020b6:	4a29      	ldr	r2, [pc, #164]	@ (800215c <HAL_GPIO_Init+0x23c>)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	220f      	movs	r2, #15
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a20      	ldr	r2, [pc, #128]	@ (8002160 <HAL_GPIO_Init+0x240>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d052      	beq.n	8002188 <HAL_GPIO_Init+0x268>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002164 <HAL_GPIO_Init+0x244>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d031      	beq.n	800214e <HAL_GPIO_Init+0x22e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002168 <HAL_GPIO_Init+0x248>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d02b      	beq.n	800214a <HAL_GPIO_Init+0x22a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a1d      	ldr	r2, [pc, #116]	@ (800216c <HAL_GPIO_Init+0x24c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d025      	beq.n	8002146 <HAL_GPIO_Init+0x226>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002170 <HAL_GPIO_Init+0x250>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01f      	beq.n	8002142 <HAL_GPIO_Init+0x222>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a1b      	ldr	r2, [pc, #108]	@ (8002174 <HAL_GPIO_Init+0x254>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d019      	beq.n	800213e <HAL_GPIO_Init+0x21e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a1a      	ldr	r2, [pc, #104]	@ (8002178 <HAL_GPIO_Init+0x258>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <HAL_GPIO_Init+0x21a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a19      	ldr	r2, [pc, #100]	@ (800217c <HAL_GPIO_Init+0x25c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00d      	beq.n	8002136 <HAL_GPIO_Init+0x216>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a18      	ldr	r2, [pc, #96]	@ (8002180 <HAL_GPIO_Init+0x260>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <HAL_GPIO_Init+0x212>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a17      	ldr	r2, [pc, #92]	@ (8002184 <HAL_GPIO_Init+0x264>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d101      	bne.n	800212e <HAL_GPIO_Init+0x20e>
 800212a:	2309      	movs	r3, #9
 800212c:	e02d      	b.n	800218a <HAL_GPIO_Init+0x26a>
 800212e:	230a      	movs	r3, #10
 8002130:	e02b      	b.n	800218a <HAL_GPIO_Init+0x26a>
 8002132:	2308      	movs	r3, #8
 8002134:	e029      	b.n	800218a <HAL_GPIO_Init+0x26a>
 8002136:	2307      	movs	r3, #7
 8002138:	e027      	b.n	800218a <HAL_GPIO_Init+0x26a>
 800213a:	2306      	movs	r3, #6
 800213c:	e025      	b.n	800218a <HAL_GPIO_Init+0x26a>
 800213e:	2305      	movs	r3, #5
 8002140:	e023      	b.n	800218a <HAL_GPIO_Init+0x26a>
 8002142:	2304      	movs	r3, #4
 8002144:	e021      	b.n	800218a <HAL_GPIO_Init+0x26a>
 8002146:	2303      	movs	r3, #3
 8002148:	e01f      	b.n	800218a <HAL_GPIO_Init+0x26a>
 800214a:	2302      	movs	r3, #2
 800214c:	e01d      	b.n	800218a <HAL_GPIO_Init+0x26a>
 800214e:	2301      	movs	r3, #1
 8002150:	e01b      	b.n	800218a <HAL_GPIO_Init+0x26a>
 8002152:	bf00      	nop
 8002154:	58000080 	.word	0x58000080
 8002158:	58024400 	.word	0x58024400
 800215c:	58000400 	.word	0x58000400
 8002160:	58020000 	.word	0x58020000
 8002164:	58020400 	.word	0x58020400
 8002168:	58020800 	.word	0x58020800
 800216c:	58020c00 	.word	0x58020c00
 8002170:	58021000 	.word	0x58021000
 8002174:	58021400 	.word	0x58021400
 8002178:	58021800 	.word	0x58021800
 800217c:	58021c00 	.word	0x58021c00
 8002180:	58022000 	.word	0x58022000
 8002184:	58022400 	.word	0x58022400
 8002188:	2300      	movs	r3, #0
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	f002 0203 	and.w	r2, r2, #3
 8002190:	0092      	lsls	r2, r2, #2
 8002192:	4093      	lsls	r3, r2
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800219a:	4938      	ldr	r1, [pc, #224]	@ (800227c <HAL_GPIO_Init+0x35c>)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3302      	adds	r3, #2
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	3301      	adds	r3, #1
 800225c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	f47f ae63 	bne.w	8001f34 <HAL_GPIO_Init+0x14>
  }
}
 800226e:	bf00      	nop
 8002270:	bf00      	nop
 8002272:	3724      	adds	r7, #36	@ 0x24
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	58000400 	.word	0x58000400

08002280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	807b      	strh	r3, [r7, #2]
 800228c:	4613      	mov	r3, r2
 800228e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002290:	787b      	ldrb	r3, [r7, #1]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800229c:	e003      	b.n	80022a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800229e:	887b      	ldrh	r3, [r7, #2]
 80022a0:	041a      	lsls	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	619a      	str	r2, [r3, #24]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af02      	add	r7, sp, #8
 80022b8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0fe      	b.n	80024c2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d106      	bne.n	80022de <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7fe fed5 	bl	8001088 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2203      	movs	r2, #3
 80022e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f005 f9f2 	bl	80076d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7c1a      	ldrb	r2, [r3, #16]
 80022f8:	f88d 2000 	strb.w	r2, [sp]
 80022fc:	3304      	adds	r3, #4
 80022fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002300:	f005 f976 	bl	80075f0 <USB_CoreInit>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2202      	movs	r2, #2
 800230e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0d5      	b.n	80024c2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f005 f9ea 	bl	80076f6 <USB_SetCurrentMode>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0c6      	b.n	80024c2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002334:	2300      	movs	r3, #0
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	e04a      	b.n	80023d0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	3315      	adds	r3, #21
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3314      	adds	r3, #20
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	b298      	uxth	r0, r3
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	332e      	adds	r3, #46	@ 0x2e
 8002376:	4602      	mov	r2, r0
 8002378:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	3318      	adds	r3, #24
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	331c      	adds	r3, #28
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023a2:	7bfa      	ldrb	r2, [r7, #15]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	3320      	adds	r3, #32
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	3324      	adds	r3, #36	@ 0x24
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	3301      	adds	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	791b      	ldrb	r3, [r3, #4]
 80023d4:	7bfa      	ldrb	r2, [r7, #15]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d3af      	bcc.n	800233a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023da:	2300      	movs	r3, #0
 80023dc:	73fb      	strb	r3, [r7, #15]
 80023de:	e044      	b.n	800246a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4413      	add	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	3301      	adds	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	791b      	ldrb	r3, [r3, #4]
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	429a      	cmp	r2, r3
 8002472:	d3b5      	bcc.n	80023e0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	7c1a      	ldrb	r2, [r3, #16]
 800247c:	f88d 2000 	strb.w	r2, [sp]
 8002480:	3304      	adds	r3, #4
 8002482:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002484:	f005 f984 	bl	8007790 <USB_DevInit>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2202      	movs	r2, #2
 8002492:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e013      	b.n	80024c2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7b1b      	ldrb	r3, [r3, #12]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d102      	bne.n	80024b6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f80b 	bl	80024cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f005 fb3f 	bl	8007b3e <USB_DevDisconnect>

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80024fa:	4b05      	ldr	r3, [pc, #20]	@ (8002510 <HAL_PCDEx_ActivateLPM+0x44>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	10000003 	.word	0x10000003

08002514 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800251c:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <HAL_PWREx_ConfigSupply+0x70>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b04      	cmp	r3, #4
 8002526:	d00a      	beq.n	800253e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002528:	4b16      	ldr	r3, [pc, #88]	@ (8002584 <HAL_PWREx_ConfigSupply+0x70>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	429a      	cmp	r2, r3
 8002534:	d001      	beq.n	800253a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e01f      	b.n	800257a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e01d      	b.n	800257a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800253e:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <HAL_PWREx_ConfigSupply+0x70>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f023 0207 	bic.w	r2, r3, #7
 8002546:	490f      	ldr	r1, [pc, #60]	@ (8002584 <HAL_PWREx_ConfigSupply+0x70>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4313      	orrs	r3, r2
 800254c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800254e:	f7fe ff7f 	bl	8001450 <HAL_GetTick>
 8002552:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002554:	e009      	b.n	800256a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002556:	f7fe ff7b 	bl	8001450 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002564:	d901      	bls.n	800256a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e007      	b.n	800257a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800256a:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <HAL_PWREx_ConfigSupply+0x70>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002572:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002576:	d1ee      	bne.n	8002556 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	58024800 	.word	0x58024800

08002588 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800258c:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4a04      	ldr	r2, [pc, #16]	@ (80025a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002592:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002596:	60d3      	str	r3, [r2, #12]
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	58024800 	.word	0x58024800

080025a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08c      	sub	sp, #48	@ 0x30
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d102      	bne.n	80025bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	f000 bc48 	b.w	8002e4c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 8088 	beq.w	80026da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ca:	4b99      	ldr	r3, [pc, #612]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025d4:	4b96      	ldr	r3, [pc, #600]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 80025d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025dc:	2b10      	cmp	r3, #16
 80025de:	d007      	beq.n	80025f0 <HAL_RCC_OscConfig+0x48>
 80025e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e2:	2b18      	cmp	r3, #24
 80025e4:	d111      	bne.n	800260a <HAL_RCC_OscConfig+0x62>
 80025e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d10c      	bne.n	800260a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f0:	4b8f      	ldr	r3, [pc, #572]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d06d      	beq.n	80026d8 <HAL_RCC_OscConfig+0x130>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d169      	bne.n	80026d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	f000 bc21 	b.w	8002e4c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x7a>
 8002614:	4b86      	ldr	r3, [pc, #536]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a85      	ldr	r2, [pc, #532]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 800261a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	e02e      	b.n	8002680 <HAL_RCC_OscConfig+0xd8>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x9c>
 800262a:	4b81      	ldr	r3, [pc, #516]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a80      	ldr	r2, [pc, #512]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 8002630:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	4b7e      	ldr	r3, [pc, #504]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a7d      	ldr	r2, [pc, #500]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 800263c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	e01d      	b.n	8002680 <HAL_RCC_OscConfig+0xd8>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0xc0>
 800264e:	4b78      	ldr	r3, [pc, #480]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a77      	ldr	r2, [pc, #476]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 8002654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	4b75      	ldr	r3, [pc, #468]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a74      	ldr	r2, [pc, #464]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e00b      	b.n	8002680 <HAL_RCC_OscConfig+0xd8>
 8002668:	4b71      	ldr	r3, [pc, #452]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a70      	ldr	r2, [pc, #448]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 800266e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	4b6e      	ldr	r3, [pc, #440]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a6d      	ldr	r2, [pc, #436]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 800267a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800267e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d013      	beq.n	80026b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7fe fee2 	bl	8001450 <HAL_GetTick>
 800268c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002690:	f7fe fede 	bl	8001450 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	@ 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e3d4      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026a2:	4b63      	ldr	r3, [pc, #396]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0xe8>
 80026ae:	e014      	b.n	80026da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7fe fece 	bl	8001450 <HAL_GetTick>
 80026b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b8:	f7fe feca 	bl	8001450 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	@ 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e3c0      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026ca:	4b59      	ldr	r3, [pc, #356]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x110>
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80ca 	beq.w	800287c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e8:	4b51      	ldr	r3, [pc, #324]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026f2:	4b4f      	ldr	r3, [pc, #316]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 80026f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <HAL_RCC_OscConfig+0x166>
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	2b18      	cmp	r3, #24
 8002702:	d156      	bne.n	80027b2 <HAL_RCC_OscConfig+0x20a>
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d151      	bne.n	80027b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800270e:	4b48      	ldr	r3, [pc, #288]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <HAL_RCC_OscConfig+0x17e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e392      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002726:	4b42      	ldr	r3, [pc, #264]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 0219 	bic.w	r2, r3, #25
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	493f      	ldr	r1, [pc, #252]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe fe8a 	bl	8001450 <HAL_GetTick>
 800273c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002740:	f7fe fe86 	bl	8001450 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e37c      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002752:	4b37      	ldr	r3, [pc, #220]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275e:	f7fe fea7 	bl	80014b0 <HAL_GetREVID>
 8002762:	4603      	mov	r3, r0
 8002764:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002768:	4293      	cmp	r3, r2
 800276a:	d817      	bhi.n	800279c <HAL_RCC_OscConfig+0x1f4>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2b40      	cmp	r3, #64	@ 0x40
 8002772:	d108      	bne.n	8002786 <HAL_RCC_OscConfig+0x1de>
 8002774:	4b2e      	ldr	r3, [pc, #184]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800277c:	4a2c      	ldr	r2, [pc, #176]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 800277e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002782:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002784:	e07a      	b.n	800287c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002786:	4b2a      	ldr	r3, [pc, #168]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	031b      	lsls	r3, r3, #12
 8002794:	4926      	ldr	r1, [pc, #152]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800279a:	e06f      	b.n	800287c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279c:	4b24      	ldr	r3, [pc, #144]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	061b      	lsls	r3, r3, #24
 80027aa:	4921      	ldr	r1, [pc, #132]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b0:	e064      	b.n	800287c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d047      	beq.n	800284a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 0219 	bic.w	r2, r3, #25
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	491a      	ldr	r1, [pc, #104]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fe40 	bl	8001450 <HAL_GetTick>
 80027d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d4:	f7fe fe3c 	bl	8001450 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e332      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027e6:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f2:	f7fe fe5d 	bl	80014b0 <HAL_GetREVID>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d819      	bhi.n	8002834 <HAL_RCC_OscConfig+0x28c>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2b40      	cmp	r3, #64	@ 0x40
 8002806:	d108      	bne.n	800281a <HAL_RCC_OscConfig+0x272>
 8002808:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002810:	4a07      	ldr	r2, [pc, #28]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 8002812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002816:	6053      	str	r3, [r2, #4]
 8002818:	e030      	b.n	800287c <HAL_RCC_OscConfig+0x2d4>
 800281a:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	031b      	lsls	r3, r3, #12
 8002828:	4901      	ldr	r1, [pc, #4]	@ (8002830 <HAL_RCC_OscConfig+0x288>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]
 800282e:	e025      	b.n	800287c <HAL_RCC_OscConfig+0x2d4>
 8002830:	58024400 	.word	0x58024400
 8002834:	4b9a      	ldr	r3, [pc, #616]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	4997      	ldr	r1, [pc, #604]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
 8002848:	e018      	b.n	800287c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800284a:	4b95      	ldr	r3, [pc, #596]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a94      	ldr	r2, [pc, #592]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002850:	f023 0301 	bic.w	r3, r3, #1
 8002854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe fdfb 	bl	8001450 <HAL_GetTick>
 800285a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285e:	f7fe fdf7 	bl	8001450 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e2ed      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002870:	4b8b      	ldr	r3, [pc, #556]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f0      	bne.n	800285e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 80a9 	beq.w	80029dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800288a:	4b85      	ldr	r3, [pc, #532]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002892:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002894:	4b82      	ldr	r3, [pc, #520]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002898:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	2b08      	cmp	r3, #8
 800289e:	d007      	beq.n	80028b0 <HAL_RCC_OscConfig+0x308>
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	2b18      	cmp	r3, #24
 80028a4:	d13a      	bne.n	800291c <HAL_RCC_OscConfig+0x374>
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d135      	bne.n	800291c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028b0:	4b7b      	ldr	r3, [pc, #492]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_OscConfig+0x320>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	2b80      	cmp	r3, #128	@ 0x80
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e2c1      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028c8:	f7fe fdf2 	bl	80014b0 <HAL_GetREVID>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d817      	bhi.n	8002906 <HAL_RCC_OscConfig+0x35e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	2b20      	cmp	r3, #32
 80028dc:	d108      	bne.n	80028f0 <HAL_RCC_OscConfig+0x348>
 80028de:	4b70      	ldr	r3, [pc, #448]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80028e6:	4a6e      	ldr	r2, [pc, #440]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 80028e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028ee:	e075      	b.n	80029dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028f0:	4b6b      	ldr	r3, [pc, #428]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	069b      	lsls	r3, r3, #26
 80028fe:	4968      	ldr	r1, [pc, #416]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002904:	e06a      	b.n	80029dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002906:	4b66      	ldr	r3, [pc, #408]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	061b      	lsls	r3, r3, #24
 8002914:	4962      	ldr	r1, [pc, #392]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002916:	4313      	orrs	r3, r2
 8002918:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800291a:	e05f      	b.n	80029dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d042      	beq.n	80029aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002924:	4b5e      	ldr	r3, [pc, #376]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a5d      	ldr	r2, [pc, #372]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 800292a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800292e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7fe fd8e 	bl	8001450 <HAL_GetTick>
 8002934:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002938:	f7fe fd8a 	bl	8001450 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e280      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800294a:	4b55      	ldr	r3, [pc, #340]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002956:	f7fe fdab 	bl	80014b0 <HAL_GetREVID>
 800295a:	4603      	mov	r3, r0
 800295c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002960:	4293      	cmp	r3, r2
 8002962:	d817      	bhi.n	8002994 <HAL_RCC_OscConfig+0x3ec>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	2b20      	cmp	r3, #32
 800296a:	d108      	bne.n	800297e <HAL_RCC_OscConfig+0x3d6>
 800296c:	4b4c      	ldr	r3, [pc, #304]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002974:	4a4a      	ldr	r2, [pc, #296]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002976:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800297a:	6053      	str	r3, [r2, #4]
 800297c:	e02e      	b.n	80029dc <HAL_RCC_OscConfig+0x434>
 800297e:	4b48      	ldr	r3, [pc, #288]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	069b      	lsls	r3, r3, #26
 800298c:	4944      	ldr	r1, [pc, #272]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 800298e:	4313      	orrs	r3, r2
 8002990:	604b      	str	r3, [r1, #4]
 8002992:	e023      	b.n	80029dc <HAL_RCC_OscConfig+0x434>
 8002994:	4b42      	ldr	r3, [pc, #264]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	061b      	lsls	r3, r3, #24
 80029a2:	493f      	ldr	r1, [pc, #252]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60cb      	str	r3, [r1, #12]
 80029a8:	e018      	b.n	80029dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029aa:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a3c      	ldr	r2, [pc, #240]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 80029b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7fe fd4b 	bl	8001450 <HAL_GetTick>
 80029ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029be:	f7fe fd47 	bl	8001450 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e23d      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029d0:	4b33      	ldr	r3, [pc, #204]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d036      	beq.n	8002a56 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d019      	beq.n	8002a24 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f0:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 80029f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029f4:	4a2a      	ldr	r2, [pc, #168]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7fe fd28 	bl	8001450 <HAL_GetTick>
 8002a00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a04:	f7fe fd24 	bl	8001450 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e21a      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a16:	4b22      	ldr	r3, [pc, #136]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x45c>
 8002a22:	e018      	b.n	8002a56 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a24:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a28:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a30:	f7fe fd0e 	bl	8001450 <HAL_GetTick>
 8002a34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a38:	f7fe fd0a 	bl	8001450 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e200      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a4a:	4b15      	ldr	r3, [pc, #84]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d039      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d01c      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002a70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a76:	f7fe fceb 	bl	8001450 <HAL_GetTick>
 8002a7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a7e:	f7fe fce7 	bl	8001450 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e1dd      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a90:	4b03      	ldr	r3, [pc, #12]	@ (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x4d6>
 8002a9c:	e01b      	b.n	8002ad6 <HAL_RCC_OscConfig+0x52e>
 8002a9e:	bf00      	nop
 8002aa0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002aa4:	4b9b      	ldr	r3, [pc, #620]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a9a      	ldr	r2, [pc, #616]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002aaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002aae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ab0:	f7fe fcce 	bl	8001450 <HAL_GetTick>
 8002ab4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ab8:	f7fe fcca 	bl	8001450 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e1c0      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002aca:	4b92      	ldr	r3, [pc, #584]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8081 	beq.w	8002be6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ae4:	4b8c      	ldr	r3, [pc, #560]	@ (8002d18 <HAL_RCC_OscConfig+0x770>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a8b      	ldr	r2, [pc, #556]	@ (8002d18 <HAL_RCC_OscConfig+0x770>)
 8002aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002af0:	f7fe fcae 	bl	8001450 <HAL_GetTick>
 8002af4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af8:	f7fe fcaa 	bl	8001450 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	@ 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e1a0      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b0a:	4b83      	ldr	r3, [pc, #524]	@ (8002d18 <HAL_RCC_OscConfig+0x770>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d106      	bne.n	8002b2c <HAL_RCC_OscConfig+0x584>
 8002b1e:	4b7d      	ldr	r3, [pc, #500]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b22:	4a7c      	ldr	r2, [pc, #496]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b2a:	e02d      	b.n	8002b88 <HAL_RCC_OscConfig+0x5e0>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10c      	bne.n	8002b4e <HAL_RCC_OscConfig+0x5a6>
 8002b34:	4b77      	ldr	r3, [pc, #476]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b38:	4a76      	ldr	r2, [pc, #472]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b40:	4b74      	ldr	r3, [pc, #464]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b44:	4a73      	ldr	r2, [pc, #460]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002b46:	f023 0304 	bic.w	r3, r3, #4
 8002b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b4c:	e01c      	b.n	8002b88 <HAL_RCC_OscConfig+0x5e0>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b05      	cmp	r3, #5
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x5c8>
 8002b56:	4b6f      	ldr	r3, [pc, #444]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5a:	4a6e      	ldr	r2, [pc, #440]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002b5c:	f043 0304 	orr.w	r3, r3, #4
 8002b60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b62:	4b6c      	ldr	r3, [pc, #432]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b66:	4a6b      	ldr	r2, [pc, #428]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCC_OscConfig+0x5e0>
 8002b70:	4b68      	ldr	r3, [pc, #416]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b74:	4a67      	ldr	r2, [pc, #412]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7c:	4b65      	ldr	r3, [pc, #404]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b80:	4a64      	ldr	r2, [pc, #400]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002b82:	f023 0304 	bic.w	r3, r3, #4
 8002b86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d015      	beq.n	8002bbc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b90:	f7fe fc5e 	bl	8001450 <HAL_GetTick>
 8002b94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b96:	e00a      	b.n	8002bae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b98:	f7fe fc5a 	bl	8001450 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e14e      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bae:	4b59      	ldr	r3, [pc, #356]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0ee      	beq.n	8002b98 <HAL_RCC_OscConfig+0x5f0>
 8002bba:	e014      	b.n	8002be6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7fe fc48 	bl	8001450 <HAL_GetTick>
 8002bc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc4:	f7fe fc44 	bl	8001450 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e138      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bda:	4b4e      	ldr	r3, [pc, #312]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1ee      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 812d 	beq.w	8002e4a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bf0:	4b48      	ldr	r3, [pc, #288]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bf8:	2b18      	cmp	r3, #24
 8002bfa:	f000 80bd 	beq.w	8002d78 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	f040 809e 	bne.w	8002d44 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c08:	4b42      	ldr	r3, [pc, #264]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a41      	ldr	r2, [pc, #260]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002c0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe fc1c 	bl	8001450 <HAL_GetTick>
 8002c18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe fc18 	bl	8001450 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e10e      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c2e:	4b39      	ldr	r3, [pc, #228]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c3a:	4b36      	ldr	r3, [pc, #216]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c3e:	4b37      	ldr	r3, [pc, #220]	@ (8002d1c <HAL_RCC_OscConfig+0x774>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c4a:	0112      	lsls	r2, r2, #4
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	4931      	ldr	r1, [pc, #196]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	628b      	str	r3, [r1, #40]	@ 0x28
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c62:	3b01      	subs	r3, #1
 8002c64:	025b      	lsls	r3, r3, #9
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	061b      	lsls	r3, r3, #24
 8002c80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002c84:	4923      	ldr	r1, [pc, #140]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c8a:	4b22      	ldr	r3, [pc, #136]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8e:	4a21      	ldr	r2, [pc, #132]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c96:	4b1f      	ldr	r3, [pc, #124]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002c98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c9a:	4b21      	ldr	r3, [pc, #132]	@ (8002d20 <HAL_RCC_OscConfig+0x778>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ca2:	00d2      	lsls	r2, r2, #3
 8002ca4:	491b      	ldr	r1, [pc, #108]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002caa:	4b1a      	ldr	r3, [pc, #104]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cae:	f023 020c 	bic.w	r2, r3, #12
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	4917      	ldr	r1, [pc, #92]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002cbc:	4b15      	ldr	r3, [pc, #84]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc0:	f023 0202 	bic.w	r2, r3, #2
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc8:	4912      	ldr	r1, [pc, #72]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cce:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd2:	4a10      	ldr	r2, [pc, #64]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cda:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cde:	4a0d      	ldr	r2, [pc, #52]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cea:	4a0a      	ldr	r2, [pc, #40]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002cf2:	4b08      	ldr	r3, [pc, #32]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf6:	4a07      	ldr	r2, [pc, #28]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cfe:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a04      	ldr	r2, [pc, #16]	@ (8002d14 <HAL_RCC_OscConfig+0x76c>)
 8002d04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7fe fba1 	bl	8001450 <HAL_GetTick>
 8002d0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d10:	e011      	b.n	8002d36 <HAL_RCC_OscConfig+0x78e>
 8002d12:	bf00      	nop
 8002d14:	58024400 	.word	0x58024400
 8002d18:	58024800 	.word	0x58024800
 8002d1c:	fffffc0c 	.word	0xfffffc0c
 8002d20:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d24:	f7fe fb94 	bl	8001450 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e08a      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d36:	4b47      	ldr	r3, [pc, #284]	@ (8002e54 <HAL_RCC_OscConfig+0x8ac>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x77c>
 8002d42:	e082      	b.n	8002e4a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d44:	4b43      	ldr	r3, [pc, #268]	@ (8002e54 <HAL_RCC_OscConfig+0x8ac>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a42      	ldr	r2, [pc, #264]	@ (8002e54 <HAL_RCC_OscConfig+0x8ac>)
 8002d4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe fb7e 	bl	8001450 <HAL_GetTick>
 8002d54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d58:	f7fe fb7a 	bl	8001450 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e070      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d6a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e54 <HAL_RCC_OscConfig+0x8ac>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x7b0>
 8002d76:	e068      	b.n	8002e4a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d78:	4b36      	ldr	r3, [pc, #216]	@ (8002e54 <HAL_RCC_OscConfig+0x8ac>)
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d7e:	4b35      	ldr	r3, [pc, #212]	@ (8002e54 <HAL_RCC_OscConfig+0x8ac>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d82:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d031      	beq.n	8002df0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f003 0203 	and.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d12a      	bne.n	8002df0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d122      	bne.n	8002df0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d11a      	bne.n	8002df0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	0a5b      	lsrs	r3, r3, #9
 8002dbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d111      	bne.n	8002df0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	0c1b      	lsrs	r3, r3, #16
 8002dd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d108      	bne.n	8002df0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	0e1b      	lsrs	r3, r3, #24
 8002de2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e02b      	b.n	8002e4c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002df4:	4b17      	ldr	r3, [pc, #92]	@ (8002e54 <HAL_RCC_OscConfig+0x8ac>)
 8002df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df8:	08db      	lsrs	r3, r3, #3
 8002dfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002dfe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d01f      	beq.n	8002e4a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e0a:	4b12      	ldr	r3, [pc, #72]	@ (8002e54 <HAL_RCC_OscConfig+0x8ac>)
 8002e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0e:	4a11      	ldr	r2, [pc, #68]	@ (8002e54 <HAL_RCC_OscConfig+0x8ac>)
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e16:	f7fe fb1b 	bl	8001450 <HAL_GetTick>
 8002e1a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e1c:	bf00      	nop
 8002e1e:	f7fe fb17 	bl	8001450 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d0f9      	beq.n	8002e1e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e54 <HAL_RCC_OscConfig+0x8ac>)
 8002e2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e58 <HAL_RCC_OscConfig+0x8b0>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e36:	00d2      	lsls	r2, r2, #3
 8002e38:	4906      	ldr	r1, [pc, #24]	@ (8002e54 <HAL_RCC_OscConfig+0x8ac>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e3e:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <HAL_RCC_OscConfig+0x8ac>)
 8002e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e42:	4a04      	ldr	r2, [pc, #16]	@ (8002e54 <HAL_RCC_OscConfig+0x8ac>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3730      	adds	r7, #48	@ 0x30
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	58024400 	.word	0x58024400
 8002e58:	ffff0007 	.word	0xffff0007

08002e5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e19c      	b.n	80031aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e70:	4b8a      	ldr	r3, [pc, #552]	@ (800309c <HAL_RCC_ClockConfig+0x240>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d910      	bls.n	8002ea0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7e:	4b87      	ldr	r3, [pc, #540]	@ (800309c <HAL_RCC_ClockConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 020f 	bic.w	r2, r3, #15
 8002e86:	4985      	ldr	r1, [pc, #532]	@ (800309c <HAL_RCC_ClockConfig+0x240>)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b83      	ldr	r3, [pc, #524]	@ (800309c <HAL_RCC_ClockConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e184      	b.n	80031aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d010      	beq.n	8002ece <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	4b7b      	ldr	r3, [pc, #492]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d908      	bls.n	8002ece <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ebc:	4b78      	ldr	r3, [pc, #480]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	4975      	ldr	r1, [pc, #468]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d010      	beq.n	8002efc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	4b70      	ldr	r3, [pc, #448]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d908      	bls.n	8002efc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002eea:	4b6d      	ldr	r3, [pc, #436]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	496a      	ldr	r1, [pc, #424]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d010      	beq.n	8002f2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699a      	ldr	r2, [r3, #24]
 8002f0c:	4b64      	ldr	r3, [pc, #400]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d908      	bls.n	8002f2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f18:	4b61      	ldr	r3, [pc, #388]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	495e      	ldr	r1, [pc, #376]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d010      	beq.n	8002f58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69da      	ldr	r2, [r3, #28]
 8002f3a:	4b59      	ldr	r3, [pc, #356]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d908      	bls.n	8002f58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f46:	4b56      	ldr	r3, [pc, #344]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	4953      	ldr	r1, [pc, #332]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d010      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	4b4d      	ldr	r3, [pc, #308]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d908      	bls.n	8002f86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f74:	4b4a      	ldr	r3, [pc, #296]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f023 020f 	bic.w	r2, r3, #15
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4947      	ldr	r1, [pc, #284]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d055      	beq.n	800303e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f92:	4b43      	ldr	r3, [pc, #268]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	4940      	ldr	r1, [pc, #256]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d107      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fac:	4b3c      	ldr	r3, [pc, #240]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d121      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0f6      	b.n	80031aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fc4:	4b36      	ldr	r3, [pc, #216]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d115      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0ea      	b.n	80031aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d107      	bne.n	8002fec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fdc:	4b30      	ldr	r3, [pc, #192]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d109      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0de      	b.n	80031aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fec:	4b2c      	ldr	r3, [pc, #176]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0d6      	b.n	80031aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ffc:	4b28      	ldr	r3, [pc, #160]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f023 0207 	bic.w	r2, r3, #7
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4925      	ldr	r1, [pc, #148]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 800300a:	4313      	orrs	r3, r2
 800300c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800300e:	f7fe fa1f 	bl	8001450 <HAL_GetTick>
 8003012:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003014:	e00a      	b.n	800302c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003016:	f7fe fa1b 	bl	8001450 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d901      	bls.n	800302c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e0be      	b.n	80031aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302c:	4b1c      	ldr	r3, [pc, #112]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	429a      	cmp	r2, r3
 800303c:	d1eb      	bne.n	8003016 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d010      	beq.n	800306c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	4b14      	ldr	r3, [pc, #80]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	429a      	cmp	r2, r3
 8003058:	d208      	bcs.n	800306c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800305a:	4b11      	ldr	r3, [pc, #68]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f023 020f 	bic.w	r2, r3, #15
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	490e      	ldr	r1, [pc, #56]	@ (80030a0 <HAL_RCC_ClockConfig+0x244>)
 8003068:	4313      	orrs	r3, r2
 800306a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800306c:	4b0b      	ldr	r3, [pc, #44]	@ (800309c <HAL_RCC_ClockConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d214      	bcs.n	80030a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b08      	ldr	r3, [pc, #32]	@ (800309c <HAL_RCC_ClockConfig+0x240>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 020f 	bic.w	r2, r3, #15
 8003082:	4906      	ldr	r1, [pc, #24]	@ (800309c <HAL_RCC_ClockConfig+0x240>)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800308a:	4b04      	ldr	r3, [pc, #16]	@ (800309c <HAL_RCC_ClockConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e086      	b.n	80031aa <HAL_RCC_ClockConfig+0x34e>
 800309c:	52002000 	.word	0x52002000
 80030a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d010      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	4b3f      	ldr	r3, [pc, #252]	@ (80031b4 <HAL_RCC_ClockConfig+0x358>)
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030bc:	429a      	cmp	r2, r3
 80030be:	d208      	bcs.n	80030d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030c0:	4b3c      	ldr	r3, [pc, #240]	@ (80031b4 <HAL_RCC_ClockConfig+0x358>)
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	4939      	ldr	r1, [pc, #228]	@ (80031b4 <HAL_RCC_ClockConfig+0x358>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d010      	beq.n	8003100 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	4b34      	ldr	r3, [pc, #208]	@ (80031b4 <HAL_RCC_ClockConfig+0x358>)
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d208      	bcs.n	8003100 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030ee:	4b31      	ldr	r3, [pc, #196]	@ (80031b4 <HAL_RCC_ClockConfig+0x358>)
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	492e      	ldr	r1, [pc, #184]	@ (80031b4 <HAL_RCC_ClockConfig+0x358>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	2b00      	cmp	r3, #0
 800310a:	d010      	beq.n	800312e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699a      	ldr	r2, [r3, #24]
 8003110:	4b28      	ldr	r3, [pc, #160]	@ (80031b4 <HAL_RCC_ClockConfig+0x358>)
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003118:	429a      	cmp	r2, r3
 800311a:	d208      	bcs.n	800312e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800311c:	4b25      	ldr	r3, [pc, #148]	@ (80031b4 <HAL_RCC_ClockConfig+0x358>)
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	4922      	ldr	r1, [pc, #136]	@ (80031b4 <HAL_RCC_ClockConfig+0x358>)
 800312a:	4313      	orrs	r3, r2
 800312c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d010      	beq.n	800315c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69da      	ldr	r2, [r3, #28]
 800313e:	4b1d      	ldr	r3, [pc, #116]	@ (80031b4 <HAL_RCC_ClockConfig+0x358>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003146:	429a      	cmp	r2, r3
 8003148:	d208      	bcs.n	800315c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800314a:	4b1a      	ldr	r3, [pc, #104]	@ (80031b4 <HAL_RCC_ClockConfig+0x358>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	4917      	ldr	r1, [pc, #92]	@ (80031b4 <HAL_RCC_ClockConfig+0x358>)
 8003158:	4313      	orrs	r3, r2
 800315a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800315c:	f000 f834 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8003160:	4602      	mov	r2, r0
 8003162:	4b14      	ldr	r3, [pc, #80]	@ (80031b4 <HAL_RCC_ClockConfig+0x358>)
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	4912      	ldr	r1, [pc, #72]	@ (80031b8 <HAL_RCC_ClockConfig+0x35c>)
 800316e:	5ccb      	ldrb	r3, [r1, r3]
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
 8003178:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800317a:	4b0e      	ldr	r3, [pc, #56]	@ (80031b4 <HAL_RCC_ClockConfig+0x358>)
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	4a0d      	ldr	r2, [pc, #52]	@ (80031b8 <HAL_RCC_ClockConfig+0x35c>)
 8003184:	5cd3      	ldrb	r3, [r2, r3]
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	fa22 f303 	lsr.w	r3, r2, r3
 8003190:	4a0a      	ldr	r2, [pc, #40]	@ (80031bc <HAL_RCC_ClockConfig+0x360>)
 8003192:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003194:	4a0a      	ldr	r2, [pc, #40]	@ (80031c0 <HAL_RCC_ClockConfig+0x364>)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800319a:	4b0a      	ldr	r3, [pc, #40]	@ (80031c4 <HAL_RCC_ClockConfig+0x368>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe f90c 	bl	80013bc <HAL_InitTick>
 80031a4:	4603      	mov	r3, r0
 80031a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	58024400 	.word	0x58024400
 80031b8:	08007c70 	.word	0x08007c70
 80031bc:	24000008 	.word	0x24000008
 80031c0:	24000004 	.word	0x24000004
 80031c4:	2400000c 	.word	0x2400000c

080031c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b089      	sub	sp, #36	@ 0x24
 80031cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ce:	4bb3      	ldr	r3, [pc, #716]	@ (800349c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031d6:	2b18      	cmp	r3, #24
 80031d8:	f200 8155 	bhi.w	8003486 <HAL_RCC_GetSysClockFreq+0x2be>
 80031dc:	a201      	add	r2, pc, #4	@ (adr r2, 80031e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80031de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e2:	bf00      	nop
 80031e4:	08003249 	.word	0x08003249
 80031e8:	08003487 	.word	0x08003487
 80031ec:	08003487 	.word	0x08003487
 80031f0:	08003487 	.word	0x08003487
 80031f4:	08003487 	.word	0x08003487
 80031f8:	08003487 	.word	0x08003487
 80031fc:	08003487 	.word	0x08003487
 8003200:	08003487 	.word	0x08003487
 8003204:	0800326f 	.word	0x0800326f
 8003208:	08003487 	.word	0x08003487
 800320c:	08003487 	.word	0x08003487
 8003210:	08003487 	.word	0x08003487
 8003214:	08003487 	.word	0x08003487
 8003218:	08003487 	.word	0x08003487
 800321c:	08003487 	.word	0x08003487
 8003220:	08003487 	.word	0x08003487
 8003224:	08003275 	.word	0x08003275
 8003228:	08003487 	.word	0x08003487
 800322c:	08003487 	.word	0x08003487
 8003230:	08003487 	.word	0x08003487
 8003234:	08003487 	.word	0x08003487
 8003238:	08003487 	.word	0x08003487
 800323c:	08003487 	.word	0x08003487
 8003240:	08003487 	.word	0x08003487
 8003244:	0800327b 	.word	0x0800327b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003248:	4b94      	ldr	r3, [pc, #592]	@ (800349c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d009      	beq.n	8003268 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003254:	4b91      	ldr	r3, [pc, #580]	@ (800349c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	08db      	lsrs	r3, r3, #3
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	4a90      	ldr	r2, [pc, #576]	@ (80034a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
 8003264:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003266:	e111      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003268:	4b8d      	ldr	r3, [pc, #564]	@ (80034a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800326a:	61bb      	str	r3, [r7, #24]
      break;
 800326c:	e10e      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800326e:	4b8d      	ldr	r3, [pc, #564]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003270:	61bb      	str	r3, [r7, #24]
      break;
 8003272:	e10b      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003274:	4b8c      	ldr	r3, [pc, #560]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003276:	61bb      	str	r3, [r7, #24]
      break;
 8003278:	e108      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800327a:	4b88      	ldr	r3, [pc, #544]	@ (800349c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003284:	4b85      	ldr	r3, [pc, #532]	@ (800349c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800328e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003290:	4b82      	ldr	r3, [pc, #520]	@ (800349c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800329a:	4b80      	ldr	r3, [pc, #512]	@ (800349c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800329e:	08db      	lsrs	r3, r3, #3
 80032a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80e1 	beq.w	8003480 <HAL_RCC_GetSysClockFreq+0x2b8>
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	f000 8083 	beq.w	80033cc <HAL_RCC_GetSysClockFreq+0x204>
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	f200 80a1 	bhi.w	8003410 <HAL_RCC_GetSysClockFreq+0x248>
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x114>
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d056      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x1c0>
 80032da:	e099      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032dc:	4b6f      	ldr	r3, [pc, #444]	@ (800349c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d02d      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032e8:	4b6c      	ldr	r3, [pc, #432]	@ (800349c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	08db      	lsrs	r3, r3, #3
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	4a6b      	ldr	r2, [pc, #428]	@ (80034a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
 80032f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	ee07 3a90 	vmov	s15, r3
 8003300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003312:	4b62      	ldr	r3, [pc, #392]	@ (800349c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003322:	ed97 6a02 	vldr	s12, [r7, #8]
 8003326:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80034ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800332a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800332e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003332:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800333a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003342:	e087      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80034b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003356:	4b51      	ldr	r3, [pc, #324]	@ (800349c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003366:	ed97 6a02 	vldr	s12, [r7, #8]
 800336a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80034ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800336e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800337a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800337e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003382:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003386:	e065      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003392:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80034b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800339a:	4b40      	ldr	r3, [pc, #256]	@ (800349c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80034ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80033b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033ca:	e043      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80034b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80033da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033de:	4b2f      	ldr	r3, [pc, #188]	@ (800349c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80033f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80034ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80033f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800340e:	e021      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80034b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800341e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003422:	4b1e      	ldr	r3, [pc, #120]	@ (800349c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003432:	ed97 6a02 	vldr	s12, [r7, #8]
 8003436:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80034ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800343a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800343e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800344a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003452:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003454:	4b11      	ldr	r3, [pc, #68]	@ (800349c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003458:	0a5b      	lsrs	r3, r3, #9
 800345a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800345e:	3301      	adds	r3, #1
 8003460:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	ee07 3a90 	vmov	s15, r3
 8003468:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800346c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003478:	ee17 3a90 	vmov	r3, s15
 800347c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800347e:	e005      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	61bb      	str	r3, [r7, #24]
      break;
 8003484:	e002      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003486:	4b07      	ldr	r3, [pc, #28]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003488:	61bb      	str	r3, [r7, #24]
      break;
 800348a:	bf00      	nop
  }

  return sysclockfreq;
 800348c:	69bb      	ldr	r3, [r7, #24]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3724      	adds	r7, #36	@ 0x24
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	58024400 	.word	0x58024400
 80034a0:	03d09000 	.word	0x03d09000
 80034a4:	003d0900 	.word	0x003d0900
 80034a8:	007a1200 	.word	0x007a1200
 80034ac:	46000000 	.word	0x46000000
 80034b0:	4c742400 	.word	0x4c742400
 80034b4:	4a742400 	.word	0x4a742400
 80034b8:	4af42400 	.word	0x4af42400

080034bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034c2:	f7ff fe81 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 80034c6:	4602      	mov	r2, r0
 80034c8:	4b10      	ldr	r3, [pc, #64]	@ (800350c <HAL_RCC_GetHCLKFreq+0x50>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	0a1b      	lsrs	r3, r3, #8
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	490f      	ldr	r1, [pc, #60]	@ (8003510 <HAL_RCC_GetHCLKFreq+0x54>)
 80034d4:	5ccb      	ldrb	r3, [r1, r3]
 80034d6:	f003 031f 	and.w	r3, r3, #31
 80034da:	fa22 f303 	lsr.w	r3, r2, r3
 80034de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034e0:	4b0a      	ldr	r3, [pc, #40]	@ (800350c <HAL_RCC_GetHCLKFreq+0x50>)
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	4a09      	ldr	r2, [pc, #36]	@ (8003510 <HAL_RCC_GetHCLKFreq+0x54>)
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	fa22 f303 	lsr.w	r3, r2, r3
 80034f6:	4a07      	ldr	r2, [pc, #28]	@ (8003514 <HAL_RCC_GetHCLKFreq+0x58>)
 80034f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034fa:	4a07      	ldr	r2, [pc, #28]	@ (8003518 <HAL_RCC_GetHCLKFreq+0x5c>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003500:	4b04      	ldr	r3, [pc, #16]	@ (8003514 <HAL_RCC_GetHCLKFreq+0x58>)
 8003502:	681b      	ldr	r3, [r3, #0]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	58024400 	.word	0x58024400
 8003510:	08007c70 	.word	0x08007c70
 8003514:	24000008 	.word	0x24000008
 8003518:	24000004 	.word	0x24000004

0800351c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003520:	f7ff ffcc 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	091b      	lsrs	r3, r3, #4
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4904      	ldr	r1, [pc, #16]	@ (8003544 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800353c:	4618      	mov	r0, r3
 800353e:	bd80      	pop	{r7, pc}
 8003540:	58024400 	.word	0x58024400
 8003544:	08007c70 	.word	0x08007c70

08003548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800354c:	f7ff ffb6 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8003550:	4602      	mov	r2, r0
 8003552:	4b06      	ldr	r3, [pc, #24]	@ (800356c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	4904      	ldr	r1, [pc, #16]	@ (8003570 <HAL_RCC_GetPCLK2Freq+0x28>)
 800355e:	5ccb      	ldrb	r3, [r1, r3]
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	58024400 	.word	0x58024400
 8003570:	08007c70 	.word	0x08007c70

08003574 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003578:	b0ca      	sub	sp, #296	@ 0x128
 800357a:	af00      	add	r7, sp, #0
 800357c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003580:	2300      	movs	r3, #0
 8003582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003586:	2300      	movs	r3, #0
 8003588:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800358c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003598:	2500      	movs	r5, #0
 800359a:	ea54 0305 	orrs.w	r3, r4, r5
 800359e:	d049      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035aa:	d02f      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80035ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035b0:	d828      	bhi.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035b6:	d01a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80035b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035bc:	d822      	bhi.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80035c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035c6:	d007      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035c8:	e01c      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ca:	4bb8      	ldr	r3, [pc, #736]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ce:	4ab7      	ldr	r2, [pc, #732]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035d6:	e01a      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035dc:	3308      	adds	r3, #8
 80035de:	2102      	movs	r1, #2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f001 fc8f 	bl	8004f04 <RCCEx_PLL2_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035ec:	e00f      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f2:	3328      	adds	r3, #40	@ 0x28
 80035f4:	2102      	movs	r1, #2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 fd36 	bl	8005068 <RCCEx_PLL3_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003602:	e004      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800360a:	e000      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800360c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800360e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003616:	4ba5      	ldr	r3, [pc, #660]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800361a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003622:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003624:	4aa1      	ldr	r2, [pc, #644]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003626:	430b      	orrs	r3, r1
 8003628:	6513      	str	r3, [r2, #80]	@ 0x50
 800362a:	e003      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003630:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003640:	f04f 0900 	mov.w	r9, #0
 8003644:	ea58 0309 	orrs.w	r3, r8, r9
 8003648:	d047      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003650:	2b04      	cmp	r3, #4
 8003652:	d82a      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003654:	a201      	add	r2, pc, #4	@ (adr r2, 800365c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365a:	bf00      	nop
 800365c:	08003671 	.word	0x08003671
 8003660:	0800367f 	.word	0x0800367f
 8003664:	08003695 	.word	0x08003695
 8003668:	080036b3 	.word	0x080036b3
 800366c:	080036b3 	.word	0x080036b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003670:	4b8e      	ldr	r3, [pc, #568]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003674:	4a8d      	ldr	r2, [pc, #564]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003676:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800367a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800367c:	e01a      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800367e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003682:	3308      	adds	r3, #8
 8003684:	2100      	movs	r1, #0
 8003686:	4618      	mov	r0, r3
 8003688:	f001 fc3c 	bl	8004f04 <RCCEx_PLL2_Config>
 800368c:	4603      	mov	r3, r0
 800368e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003692:	e00f      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003698:	3328      	adds	r3, #40	@ 0x28
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f001 fce3 	bl	8005068 <RCCEx_PLL3_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036a8:	e004      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036b0:	e000      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80036b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036bc:	4b7b      	ldr	r3, [pc, #492]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c0:	f023 0107 	bic.w	r1, r3, #7
 80036c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ca:	4a78      	ldr	r2, [pc, #480]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036cc:	430b      	orrs	r3, r1
 80036ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80036d0:	e003      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80036da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80036e6:	f04f 0b00 	mov.w	fp, #0
 80036ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80036ee:	d04c      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80036f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036fa:	d030      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80036fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003700:	d829      	bhi.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003702:	2bc0      	cmp	r3, #192	@ 0xc0
 8003704:	d02d      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003706:	2bc0      	cmp	r3, #192	@ 0xc0
 8003708:	d825      	bhi.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800370a:	2b80      	cmp	r3, #128	@ 0x80
 800370c:	d018      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800370e:	2b80      	cmp	r3, #128	@ 0x80
 8003710:	d821      	bhi.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003716:	2b40      	cmp	r3, #64	@ 0x40
 8003718:	d007      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800371a:	e01c      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800371c:	4b63      	ldr	r3, [pc, #396]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003720:	4a62      	ldr	r2, [pc, #392]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003728:	e01c      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800372a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372e:	3308      	adds	r3, #8
 8003730:	2100      	movs	r1, #0
 8003732:	4618      	mov	r0, r3
 8003734:	f001 fbe6 	bl	8004f04 <RCCEx_PLL2_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800373e:	e011      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003744:	3328      	adds	r3, #40	@ 0x28
 8003746:	2100      	movs	r1, #0
 8003748:	4618      	mov	r0, r3
 800374a:	f001 fc8d 	bl	8005068 <RCCEx_PLL3_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003754:	e006      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800375c:	e002      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800375e:	bf00      	nop
 8003760:	e000      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800376c:	4b4f      	ldr	r3, [pc, #316]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800376e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003770:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377a:	4a4c      	ldr	r2, [pc, #304]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800377c:	430b      	orrs	r3, r1
 800377e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003780:	e003      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800378a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003796:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800379a:	2300      	movs	r3, #0
 800379c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80037a0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80037a4:	460b      	mov	r3, r1
 80037a6:	4313      	orrs	r3, r2
 80037a8:	d053      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80037aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037b6:	d035      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80037b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037bc:	d82e      	bhi.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80037c2:	d031      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80037c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80037c8:	d828      	bhi.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037ce:	d01a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80037d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037d4:	d822      	bhi.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80037da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037de:	d007      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80037e0:	e01c      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e2:	4b32      	ldr	r3, [pc, #200]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e6:	4a31      	ldr	r2, [pc, #196]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037ee:	e01c      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f4:	3308      	adds	r3, #8
 80037f6:	2100      	movs	r1, #0
 80037f8:	4618      	mov	r0, r3
 80037fa:	f001 fb83 	bl	8004f04 <RCCEx_PLL2_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003804:	e011      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380a:	3328      	adds	r3, #40	@ 0x28
 800380c:	2100      	movs	r1, #0
 800380e:	4618      	mov	r0, r3
 8003810:	f001 fc2a 	bl	8005068 <RCCEx_PLL3_Config>
 8003814:	4603      	mov	r3, r0
 8003816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800381a:	e006      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003822:	e002      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003824:	bf00      	nop
 8003826:	e000      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800382a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10b      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003832:	4b1e      	ldr	r3, [pc, #120]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003836:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800383a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003842:	4a1a      	ldr	r2, [pc, #104]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003844:	430b      	orrs	r3, r1
 8003846:	6593      	str	r3, [r2, #88]	@ 0x58
 8003848:	e003      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800384e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800385e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003862:	2300      	movs	r3, #0
 8003864:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003868:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800386c:	460b      	mov	r3, r1
 800386e:	4313      	orrs	r3, r2
 8003870:	d056      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003876:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800387a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800387e:	d038      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003880:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003884:	d831      	bhi.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003886:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800388a:	d034      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800388c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003890:	d82b      	bhi.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003892:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003896:	d01d      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003898:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800389c:	d825      	bhi.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d006      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80038a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038a6:	d00a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80038a8:	e01f      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038aa:	bf00      	nop
 80038ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b0:	4ba2      	ldr	r3, [pc, #648]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b4:	4aa1      	ldr	r2, [pc, #644]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038bc:	e01c      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c2:	3308      	adds	r3, #8
 80038c4:	2100      	movs	r1, #0
 80038c6:	4618      	mov	r0, r3
 80038c8:	f001 fb1c 	bl	8004f04 <RCCEx_PLL2_Config>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038d2:	e011      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d8:	3328      	adds	r3, #40	@ 0x28
 80038da:	2100      	movs	r1, #0
 80038dc:	4618      	mov	r0, r3
 80038de:	f001 fbc3 	bl	8005068 <RCCEx_PLL3_Config>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038e8:	e006      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038f0:	e002      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80038f2:	bf00      	nop
 80038f4:	e000      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80038f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10b      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003900:	4b8e      	ldr	r3, [pc, #568]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003904:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003910:	4a8a      	ldr	r2, [pc, #552]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003912:	430b      	orrs	r3, r1
 8003914:	6593      	str	r3, [r2, #88]	@ 0x58
 8003916:	e003      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800391c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800392c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003930:	2300      	movs	r3, #0
 8003932:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003936:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800393a:	460b      	mov	r3, r1
 800393c:	4313      	orrs	r3, r2
 800393e:	d03a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003946:	2b30      	cmp	r3, #48	@ 0x30
 8003948:	d01f      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800394a:	2b30      	cmp	r3, #48	@ 0x30
 800394c:	d819      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800394e:	2b20      	cmp	r3, #32
 8003950:	d00c      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003952:	2b20      	cmp	r3, #32
 8003954:	d815      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d019      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800395a:	2b10      	cmp	r3, #16
 800395c:	d111      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800395e:	4b77      	ldr	r3, [pc, #476]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003962:	4a76      	ldr	r2, [pc, #472]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003968:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800396a:	e011      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800396c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003970:	3308      	adds	r3, #8
 8003972:	2102      	movs	r1, #2
 8003974:	4618      	mov	r0, r3
 8003976:	f001 fac5 	bl	8004f04 <RCCEx_PLL2_Config>
 800397a:	4603      	mov	r3, r0
 800397c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003980:	e006      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003988:	e002      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800398a:	bf00      	nop
 800398c:	e000      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800398e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003998:	4b68      	ldr	r3, [pc, #416]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800399a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800399c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80039a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a6:	4a65      	ldr	r2, [pc, #404]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039a8:	430b      	orrs	r3, r1
 80039aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ac:	e003      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80039c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80039c6:	2300      	movs	r3, #0
 80039c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80039cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4313      	orrs	r3, r2
 80039d4:	d051      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039e0:	d035      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80039e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039e6:	d82e      	bhi.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039ec:	d031      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80039ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039f2:	d828      	bhi.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039f8:	d01a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80039fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039fe:	d822      	bhi.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a08:	d007      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a0a:	e01c      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a0c:	4b4b      	ldr	r3, [pc, #300]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a10:	4a4a      	ldr	r2, [pc, #296]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a18:	e01c      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1e:	3308      	adds	r3, #8
 8003a20:	2100      	movs	r1, #0
 8003a22:	4618      	mov	r0, r3
 8003a24:	f001 fa6e 	bl	8004f04 <RCCEx_PLL2_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a2e:	e011      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a34:	3328      	adds	r3, #40	@ 0x28
 8003a36:	2100      	movs	r1, #0
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f001 fb15 	bl	8005068 <RCCEx_PLL3_Config>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a44:	e006      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a4c:	e002      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a4e:	bf00      	nop
 8003a50:	e000      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10a      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a5c:	4b37      	ldr	r3, [pc, #220]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a60:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a6a:	4a34      	ldr	r2, [pc, #208]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a70:	e003      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a82:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003a86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a94:	460b      	mov	r3, r1
 8003a96:	4313      	orrs	r3, r2
 8003a98:	d056      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aa4:	d033      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003aa6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aaa:	d82c      	bhi.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003aac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ab0:	d02f      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003ab2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ab6:	d826      	bhi.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ab8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003abc:	d02b      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003abe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ac2:	d820      	bhi.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ac4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ac8:	d012      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003aca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ace:	d81a      	bhi.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d022      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ad8:	d115      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ade:	3308      	adds	r3, #8
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f001 fa0e 	bl	8004f04 <RCCEx_PLL2_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003aee:	e015      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af4:	3328      	adds	r3, #40	@ 0x28
 8003af6:	2101      	movs	r1, #1
 8003af8:	4618      	mov	r0, r3
 8003afa:	f001 fab5 	bl	8005068 <RCCEx_PLL3_Config>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b04:	e00a      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b0c:	e006      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b0e:	bf00      	nop
 8003b10:	e004      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b12:	bf00      	nop
 8003b14:	e002      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b16:	bf00      	nop
 8003b18:	e000      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10d      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b24:	4b05      	ldr	r3, [pc, #20]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b28:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b32:	4a02      	ldr	r2, [pc, #8]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b38:	e006      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b3a:	bf00      	nop
 8003b3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b50:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4313      	orrs	r3, r2
 8003b66:	d055      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b74:	d033      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b7a:	d82c      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b80:	d02f      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b86:	d826      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b8c:	d02b      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b92:	d820      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b98:	d012      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003b9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b9e:	d81a      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d022      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003ba4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ba8:	d115      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bae:	3308      	adds	r3, #8
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f001 f9a6 	bl	8004f04 <RCCEx_PLL2_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bbe:	e015      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc4:	3328      	adds	r3, #40	@ 0x28
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f001 fa4d 	bl	8005068 <RCCEx_PLL3_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bd4:	e00a      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bdc:	e006      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bde:	bf00      	nop
 8003be0:	e004      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003be2:	bf00      	nop
 8003be4:	e002      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003be6:	bf00      	nop
 8003be8:	e000      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10b      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bf4:	4ba3      	ldr	r3, [pc, #652]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c04:	4a9f      	ldr	r2, [pc, #636]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c06:	430b      	orrs	r3, r1
 8003c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c0a:	e003      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003c2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4313      	orrs	r3, r2
 8003c32:	d037      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c3e:	d00e      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003c40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c44:	d816      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d018      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003c4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c4e:	d111      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c50:	4b8c      	ldr	r3, [pc, #560]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c54:	4a8b      	ldr	r2, [pc, #556]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c5c:	e00f      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c62:	3308      	adds	r3, #8
 8003c64:	2101      	movs	r1, #1
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 f94c 	bl	8004f04 <RCCEx_PLL2_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c72:	e004      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c7a:	e000      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10a      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c86:	4b7f      	ldr	r3, [pc, #508]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c8a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c94:	4a7b      	ldr	r2, [pc, #492]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c96:	430b      	orrs	r3, r1
 8003c98:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c9a:	e003      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003cba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	d039      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d81c      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003cce:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd4:	08003d11 	.word	0x08003d11
 8003cd8:	08003ce5 	.word	0x08003ce5
 8003cdc:	08003cf3 	.word	0x08003cf3
 8003ce0:	08003d11 	.word	0x08003d11
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce4:	4b67      	ldr	r3, [pc, #412]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	4a66      	ldr	r2, [pc, #408]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cf0:	e00f      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	2102      	movs	r1, #2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f001 f902 	bl	8004f04 <RCCEx_PLL2_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d06:	e004      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d0e:	e000      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10a      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d1a:	4b5a      	ldr	r3, [pc, #360]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1e:	f023 0103 	bic.w	r1, r3, #3
 8003d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d28:	4a56      	ldr	r2, [pc, #344]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d2a:	430b      	orrs	r3, r1
 8003d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d2e:	e003      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d40:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003d44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d52:	460b      	mov	r3, r1
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f000 809f 	beq.w	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d5a:	4b4b      	ldr	r3, [pc, #300]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a4a      	ldr	r2, [pc, #296]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d66:	f7fd fb73 	bl	8001450 <HAL_GetTick>
 8003d6a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d6e:	e00b      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d70:	f7fd fb6e 	bl	8001450 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b64      	cmp	r3, #100	@ 0x64
 8003d7e:	d903      	bls.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d86:	e005      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d88:	4b3f      	ldr	r3, [pc, #252]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0ed      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d179      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d9c:	4b39      	ldr	r3, [pc, #228]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003da8:	4053      	eors	r3, r2
 8003daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d015      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003db2:	4b34      	ldr	r3, [pc, #208]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dbe:	4b31      	ldr	r3, [pc, #196]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc2:	4a30      	ldr	r2, [pc, #192]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dca:	4b2e      	ldr	r3, [pc, #184]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dce:	4a2d      	ldr	r2, [pc, #180]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dd4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003dd6:	4a2b      	ldr	r2, [pc, #172]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ddc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dea:	d118      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fd fb30 	bl	8001450 <HAL_GetTick>
 8003df0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003df4:	e00d      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df6:	f7fd fb2b 	bl	8001450 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e00:	1ad2      	subs	r2, r2, r3
 8003e02:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d903      	bls.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003e10:	e005      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e12:	4b1c      	ldr	r3, [pc, #112]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0eb      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d129      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e36:	d10e      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003e38:	4b12      	ldr	r3, [pc, #72]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e48:	091a      	lsrs	r2, r3, #4
 8003e4a:	4b10      	ldr	r3, [pc, #64]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	4a0d      	ldr	r2, [pc, #52]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6113      	str	r3, [r2, #16]
 8003e54:	e005      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e56:	4b0b      	ldr	r3, [pc, #44]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e60:	6113      	str	r3, [r2, #16]
 8003e62:	4b08      	ldr	r3, [pc, #32]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e64:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e72:	4a04      	ldr	r2, [pc, #16]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e74:	430b      	orrs	r3, r1
 8003e76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e78:	e00e      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003e82:	e009      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003e84:	58024400 	.word	0x58024400
 8003e88:	58024800 	.word	0x58024800
 8003e8c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f002 0301 	and.w	r3, r2, #1
 8003ea4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003eae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f000 8089 	beq.w	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ec0:	2b28      	cmp	r3, #40	@ 0x28
 8003ec2:	d86b      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ecc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003fa5 	.word	0x08003fa5
 8003ed0:	08003f9d 	.word	0x08003f9d
 8003ed4:	08003f9d 	.word	0x08003f9d
 8003ed8:	08003f9d 	.word	0x08003f9d
 8003edc:	08003f9d 	.word	0x08003f9d
 8003ee0:	08003f9d 	.word	0x08003f9d
 8003ee4:	08003f9d 	.word	0x08003f9d
 8003ee8:	08003f9d 	.word	0x08003f9d
 8003eec:	08003f71 	.word	0x08003f71
 8003ef0:	08003f9d 	.word	0x08003f9d
 8003ef4:	08003f9d 	.word	0x08003f9d
 8003ef8:	08003f9d 	.word	0x08003f9d
 8003efc:	08003f9d 	.word	0x08003f9d
 8003f00:	08003f9d 	.word	0x08003f9d
 8003f04:	08003f9d 	.word	0x08003f9d
 8003f08:	08003f9d 	.word	0x08003f9d
 8003f0c:	08003f87 	.word	0x08003f87
 8003f10:	08003f9d 	.word	0x08003f9d
 8003f14:	08003f9d 	.word	0x08003f9d
 8003f18:	08003f9d 	.word	0x08003f9d
 8003f1c:	08003f9d 	.word	0x08003f9d
 8003f20:	08003f9d 	.word	0x08003f9d
 8003f24:	08003f9d 	.word	0x08003f9d
 8003f28:	08003f9d 	.word	0x08003f9d
 8003f2c:	08003fa5 	.word	0x08003fa5
 8003f30:	08003f9d 	.word	0x08003f9d
 8003f34:	08003f9d 	.word	0x08003f9d
 8003f38:	08003f9d 	.word	0x08003f9d
 8003f3c:	08003f9d 	.word	0x08003f9d
 8003f40:	08003f9d 	.word	0x08003f9d
 8003f44:	08003f9d 	.word	0x08003f9d
 8003f48:	08003f9d 	.word	0x08003f9d
 8003f4c:	08003fa5 	.word	0x08003fa5
 8003f50:	08003f9d 	.word	0x08003f9d
 8003f54:	08003f9d 	.word	0x08003f9d
 8003f58:	08003f9d 	.word	0x08003f9d
 8003f5c:	08003f9d 	.word	0x08003f9d
 8003f60:	08003f9d 	.word	0x08003f9d
 8003f64:	08003f9d 	.word	0x08003f9d
 8003f68:	08003f9d 	.word	0x08003f9d
 8003f6c:	08003fa5 	.word	0x08003fa5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f74:	3308      	adds	r3, #8
 8003f76:	2101      	movs	r1, #1
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 ffc3 	bl	8004f04 <RCCEx_PLL2_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f84:	e00f      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8a:	3328      	adds	r3, #40	@ 0x28
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 f86a 	bl	8005068 <RCCEx_PLL3_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f9a:	e004      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10a      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003fae:	4bbf      	ldr	r3, [pc, #764]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fbc:	4abb      	ldr	r2, [pc, #748]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fbe:	430b      	orrs	r3, r1
 8003fc0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fc2:	e003      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd4:	f002 0302 	and.w	r3, r2, #2
 8003fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003fe2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	d041      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	d824      	bhi.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8003ffc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffc:	08004049 	.word	0x08004049
 8004000:	08004015 	.word	0x08004015
 8004004:	0800402b 	.word	0x0800402b
 8004008:	08004049 	.word	0x08004049
 800400c:	08004049 	.word	0x08004049
 8004010:	08004049 	.word	0x08004049
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004018:	3308      	adds	r3, #8
 800401a:	2101      	movs	r1, #1
 800401c:	4618      	mov	r0, r3
 800401e:	f000 ff71 	bl	8004f04 <RCCEx_PLL2_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004028:	e00f      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800402a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402e:	3328      	adds	r3, #40	@ 0x28
 8004030:	2101      	movs	r1, #1
 8004032:	4618      	mov	r0, r3
 8004034:	f001 f818 	bl	8005068 <RCCEx_PLL3_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800403e:	e004      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004046:	e000      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800404a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10a      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004052:	4b96      	ldr	r3, [pc, #600]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004056:	f023 0107 	bic.w	r1, r3, #7
 800405a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004060:	4a92      	ldr	r2, [pc, #584]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004062:	430b      	orrs	r3, r1
 8004064:	6553      	str	r3, [r2, #84]	@ 0x54
 8004066:	e003      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004068:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800406c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	f002 0304 	and.w	r3, r2, #4
 800407c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004080:	2300      	movs	r3, #0
 8004082:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004086:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800408a:	460b      	mov	r3, r1
 800408c:	4313      	orrs	r3, r2
 800408e:	d044      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004094:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004098:	2b05      	cmp	r3, #5
 800409a:	d825      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800409c:	a201      	add	r2, pc, #4	@ (adr r2, 80040a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a2:	bf00      	nop
 80040a4:	080040f1 	.word	0x080040f1
 80040a8:	080040bd 	.word	0x080040bd
 80040ac:	080040d3 	.word	0x080040d3
 80040b0:	080040f1 	.word	0x080040f1
 80040b4:	080040f1 	.word	0x080040f1
 80040b8:	080040f1 	.word	0x080040f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c0:	3308      	adds	r3, #8
 80040c2:	2101      	movs	r1, #1
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 ff1d 	bl	8004f04 <RCCEx_PLL2_Config>
 80040ca:	4603      	mov	r3, r0
 80040cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040d0:	e00f      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d6:	3328      	adds	r3, #40	@ 0x28
 80040d8:	2101      	movs	r1, #1
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 ffc4 	bl	8005068 <RCCEx_PLL3_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040e6:	e004      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040ee:	e000      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80040f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040fa:	4b6c      	ldr	r3, [pc, #432]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fe:	f023 0107 	bic.w	r1, r3, #7
 8004102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800410a:	4a68      	ldr	r2, [pc, #416]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800410c:	430b      	orrs	r3, r1
 800410e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004110:	e003      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800411a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f002 0320 	and.w	r3, r2, #32
 8004126:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800412a:	2300      	movs	r3, #0
 800412c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004130:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004134:	460b      	mov	r3, r1
 8004136:	4313      	orrs	r3, r2
 8004138:	d055      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800413a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004142:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004146:	d033      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004148:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800414c:	d82c      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800414e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004152:	d02f      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004158:	d826      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800415a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800415e:	d02b      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004160:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004164:	d820      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800416a:	d012      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800416c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004170:	d81a      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004172:	2b00      	cmp	r3, #0
 8004174:	d022      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800417a:	d115      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800417c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004180:	3308      	adds	r3, #8
 8004182:	2100      	movs	r1, #0
 8004184:	4618      	mov	r0, r3
 8004186:	f000 febd 	bl	8004f04 <RCCEx_PLL2_Config>
 800418a:	4603      	mov	r3, r0
 800418c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004190:	e015      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004196:	3328      	adds	r3, #40	@ 0x28
 8004198:	2102      	movs	r1, #2
 800419a:	4618      	mov	r0, r3
 800419c:	f000 ff64 	bl	8005068 <RCCEx_PLL3_Config>
 80041a0:	4603      	mov	r3, r0
 80041a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041a6:	e00a      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041ae:	e006      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041b0:	bf00      	nop
 80041b2:	e004      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041b4:	bf00      	nop
 80041b6:	e002      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041b8:	bf00      	nop
 80041ba:	e000      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10b      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041c6:	4b39      	ldr	r3, [pc, #228]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80041ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d6:	4a35      	ldr	r2, [pc, #212]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041d8:	430b      	orrs	r3, r1
 80041da:	6553      	str	r3, [r2, #84]	@ 0x54
 80041dc:	e003      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80041f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041f6:	2300      	movs	r3, #0
 80041f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80041fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004200:	460b      	mov	r3, r1
 8004202:	4313      	orrs	r3, r2
 8004204:	d058      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800420e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004212:	d033      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004214:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004218:	d82c      	bhi.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800421e:	d02f      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004224:	d826      	bhi.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004226:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800422a:	d02b      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800422c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004230:	d820      	bhi.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004232:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004236:	d012      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004238:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800423c:	d81a      	bhi.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800423e:	2b00      	cmp	r3, #0
 8004240:	d022      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004246:	d115      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424c:	3308      	adds	r3, #8
 800424e:	2100      	movs	r1, #0
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fe57 	bl	8004f04 <RCCEx_PLL2_Config>
 8004256:	4603      	mov	r3, r0
 8004258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800425c:	e015      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800425e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004262:	3328      	adds	r3, #40	@ 0x28
 8004264:	2102      	movs	r1, #2
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fefe 	bl	8005068 <RCCEx_PLL3_Config>
 800426c:	4603      	mov	r3, r0
 800426e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004272:	e00a      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800427a:	e006      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800427c:	bf00      	nop
 800427e:	e004      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004280:	bf00      	nop
 8004282:	e002      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004284:	bf00      	nop
 8004286:	e000      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10e      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004292:	4b06      	ldr	r3, [pc, #24]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004296:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800429a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042a2:	4a02      	ldr	r2, [pc, #8]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80042a8:	e006      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80042aa:	bf00      	nop
 80042ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80042c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042c8:	2300      	movs	r3, #0
 80042ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80042d2:	460b      	mov	r3, r1
 80042d4:	4313      	orrs	r3, r2
 80042d6:	d055      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042e0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042e4:	d033      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80042e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042ea:	d82c      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042f0:	d02f      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80042f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042f6:	d826      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042f8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042fc:	d02b      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80042fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004302:	d820      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004304:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004308:	d012      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800430a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800430e:	d81a      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d022      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004314:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004318:	d115      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800431a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431e:	3308      	adds	r3, #8
 8004320:	2100      	movs	r1, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fdee 	bl	8004f04 <RCCEx_PLL2_Config>
 8004328:	4603      	mov	r3, r0
 800432a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800432e:	e015      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004334:	3328      	adds	r3, #40	@ 0x28
 8004336:	2102      	movs	r1, #2
 8004338:	4618      	mov	r0, r3
 800433a:	f000 fe95 	bl	8005068 <RCCEx_PLL3_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004344:	e00a      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800434c:	e006      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800434e:	bf00      	nop
 8004350:	e004      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004352:	bf00      	nop
 8004354:	e002      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004356:	bf00      	nop
 8004358:	e000      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800435a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800435c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10b      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004364:	4ba1      	ldr	r3, [pc, #644]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004368:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800436c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004370:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004374:	4a9d      	ldr	r2, [pc, #628]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004376:	430b      	orrs	r3, r1
 8004378:	6593      	str	r3, [r2, #88]	@ 0x58
 800437a:	e003      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004380:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f002 0308 	and.w	r3, r2, #8
 8004390:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004394:	2300      	movs	r3, #0
 8004396:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800439a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800439e:	460b      	mov	r3, r1
 80043a0:	4313      	orrs	r3, r2
 80043a2:	d01e      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80043a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043b0:	d10c      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b6:	3328      	adds	r3, #40	@ 0x28
 80043b8:	2102      	movs	r1, #2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fe54 	bl	8005068 <RCCEx_PLL3_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80043cc:	4b87      	ldr	r3, [pc, #540]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043dc:	4a83      	ldr	r2, [pc, #524]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043de:	430b      	orrs	r3, r1
 80043e0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f002 0310 	and.w	r3, r2, #16
 80043ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043f2:	2300      	movs	r3, #0
 80043f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80043fc:	460b      	mov	r3, r1
 80043fe:	4313      	orrs	r3, r2
 8004400:	d01e      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004406:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800440a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800440e:	d10c      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004414:	3328      	adds	r3, #40	@ 0x28
 8004416:	2102      	movs	r1, #2
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fe25 	bl	8005068 <RCCEx_PLL3_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800442a:	4b70      	ldr	r3, [pc, #448]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800442c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004436:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800443a:	4a6c      	ldr	r2, [pc, #432]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800443c:	430b      	orrs	r3, r1
 800443e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800444c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004450:	2300      	movs	r3, #0
 8004452:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004456:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800445a:	460b      	mov	r3, r1
 800445c:	4313      	orrs	r3, r2
 800445e:	d03e      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004464:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004468:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800446c:	d022      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800446e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004472:	d81b      	bhi.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800447c:	d00b      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800447e:	e015      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004484:	3308      	adds	r3, #8
 8004486:	2100      	movs	r1, #0
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fd3b 	bl	8004f04 <RCCEx_PLL2_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004494:	e00f      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449a:	3328      	adds	r3, #40	@ 0x28
 800449c:	2102      	movs	r1, #2
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fde2 	bl	8005068 <RCCEx_PLL3_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044aa:	e004      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044b2:	e000      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80044b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10b      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044be:	4b4b      	ldr	r3, [pc, #300]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044ce:	4a47      	ldr	r2, [pc, #284]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80044d4:	e003      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80044ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044ec:	2300      	movs	r3, #0
 80044ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80044f4:	460b      	mov	r3, r1
 80044f6:	4313      	orrs	r3, r2
 80044f8:	d03b      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004502:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004506:	d01f      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004508:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800450c:	d818      	bhi.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800450e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004512:	d003      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004514:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004518:	d007      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800451a:	e011      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800451c:	4b33      	ldr	r3, [pc, #204]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004520:	4a32      	ldr	r2, [pc, #200]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004528:	e00f      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800452a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452e:	3328      	adds	r3, #40	@ 0x28
 8004530:	2101      	movs	r1, #1
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fd98 	bl	8005068 <RCCEx_PLL3_Config>
 8004538:	4603      	mov	r3, r0
 800453a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800453e:	e004      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004546:	e000      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800454a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004552:	4b26      	ldr	r3, [pc, #152]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004556:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004562:	4a22      	ldr	r2, [pc, #136]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004564:	430b      	orrs	r3, r1
 8004566:	6553      	str	r3, [r2, #84]	@ 0x54
 8004568:	e003      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800457e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004580:	2300      	movs	r3, #0
 8004582:	677b      	str	r3, [r7, #116]	@ 0x74
 8004584:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004588:	460b      	mov	r3, r1
 800458a:	4313      	orrs	r3, r2
 800458c:	d034      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800458e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800459c:	d007      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800459e:	e011      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a0:	4b12      	ldr	r3, [pc, #72]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a4:	4a11      	ldr	r2, [pc, #68]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045ac:	e00e      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b2:	3308      	adds	r3, #8
 80045b4:	2102      	movs	r1, #2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fca4 	bl	8004f04 <RCCEx_PLL2_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045c2:	e003      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10d      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80045d4:	4b05      	ldr	r3, [pc, #20]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e2:	4a02      	ldr	r2, [pc, #8]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045e4:	430b      	orrs	r3, r1
 80045e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045e8:	e006      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80045ea:	bf00      	nop
 80045ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004604:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004606:	2300      	movs	r3, #0
 8004608:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800460a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800460e:	460b      	mov	r3, r1
 8004610:	4313      	orrs	r3, r2
 8004612:	d00c      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004618:	3328      	adds	r3, #40	@ 0x28
 800461a:	2102      	movs	r1, #2
 800461c:	4618      	mov	r0, r3
 800461e:	f000 fd23 	bl	8005068 <RCCEx_PLL3_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800463a:	663b      	str	r3, [r7, #96]	@ 0x60
 800463c:	2300      	movs	r3, #0
 800463e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004640:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004644:	460b      	mov	r3, r1
 8004646:	4313      	orrs	r3, r2
 8004648:	d038      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004652:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004656:	d018      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004658:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800465c:	d811      	bhi.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800465e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004662:	d014      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004668:	d80b      	bhi.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d011      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800466e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004672:	d106      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004674:	4bc3      	ldr	r3, [pc, #780]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004678:	4ac2      	ldr	r2, [pc, #776]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800467a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800467e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004680:	e008      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004688:	e004      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800468a:	bf00      	nop
 800468c:	e002      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800468e:	bf00      	nop
 8004690:	e000      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800469c:	4bb9      	ldr	r3, [pc, #740]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800469e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80046a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046ac:	4ab5      	ldr	r2, [pc, #724]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ae:	430b      	orrs	r3, r1
 80046b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80046b2:	e003      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80046c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046ca:	2300      	movs	r3, #0
 80046cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80046d2:	460b      	mov	r3, r1
 80046d4:	4313      	orrs	r3, r2
 80046d6:	d009      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046d8:	4baa      	ldr	r3, [pc, #680]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80046e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e6:	4aa7      	ldr	r2, [pc, #668]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046e8:	430b      	orrs	r3, r1
 80046ea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80046ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80046f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80046fa:	2300      	movs	r3, #0
 80046fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80046fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004702:	460b      	mov	r3, r1
 8004704:	4313      	orrs	r3, r2
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004708:	4b9e      	ldr	r3, [pc, #632]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004714:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004718:	4a9a      	ldr	r2, [pc, #616]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800471a:	430b      	orrs	r3, r1
 800471c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800472a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800472c:	2300      	movs	r3, #0
 800472e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004730:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004734:	460b      	mov	r3, r1
 8004736:	4313      	orrs	r3, r2
 8004738:	d009      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800473a:	4b92      	ldr	r3, [pc, #584]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800473c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800473e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004748:	4a8e      	ldr	r2, [pc, #568]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800474a:	430b      	orrs	r3, r1
 800474c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800475a:	643b      	str	r3, [r7, #64]	@ 0x40
 800475c:	2300      	movs	r3, #0
 800475e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004760:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004764:	460b      	mov	r3, r1
 8004766:	4313      	orrs	r3, r2
 8004768:	d00e      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800476a:	4b86      	ldr	r3, [pc, #536]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	4a85      	ldr	r2, [pc, #532]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004770:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004774:	6113      	str	r3, [r2, #16]
 8004776:	4b83      	ldr	r3, [pc, #524]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004778:	6919      	ldr	r1, [r3, #16]
 800477a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004782:	4a80      	ldr	r2, [pc, #512]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004784:	430b      	orrs	r3, r1
 8004786:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004790:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004794:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004796:	2300      	movs	r3, #0
 8004798:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800479a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800479e:	460b      	mov	r3, r1
 80047a0:	4313      	orrs	r3, r2
 80047a2:	d009      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047a4:	4b77      	ldr	r3, [pc, #476]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80047ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b2:	4a74      	ldr	r2, [pc, #464]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047b4:	430b      	orrs	r3, r1
 80047b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80047c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80047c6:	2300      	movs	r3, #0
 80047c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80047ce:	460b      	mov	r3, r1
 80047d0:	4313      	orrs	r3, r2
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047d4:	4b6b      	ldr	r3, [pc, #428]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80047dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047e4:	4a67      	ldr	r2, [pc, #412]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047e6:	430b      	orrs	r3, r1
 80047e8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80047ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f2:	2100      	movs	r1, #0
 80047f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004800:	460b      	mov	r3, r1
 8004802:	4313      	orrs	r3, r2
 8004804:	d011      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480a:	3308      	adds	r3, #8
 800480c:	2100      	movs	r1, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fb78 	bl	8004f04 <RCCEx_PLL2_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800481a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800482a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004832:	2100      	movs	r1, #0
 8004834:	6239      	str	r1, [r7, #32]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	627b      	str	r3, [r7, #36]	@ 0x24
 800483c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004840:	460b      	mov	r3, r1
 8004842:	4313      	orrs	r3, r2
 8004844:	d011      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484a:	3308      	adds	r3, #8
 800484c:	2101      	movs	r1, #1
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fb58 	bl	8004f04 <RCCEx_PLL2_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800485a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004866:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800486a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	2100      	movs	r1, #0
 8004874:	61b9      	str	r1, [r7, #24]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004880:	460b      	mov	r3, r1
 8004882:	4313      	orrs	r3, r2
 8004884:	d011      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488a:	3308      	adds	r3, #8
 800488c:	2102      	movs	r1, #2
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fb38 	bl	8004f04 <RCCEx_PLL2_Config>
 8004894:	4603      	mov	r3, r0
 8004896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800489a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80048aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	2100      	movs	r1, #0
 80048b4:	6139      	str	r1, [r7, #16]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048c0:	460b      	mov	r3, r1
 80048c2:	4313      	orrs	r3, r2
 80048c4:	d011      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ca:	3328      	adds	r3, #40	@ 0x28
 80048cc:	2100      	movs	r1, #0
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fbca 	bl	8005068 <RCCEx_PLL3_Config>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80048da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	2100      	movs	r1, #0
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	f003 0310 	and.w	r3, r3, #16
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004900:	460b      	mov	r3, r1
 8004902:	4313      	orrs	r3, r2
 8004904:	d011      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490a:	3328      	adds	r3, #40	@ 0x28
 800490c:	2101      	movs	r1, #1
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fbaa 	bl	8005068 <RCCEx_PLL3_Config>
 8004914:	4603      	mov	r3, r0
 8004916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800491a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004926:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800492a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	2100      	movs	r1, #0
 8004934:	6039      	str	r1, [r7, #0]
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	607b      	str	r3, [r7, #4]
 800493c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004940:	460b      	mov	r3, r1
 8004942:	4313      	orrs	r3, r2
 8004944:	d011      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494a:	3328      	adds	r3, #40	@ 0x28
 800494c:	2102      	movs	r1, #2
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fb8a 	bl	8005068 <RCCEx_PLL3_Config>
 8004954:	4603      	mov	r3, r0
 8004956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800495a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004966:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800496a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	e000      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
}
 8004978:	4618      	mov	r0, r3
 800497a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800497e:	46bd      	mov	sp, r7
 8004980:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004984:	58024400 	.word	0x58024400

08004988 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800498c:	f7fe fd96 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8004990:	4602      	mov	r2, r0
 8004992:	4b06      	ldr	r3, [pc, #24]	@ (80049ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	091b      	lsrs	r3, r3, #4
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	4904      	ldr	r1, [pc, #16]	@ (80049b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800499e:	5ccb      	ldrb	r3, [r1, r3]
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	58024400 	.word	0x58024400
 80049b0:	08007c70 	.word	0x08007c70

080049b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b089      	sub	sp, #36	@ 0x24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049bc:	4ba1      	ldr	r3, [pc, #644]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80049c6:	4b9f      	ldr	r3, [pc, #636]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ca:	0b1b      	lsrs	r3, r3, #12
 80049cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80049d2:	4b9c      	ldr	r3, [pc, #624]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80049de:	4b99      	ldr	r3, [pc, #612]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e2:	08db      	lsrs	r3, r3, #3
 80049e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	fb02 f303 	mul.w	r3, r2, r3
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 8111 	beq.w	8004c24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	f000 8083 	beq.w	8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	f200 80a1 	bhi.w	8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d056      	beq.n	8004acc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a1e:	e099      	b.n	8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a20:	4b88      	ldr	r3, [pc, #544]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d02d      	beq.n	8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a2c:	4b85      	ldr	r3, [pc, #532]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	08db      	lsrs	r3, r3, #3
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	4a84      	ldr	r2, [pc, #528]	@ (8004c48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	ee07 3a90 	vmov	s15, r3
 8004a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a56:	4b7b      	ldr	r3, [pc, #492]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a86:	e087      	b.n	8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aca:	e065      	b.n	8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ade:	4b59      	ldr	r3, [pc, #356]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004af2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b0e:	e043      	b.n	8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b22:	4b48      	ldr	r3, [pc, #288]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b52:	e021      	b.n	8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b66:	4b37      	ldr	r3, [pc, #220]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b98:	4b2a      	ldr	r3, [pc, #168]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9c:	0a5b      	lsrs	r3, r3, #9
 8004b9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004baa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bbe:	ee17 2a90 	vmov	r2, s15
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bca:	0c1b      	lsrs	r3, r3, #16
 8004bcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bd0:	ee07 3a90 	vmov	s15, r3
 8004bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bec:	ee17 2a90 	vmov	r2, s15
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004bf4:	4b13      	ldr	r3, [pc, #76]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf8:	0e1b      	lsrs	r3, r3, #24
 8004bfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c1a:	ee17 2a90 	vmov	r2, s15
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c22:	e008      	b.n	8004c36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	609a      	str	r2, [r3, #8]
}
 8004c36:	bf00      	nop
 8004c38:	3724      	adds	r7, #36	@ 0x24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	58024400 	.word	0x58024400
 8004c48:	03d09000 	.word	0x03d09000
 8004c4c:	46000000 	.word	0x46000000
 8004c50:	4c742400 	.word	0x4c742400
 8004c54:	4a742400 	.word	0x4a742400
 8004c58:	4af42400 	.word	0x4af42400

08004c5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b089      	sub	sp, #36	@ 0x24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c64:	4ba1      	ldr	r3, [pc, #644]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c6e:	4b9f      	ldr	r3, [pc, #636]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c72:	0d1b      	lsrs	r3, r3, #20
 8004c74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c7a:	4b9c      	ldr	r3, [pc, #624]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	0a1b      	lsrs	r3, r3, #8
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c86:	4b99      	ldr	r3, [pc, #612]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8a:	08db      	lsrs	r3, r3, #3
 8004c8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	fb02 f303 	mul.w	r3, r2, r3
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 8111 	beq.w	8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	f000 8083 	beq.w	8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	f200 80a1 	bhi.w	8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d056      	beq.n	8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004cc6:	e099      	b.n	8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cc8:	4b88      	ldr	r3, [pc, #544]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d02d      	beq.n	8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cd4:	4b85      	ldr	r3, [pc, #532]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	08db      	lsrs	r3, r3, #3
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	4a84      	ldr	r2, [pc, #528]	@ (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	ee07 3a90 	vmov	s15, r3
 8004cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cfe:	4b7b      	ldr	r3, [pc, #492]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d2e:	e087      	b.n	8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d42:	4b6a      	ldr	r3, [pc, #424]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d72:	e065      	b.n	8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d86:	4b59      	ldr	r3, [pc, #356]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004db6:	e043      	b.n	8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dca:	4b48      	ldr	r3, [pc, #288]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dde:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dfa:	e021      	b.n	8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0e:	4b37      	ldr	r3, [pc, #220]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e40:	4b2a      	ldr	r3, [pc, #168]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e44:	0a5b      	lsrs	r3, r3, #9
 8004e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e66:	ee17 2a90 	vmov	r2, s15
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e72:	0c1b      	lsrs	r3, r3, #16
 8004e74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e78:	ee07 3a90 	vmov	s15, r3
 8004e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e94:	ee17 2a90 	vmov	r2, s15
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e9c:	4b13      	ldr	r3, [pc, #76]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea0:	0e1b      	lsrs	r3, r3, #24
 8004ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004eb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004eb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ec2:	ee17 2a90 	vmov	r2, s15
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004eca:	e008      	b.n	8004ede <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	609a      	str	r2, [r3, #8]
}
 8004ede:	bf00      	nop
 8004ee0:	3724      	adds	r7, #36	@ 0x24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	58024400 	.word	0x58024400
 8004ef0:	03d09000 	.word	0x03d09000
 8004ef4:	46000000 	.word	0x46000000
 8004ef8:	4c742400 	.word	0x4c742400
 8004efc:	4a742400 	.word	0x4a742400
 8004f00:	4af42400 	.word	0x4af42400

08004f04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f12:	4b53      	ldr	r3, [pc, #332]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d101      	bne.n	8004f22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e099      	b.n	8005056 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f22:	4b4f      	ldr	r3, [pc, #316]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a4e      	ldr	r2, [pc, #312]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004f28:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f2e:	f7fc fa8f 	bl	8001450 <HAL_GetTick>
 8004f32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f34:	e008      	b.n	8004f48 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f36:	f7fc fa8b 	bl	8001450 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e086      	b.n	8005056 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f48:	4b45      	ldr	r3, [pc, #276]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1f0      	bne.n	8004f36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f54:	4b42      	ldr	r3, [pc, #264]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f58:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	031b      	lsls	r3, r3, #12
 8004f62:	493f      	ldr	r1, [pc, #252]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	025b      	lsls	r3, r3, #9
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	041b      	lsls	r3, r3, #16
 8004f86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	061b      	lsls	r3, r3, #24
 8004f94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f98:	4931      	ldr	r1, [pc, #196]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f9e:	4b30      	ldr	r3, [pc, #192]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	492d      	ldr	r1, [pc, #180]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb4:	f023 0220 	bic.w	r2, r3, #32
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	4928      	ldr	r1, [pc, #160]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004fc2:	4b27      	ldr	r3, [pc, #156]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc6:	4a26      	ldr	r2, [pc, #152]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fc8:	f023 0310 	bic.w	r3, r3, #16
 8004fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004fce:	4b24      	ldr	r3, [pc, #144]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fd2:	4b24      	ldr	r3, [pc, #144]	@ (8005064 <RCCEx_PLL2_Config+0x160>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	69d2      	ldr	r2, [r2, #28]
 8004fda:	00d2      	lsls	r2, r2, #3
 8004fdc:	4920      	ldr	r1, [pc, #128]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fe8:	f043 0310 	orr.w	r3, r3, #16
 8004fec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d106      	bne.n	8005002 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	4a19      	ldr	r2, [pc, #100]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004ffa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005000:	e00f      	b.n	8005022 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d106      	bne.n	8005016 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005008:	4b15      	ldr	r3, [pc, #84]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 800500a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500c:	4a14      	ldr	r2, [pc, #80]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 800500e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005012:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005014:	e005      	b.n	8005022 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005016:	4b12      	ldr	r3, [pc, #72]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8005018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501a:	4a11      	ldr	r2, [pc, #68]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 800501c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005020:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005022:	4b0f      	ldr	r3, [pc, #60]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a0e      	ldr	r2, [pc, #56]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8005028:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800502c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800502e:	f7fc fa0f 	bl	8001450 <HAL_GetTick>
 8005032:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005034:	e008      	b.n	8005048 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005036:	f7fc fa0b 	bl	8001450 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e006      	b.n	8005056 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005048:	4b05      	ldr	r3, [pc, #20]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f0      	beq.n	8005036 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005054:	7bfb      	ldrb	r3, [r7, #15]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	58024400 	.word	0x58024400
 8005064:	ffff0007 	.word	0xffff0007

08005068 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005076:	4b53      	ldr	r3, [pc, #332]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	2b03      	cmp	r3, #3
 8005080:	d101      	bne.n	8005086 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e099      	b.n	80051ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005086:	4b4f      	ldr	r3, [pc, #316]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a4e      	ldr	r2, [pc, #312]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 800508c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005092:	f7fc f9dd 	bl	8001450 <HAL_GetTick>
 8005096:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005098:	e008      	b.n	80050ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800509a:	f7fc f9d9 	bl	8001450 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e086      	b.n	80051ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050ac:	4b45      	ldr	r3, [pc, #276]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1f0      	bne.n	800509a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80050b8:	4b42      	ldr	r3, [pc, #264]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 80050ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	051b      	lsls	r3, r3, #20
 80050c6:	493f      	ldr	r1, [pc, #252]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	3b01      	subs	r3, #1
 80050dc:	025b      	lsls	r3, r3, #9
 80050de:	b29b      	uxth	r3, r3
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	041b      	lsls	r3, r3, #16
 80050ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	061b      	lsls	r3, r3, #24
 80050f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050fc:	4931      	ldr	r1, [pc, #196]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005102:	4b30      	ldr	r3, [pc, #192]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005106:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	492d      	ldr	r1, [pc, #180]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005110:	4313      	orrs	r3, r2
 8005112:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005114:	4b2b      	ldr	r3, [pc, #172]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005118:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	4928      	ldr	r1, [pc, #160]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005122:	4313      	orrs	r3, r2
 8005124:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005126:	4b27      	ldr	r3, [pc, #156]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512a:	4a26      	ldr	r2, [pc, #152]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 800512c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005130:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005132:	4b24      	ldr	r3, [pc, #144]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005134:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005136:	4b24      	ldr	r3, [pc, #144]	@ (80051c8 <RCCEx_PLL3_Config+0x160>)
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	69d2      	ldr	r2, [r2, #28]
 800513e:	00d2      	lsls	r2, r2, #3
 8005140:	4920      	ldr	r1, [pc, #128]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005142:	4313      	orrs	r3, r2
 8005144:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005146:	4b1f      	ldr	r3, [pc, #124]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514a:	4a1e      	ldr	r2, [pc, #120]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 800514c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005150:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d106      	bne.n	8005166 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005158:	4b1a      	ldr	r3, [pc, #104]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 800515a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515c:	4a19      	ldr	r2, [pc, #100]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 800515e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005162:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005164:	e00f      	b.n	8005186 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d106      	bne.n	800517a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800516c:	4b15      	ldr	r3, [pc, #84]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 800516e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005170:	4a14      	ldr	r2, [pc, #80]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005172:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005176:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005178:	e005      	b.n	8005186 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800517a:	4b12      	ldr	r3, [pc, #72]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 800517c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517e:	4a11      	ldr	r2, [pc, #68]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005180:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005184:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005186:	4b0f      	ldr	r3, [pc, #60]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a0e      	ldr	r2, [pc, #56]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 800518c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005192:	f7fc f95d 	bl	8001450 <HAL_GetTick>
 8005196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005198:	e008      	b.n	80051ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800519a:	f7fc f959 	bl	8001450 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e006      	b.n	80051ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051ac:	4b05      	ldr	r3, [pc, #20]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f0      	beq.n	800519a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	58024400 	.word	0x58024400
 80051c8:	ffff0007 	.word	0xffff0007

080051cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e049      	b.n	8005272 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7fb fe82 	bl	8000efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3304      	adds	r3, #4
 8005208:	4619      	mov	r1, r3
 800520a:	4610      	mov	r0, r2
 800520c:	f000 fc46 	bl	8005a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e049      	b.n	8005320 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d106      	bne.n	80052a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f841 	bl	8005328 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2202      	movs	r2, #2
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3304      	adds	r3, #4
 80052b6:	4619      	mov	r1, r3
 80052b8:	4610      	mov	r0, r2
 80052ba:	f000 fbef 	bl	8005a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d109      	bne.n	8005360 <HAL_TIM_PWM_Start+0x24>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	bf14      	ite	ne
 8005358:	2301      	movne	r3, #1
 800535a:	2300      	moveq	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	e03c      	b.n	80053da <HAL_TIM_PWM_Start+0x9e>
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b04      	cmp	r3, #4
 8005364:	d109      	bne.n	800537a <HAL_TIM_PWM_Start+0x3e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b01      	cmp	r3, #1
 8005370:	bf14      	ite	ne
 8005372:	2301      	movne	r3, #1
 8005374:	2300      	moveq	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	e02f      	b.n	80053da <HAL_TIM_PWM_Start+0x9e>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b08      	cmp	r3, #8
 800537e:	d109      	bne.n	8005394 <HAL_TIM_PWM_Start+0x58>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b01      	cmp	r3, #1
 800538a:	bf14      	ite	ne
 800538c:	2301      	movne	r3, #1
 800538e:	2300      	moveq	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	e022      	b.n	80053da <HAL_TIM_PWM_Start+0x9e>
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2b0c      	cmp	r3, #12
 8005398:	d109      	bne.n	80053ae <HAL_TIM_PWM_Start+0x72>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	bf14      	ite	ne
 80053a6:	2301      	movne	r3, #1
 80053a8:	2300      	moveq	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	e015      	b.n	80053da <HAL_TIM_PWM_Start+0x9e>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b10      	cmp	r3, #16
 80053b2:	d109      	bne.n	80053c8 <HAL_TIM_PWM_Start+0x8c>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	bf14      	ite	ne
 80053c0:	2301      	movne	r3, #1
 80053c2:	2300      	moveq	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	e008      	b.n	80053da <HAL_TIM_PWM_Start+0x9e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	bf14      	ite	ne
 80053d4:	2301      	movne	r3, #1
 80053d6:	2300      	moveq	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e0a1      	b.n	8005526 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d104      	bne.n	80053f2 <HAL_TIM_PWM_Start+0xb6>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053f0:	e023      	b.n	800543a <HAL_TIM_PWM_Start+0xfe>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d104      	bne.n	8005402 <HAL_TIM_PWM_Start+0xc6>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005400:	e01b      	b.n	800543a <HAL_TIM_PWM_Start+0xfe>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b08      	cmp	r3, #8
 8005406:	d104      	bne.n	8005412 <HAL_TIM_PWM_Start+0xd6>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005410:	e013      	b.n	800543a <HAL_TIM_PWM_Start+0xfe>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b0c      	cmp	r3, #12
 8005416:	d104      	bne.n	8005422 <HAL_TIM_PWM_Start+0xe6>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005420:	e00b      	b.n	800543a <HAL_TIM_PWM_Start+0xfe>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b10      	cmp	r3, #16
 8005426:	d104      	bne.n	8005432 <HAL_TIM_PWM_Start+0xf6>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005430:	e003      	b.n	800543a <HAL_TIM_PWM_Start+0xfe>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2202      	movs	r2, #2
 8005436:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2201      	movs	r2, #1
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 ff44 	bl	80062d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a38      	ldr	r2, [pc, #224]	@ (8005530 <HAL_TIM_PWM_Start+0x1f4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d013      	beq.n	800547a <HAL_TIM_PWM_Start+0x13e>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a37      	ldr	r2, [pc, #220]	@ (8005534 <HAL_TIM_PWM_Start+0x1f8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00e      	beq.n	800547a <HAL_TIM_PWM_Start+0x13e>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a35      	ldr	r2, [pc, #212]	@ (8005538 <HAL_TIM_PWM_Start+0x1fc>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d009      	beq.n	800547a <HAL_TIM_PWM_Start+0x13e>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a34      	ldr	r2, [pc, #208]	@ (800553c <HAL_TIM_PWM_Start+0x200>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d004      	beq.n	800547a <HAL_TIM_PWM_Start+0x13e>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a32      	ldr	r2, [pc, #200]	@ (8005540 <HAL_TIM_PWM_Start+0x204>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d101      	bne.n	800547e <HAL_TIM_PWM_Start+0x142>
 800547a:	2301      	movs	r3, #1
 800547c:	e000      	b.n	8005480 <HAL_TIM_PWM_Start+0x144>
 800547e:	2300      	movs	r3, #0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d007      	beq.n	8005494 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005492:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a25      	ldr	r2, [pc, #148]	@ (8005530 <HAL_TIM_PWM_Start+0x1f4>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d022      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x1a8>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a6:	d01d      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x1a8>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a25      	ldr	r2, [pc, #148]	@ (8005544 <HAL_TIM_PWM_Start+0x208>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d018      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x1a8>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a24      	ldr	r2, [pc, #144]	@ (8005548 <HAL_TIM_PWM_Start+0x20c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d013      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x1a8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a22      	ldr	r2, [pc, #136]	@ (800554c <HAL_TIM_PWM_Start+0x210>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00e      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x1a8>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005534 <HAL_TIM_PWM_Start+0x1f8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d009      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x1a8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1e      	ldr	r2, [pc, #120]	@ (8005550 <HAL_TIM_PWM_Start+0x214>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d004      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x1a8>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a16      	ldr	r2, [pc, #88]	@ (8005538 <HAL_TIM_PWM_Start+0x1fc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d115      	bne.n	8005510 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005554 <HAL_TIM_PWM_Start+0x218>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b06      	cmp	r3, #6
 80054f4:	d015      	beq.n	8005522 <HAL_TIM_PWM_Start+0x1e6>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054fc:	d011      	beq.n	8005522 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0201 	orr.w	r2, r2, #1
 800550c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550e:	e008      	b.n	8005522 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	e000      	b.n	8005524 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005522:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	40010000 	.word	0x40010000
 8005534:	40010400 	.word	0x40010400
 8005538:	40014000 	.word	0x40014000
 800553c:	40014400 	.word	0x40014400
 8005540:	40014800 	.word	0x40014800
 8005544:	40000400 	.word	0x40000400
 8005548:	40000800 	.word	0x40000800
 800554c:	40000c00 	.word	0x40000c00
 8005550:	40001800 	.word	0x40001800
 8005554:	00010007 	.word	0x00010007

08005558 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2200      	movs	r2, #0
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 feb0 	bl	80062d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a3e      	ldr	r2, [pc, #248]	@ (8005670 <HAL_TIM_PWM_Stop+0x118>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d013      	beq.n	80055a2 <HAL_TIM_PWM_Stop+0x4a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a3d      	ldr	r2, [pc, #244]	@ (8005674 <HAL_TIM_PWM_Stop+0x11c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00e      	beq.n	80055a2 <HAL_TIM_PWM_Stop+0x4a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a3b      	ldr	r2, [pc, #236]	@ (8005678 <HAL_TIM_PWM_Stop+0x120>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d009      	beq.n	80055a2 <HAL_TIM_PWM_Stop+0x4a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a3a      	ldr	r2, [pc, #232]	@ (800567c <HAL_TIM_PWM_Stop+0x124>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d004      	beq.n	80055a2 <HAL_TIM_PWM_Stop+0x4a>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a38      	ldr	r2, [pc, #224]	@ (8005680 <HAL_TIM_PWM_Stop+0x128>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d101      	bne.n	80055a6 <HAL_TIM_PWM_Stop+0x4e>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <HAL_TIM_PWM_Stop+0x50>
 80055a6:	2300      	movs	r3, #0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d017      	beq.n	80055dc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6a1a      	ldr	r2, [r3, #32]
 80055b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80055b6:	4013      	ands	r3, r2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10f      	bne.n	80055dc <HAL_TIM_PWM_Stop+0x84>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6a1a      	ldr	r2, [r3, #32]
 80055c2:	f240 4344 	movw	r3, #1092	@ 0x444
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d107      	bne.n	80055dc <HAL_TIM_PWM_Stop+0x84>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6a1a      	ldr	r2, [r3, #32]
 80055e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80055e6:	4013      	ands	r3, r2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10f      	bne.n	800560c <HAL_TIM_PWM_Stop+0xb4>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6a1a      	ldr	r2, [r3, #32]
 80055f2:	f240 4344 	movw	r3, #1092	@ 0x444
 80055f6:	4013      	ands	r3, r2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d107      	bne.n	800560c <HAL_TIM_PWM_Stop+0xb4>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0201 	bic.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d104      	bne.n	800561c <HAL_TIM_PWM_Stop+0xc4>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800561a:	e023      	b.n	8005664 <HAL_TIM_PWM_Stop+0x10c>
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b04      	cmp	r3, #4
 8005620:	d104      	bne.n	800562c <HAL_TIM_PWM_Stop+0xd4>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800562a:	e01b      	b.n	8005664 <HAL_TIM_PWM_Stop+0x10c>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2b08      	cmp	r3, #8
 8005630:	d104      	bne.n	800563c <HAL_TIM_PWM_Stop+0xe4>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800563a:	e013      	b.n	8005664 <HAL_TIM_PWM_Stop+0x10c>
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2b0c      	cmp	r3, #12
 8005640:	d104      	bne.n	800564c <HAL_TIM_PWM_Stop+0xf4>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800564a:	e00b      	b.n	8005664 <HAL_TIM_PWM_Stop+0x10c>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b10      	cmp	r3, #16
 8005650:	d104      	bne.n	800565c <HAL_TIM_PWM_Stop+0x104>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800565a:	e003      	b.n	8005664 <HAL_TIM_PWM_Stop+0x10c>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40010000 	.word	0x40010000
 8005674:	40010400 	.word	0x40010400
 8005678:	40014000 	.word	0x40014000
 800567c:	40014400 	.word	0x40014400
 8005680:	40014800 	.word	0x40014800

08005684 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800569a:	2b01      	cmp	r3, #1
 800569c:	d101      	bne.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800569e:	2302      	movs	r3, #2
 80056a0:	e0ff      	b.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b14      	cmp	r3, #20
 80056ae:	f200 80f0 	bhi.w	8005892 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80056b2:	a201      	add	r2, pc, #4	@ (adr r2, 80056b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	0800570d 	.word	0x0800570d
 80056bc:	08005893 	.word	0x08005893
 80056c0:	08005893 	.word	0x08005893
 80056c4:	08005893 	.word	0x08005893
 80056c8:	0800574d 	.word	0x0800574d
 80056cc:	08005893 	.word	0x08005893
 80056d0:	08005893 	.word	0x08005893
 80056d4:	08005893 	.word	0x08005893
 80056d8:	0800578f 	.word	0x0800578f
 80056dc:	08005893 	.word	0x08005893
 80056e0:	08005893 	.word	0x08005893
 80056e4:	08005893 	.word	0x08005893
 80056e8:	080057cf 	.word	0x080057cf
 80056ec:	08005893 	.word	0x08005893
 80056f0:	08005893 	.word	0x08005893
 80056f4:	08005893 	.word	0x08005893
 80056f8:	08005811 	.word	0x08005811
 80056fc:	08005893 	.word	0x08005893
 8005700:	08005893 	.word	0x08005893
 8005704:	08005893 	.word	0x08005893
 8005708:	08005851 	.word	0x08005851
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fa68 	bl	8005be8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0208 	orr.w	r2, r2, #8
 8005726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0204 	bic.w	r2, r2, #4
 8005736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6999      	ldr	r1, [r3, #24]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	619a      	str	r2, [r3, #24]
      break;
 800574a:	e0a5      	b.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fad8 	bl	8005d08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699a      	ldr	r2, [r3, #24]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6999      	ldr	r1, [r3, #24]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	021a      	lsls	r2, r3, #8
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	619a      	str	r2, [r3, #24]
      break;
 800578c:	e084      	b.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fb41 	bl	8005e1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69da      	ldr	r2, [r3, #28]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0208 	orr.w	r2, r2, #8
 80057a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69da      	ldr	r2, [r3, #28]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0204 	bic.w	r2, r2, #4
 80057b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69d9      	ldr	r1, [r3, #28]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	61da      	str	r2, [r3, #28]
      break;
 80057cc:	e064      	b.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fba9 	bl	8005f2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69da      	ldr	r2, [r3, #28]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69da      	ldr	r2, [r3, #28]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69d9      	ldr	r1, [r3, #28]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	021a      	lsls	r2, r3, #8
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	61da      	str	r2, [r3, #28]
      break;
 800580e:	e043      	b.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68b9      	ldr	r1, [r7, #8]
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fbf2 	bl	8006000 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0208 	orr.w	r2, r2, #8
 800582a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0204 	bic.w	r2, r2, #4
 800583a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	691a      	ldr	r2, [r3, #16]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800584e:	e023      	b.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68b9      	ldr	r1, [r7, #8]
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fc36 	bl	80060c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800586a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800587a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	021a      	lsls	r2, r3, #8
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005890:	e002      	b.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	75fb      	strb	r3, [r7, #23]
      break;
 8005896:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop

080058ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_TIM_ConfigClockSource+0x1c>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e0dc      	b.n	8005a82 <HAL_TIM_ConfigClockSource+0x1d6>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	4b6a      	ldr	r3, [pc, #424]	@ (8005a8c <HAL_TIM_ConfigClockSource+0x1e0>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a64      	ldr	r2, [pc, #400]	@ (8005a90 <HAL_TIM_ConfigClockSource+0x1e4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	f000 80a9 	beq.w	8005a56 <HAL_TIM_ConfigClockSource+0x1aa>
 8005904:	4a62      	ldr	r2, [pc, #392]	@ (8005a90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	f200 80ae 	bhi.w	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 800590c:	4a61      	ldr	r2, [pc, #388]	@ (8005a94 <HAL_TIM_ConfigClockSource+0x1e8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	f000 80a1 	beq.w	8005a56 <HAL_TIM_ConfigClockSource+0x1aa>
 8005914:	4a5f      	ldr	r2, [pc, #380]	@ (8005a94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	f200 80a6 	bhi.w	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 800591c:	4a5e      	ldr	r2, [pc, #376]	@ (8005a98 <HAL_TIM_ConfigClockSource+0x1ec>)
 800591e:	4293      	cmp	r3, r2
 8005920:	f000 8099 	beq.w	8005a56 <HAL_TIM_ConfigClockSource+0x1aa>
 8005924:	4a5c      	ldr	r2, [pc, #368]	@ (8005a98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005926:	4293      	cmp	r3, r2
 8005928:	f200 809e 	bhi.w	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 800592c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005930:	f000 8091 	beq.w	8005a56 <HAL_TIM_ConfigClockSource+0x1aa>
 8005934:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005938:	f200 8096 	bhi.w	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 800593c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005940:	f000 8089 	beq.w	8005a56 <HAL_TIM_ConfigClockSource+0x1aa>
 8005944:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005948:	f200 808e 	bhi.w	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 800594c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005950:	d03e      	beq.n	80059d0 <HAL_TIM_ConfigClockSource+0x124>
 8005952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005956:	f200 8087 	bhi.w	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 800595a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800595e:	f000 8086 	beq.w	8005a6e <HAL_TIM_ConfigClockSource+0x1c2>
 8005962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005966:	d87f      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8005968:	2b70      	cmp	r3, #112	@ 0x70
 800596a:	d01a      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0xf6>
 800596c:	2b70      	cmp	r3, #112	@ 0x70
 800596e:	d87b      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8005970:	2b60      	cmp	r3, #96	@ 0x60
 8005972:	d050      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0x16a>
 8005974:	2b60      	cmp	r3, #96	@ 0x60
 8005976:	d877      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8005978:	2b50      	cmp	r3, #80	@ 0x50
 800597a:	d03c      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0x14a>
 800597c:	2b50      	cmp	r3, #80	@ 0x50
 800597e:	d873      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8005980:	2b40      	cmp	r3, #64	@ 0x40
 8005982:	d058      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0x18a>
 8005984:	2b40      	cmp	r3, #64	@ 0x40
 8005986:	d86f      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8005988:	2b30      	cmp	r3, #48	@ 0x30
 800598a:	d064      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x1aa>
 800598c:	2b30      	cmp	r3, #48	@ 0x30
 800598e:	d86b      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8005990:	2b20      	cmp	r3, #32
 8005992:	d060      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x1aa>
 8005994:	2b20      	cmp	r3, #32
 8005996:	d867      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8005998:	2b00      	cmp	r3, #0
 800599a:	d05c      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x1aa>
 800599c:	2b10      	cmp	r3, #16
 800599e:	d05a      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x1aa>
 80059a0:	e062      	b.n	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059b2:	f000 fc6d 	bl	8006290 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80059c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	609a      	str	r2, [r3, #8]
      break;
 80059ce:	e04f      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059e0:	f000 fc56 	bl	8006290 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059f2:	609a      	str	r2, [r3, #8]
      break;
 80059f4:	e03c      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a02:	461a      	mov	r2, r3
 8005a04:	f000 fbc6 	bl	8006194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2150      	movs	r1, #80	@ 0x50
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fc20 	bl	8006254 <TIM_ITRx_SetConfig>
      break;
 8005a14:	e02c      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a22:	461a      	mov	r2, r3
 8005a24:	f000 fbe5 	bl	80061f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2160      	movs	r1, #96	@ 0x60
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fc10 	bl	8006254 <TIM_ITRx_SetConfig>
      break;
 8005a34:	e01c      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a42:	461a      	mov	r2, r3
 8005a44:	f000 fba6 	bl	8006194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2140      	movs	r1, #64	@ 0x40
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fc00 	bl	8006254 <TIM_ITRx_SetConfig>
      break;
 8005a54:	e00c      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f000 fbf7 	bl	8006254 <TIM_ITRx_SetConfig>
      break;
 8005a66:	e003      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a6c:	e000      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	ffceff88 	.word	0xffceff88
 8005a90:	00100040 	.word	0x00100040
 8005a94:	00100030 	.word	0x00100030
 8005a98:	00100020 	.word	0x00100020

08005a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a46      	ldr	r2, [pc, #280]	@ (8005bc8 <TIM_Base_SetConfig+0x12c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d013      	beq.n	8005adc <TIM_Base_SetConfig+0x40>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aba:	d00f      	beq.n	8005adc <TIM_Base_SetConfig+0x40>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a43      	ldr	r2, [pc, #268]	@ (8005bcc <TIM_Base_SetConfig+0x130>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00b      	beq.n	8005adc <TIM_Base_SetConfig+0x40>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a42      	ldr	r2, [pc, #264]	@ (8005bd0 <TIM_Base_SetConfig+0x134>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d007      	beq.n	8005adc <TIM_Base_SetConfig+0x40>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a41      	ldr	r2, [pc, #260]	@ (8005bd4 <TIM_Base_SetConfig+0x138>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d003      	beq.n	8005adc <TIM_Base_SetConfig+0x40>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a40      	ldr	r2, [pc, #256]	@ (8005bd8 <TIM_Base_SetConfig+0x13c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d108      	bne.n	8005aee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a35      	ldr	r2, [pc, #212]	@ (8005bc8 <TIM_Base_SetConfig+0x12c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d01f      	beq.n	8005b36 <TIM_Base_SetConfig+0x9a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005afc:	d01b      	beq.n	8005b36 <TIM_Base_SetConfig+0x9a>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a32      	ldr	r2, [pc, #200]	@ (8005bcc <TIM_Base_SetConfig+0x130>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d017      	beq.n	8005b36 <TIM_Base_SetConfig+0x9a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a31      	ldr	r2, [pc, #196]	@ (8005bd0 <TIM_Base_SetConfig+0x134>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d013      	beq.n	8005b36 <TIM_Base_SetConfig+0x9a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a30      	ldr	r2, [pc, #192]	@ (8005bd4 <TIM_Base_SetConfig+0x138>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d00f      	beq.n	8005b36 <TIM_Base_SetConfig+0x9a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a2f      	ldr	r2, [pc, #188]	@ (8005bd8 <TIM_Base_SetConfig+0x13c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00b      	beq.n	8005b36 <TIM_Base_SetConfig+0x9a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a2e      	ldr	r2, [pc, #184]	@ (8005bdc <TIM_Base_SetConfig+0x140>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d007      	beq.n	8005b36 <TIM_Base_SetConfig+0x9a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a2d      	ldr	r2, [pc, #180]	@ (8005be0 <TIM_Base_SetConfig+0x144>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d003      	beq.n	8005b36 <TIM_Base_SetConfig+0x9a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a2c      	ldr	r2, [pc, #176]	@ (8005be4 <TIM_Base_SetConfig+0x148>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d108      	bne.n	8005b48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a16      	ldr	r2, [pc, #88]	@ (8005bc8 <TIM_Base_SetConfig+0x12c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00f      	beq.n	8005b94 <TIM_Base_SetConfig+0xf8>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a18      	ldr	r2, [pc, #96]	@ (8005bd8 <TIM_Base_SetConfig+0x13c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00b      	beq.n	8005b94 <TIM_Base_SetConfig+0xf8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a17      	ldr	r2, [pc, #92]	@ (8005bdc <TIM_Base_SetConfig+0x140>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d007      	beq.n	8005b94 <TIM_Base_SetConfig+0xf8>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a16      	ldr	r2, [pc, #88]	@ (8005be0 <TIM_Base_SetConfig+0x144>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d003      	beq.n	8005b94 <TIM_Base_SetConfig+0xf8>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a15      	ldr	r2, [pc, #84]	@ (8005be4 <TIM_Base_SetConfig+0x148>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d103      	bne.n	8005b9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d105      	bne.n	8005bba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f023 0201 	bic.w	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	611a      	str	r2, [r3, #16]
  }
}
 8005bba:	bf00      	nop
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40010000 	.word	0x40010000
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40000800 	.word	0x40000800
 8005bd4:	40000c00 	.word	0x40000c00
 8005bd8:	40010400 	.word	0x40010400
 8005bdc:	40014000 	.word	0x40014000
 8005be0:	40014400 	.word	0x40014400
 8005be4:	40014800 	.word	0x40014800

08005be8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	f023 0201 	bic.w	r2, r3, #1
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4b37      	ldr	r3, [pc, #220]	@ (8005cf0 <TIM_OC1_SetConfig+0x108>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0303 	bic.w	r3, r3, #3
 8005c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f023 0302 	bic.w	r3, r3, #2
 8005c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8005cf4 <TIM_OC1_SetConfig+0x10c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00f      	beq.n	8005c64 <TIM_OC1_SetConfig+0x7c>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a2c      	ldr	r2, [pc, #176]	@ (8005cf8 <TIM_OC1_SetConfig+0x110>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00b      	beq.n	8005c64 <TIM_OC1_SetConfig+0x7c>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a2b      	ldr	r2, [pc, #172]	@ (8005cfc <TIM_OC1_SetConfig+0x114>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d007      	beq.n	8005c64 <TIM_OC1_SetConfig+0x7c>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a2a      	ldr	r2, [pc, #168]	@ (8005d00 <TIM_OC1_SetConfig+0x118>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_OC1_SetConfig+0x7c>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a29      	ldr	r2, [pc, #164]	@ (8005d04 <TIM_OC1_SetConfig+0x11c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d10c      	bne.n	8005c7e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f023 0308 	bic.w	r3, r3, #8
 8005c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f023 0304 	bic.w	r3, r3, #4
 8005c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf4 <TIM_OC1_SetConfig+0x10c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00f      	beq.n	8005ca6 <TIM_OC1_SetConfig+0xbe>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a1b      	ldr	r2, [pc, #108]	@ (8005cf8 <TIM_OC1_SetConfig+0x110>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d00b      	beq.n	8005ca6 <TIM_OC1_SetConfig+0xbe>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a1a      	ldr	r2, [pc, #104]	@ (8005cfc <TIM_OC1_SetConfig+0x114>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d007      	beq.n	8005ca6 <TIM_OC1_SetConfig+0xbe>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a19      	ldr	r2, [pc, #100]	@ (8005d00 <TIM_OC1_SetConfig+0x118>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d003      	beq.n	8005ca6 <TIM_OC1_SetConfig+0xbe>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a18      	ldr	r2, [pc, #96]	@ (8005d04 <TIM_OC1_SetConfig+0x11c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d111      	bne.n	8005cca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	621a      	str	r2, [r3, #32]
}
 8005ce4:	bf00      	nop
 8005ce6:	371c      	adds	r7, #28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	fffeff8f 	.word	0xfffeff8f
 8005cf4:	40010000 	.word	0x40010000
 8005cf8:	40010400 	.word	0x40010400
 8005cfc:	40014000 	.word	0x40014000
 8005d00:	40014400 	.word	0x40014400
 8005d04:	40014800 	.word	0x40014800

08005d08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	f023 0210 	bic.w	r2, r3, #16
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4b34      	ldr	r3, [pc, #208]	@ (8005e04 <TIM_OC2_SetConfig+0xfc>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f023 0320 	bic.w	r3, r3, #32
 8005d52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a29      	ldr	r2, [pc, #164]	@ (8005e08 <TIM_OC2_SetConfig+0x100>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_OC2_SetConfig+0x68>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a28      	ldr	r2, [pc, #160]	@ (8005e0c <TIM_OC2_SetConfig+0x104>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d10d      	bne.n	8005d8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005e08 <TIM_OC2_SetConfig+0x100>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00f      	beq.n	8005db4 <TIM_OC2_SetConfig+0xac>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a1d      	ldr	r2, [pc, #116]	@ (8005e0c <TIM_OC2_SetConfig+0x104>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00b      	beq.n	8005db4 <TIM_OC2_SetConfig+0xac>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005e10 <TIM_OC2_SetConfig+0x108>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d007      	beq.n	8005db4 <TIM_OC2_SetConfig+0xac>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a1b      	ldr	r2, [pc, #108]	@ (8005e14 <TIM_OC2_SetConfig+0x10c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_OC2_SetConfig+0xac>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a1a      	ldr	r2, [pc, #104]	@ (8005e18 <TIM_OC2_SetConfig+0x110>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d113      	bne.n	8005ddc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005dba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	621a      	str	r2, [r3, #32]
}
 8005df6:	bf00      	nop
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	feff8fff 	.word	0xfeff8fff
 8005e08:	40010000 	.word	0x40010000
 8005e0c:	40010400 	.word	0x40010400
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40014400 	.word	0x40014400
 8005e18:	40014800 	.word	0x40014800

08005e1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4b33      	ldr	r3, [pc, #204]	@ (8005f14 <TIM_OC3_SetConfig+0xf8>)
 8005e48:	4013      	ands	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0303 	bic.w	r3, r3, #3
 8005e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a28      	ldr	r2, [pc, #160]	@ (8005f18 <TIM_OC3_SetConfig+0xfc>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d003      	beq.n	8005e82 <TIM_OC3_SetConfig+0x66>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a27      	ldr	r2, [pc, #156]	@ (8005f1c <TIM_OC3_SetConfig+0x100>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d10d      	bne.n	8005e9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f18 <TIM_OC3_SetConfig+0xfc>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00f      	beq.n	8005ec6 <TIM_OC3_SetConfig+0xaa>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8005f1c <TIM_OC3_SetConfig+0x100>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00b      	beq.n	8005ec6 <TIM_OC3_SetConfig+0xaa>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f20 <TIM_OC3_SetConfig+0x104>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d007      	beq.n	8005ec6 <TIM_OC3_SetConfig+0xaa>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8005f24 <TIM_OC3_SetConfig+0x108>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d003      	beq.n	8005ec6 <TIM_OC3_SetConfig+0xaa>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a19      	ldr	r2, [pc, #100]	@ (8005f28 <TIM_OC3_SetConfig+0x10c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d113      	bne.n	8005eee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	011b      	lsls	r3, r3, #4
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	621a      	str	r2, [r3, #32]
}
 8005f08:	bf00      	nop
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	fffeff8f 	.word	0xfffeff8f
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	40010400 	.word	0x40010400
 8005f20:	40014000 	.word	0x40014000
 8005f24:	40014400 	.word	0x40014400
 8005f28:	40014800 	.word	0x40014800

08005f2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4b24      	ldr	r3, [pc, #144]	@ (8005fe8 <TIM_OC4_SetConfig+0xbc>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	021b      	lsls	r3, r3, #8
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	031b      	lsls	r3, r3, #12
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a19      	ldr	r2, [pc, #100]	@ (8005fec <TIM_OC4_SetConfig+0xc0>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d00f      	beq.n	8005fac <TIM_OC4_SetConfig+0x80>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a18      	ldr	r2, [pc, #96]	@ (8005ff0 <TIM_OC4_SetConfig+0xc4>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00b      	beq.n	8005fac <TIM_OC4_SetConfig+0x80>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a17      	ldr	r2, [pc, #92]	@ (8005ff4 <TIM_OC4_SetConfig+0xc8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d007      	beq.n	8005fac <TIM_OC4_SetConfig+0x80>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a16      	ldr	r2, [pc, #88]	@ (8005ff8 <TIM_OC4_SetConfig+0xcc>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d003      	beq.n	8005fac <TIM_OC4_SetConfig+0x80>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a15      	ldr	r2, [pc, #84]	@ (8005ffc <TIM_OC4_SetConfig+0xd0>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d109      	bne.n	8005fc0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	019b      	lsls	r3, r3, #6
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	621a      	str	r2, [r3, #32]
}
 8005fda:	bf00      	nop
 8005fdc:	371c      	adds	r7, #28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	feff8fff 	.word	0xfeff8fff
 8005fec:	40010000 	.word	0x40010000
 8005ff0:	40010400 	.word	0x40010400
 8005ff4:	40014000 	.word	0x40014000
 8005ff8:	40014400 	.word	0x40014400
 8005ffc:	40014800 	.word	0x40014800

08006000 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4b21      	ldr	r3, [pc, #132]	@ (80060b0 <TIM_OC5_SetConfig+0xb0>)
 800602c:	4013      	ands	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006040:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	041b      	lsls	r3, r3, #16
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4313      	orrs	r3, r2
 800604c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a18      	ldr	r2, [pc, #96]	@ (80060b4 <TIM_OC5_SetConfig+0xb4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00f      	beq.n	8006076 <TIM_OC5_SetConfig+0x76>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a17      	ldr	r2, [pc, #92]	@ (80060b8 <TIM_OC5_SetConfig+0xb8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00b      	beq.n	8006076 <TIM_OC5_SetConfig+0x76>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a16      	ldr	r2, [pc, #88]	@ (80060bc <TIM_OC5_SetConfig+0xbc>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d007      	beq.n	8006076 <TIM_OC5_SetConfig+0x76>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a15      	ldr	r2, [pc, #84]	@ (80060c0 <TIM_OC5_SetConfig+0xc0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d003      	beq.n	8006076 <TIM_OC5_SetConfig+0x76>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a14      	ldr	r2, [pc, #80]	@ (80060c4 <TIM_OC5_SetConfig+0xc4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d109      	bne.n	800608a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800607c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	021b      	lsls	r3, r3, #8
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	621a      	str	r2, [r3, #32]
}
 80060a4:	bf00      	nop
 80060a6:	371c      	adds	r7, #28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	fffeff8f 	.word	0xfffeff8f
 80060b4:	40010000 	.word	0x40010000
 80060b8:	40010400 	.word	0x40010400
 80060bc:	40014000 	.word	0x40014000
 80060c0:	40014400 	.word	0x40014400
 80060c4:	40014800 	.word	0x40014800

080060c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	4b22      	ldr	r3, [pc, #136]	@ (800617c <TIM_OC6_SetConfig+0xb4>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	021b      	lsls	r3, r3, #8
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800610a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	051b      	lsls	r3, r3, #20
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a19      	ldr	r2, [pc, #100]	@ (8006180 <TIM_OC6_SetConfig+0xb8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00f      	beq.n	8006140 <TIM_OC6_SetConfig+0x78>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a18      	ldr	r2, [pc, #96]	@ (8006184 <TIM_OC6_SetConfig+0xbc>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d00b      	beq.n	8006140 <TIM_OC6_SetConfig+0x78>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a17      	ldr	r2, [pc, #92]	@ (8006188 <TIM_OC6_SetConfig+0xc0>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d007      	beq.n	8006140 <TIM_OC6_SetConfig+0x78>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a16      	ldr	r2, [pc, #88]	@ (800618c <TIM_OC6_SetConfig+0xc4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d003      	beq.n	8006140 <TIM_OC6_SetConfig+0x78>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a15      	ldr	r2, [pc, #84]	@ (8006190 <TIM_OC6_SetConfig+0xc8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d109      	bne.n	8006154 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006146:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	029b      	lsls	r3, r3, #10
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	621a      	str	r2, [r3, #32]
}
 800616e:	bf00      	nop
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	feff8fff 	.word	0xfeff8fff
 8006180:	40010000 	.word	0x40010000
 8006184:	40010400 	.word	0x40010400
 8006188:	40014000 	.word	0x40014000
 800618c:	40014400 	.word	0x40014400
 8006190:	40014800 	.word	0x40014800

08006194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f023 0201 	bic.w	r2, r3, #1
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f023 030a 	bic.w	r3, r3, #10
 80061d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	621a      	str	r2, [r3, #32]
}
 80061e6:	bf00      	nop
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b087      	sub	sp, #28
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	f023 0210 	bic.w	r2, r3, #16
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800621c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	031b      	lsls	r3, r3, #12
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800622e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	621a      	str	r2, [r3, #32]
}
 8006246:	bf00      	nop
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
	...

08006254 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4b09      	ldr	r3, [pc, #36]	@ (800628c <TIM_ITRx_SetConfig+0x38>)
 8006268:	4013      	ands	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	4313      	orrs	r3, r2
 8006272:	f043 0307 	orr.w	r3, r3, #7
 8006276:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	609a      	str	r2, [r3, #8]
}
 800627e:	bf00      	nop
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	ffcfff8f 	.word	0xffcfff8f

08006290 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	021a      	lsls	r2, r3, #8
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	609a      	str	r2, [r3, #8]
}
 80062c4:	bf00      	nop
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f003 031f 	and.w	r3, r3, #31
 80062e2:	2201      	movs	r2, #1
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a1a      	ldr	r2, [r3, #32]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	43db      	mvns	r3, r3
 80062f2:	401a      	ands	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a1a      	ldr	r2, [r3, #32]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	fa01 f303 	lsl.w	r3, r1, r3
 8006308:	431a      	orrs	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	621a      	str	r2, [r3, #32]
}
 800630e:	bf00      	nop
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
	...

0800631c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006330:	2302      	movs	r3, #2
 8006332:	e06d      	b.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a30      	ldr	r2, [pc, #192]	@ (800641c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d004      	beq.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a2f      	ldr	r2, [pc, #188]	@ (8006420 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d108      	bne.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800636e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006380:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	4313      	orrs	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a20      	ldr	r2, [pc, #128]	@ (800641c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d022      	beq.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a6:	d01d      	beq.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006424 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d018      	beq.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006428 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d013      	beq.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a1a      	ldr	r2, [pc, #104]	@ (800642c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d00e      	beq.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a15      	ldr	r2, [pc, #84]	@ (8006420 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d009      	beq.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a16      	ldr	r2, [pc, #88]	@ (8006430 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d004      	beq.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a15      	ldr	r2, [pc, #84]	@ (8006434 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d10c      	bne.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	40010000 	.word	0x40010000
 8006420:	40010400 	.word	0x40010400
 8006424:	40000400 	.word	0x40000400
 8006428:	40000800 	.word	0x40000800
 800642c:	40000c00 	.word	0x40000c00
 8006430:	40001800 	.word	0x40001800
 8006434:	40014000 	.word	0x40014000

08006438 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e042      	b.n	80064d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006450:	2b00      	cmp	r3, #0
 8006452:	d106      	bne.n	8006462 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7fa fda9 	bl	8000fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2224      	movs	r2, #36	@ 0x24
 8006466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0201 	bic.w	r2, r2, #1
 8006478:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fd90 	bl	8006fa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f825 	bl	80064d8 <UART_SetConfig>
 800648e:	4603      	mov	r3, r0
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e01b      	b.n	80064d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f042 0201 	orr.w	r2, r2, #1
 80064c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fe0f 	bl	80070ec <UART_CheckIdleState>
 80064ce:	4603      	mov	r3, r0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064dc:	b092      	sub	sp, #72	@ 0x48
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	431a      	orrs	r2, r3
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	431a      	orrs	r2, r3
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	69db      	ldr	r3, [r3, #28]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	4bbe      	ldr	r3, [pc, #760]	@ (8006800 <UART_SetConfig+0x328>)
 8006508:	4013      	ands	r3, r2
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	6812      	ldr	r2, [r2, #0]
 800650e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006510:	430b      	orrs	r3, r1
 8006512:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4ab3      	ldr	r2, [pc, #716]	@ (8006804 <UART_SetConfig+0x32c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d004      	beq.n	8006544 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006540:	4313      	orrs	r3, r2
 8006542:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	4baf      	ldr	r3, [pc, #700]	@ (8006808 <UART_SetConfig+0x330>)
 800654c:	4013      	ands	r3, r2
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	6812      	ldr	r2, [r2, #0]
 8006552:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006554:	430b      	orrs	r3, r1
 8006556:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655e:	f023 010f 	bic.w	r1, r3, #15
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4aa6      	ldr	r2, [pc, #664]	@ (800680c <UART_SetConfig+0x334>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d177      	bne.n	8006668 <UART_SetConfig+0x190>
 8006578:	4ba5      	ldr	r3, [pc, #660]	@ (8006810 <UART_SetConfig+0x338>)
 800657a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800657c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006580:	2b28      	cmp	r3, #40	@ 0x28
 8006582:	d86d      	bhi.n	8006660 <UART_SetConfig+0x188>
 8006584:	a201      	add	r2, pc, #4	@ (adr r2, 800658c <UART_SetConfig+0xb4>)
 8006586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658a:	bf00      	nop
 800658c:	08006631 	.word	0x08006631
 8006590:	08006661 	.word	0x08006661
 8006594:	08006661 	.word	0x08006661
 8006598:	08006661 	.word	0x08006661
 800659c:	08006661 	.word	0x08006661
 80065a0:	08006661 	.word	0x08006661
 80065a4:	08006661 	.word	0x08006661
 80065a8:	08006661 	.word	0x08006661
 80065ac:	08006639 	.word	0x08006639
 80065b0:	08006661 	.word	0x08006661
 80065b4:	08006661 	.word	0x08006661
 80065b8:	08006661 	.word	0x08006661
 80065bc:	08006661 	.word	0x08006661
 80065c0:	08006661 	.word	0x08006661
 80065c4:	08006661 	.word	0x08006661
 80065c8:	08006661 	.word	0x08006661
 80065cc:	08006641 	.word	0x08006641
 80065d0:	08006661 	.word	0x08006661
 80065d4:	08006661 	.word	0x08006661
 80065d8:	08006661 	.word	0x08006661
 80065dc:	08006661 	.word	0x08006661
 80065e0:	08006661 	.word	0x08006661
 80065e4:	08006661 	.word	0x08006661
 80065e8:	08006661 	.word	0x08006661
 80065ec:	08006649 	.word	0x08006649
 80065f0:	08006661 	.word	0x08006661
 80065f4:	08006661 	.word	0x08006661
 80065f8:	08006661 	.word	0x08006661
 80065fc:	08006661 	.word	0x08006661
 8006600:	08006661 	.word	0x08006661
 8006604:	08006661 	.word	0x08006661
 8006608:	08006661 	.word	0x08006661
 800660c:	08006651 	.word	0x08006651
 8006610:	08006661 	.word	0x08006661
 8006614:	08006661 	.word	0x08006661
 8006618:	08006661 	.word	0x08006661
 800661c:	08006661 	.word	0x08006661
 8006620:	08006661 	.word	0x08006661
 8006624:	08006661 	.word	0x08006661
 8006628:	08006661 	.word	0x08006661
 800662c:	08006659 	.word	0x08006659
 8006630:	2301      	movs	r3, #1
 8006632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006636:	e222      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006638:	2304      	movs	r3, #4
 800663a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800663e:	e21e      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006640:	2308      	movs	r3, #8
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006646:	e21a      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006648:	2310      	movs	r3, #16
 800664a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800664e:	e216      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006650:	2320      	movs	r3, #32
 8006652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006656:	e212      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006658:	2340      	movs	r3, #64	@ 0x40
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800665e:	e20e      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006660:	2380      	movs	r3, #128	@ 0x80
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006666:	e20a      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a69      	ldr	r2, [pc, #420]	@ (8006814 <UART_SetConfig+0x33c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d130      	bne.n	80066d4 <UART_SetConfig+0x1fc>
 8006672:	4b67      	ldr	r3, [pc, #412]	@ (8006810 <UART_SetConfig+0x338>)
 8006674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	2b05      	cmp	r3, #5
 800667c:	d826      	bhi.n	80066cc <UART_SetConfig+0x1f4>
 800667e:	a201      	add	r2, pc, #4	@ (adr r2, 8006684 <UART_SetConfig+0x1ac>)
 8006680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006684:	0800669d 	.word	0x0800669d
 8006688:	080066a5 	.word	0x080066a5
 800668c:	080066ad 	.word	0x080066ad
 8006690:	080066b5 	.word	0x080066b5
 8006694:	080066bd 	.word	0x080066bd
 8006698:	080066c5 	.word	0x080066c5
 800669c:	2300      	movs	r3, #0
 800669e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066a2:	e1ec      	b.n	8006a7e <UART_SetConfig+0x5a6>
 80066a4:	2304      	movs	r3, #4
 80066a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066aa:	e1e8      	b.n	8006a7e <UART_SetConfig+0x5a6>
 80066ac:	2308      	movs	r3, #8
 80066ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066b2:	e1e4      	b.n	8006a7e <UART_SetConfig+0x5a6>
 80066b4:	2310      	movs	r3, #16
 80066b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ba:	e1e0      	b.n	8006a7e <UART_SetConfig+0x5a6>
 80066bc:	2320      	movs	r3, #32
 80066be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c2:	e1dc      	b.n	8006a7e <UART_SetConfig+0x5a6>
 80066c4:	2340      	movs	r3, #64	@ 0x40
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ca:	e1d8      	b.n	8006a7e <UART_SetConfig+0x5a6>
 80066cc:	2380      	movs	r3, #128	@ 0x80
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d2:	e1d4      	b.n	8006a7e <UART_SetConfig+0x5a6>
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a4f      	ldr	r2, [pc, #316]	@ (8006818 <UART_SetConfig+0x340>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d130      	bne.n	8006740 <UART_SetConfig+0x268>
 80066de:	4b4c      	ldr	r3, [pc, #304]	@ (8006810 <UART_SetConfig+0x338>)
 80066e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	2b05      	cmp	r3, #5
 80066e8:	d826      	bhi.n	8006738 <UART_SetConfig+0x260>
 80066ea:	a201      	add	r2, pc, #4	@ (adr r2, 80066f0 <UART_SetConfig+0x218>)
 80066ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f0:	08006709 	.word	0x08006709
 80066f4:	08006711 	.word	0x08006711
 80066f8:	08006719 	.word	0x08006719
 80066fc:	08006721 	.word	0x08006721
 8006700:	08006729 	.word	0x08006729
 8006704:	08006731 	.word	0x08006731
 8006708:	2300      	movs	r3, #0
 800670a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800670e:	e1b6      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006710:	2304      	movs	r3, #4
 8006712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006716:	e1b2      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006718:	2308      	movs	r3, #8
 800671a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800671e:	e1ae      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006720:	2310      	movs	r3, #16
 8006722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006726:	e1aa      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006728:	2320      	movs	r3, #32
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800672e:	e1a6      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006730:	2340      	movs	r3, #64	@ 0x40
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006736:	e1a2      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006738:	2380      	movs	r3, #128	@ 0x80
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673e:	e19e      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a35      	ldr	r2, [pc, #212]	@ (800681c <UART_SetConfig+0x344>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d130      	bne.n	80067ac <UART_SetConfig+0x2d4>
 800674a:	4b31      	ldr	r3, [pc, #196]	@ (8006810 <UART_SetConfig+0x338>)
 800674c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	2b05      	cmp	r3, #5
 8006754:	d826      	bhi.n	80067a4 <UART_SetConfig+0x2cc>
 8006756:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <UART_SetConfig+0x284>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	08006775 	.word	0x08006775
 8006760:	0800677d 	.word	0x0800677d
 8006764:	08006785 	.word	0x08006785
 8006768:	0800678d 	.word	0x0800678d
 800676c:	08006795 	.word	0x08006795
 8006770:	0800679d 	.word	0x0800679d
 8006774:	2300      	movs	r3, #0
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677a:	e180      	b.n	8006a7e <UART_SetConfig+0x5a6>
 800677c:	2304      	movs	r3, #4
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006782:	e17c      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006784:	2308      	movs	r3, #8
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800678a:	e178      	b.n	8006a7e <UART_SetConfig+0x5a6>
 800678c:	2310      	movs	r3, #16
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006792:	e174      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006794:	2320      	movs	r3, #32
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679a:	e170      	b.n	8006a7e <UART_SetConfig+0x5a6>
 800679c:	2340      	movs	r3, #64	@ 0x40
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a2:	e16c      	b.n	8006a7e <UART_SetConfig+0x5a6>
 80067a4:	2380      	movs	r3, #128	@ 0x80
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067aa:	e168      	b.n	8006a7e <UART_SetConfig+0x5a6>
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006820 <UART_SetConfig+0x348>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d142      	bne.n	800683c <UART_SetConfig+0x364>
 80067b6:	4b16      	ldr	r3, [pc, #88]	@ (8006810 <UART_SetConfig+0x338>)
 80067b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	2b05      	cmp	r3, #5
 80067c0:	d838      	bhi.n	8006834 <UART_SetConfig+0x35c>
 80067c2:	a201      	add	r2, pc, #4	@ (adr r2, 80067c8 <UART_SetConfig+0x2f0>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067e1 	.word	0x080067e1
 80067cc:	080067e9 	.word	0x080067e9
 80067d0:	080067f1 	.word	0x080067f1
 80067d4:	080067f9 	.word	0x080067f9
 80067d8:	08006825 	.word	0x08006825
 80067dc:	0800682d 	.word	0x0800682d
 80067e0:	2300      	movs	r3, #0
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067e6:	e14a      	b.n	8006a7e <UART_SetConfig+0x5a6>
 80067e8:	2304      	movs	r3, #4
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ee:	e146      	b.n	8006a7e <UART_SetConfig+0x5a6>
 80067f0:	2308      	movs	r3, #8
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067f6:	e142      	b.n	8006a7e <UART_SetConfig+0x5a6>
 80067f8:	2310      	movs	r3, #16
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067fe:	e13e      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006800:	cfff69f3 	.word	0xcfff69f3
 8006804:	58000c00 	.word	0x58000c00
 8006808:	11fff4ff 	.word	0x11fff4ff
 800680c:	40011000 	.word	0x40011000
 8006810:	58024400 	.word	0x58024400
 8006814:	40004400 	.word	0x40004400
 8006818:	40004800 	.word	0x40004800
 800681c:	40004c00 	.word	0x40004c00
 8006820:	40005000 	.word	0x40005000
 8006824:	2320      	movs	r3, #32
 8006826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800682a:	e128      	b.n	8006a7e <UART_SetConfig+0x5a6>
 800682c:	2340      	movs	r3, #64	@ 0x40
 800682e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006832:	e124      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006834:	2380      	movs	r3, #128	@ 0x80
 8006836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800683a:	e120      	b.n	8006a7e <UART_SetConfig+0x5a6>
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4acb      	ldr	r2, [pc, #812]	@ (8006b70 <UART_SetConfig+0x698>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d176      	bne.n	8006934 <UART_SetConfig+0x45c>
 8006846:	4bcb      	ldr	r3, [pc, #812]	@ (8006b74 <UART_SetConfig+0x69c>)
 8006848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800684a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800684e:	2b28      	cmp	r3, #40	@ 0x28
 8006850:	d86c      	bhi.n	800692c <UART_SetConfig+0x454>
 8006852:	a201      	add	r2, pc, #4	@ (adr r2, 8006858 <UART_SetConfig+0x380>)
 8006854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006858:	080068fd 	.word	0x080068fd
 800685c:	0800692d 	.word	0x0800692d
 8006860:	0800692d 	.word	0x0800692d
 8006864:	0800692d 	.word	0x0800692d
 8006868:	0800692d 	.word	0x0800692d
 800686c:	0800692d 	.word	0x0800692d
 8006870:	0800692d 	.word	0x0800692d
 8006874:	0800692d 	.word	0x0800692d
 8006878:	08006905 	.word	0x08006905
 800687c:	0800692d 	.word	0x0800692d
 8006880:	0800692d 	.word	0x0800692d
 8006884:	0800692d 	.word	0x0800692d
 8006888:	0800692d 	.word	0x0800692d
 800688c:	0800692d 	.word	0x0800692d
 8006890:	0800692d 	.word	0x0800692d
 8006894:	0800692d 	.word	0x0800692d
 8006898:	0800690d 	.word	0x0800690d
 800689c:	0800692d 	.word	0x0800692d
 80068a0:	0800692d 	.word	0x0800692d
 80068a4:	0800692d 	.word	0x0800692d
 80068a8:	0800692d 	.word	0x0800692d
 80068ac:	0800692d 	.word	0x0800692d
 80068b0:	0800692d 	.word	0x0800692d
 80068b4:	0800692d 	.word	0x0800692d
 80068b8:	08006915 	.word	0x08006915
 80068bc:	0800692d 	.word	0x0800692d
 80068c0:	0800692d 	.word	0x0800692d
 80068c4:	0800692d 	.word	0x0800692d
 80068c8:	0800692d 	.word	0x0800692d
 80068cc:	0800692d 	.word	0x0800692d
 80068d0:	0800692d 	.word	0x0800692d
 80068d4:	0800692d 	.word	0x0800692d
 80068d8:	0800691d 	.word	0x0800691d
 80068dc:	0800692d 	.word	0x0800692d
 80068e0:	0800692d 	.word	0x0800692d
 80068e4:	0800692d 	.word	0x0800692d
 80068e8:	0800692d 	.word	0x0800692d
 80068ec:	0800692d 	.word	0x0800692d
 80068f0:	0800692d 	.word	0x0800692d
 80068f4:	0800692d 	.word	0x0800692d
 80068f8:	08006925 	.word	0x08006925
 80068fc:	2301      	movs	r3, #1
 80068fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006902:	e0bc      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006904:	2304      	movs	r3, #4
 8006906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800690a:	e0b8      	b.n	8006a7e <UART_SetConfig+0x5a6>
 800690c:	2308      	movs	r3, #8
 800690e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006912:	e0b4      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006914:	2310      	movs	r3, #16
 8006916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800691a:	e0b0      	b.n	8006a7e <UART_SetConfig+0x5a6>
 800691c:	2320      	movs	r3, #32
 800691e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006922:	e0ac      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006924:	2340      	movs	r3, #64	@ 0x40
 8006926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800692a:	e0a8      	b.n	8006a7e <UART_SetConfig+0x5a6>
 800692c:	2380      	movs	r3, #128	@ 0x80
 800692e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006932:	e0a4      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a8f      	ldr	r2, [pc, #572]	@ (8006b78 <UART_SetConfig+0x6a0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d130      	bne.n	80069a0 <UART_SetConfig+0x4c8>
 800693e:	4b8d      	ldr	r3, [pc, #564]	@ (8006b74 <UART_SetConfig+0x69c>)
 8006940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	2b05      	cmp	r3, #5
 8006948:	d826      	bhi.n	8006998 <UART_SetConfig+0x4c0>
 800694a:	a201      	add	r2, pc, #4	@ (adr r2, 8006950 <UART_SetConfig+0x478>)
 800694c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006950:	08006969 	.word	0x08006969
 8006954:	08006971 	.word	0x08006971
 8006958:	08006979 	.word	0x08006979
 800695c:	08006981 	.word	0x08006981
 8006960:	08006989 	.word	0x08006989
 8006964:	08006991 	.word	0x08006991
 8006968:	2300      	movs	r3, #0
 800696a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800696e:	e086      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006970:	2304      	movs	r3, #4
 8006972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006976:	e082      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006978:	2308      	movs	r3, #8
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800697e:	e07e      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006980:	2310      	movs	r3, #16
 8006982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006986:	e07a      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006988:	2320      	movs	r3, #32
 800698a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800698e:	e076      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006990:	2340      	movs	r3, #64	@ 0x40
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006996:	e072      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006998:	2380      	movs	r3, #128	@ 0x80
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699e:	e06e      	b.n	8006a7e <UART_SetConfig+0x5a6>
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a75      	ldr	r2, [pc, #468]	@ (8006b7c <UART_SetConfig+0x6a4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d130      	bne.n	8006a0c <UART_SetConfig+0x534>
 80069aa:	4b72      	ldr	r3, [pc, #456]	@ (8006b74 <UART_SetConfig+0x69c>)
 80069ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	2b05      	cmp	r3, #5
 80069b4:	d826      	bhi.n	8006a04 <UART_SetConfig+0x52c>
 80069b6:	a201      	add	r2, pc, #4	@ (adr r2, 80069bc <UART_SetConfig+0x4e4>)
 80069b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069bc:	080069d5 	.word	0x080069d5
 80069c0:	080069dd 	.word	0x080069dd
 80069c4:	080069e5 	.word	0x080069e5
 80069c8:	080069ed 	.word	0x080069ed
 80069cc:	080069f5 	.word	0x080069f5
 80069d0:	080069fd 	.word	0x080069fd
 80069d4:	2300      	movs	r3, #0
 80069d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069da:	e050      	b.n	8006a7e <UART_SetConfig+0x5a6>
 80069dc:	2304      	movs	r3, #4
 80069de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069e2:	e04c      	b.n	8006a7e <UART_SetConfig+0x5a6>
 80069e4:	2308      	movs	r3, #8
 80069e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ea:	e048      	b.n	8006a7e <UART_SetConfig+0x5a6>
 80069ec:	2310      	movs	r3, #16
 80069ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069f2:	e044      	b.n	8006a7e <UART_SetConfig+0x5a6>
 80069f4:	2320      	movs	r3, #32
 80069f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069fa:	e040      	b.n	8006a7e <UART_SetConfig+0x5a6>
 80069fc:	2340      	movs	r3, #64	@ 0x40
 80069fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a02:	e03c      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006a04:	2380      	movs	r3, #128	@ 0x80
 8006a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0a:	e038      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a5b      	ldr	r2, [pc, #364]	@ (8006b80 <UART_SetConfig+0x6a8>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d130      	bne.n	8006a78 <UART_SetConfig+0x5a0>
 8006a16:	4b57      	ldr	r3, [pc, #348]	@ (8006b74 <UART_SetConfig+0x69c>)
 8006a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	2b05      	cmp	r3, #5
 8006a20:	d826      	bhi.n	8006a70 <UART_SetConfig+0x598>
 8006a22:	a201      	add	r2, pc, #4	@ (adr r2, 8006a28 <UART_SetConfig+0x550>)
 8006a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a28:	08006a41 	.word	0x08006a41
 8006a2c:	08006a49 	.word	0x08006a49
 8006a30:	08006a51 	.word	0x08006a51
 8006a34:	08006a59 	.word	0x08006a59
 8006a38:	08006a61 	.word	0x08006a61
 8006a3c:	08006a69 	.word	0x08006a69
 8006a40:	2302      	movs	r3, #2
 8006a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a46:	e01a      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006a48:	2304      	movs	r3, #4
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a4e:	e016      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006a50:	2308      	movs	r3, #8
 8006a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a56:	e012      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006a58:	2310      	movs	r3, #16
 8006a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a5e:	e00e      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006a60:	2320      	movs	r3, #32
 8006a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a66:	e00a      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006a68:	2340      	movs	r3, #64	@ 0x40
 8006a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6e:	e006      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006a70:	2380      	movs	r3, #128	@ 0x80
 8006a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a76:	e002      	b.n	8006a7e <UART_SetConfig+0x5a6>
 8006a78:	2380      	movs	r3, #128	@ 0x80
 8006a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a3f      	ldr	r2, [pc, #252]	@ (8006b80 <UART_SetConfig+0x6a8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	f040 80f8 	bne.w	8006c7a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a8a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	dc46      	bgt.n	8006b20 <UART_SetConfig+0x648>
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	f2c0 8082 	blt.w	8006b9c <UART_SetConfig+0x6c4>
 8006a98:	3b02      	subs	r3, #2
 8006a9a:	2b1e      	cmp	r3, #30
 8006a9c:	d87e      	bhi.n	8006b9c <UART_SetConfig+0x6c4>
 8006a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa4 <UART_SetConfig+0x5cc>)
 8006aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa4:	08006b27 	.word	0x08006b27
 8006aa8:	08006b9d 	.word	0x08006b9d
 8006aac:	08006b2f 	.word	0x08006b2f
 8006ab0:	08006b9d 	.word	0x08006b9d
 8006ab4:	08006b9d 	.word	0x08006b9d
 8006ab8:	08006b9d 	.word	0x08006b9d
 8006abc:	08006b3f 	.word	0x08006b3f
 8006ac0:	08006b9d 	.word	0x08006b9d
 8006ac4:	08006b9d 	.word	0x08006b9d
 8006ac8:	08006b9d 	.word	0x08006b9d
 8006acc:	08006b9d 	.word	0x08006b9d
 8006ad0:	08006b9d 	.word	0x08006b9d
 8006ad4:	08006b9d 	.word	0x08006b9d
 8006ad8:	08006b9d 	.word	0x08006b9d
 8006adc:	08006b4f 	.word	0x08006b4f
 8006ae0:	08006b9d 	.word	0x08006b9d
 8006ae4:	08006b9d 	.word	0x08006b9d
 8006ae8:	08006b9d 	.word	0x08006b9d
 8006aec:	08006b9d 	.word	0x08006b9d
 8006af0:	08006b9d 	.word	0x08006b9d
 8006af4:	08006b9d 	.word	0x08006b9d
 8006af8:	08006b9d 	.word	0x08006b9d
 8006afc:	08006b9d 	.word	0x08006b9d
 8006b00:	08006b9d 	.word	0x08006b9d
 8006b04:	08006b9d 	.word	0x08006b9d
 8006b08:	08006b9d 	.word	0x08006b9d
 8006b0c:	08006b9d 	.word	0x08006b9d
 8006b10:	08006b9d 	.word	0x08006b9d
 8006b14:	08006b9d 	.word	0x08006b9d
 8006b18:	08006b9d 	.word	0x08006b9d
 8006b1c:	08006b8f 	.word	0x08006b8f
 8006b20:	2b40      	cmp	r3, #64	@ 0x40
 8006b22:	d037      	beq.n	8006b94 <UART_SetConfig+0x6bc>
 8006b24:	e03a      	b.n	8006b9c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006b26:	f7fd ff2f 	bl	8004988 <HAL_RCCEx_GetD3PCLK1Freq>
 8006b2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b2c:	e03c      	b.n	8006ba8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fd ff3e 	bl	80049b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b3c:	e034      	b.n	8006ba8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b3e:	f107 0318 	add.w	r3, r7, #24
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fe f88a 	bl	8004c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b4c:	e02c      	b.n	8006ba8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b4e:	4b09      	ldr	r3, [pc, #36]	@ (8006b74 <UART_SetConfig+0x69c>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0320 	and.w	r3, r3, #32
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d016      	beq.n	8006b88 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b5a:	4b06      	ldr	r3, [pc, #24]	@ (8006b74 <UART_SetConfig+0x69c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	08db      	lsrs	r3, r3, #3
 8006b60:	f003 0303 	and.w	r3, r3, #3
 8006b64:	4a07      	ldr	r2, [pc, #28]	@ (8006b84 <UART_SetConfig+0x6ac>)
 8006b66:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b6c:	e01c      	b.n	8006ba8 <UART_SetConfig+0x6d0>
 8006b6e:	bf00      	nop
 8006b70:	40011400 	.word	0x40011400
 8006b74:	58024400 	.word	0x58024400
 8006b78:	40007800 	.word	0x40007800
 8006b7c:	40007c00 	.word	0x40007c00
 8006b80:	58000c00 	.word	0x58000c00
 8006b84:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006b88:	4b9d      	ldr	r3, [pc, #628]	@ (8006e00 <UART_SetConfig+0x928>)
 8006b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b8c:	e00c      	b.n	8006ba8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b8e:	4b9d      	ldr	r3, [pc, #628]	@ (8006e04 <UART_SetConfig+0x92c>)
 8006b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b92:	e009      	b.n	8006ba8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b9a:	e005      	b.n	8006ba8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006ba6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 81de 	beq.w	8006f6c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb4:	4a94      	ldr	r2, [pc, #592]	@ (8006e08 <UART_SetConfig+0x930>)
 8006bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bc2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	4413      	add	r3, r2
 8006bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d305      	bcc.n	8006be0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d903      	bls.n	8006be8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006be6:	e1c1      	b.n	8006f6c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bea:	2200      	movs	r2, #0
 8006bec:	60bb      	str	r3, [r7, #8]
 8006bee:	60fa      	str	r2, [r7, #12]
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf4:	4a84      	ldr	r2, [pc, #528]	@ (8006e08 <UART_SetConfig+0x930>)
 8006bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	607a      	str	r2, [r7, #4]
 8006c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c0a:	f7f9 fb65 	bl	80002d8 <__aeabi_uldivmod>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	4610      	mov	r0, r2
 8006c14:	4619      	mov	r1, r3
 8006c16:	f04f 0200 	mov.w	r2, #0
 8006c1a:	f04f 0300 	mov.w	r3, #0
 8006c1e:	020b      	lsls	r3, r1, #8
 8006c20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c24:	0202      	lsls	r2, r0, #8
 8006c26:	6979      	ldr	r1, [r7, #20]
 8006c28:	6849      	ldr	r1, [r1, #4]
 8006c2a:	0849      	lsrs	r1, r1, #1
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	4605      	mov	r5, r0
 8006c32:	eb12 0804 	adds.w	r8, r2, r4
 8006c36:	eb43 0905 	adc.w	r9, r3, r5
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	469a      	mov	sl, r3
 8006c42:	4693      	mov	fp, r2
 8006c44:	4652      	mov	r2, sl
 8006c46:	465b      	mov	r3, fp
 8006c48:	4640      	mov	r0, r8
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	f7f9 fb44 	bl	80002d8 <__aeabi_uldivmod>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4613      	mov	r3, r2
 8006c56:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c5e:	d308      	bcc.n	8006c72 <UART_SetConfig+0x79a>
 8006c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c66:	d204      	bcs.n	8006c72 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c6e:	60da      	str	r2, [r3, #12]
 8006c70:	e17c      	b.n	8006f6c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006c78:	e178      	b.n	8006f6c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c82:	f040 80c5 	bne.w	8006e10 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006c86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	dc48      	bgt.n	8006d20 <UART_SetConfig+0x848>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	db7b      	blt.n	8006d8a <UART_SetConfig+0x8b2>
 8006c92:	2b20      	cmp	r3, #32
 8006c94:	d879      	bhi.n	8006d8a <UART_SetConfig+0x8b2>
 8006c96:	a201      	add	r2, pc, #4	@ (adr r2, 8006c9c <UART_SetConfig+0x7c4>)
 8006c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9c:	08006d27 	.word	0x08006d27
 8006ca0:	08006d2f 	.word	0x08006d2f
 8006ca4:	08006d8b 	.word	0x08006d8b
 8006ca8:	08006d8b 	.word	0x08006d8b
 8006cac:	08006d37 	.word	0x08006d37
 8006cb0:	08006d8b 	.word	0x08006d8b
 8006cb4:	08006d8b 	.word	0x08006d8b
 8006cb8:	08006d8b 	.word	0x08006d8b
 8006cbc:	08006d47 	.word	0x08006d47
 8006cc0:	08006d8b 	.word	0x08006d8b
 8006cc4:	08006d8b 	.word	0x08006d8b
 8006cc8:	08006d8b 	.word	0x08006d8b
 8006ccc:	08006d8b 	.word	0x08006d8b
 8006cd0:	08006d8b 	.word	0x08006d8b
 8006cd4:	08006d8b 	.word	0x08006d8b
 8006cd8:	08006d8b 	.word	0x08006d8b
 8006cdc:	08006d57 	.word	0x08006d57
 8006ce0:	08006d8b 	.word	0x08006d8b
 8006ce4:	08006d8b 	.word	0x08006d8b
 8006ce8:	08006d8b 	.word	0x08006d8b
 8006cec:	08006d8b 	.word	0x08006d8b
 8006cf0:	08006d8b 	.word	0x08006d8b
 8006cf4:	08006d8b 	.word	0x08006d8b
 8006cf8:	08006d8b 	.word	0x08006d8b
 8006cfc:	08006d8b 	.word	0x08006d8b
 8006d00:	08006d8b 	.word	0x08006d8b
 8006d04:	08006d8b 	.word	0x08006d8b
 8006d08:	08006d8b 	.word	0x08006d8b
 8006d0c:	08006d8b 	.word	0x08006d8b
 8006d10:	08006d8b 	.word	0x08006d8b
 8006d14:	08006d8b 	.word	0x08006d8b
 8006d18:	08006d8b 	.word	0x08006d8b
 8006d1c:	08006d7d 	.word	0x08006d7d
 8006d20:	2b40      	cmp	r3, #64	@ 0x40
 8006d22:	d02e      	beq.n	8006d82 <UART_SetConfig+0x8aa>
 8006d24:	e031      	b.n	8006d8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d26:	f7fc fbf9 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 8006d2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d2c:	e033      	b.n	8006d96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d2e:	f7fc fc0b 	bl	8003548 <HAL_RCC_GetPCLK2Freq>
 8006d32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d34:	e02f      	b.n	8006d96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7fd fe3a 	bl	80049b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d44:	e027      	b.n	8006d96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d46:	f107 0318 	add.w	r3, r7, #24
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fd ff86 	bl	8004c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d54:	e01f      	b.n	8006d96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d56:	4b2d      	ldr	r3, [pc, #180]	@ (8006e0c <UART_SetConfig+0x934>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d009      	beq.n	8006d76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d62:	4b2a      	ldr	r3, [pc, #168]	@ (8006e0c <UART_SetConfig+0x934>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	08db      	lsrs	r3, r3, #3
 8006d68:	f003 0303 	and.w	r3, r3, #3
 8006d6c:	4a24      	ldr	r2, [pc, #144]	@ (8006e00 <UART_SetConfig+0x928>)
 8006d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d74:	e00f      	b.n	8006d96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006d76:	4b22      	ldr	r3, [pc, #136]	@ (8006e00 <UART_SetConfig+0x928>)
 8006d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d7a:	e00c      	b.n	8006d96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d7c:	4b21      	ldr	r3, [pc, #132]	@ (8006e04 <UART_SetConfig+0x92c>)
 8006d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d80:	e009      	b.n	8006d96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d88:	e005      	b.n	8006d96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006d94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 80e7 	beq.w	8006f6c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da2:	4a19      	ldr	r2, [pc, #100]	@ (8006e08 <UART_SetConfig+0x930>)
 8006da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006da8:	461a      	mov	r2, r3
 8006daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8006db0:	005a      	lsls	r2, r3, #1
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	085b      	lsrs	r3, r3, #1
 8006db8:	441a      	add	r2, r3
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc6:	2b0f      	cmp	r3, #15
 8006dc8:	d916      	bls.n	8006df8 <UART_SetConfig+0x920>
 8006dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dd0:	d212      	bcs.n	8006df8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	f023 030f 	bic.w	r3, r3, #15
 8006dda:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dde:	085b      	lsrs	r3, r3, #1
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	f003 0307 	and.w	r3, r3, #7
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006dea:	4313      	orrs	r3, r2
 8006dec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006df4:	60da      	str	r2, [r3, #12]
 8006df6:	e0b9      	b.n	8006f6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006dfe:	e0b5      	b.n	8006f6c <UART_SetConfig+0xa94>
 8006e00:	03d09000 	.word	0x03d09000
 8006e04:	003d0900 	.word	0x003d0900
 8006e08:	08007c80 	.word	0x08007c80
 8006e0c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e10:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	dc49      	bgt.n	8006eac <UART_SetConfig+0x9d4>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	db7c      	blt.n	8006f16 <UART_SetConfig+0xa3e>
 8006e1c:	2b20      	cmp	r3, #32
 8006e1e:	d87a      	bhi.n	8006f16 <UART_SetConfig+0xa3e>
 8006e20:	a201      	add	r2, pc, #4	@ (adr r2, 8006e28 <UART_SetConfig+0x950>)
 8006e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e26:	bf00      	nop
 8006e28:	08006eb3 	.word	0x08006eb3
 8006e2c:	08006ebb 	.word	0x08006ebb
 8006e30:	08006f17 	.word	0x08006f17
 8006e34:	08006f17 	.word	0x08006f17
 8006e38:	08006ec3 	.word	0x08006ec3
 8006e3c:	08006f17 	.word	0x08006f17
 8006e40:	08006f17 	.word	0x08006f17
 8006e44:	08006f17 	.word	0x08006f17
 8006e48:	08006ed3 	.word	0x08006ed3
 8006e4c:	08006f17 	.word	0x08006f17
 8006e50:	08006f17 	.word	0x08006f17
 8006e54:	08006f17 	.word	0x08006f17
 8006e58:	08006f17 	.word	0x08006f17
 8006e5c:	08006f17 	.word	0x08006f17
 8006e60:	08006f17 	.word	0x08006f17
 8006e64:	08006f17 	.word	0x08006f17
 8006e68:	08006ee3 	.word	0x08006ee3
 8006e6c:	08006f17 	.word	0x08006f17
 8006e70:	08006f17 	.word	0x08006f17
 8006e74:	08006f17 	.word	0x08006f17
 8006e78:	08006f17 	.word	0x08006f17
 8006e7c:	08006f17 	.word	0x08006f17
 8006e80:	08006f17 	.word	0x08006f17
 8006e84:	08006f17 	.word	0x08006f17
 8006e88:	08006f17 	.word	0x08006f17
 8006e8c:	08006f17 	.word	0x08006f17
 8006e90:	08006f17 	.word	0x08006f17
 8006e94:	08006f17 	.word	0x08006f17
 8006e98:	08006f17 	.word	0x08006f17
 8006e9c:	08006f17 	.word	0x08006f17
 8006ea0:	08006f17 	.word	0x08006f17
 8006ea4:	08006f17 	.word	0x08006f17
 8006ea8:	08006f09 	.word	0x08006f09
 8006eac:	2b40      	cmp	r3, #64	@ 0x40
 8006eae:	d02e      	beq.n	8006f0e <UART_SetConfig+0xa36>
 8006eb0:	e031      	b.n	8006f16 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eb2:	f7fc fb33 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 8006eb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006eb8:	e033      	b.n	8006f22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006eba:	f7fc fb45 	bl	8003548 <HAL_RCC_GetPCLK2Freq>
 8006ebe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ec0:	e02f      	b.n	8006f22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fd fd74 	bl	80049b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ed0:	e027      	b.n	8006f22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ed2:	f107 0318 	add.w	r3, r7, #24
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fd fec0 	bl	8004c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee0:	e01f      	b.n	8006f22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8006f98 <UART_SetConfig+0xac0>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0320 	and.w	r3, r3, #32
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d009      	beq.n	8006f02 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006eee:	4b2a      	ldr	r3, [pc, #168]	@ (8006f98 <UART_SetConfig+0xac0>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	08db      	lsrs	r3, r3, #3
 8006ef4:	f003 0303 	and.w	r3, r3, #3
 8006ef8:	4a28      	ldr	r2, [pc, #160]	@ (8006f9c <UART_SetConfig+0xac4>)
 8006efa:	fa22 f303 	lsr.w	r3, r2, r3
 8006efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f00:	e00f      	b.n	8006f22 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006f02:	4b26      	ldr	r3, [pc, #152]	@ (8006f9c <UART_SetConfig+0xac4>)
 8006f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f06:	e00c      	b.n	8006f22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f08:	4b25      	ldr	r3, [pc, #148]	@ (8006fa0 <UART_SetConfig+0xac8>)
 8006f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f0c:	e009      	b.n	8006f22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f14:	e005      	b.n	8006f22 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006f20:	bf00      	nop
    }

    if (pclk != 0U)
 8006f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d021      	beq.n	8006f6c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8006fa4 <UART_SetConfig+0xacc>)
 8006f2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f32:	461a      	mov	r2, r3
 8006f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f36:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	085b      	lsrs	r3, r3, #1
 8006f40:	441a      	add	r2, r3
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4e:	2b0f      	cmp	r3, #15
 8006f50:	d909      	bls.n	8006f66 <UART_SetConfig+0xa8e>
 8006f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f58:	d205      	bcs.n	8006f66 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	60da      	str	r2, [r3, #12]
 8006f64:	e002      	b.n	8006f6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2200      	movs	r2, #0
 8006f86:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f88:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3748      	adds	r7, #72	@ 0x48
 8006f90:	46bd      	mov	sp, r7
 8006f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f96:	bf00      	nop
 8006f98:	58024400 	.word	0x58024400
 8006f9c:	03d09000 	.word	0x03d09000
 8006fa0:	003d0900 	.word	0x003d0900
 8006fa4:	08007c80 	.word	0x08007c80

08006fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00a      	beq.n	8006fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00a      	beq.n	8006ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701a:	f003 0304 	and.w	r3, r3, #4
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703c:	f003 0310 	and.w	r3, r3, #16
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00a      	beq.n	800705a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007084:	2b00      	cmp	r3, #0
 8007086:	d01a      	beq.n	80070be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070a6:	d10a      	bne.n	80070be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	605a      	str	r2, [r3, #4]
  }
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b098      	sub	sp, #96	@ 0x60
 80070f0:	af02      	add	r7, sp, #8
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070fc:	f7fa f9a8 	bl	8001450 <HAL_GetTick>
 8007100:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0308 	and.w	r3, r3, #8
 800710c:	2b08      	cmp	r3, #8
 800710e:	d12f      	bne.n	8007170 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007110:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007118:	2200      	movs	r2, #0
 800711a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f88e 	bl	8007240 <UART_WaitOnFlagUntilTimeout>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d022      	beq.n	8007170 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007132:	e853 3f00 	ldrex	r3, [r3]
 8007136:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800713a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800713e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	461a      	mov	r2, r3
 8007146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007148:	647b      	str	r3, [r7, #68]	@ 0x44
 800714a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800714e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007150:	e841 2300 	strex	r3, r2, [r1]
 8007154:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1e6      	bne.n	800712a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e063      	b.n	8007238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0304 	and.w	r3, r3, #4
 800717a:	2b04      	cmp	r3, #4
 800717c:	d149      	bne.n	8007212 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800717e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007186:	2200      	movs	r2, #0
 8007188:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f857 	bl	8007240 <UART_WaitOnFlagUntilTimeout>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d03c      	beq.n	8007212 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	623b      	str	r3, [r7, #32]
   return(result);
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80071b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071be:	e841 2300 	strex	r3, r2, [r1]
 80071c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e6      	bne.n	8007198 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3308      	adds	r3, #8
 80071d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f023 0301 	bic.w	r3, r3, #1
 80071e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071ea:	61fa      	str	r2, [r7, #28]
 80071ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	69b9      	ldr	r1, [r7, #24]
 80071f0:	69fa      	ldr	r2, [r7, #28]
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	617b      	str	r3, [r7, #20]
   return(result);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e5      	bne.n	80071ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2220      	movs	r2, #32
 8007202:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e012      	b.n	8007238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2220      	movs	r2, #32
 800721e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3758      	adds	r7, #88	@ 0x58
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	603b      	str	r3, [r7, #0]
 800724c:	4613      	mov	r3, r2
 800724e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007250:	e04f      	b.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007258:	d04b      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800725a:	f7fa f8f9 	bl	8001450 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	429a      	cmp	r2, r3
 8007268:	d302      	bcc.n	8007270 <UART_WaitOnFlagUntilTimeout+0x30>
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e04e      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0304 	and.w	r3, r3, #4
 800727e:	2b00      	cmp	r3, #0
 8007280:	d037      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2b80      	cmp	r3, #128	@ 0x80
 8007286:	d034      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2b40      	cmp	r3, #64	@ 0x40
 800728c:	d031      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	2b08      	cmp	r3, #8
 800729a:	d110      	bne.n	80072be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2208      	movs	r2, #8
 80072a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f839 	bl	800731c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2208      	movs	r2, #8
 80072ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e029      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072cc:	d111      	bne.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f81f 	bl	800731c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e00f      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69da      	ldr	r2, [r3, #28]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4013      	ands	r3, r2
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	429a      	cmp	r2, r3
 8007300:	bf0c      	ite	eq
 8007302:	2301      	moveq	r3, #1
 8007304:	2300      	movne	r3, #0
 8007306:	b2db      	uxtb	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	429a      	cmp	r2, r3
 800730e:	d0a0      	beq.n	8007252 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800731c:	b480      	push	{r7}
 800731e:	b095      	sub	sp, #84	@ 0x54
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007334:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007338:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	461a      	mov	r2, r3
 8007340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007342:	643b      	str	r3, [r7, #64]	@ 0x40
 8007344:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007346:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007348:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800734a:	e841 2300 	strex	r3, r2, [r1]
 800734e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1e6      	bne.n	8007324 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3308      	adds	r3, #8
 800735c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	e853 3f00 	ldrex	r3, [r3]
 8007364:	61fb      	str	r3, [r7, #28]
   return(result);
 8007366:	69fa      	ldr	r2, [r7, #28]
 8007368:	4b1e      	ldr	r3, [pc, #120]	@ (80073e4 <UART_EndRxTransfer+0xc8>)
 800736a:	4013      	ands	r3, r2
 800736c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3308      	adds	r3, #8
 8007374:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007376:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007378:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800737c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800737e:	e841 2300 	strex	r3, r2, [r1]
 8007382:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1e5      	bne.n	8007356 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800738e:	2b01      	cmp	r3, #1
 8007390:	d118      	bne.n	80073c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	e853 3f00 	ldrex	r3, [r3]
 800739e:	60bb      	str	r3, [r7, #8]
   return(result);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f023 0310 	bic.w	r3, r3, #16
 80073a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073b0:	61bb      	str	r3, [r7, #24]
 80073b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b4:	6979      	ldr	r1, [r7, #20]
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	e841 2300 	strex	r3, r2, [r1]
 80073bc:	613b      	str	r3, [r7, #16]
   return(result);
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e6      	bne.n	8007392 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2220      	movs	r2, #32
 80073c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073d8:	bf00      	nop
 80073da:	3754      	adds	r7, #84	@ 0x54
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	effffffe 	.word	0xeffffffe

080073e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d101      	bne.n	80073fe <HAL_UARTEx_DisableFifoMode+0x16>
 80073fa:	2302      	movs	r3, #2
 80073fc:	e027      	b.n	800744e <HAL_UARTEx_DisableFifoMode+0x66>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2224      	movs	r2, #36	@ 0x24
 800740a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0201 	bic.w	r2, r2, #1
 8007424:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800742c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2220      	movs	r2, #32
 8007440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800746a:	2b01      	cmp	r3, #1
 800746c:	d101      	bne.n	8007472 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800746e:	2302      	movs	r3, #2
 8007470:	e02d      	b.n	80074ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2224      	movs	r2, #36	@ 0x24
 800747e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0201 	bic.w	r2, r2, #1
 8007498:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f850 	bl	8007554 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2220      	movs	r2, #32
 80074c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d101      	bne.n	80074ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074ea:	2302      	movs	r3, #2
 80074ec:	e02d      	b.n	800754a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2224      	movs	r2, #36	@ 0x24
 80074fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0201 	bic.w	r2, r2, #1
 8007514:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f812 	bl	8007554 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007560:	2b00      	cmp	r3, #0
 8007562:	d108      	bne.n	8007576 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007574:	e031      	b.n	80075da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007576:	2310      	movs	r3, #16
 8007578:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800757a:	2310      	movs	r3, #16
 800757c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	0e5b      	lsrs	r3, r3, #25
 8007586:	b2db      	uxtb	r3, r3
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	0f5b      	lsrs	r3, r3, #29
 8007596:	b2db      	uxtb	r3, r3
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	7b3a      	ldrb	r2, [r7, #12]
 80075a2:	4911      	ldr	r1, [pc, #68]	@ (80075e8 <UARTEx_SetNbDataToProcess+0x94>)
 80075a4:	5c8a      	ldrb	r2, [r1, r2]
 80075a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075aa:	7b3a      	ldrb	r2, [r7, #12]
 80075ac:	490f      	ldr	r1, [pc, #60]	@ (80075ec <UARTEx_SetNbDataToProcess+0x98>)
 80075ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	7b7a      	ldrb	r2, [r7, #13]
 80075c0:	4909      	ldr	r1, [pc, #36]	@ (80075e8 <UARTEx_SetNbDataToProcess+0x94>)
 80075c2:	5c8a      	ldrb	r2, [r1, r2]
 80075c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075c8:	7b7a      	ldrb	r2, [r7, #13]
 80075ca:	4908      	ldr	r1, [pc, #32]	@ (80075ec <UARTEx_SetNbDataToProcess+0x98>)
 80075cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80075da:	bf00      	nop
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	08007c98 	.word	0x08007c98
 80075ec:	08007ca0 	.word	0x08007ca0

080075f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075f0:	b084      	sub	sp, #16
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	f107 001c 	add.w	r0, r7, #28
 80075fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007602:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007606:	2b01      	cmp	r3, #1
 8007608:	d121      	bne.n	800764e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	4b2c      	ldr	r3, [pc, #176]	@ (80076cc <USB_CoreInit+0xdc>)
 800761c:	4013      	ands	r3, r2
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800762e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007632:	2b01      	cmp	r3, #1
 8007634:	d105      	bne.n	8007642 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 faaa 	bl	8007b9c <USB_CoreReset>
 8007648:	4603      	mov	r3, r0
 800764a:	73fb      	strb	r3, [r7, #15]
 800764c:	e01b      	b.n	8007686 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fa9e 	bl	8007b9c <USB_CoreReset>
 8007660:	4603      	mov	r3, r0
 8007662:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007664:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007668:	2b00      	cmp	r3, #0
 800766a:	d106      	bne.n	800767a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007670:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	639a      	str	r2, [r3, #56]	@ 0x38
 8007678:	e005      	b.n	8007686 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007686:	7fbb      	ldrb	r3, [r7, #30]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d116      	bne.n	80076ba <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007690:	b29a      	uxth	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800769a:	4b0d      	ldr	r3, [pc, #52]	@ (80076d0 <USB_CoreInit+0xe0>)
 800769c:	4313      	orrs	r3, r2
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f043 0206 	orr.w	r2, r3, #6
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f043 0220 	orr.w	r2, r3, #32
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076c6:	b004      	add	sp, #16
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	ffbdffbf 	.word	0xffbdffbf
 80076d0:	03ee0000 	.word	0x03ee0000

080076d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f023 0201 	bic.w	r2, r3, #1
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	460b      	mov	r3, r1
 8007700:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007712:	78fb      	ldrb	r3, [r7, #3]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d115      	bne.n	8007744 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007724:	200a      	movs	r0, #10
 8007726:	f7f9 fe9f 	bl	8001468 <HAL_Delay>
      ms += 10U;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	330a      	adds	r3, #10
 800772e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fa25 	bl	8007b80 <USB_GetMode>
 8007736:	4603      	mov	r3, r0
 8007738:	2b01      	cmp	r3, #1
 800773a:	d01e      	beq.n	800777a <USB_SetCurrentMode+0x84>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007740:	d9f0      	bls.n	8007724 <USB_SetCurrentMode+0x2e>
 8007742:	e01a      	b.n	800777a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d115      	bne.n	8007776 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007756:	200a      	movs	r0, #10
 8007758:	f7f9 fe86 	bl	8001468 <HAL_Delay>
      ms += 10U;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	330a      	adds	r3, #10
 8007760:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fa0c 	bl	8007b80 <USB_GetMode>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d005      	beq.n	800777a <USB_SetCurrentMode+0x84>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2bc7      	cmp	r3, #199	@ 0xc7
 8007772:	d9f0      	bls.n	8007756 <USB_SetCurrentMode+0x60>
 8007774:	e001      	b.n	800777a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e005      	b.n	8007786 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2bc8      	cmp	r3, #200	@ 0xc8
 800777e:	d101      	bne.n	8007784 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e000      	b.n	8007786 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
	...

08007790 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007790:	b084      	sub	sp, #16
 8007792:	b580      	push	{r7, lr}
 8007794:	b086      	sub	sp, #24
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800779e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077aa:	2300      	movs	r3, #0
 80077ac:	613b      	str	r3, [r7, #16]
 80077ae:	e009      	b.n	80077c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	3340      	adds	r3, #64	@ 0x40
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	2200      	movs	r2, #0
 80077bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	3301      	adds	r3, #1
 80077c2:	613b      	str	r3, [r7, #16]
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	2b0e      	cmp	r3, #14
 80077c8:	d9f2      	bls.n	80077b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80077ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d11c      	bne.n	800780c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077e0:	f043 0302 	orr.w	r3, r3, #2
 80077e4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ea:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	e005      	b.n	8007818 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007810:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800781e:	461a      	mov	r2, r3
 8007820:	2300      	movs	r3, #0
 8007822:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007824:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007828:	2b01      	cmp	r3, #1
 800782a:	d10d      	bne.n	8007848 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800782c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007830:	2b00      	cmp	r3, #0
 8007832:	d104      	bne.n	800783e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007834:	2100      	movs	r1, #0
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f968 	bl	8007b0c <USB_SetDevSpeed>
 800783c:	e008      	b.n	8007850 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800783e:	2101      	movs	r1, #1
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f963 	bl	8007b0c <USB_SetDevSpeed>
 8007846:	e003      	b.n	8007850 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007848:	2103      	movs	r1, #3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f95e 	bl	8007b0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007850:	2110      	movs	r1, #16
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f8fa 	bl	8007a4c <USB_FlushTxFifo>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f924 	bl	8007ab0 <USB_FlushRxFifo>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d001      	beq.n	8007872 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007878:	461a      	mov	r2, r3
 800787a:	2300      	movs	r3, #0
 800787c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007884:	461a      	mov	r2, r3
 8007886:	2300      	movs	r3, #0
 8007888:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007890:	461a      	mov	r2, r3
 8007892:	2300      	movs	r3, #0
 8007894:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007896:	2300      	movs	r3, #0
 8007898:	613b      	str	r3, [r7, #16]
 800789a:	e043      	b.n	8007924 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	015a      	lsls	r2, r3, #5
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4413      	add	r3, r2
 80078a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078b2:	d118      	bne.n	80078e6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10a      	bne.n	80078d0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078c6:	461a      	mov	r2, r3
 80078c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	e013      	b.n	80078f8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078dc:	461a      	mov	r2, r3
 80078de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	e008      	b.n	80078f8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078f2:	461a      	mov	r2, r3
 80078f4:	2300      	movs	r3, #0
 80078f6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007904:	461a      	mov	r2, r3
 8007906:	2300      	movs	r3, #0
 8007908:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007916:	461a      	mov	r2, r3
 8007918:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800791c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	3301      	adds	r3, #1
 8007922:	613b      	str	r3, [r7, #16]
 8007924:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007928:	461a      	mov	r2, r3
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	4293      	cmp	r3, r2
 800792e:	d3b5      	bcc.n	800789c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007930:	2300      	movs	r3, #0
 8007932:	613b      	str	r3, [r7, #16]
 8007934:	e043      	b.n	80079be <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007948:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800794c:	d118      	bne.n	8007980 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10a      	bne.n	800796a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007960:	461a      	mov	r2, r3
 8007962:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	e013      	b.n	8007992 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4413      	add	r3, r2
 8007972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007976:	461a      	mov	r2, r3
 8007978:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	e008      	b.n	8007992 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800798c:	461a      	mov	r2, r3
 800798e:	2300      	movs	r3, #0
 8007990:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	4413      	add	r3, r2
 800799a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800799e:	461a      	mov	r2, r3
 80079a0:	2300      	movs	r3, #0
 80079a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	015a      	lsls	r2, r3, #5
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	4413      	add	r3, r2
 80079ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079b0:	461a      	mov	r2, r3
 80079b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80079b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	3301      	adds	r3, #1
 80079bc:	613b      	str	r3, [r7, #16]
 80079be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80079c2:	461a      	mov	r2, r3
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d3b5      	bcc.n	8007936 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079dc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80079ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80079ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d105      	bne.n	8007a00 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	f043 0210 	orr.w	r2, r3, #16
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	699a      	ldr	r2, [r3, #24]
 8007a04:	4b0f      	ldr	r3, [pc, #60]	@ (8007a44 <USB_DevInit+0x2b4>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a0c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d005      	beq.n	8007a20 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	f043 0208 	orr.w	r2, r3, #8
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d105      	bne.n	8007a34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	699a      	ldr	r2, [r3, #24]
 8007a2c:	4b06      	ldr	r3, [pc, #24]	@ (8007a48 <USB_DevInit+0x2b8>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a40:	b004      	add	sp, #16
 8007a42:	4770      	bx	lr
 8007a44:	803c3800 	.word	0x803c3800
 8007a48:	40000004 	.word	0x40000004

08007a4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a66:	d901      	bls.n	8007a6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e01b      	b.n	8007aa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	daf2      	bge.n	8007a5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a74:	2300      	movs	r3, #0
 8007a76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	019b      	lsls	r3, r3, #6
 8007a7c:	f043 0220 	orr.w	r2, r3, #32
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	3301      	adds	r3, #1
 8007a88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a90:	d901      	bls.n	8007a96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e006      	b.n	8007aa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	f003 0320 	and.w	r3, r3, #32
 8007a9e:	2b20      	cmp	r3, #32
 8007aa0:	d0f0      	beq.n	8007a84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ac8:	d901      	bls.n	8007ace <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e018      	b.n	8007b00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	daf2      	bge.n	8007abc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2210      	movs	r2, #16
 8007ade:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007aec:	d901      	bls.n	8007af2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e006      	b.n	8007b00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	f003 0310 	and.w	r3, r3, #16
 8007afa:	2b10      	cmp	r3, #16
 8007afc:	d0f0      	beq.n	8007ae0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	68f9      	ldr	r1, [r7, #12]
 8007b28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b085      	sub	sp, #20
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007b58:	f023 0303 	bic.w	r3, r3, #3
 8007b5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b6c:	f043 0302 	orr.w	r3, r3, #2
 8007b70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	695b      	ldr	r3, [r3, #20]
 8007b8c:	f003 0301 	and.w	r3, r3, #1
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	3301      	adds	r3, #1
 8007bac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bb4:	d901      	bls.n	8007bba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e01b      	b.n	8007bf2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	daf2      	bge.n	8007ba8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	f043 0201 	orr.w	r2, r3, #1
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bde:	d901      	bls.n	8007be4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e006      	b.n	8007bf2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d0f0      	beq.n	8007bd2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <memset>:
 8007bfe:	4402      	add	r2, r0
 8007c00:	4603      	mov	r3, r0
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d100      	bne.n	8007c08 <memset+0xa>
 8007c06:	4770      	bx	lr
 8007c08:	f803 1b01 	strb.w	r1, [r3], #1
 8007c0c:	e7f9      	b.n	8007c02 <memset+0x4>
	...

08007c10 <__libc_init_array>:
 8007c10:	b570      	push	{r4, r5, r6, lr}
 8007c12:	4d0d      	ldr	r5, [pc, #52]	@ (8007c48 <__libc_init_array+0x38>)
 8007c14:	4c0d      	ldr	r4, [pc, #52]	@ (8007c4c <__libc_init_array+0x3c>)
 8007c16:	1b64      	subs	r4, r4, r5
 8007c18:	10a4      	asrs	r4, r4, #2
 8007c1a:	2600      	movs	r6, #0
 8007c1c:	42a6      	cmp	r6, r4
 8007c1e:	d109      	bne.n	8007c34 <__libc_init_array+0x24>
 8007c20:	4d0b      	ldr	r5, [pc, #44]	@ (8007c50 <__libc_init_array+0x40>)
 8007c22:	4c0c      	ldr	r4, [pc, #48]	@ (8007c54 <__libc_init_array+0x44>)
 8007c24:	f000 f818 	bl	8007c58 <_init>
 8007c28:	1b64      	subs	r4, r4, r5
 8007c2a:	10a4      	asrs	r4, r4, #2
 8007c2c:	2600      	movs	r6, #0
 8007c2e:	42a6      	cmp	r6, r4
 8007c30:	d105      	bne.n	8007c3e <__libc_init_array+0x2e>
 8007c32:	bd70      	pop	{r4, r5, r6, pc}
 8007c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c38:	4798      	blx	r3
 8007c3a:	3601      	adds	r6, #1
 8007c3c:	e7ee      	b.n	8007c1c <__libc_init_array+0xc>
 8007c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c42:	4798      	blx	r3
 8007c44:	3601      	adds	r6, #1
 8007c46:	e7f2      	b.n	8007c2e <__libc_init_array+0x1e>
 8007c48:	08007cb0 	.word	0x08007cb0
 8007c4c:	08007cb0 	.word	0x08007cb0
 8007c50:	08007cb0 	.word	0x08007cb0
 8007c54:	08007cb4 	.word	0x08007cb4

08007c58 <_init>:
 8007c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5a:	bf00      	nop
 8007c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c5e:	bc08      	pop	{r3}
 8007c60:	469e      	mov	lr, r3
 8007c62:	4770      	bx	lr

08007c64 <_fini>:
 8007c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c66:	bf00      	nop
 8007c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c6a:	bc08      	pop	{r3}
 8007c6c:	469e      	mov	lr, r3
 8007c6e:	4770      	bx	lr
