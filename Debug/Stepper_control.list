
Stepper_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a78  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08007d10  08007d10  00008d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007e6c  08007e6c  00008e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007e74  08007e74  00008e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007e78  08007e78  00008e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08007e7c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08007e8c  00009010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08007eec  00009070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  240000d0  08007f4c  000090d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240007a4  08007f4c  000097a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000090d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d35d  00000000  00000000  000090fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f4b  00000000  00000000  0002645b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  000293a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001079  00000000  00000000  0002a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003910d  00000000  00000000  0002b929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3af  00000000  00000000  00064a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016c816  00000000  00000000  00080de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ed5fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b50  00000000  00000000  001ed640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001f3190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007cf8 	.word	0x08007cf8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08007cf8 	.word	0x08007cf8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fef0 	bl	80013b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f83a 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f9fa 	bl	80009cc <MX_GPIO_Init>
  MX_ETH_Init();
 80005d8:	f000 f8b6 	bl	8000748 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005dc:	f000 f978 	bl	80008d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e0:	f000 f9c2 	bl	8000968 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80005e4:	f000 f8fc 	bl	80007e0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005e8:	2100      	movs	r1, #0
 80005ea:	4814      	ldr	r0, [pc, #80]	@ (800063c <main+0x74>)
 80005ec:	f004 fedc 	bl	80053a8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		set_direction("left");
 80005f0:	4813      	ldr	r0, [pc, #76]	@ (8000640 <main+0x78>)
 80005f2:	f000 fba9 	bl	8000d48 <set_direction>
		accelerate_RPM(430);
 80005f6:	f44f 70d7 	mov.w	r0, #430	@ 0x1ae
 80005fa:	f000 fadd 	bl	8000bb8 <accelerate_RPM>
		HAL_Delay(3000);
 80005fe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000602:	f000 ff67 	bl	80014d4 <HAL_Delay>

		decelerate_to_RPM(0);
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fb3a 	bl	8000c80 <decelerate_to_RPM>
		HAL_Delay(3000);
 800060c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000610:	f000 ff60 	bl	80014d4 <HAL_Delay>

		set_direction("right");
 8000614:	480b      	ldr	r0, [pc, #44]	@ (8000644 <main+0x7c>)
 8000616:	f000 fb97 	bl	8000d48 <set_direction>
		accelerate_RPM(330);
 800061a:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 800061e:	f000 facb 	bl	8000bb8 <accelerate_RPM>
		HAL_Delay(3000);
 8000622:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000626:	f000 ff55 	bl	80014d4 <HAL_Delay>

		decelerate_to_RPM(0);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 fb28 	bl	8000c80 <decelerate_to_RPM>
		HAL_Delay(3000);
 8000630:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000634:	f000 ff4e 	bl	80014d4 <HAL_Delay>
		set_direction("left");
 8000638:	bf00      	nop
 800063a:	e7d9      	b.n	80005f0 <main+0x28>
 800063c:	240001d4 	.word	0x240001d4
 8000640:	08007d10 	.word	0x08007d10
 8000644:	08007d18 	.word	0x08007d18

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b09c      	sub	sp, #112	@ 0x70
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000652:	224c      	movs	r2, #76	@ 0x4c
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f007 fb07 	bl	8007c6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2220      	movs	r2, #32
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f007 fb01 	bl	8007c6a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000668:	2002      	movs	r0, #2
 800066a:	f001 ff89 	bl	8002580 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	4b33      	ldr	r3, [pc, #204]	@ (8000740 <SystemClock_Config+0xf8>)
 8000674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000676:	4a32      	ldr	r2, [pc, #200]	@ (8000740 <SystemClock_Config+0xf8>)
 8000678:	f023 0301 	bic.w	r3, r3, #1
 800067c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800067e:	4b30      	ldr	r3, [pc, #192]	@ (8000740 <SystemClock_Config+0xf8>)
 8000680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b2e      	ldr	r3, [pc, #184]	@ (8000744 <SystemClock_Config+0xfc>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000690:	4a2c      	ldr	r2, [pc, #176]	@ (8000744 <SystemClock_Config+0xfc>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b2a      	ldr	r3, [pc, #168]	@ (8000744 <SystemClock_Config+0xfc>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a4:	bf00      	nop
 80006a6:	4b27      	ldr	r3, [pc, #156]	@ (8000744 <SystemClock_Config+0xfc>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006b2:	d1f8      	bne.n	80006a6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006b4:	2303      	movs	r3, #3
 80006b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006be:	2301      	movs	r3, #1
 80006c0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c2:	2340      	movs	r3, #64	@ 0x40
 80006c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006d2:	2318      	movs	r3, #24
 80006d4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006da:	2304      	movs	r3, #4
 80006dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006e2:	230c      	movs	r3, #12
 80006e4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 ff8e 	bl	8002614 <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006fe:	f000 fa55 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	233f      	movs	r3, #63	@ 0x3f
 8000704:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000716:	2340      	movs	r3, #64	@ 0x40
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2101      	movs	r1, #1
 8000726:	4618      	mov	r0, r3
 8000728:	f002 fbce 	bl	8002ec8 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000732:	f000 fa3b 	bl	8000bac <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3770      	adds	r7, #112	@ 0x70
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	58000400 	.word	0x58000400
 8000744:	58024800 	.word	0x58024800

08000748 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800074c:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_ETH_Init+0x80>)
 800074e:	4a1f      	ldr	r2, [pc, #124]	@ (80007cc <MX_ETH_Init+0x84>)
 8000750:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000752:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <MX_ETH_Init+0x88>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000758:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <MX_ETH_Init+0x88>)
 800075a:	2280      	movs	r2, #128	@ 0x80
 800075c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800075e:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <MX_ETH_Init+0x88>)
 8000760:	22e1      	movs	r2, #225	@ 0xe1
 8000762:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000764:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <MX_ETH_Init+0x88>)
 8000766:	2200      	movs	r2, #0
 8000768:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800076a:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <MX_ETH_Init+0x88>)
 800076c:	2200      	movs	r2, #0
 800076e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000770:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <MX_ETH_Init+0x88>)
 8000772:	2200      	movs	r2, #0
 8000774:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_ETH_Init+0x80>)
 8000778:	4a15      	ldr	r2, [pc, #84]	@ (80007d0 <MX_ETH_Init+0x88>)
 800077a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800077c:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_ETH_Init+0x80>)
 800077e:	2201      	movs	r2, #1
 8000780:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_ETH_Init+0x80>)
 8000784:	4a13      	ldr	r2, [pc, #76]	@ (80007d4 <MX_ETH_Init+0x8c>)
 8000786:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000788:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <MX_ETH_Init+0x80>)
 800078a:	4a13      	ldr	r2, [pc, #76]	@ (80007d8 <MX_ETH_Init+0x90>)
 800078c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_ETH_Init+0x80>)
 8000790:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000794:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000796:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <MX_ETH_Init+0x80>)
 8000798:	f000 ffc4 	bl	8001724 <HAL_ETH_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80007a2:	f000 fa03 	bl	8000bac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007a6:	2238      	movs	r2, #56	@ 0x38
 80007a8:	2100      	movs	r1, #0
 80007aa:	480c      	ldr	r0, [pc, #48]	@ (80007dc <MX_ETH_Init+0x94>)
 80007ac:	f007 fa5d 	bl	8007c6a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <MX_ETH_Init+0x94>)
 80007b2:	2221      	movs	r2, #33	@ 0x21
 80007b4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_ETH_Init+0x94>)
 80007b8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007bc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007be:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <MX_ETH_Init+0x94>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	24000124 	.word	0x24000124
 80007cc:	40028000 	.word	0x40028000
 80007d0:	24000798 	.word	0x24000798
 80007d4:	24000070 	.word	0x24000070
 80007d8:	24000010 	.word	0x24000010
 80007dc:	240000ec 	.word	0x240000ec

080007e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08e      	sub	sp, #56	@ 0x38
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000800:	463b      	mov	r3, r7
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
 800080e:	615a      	str	r2, [r3, #20]
 8000810:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000812:	4b2d      	ldr	r3, [pc, #180]	@ (80008c8 <MX_TIM3_Init+0xe8>)
 8000814:	4a2d      	ldr	r2, [pc, #180]	@ (80008cc <MX_TIM3_Init+0xec>)
 8000816:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8000818:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <MX_TIM3_Init+0xe8>)
 800081a:	223f      	movs	r2, #63	@ 0x3f
 800081c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081e:	4b2a      	ldr	r3, [pc, #168]	@ (80008c8 <MX_TIM3_Init+0xe8>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 62500-1;
 8000824:	4b28      	ldr	r3, [pc, #160]	@ (80008c8 <MX_TIM3_Init+0xe8>)
 8000826:	f24f 4223 	movw	r2, #62499	@ 0xf423
 800082a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082c:	4b26      	ldr	r3, [pc, #152]	@ (80008c8 <MX_TIM3_Init+0xe8>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000832:	4b25      	ldr	r3, [pc, #148]	@ (80008c8 <MX_TIM3_Init+0xe8>)
 8000834:	2280      	movs	r2, #128	@ 0x80
 8000836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000838:	4823      	ldr	r0, [pc, #140]	@ (80008c8 <MX_TIM3_Init+0xe8>)
 800083a:	f004 fcfd 	bl	8005238 <HAL_TIM_Base_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000844:	f000 f9b2 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000848:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800084c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800084e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000852:	4619      	mov	r1, r3
 8000854:	481c      	ldr	r0, [pc, #112]	@ (80008c8 <MX_TIM3_Init+0xe8>)
 8000856:	f005 f85f 	bl	8005918 <HAL_TIM_ConfigClockSource>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000860:	f000 f9a4 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000864:	4818      	ldr	r0, [pc, #96]	@ (80008c8 <MX_TIM3_Init+0xe8>)
 8000866:	f004 fd3e 	bl	80052e6 <HAL_TIM_PWM_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000870:	f000 f99c 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4811      	ldr	r0, [pc, #68]	@ (80008c8 <MX_TIM3_Init+0xe8>)
 8000884:	f005 fd80 	bl	8006388 <HAL_TIMEx_MasterConfigSynchronization>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800088e:	f000 f98d 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000892:	2360      	movs	r3, #96	@ 0x60
 8000894:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 250;
 8000896:	23fa      	movs	r3, #250	@ 0xfa
 8000898:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	4619      	mov	r1, r3
 80008a8:	4807      	ldr	r0, [pc, #28]	@ (80008c8 <MX_TIM3_Init+0xe8>)
 80008aa:	f004 ff21 	bl	80056f0 <HAL_TIM_PWM_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80008b4:	f000 f97a 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008b8:	4803      	ldr	r0, [pc, #12]	@ (80008c8 <MX_TIM3_Init+0xe8>)
 80008ba:	f000 fb77 	bl	8000fac <HAL_TIM_MspPostInit>

}
 80008be:	bf00      	nop
 80008c0:	3738      	adds	r7, #56	@ 0x38
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	240001d4 	.word	0x240001d4
 80008cc:	40000400 	.word	0x40000400

080008d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d4:	4b22      	ldr	r3, [pc, #136]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008d6:	4a23      	ldr	r2, [pc, #140]	@ (8000964 <MX_USART3_UART_Init+0x94>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008da:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000918:	4811      	ldr	r0, [pc, #68]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800091a:	f005 fdc3 	bl	80064a4 <HAL_UART_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000924:	f000 f942 	bl	8000bac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	480d      	ldr	r0, [pc, #52]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800092c:	f006 fdcb 	bl	80074c6 <HAL_UARTEx_SetTxFifoThreshold>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000936:	f000 f939 	bl	8000bac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4808      	ldr	r0, [pc, #32]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800093e:	f006 fe00 	bl	8007542 <HAL_UARTEx_SetRxFifoThreshold>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000948:	f000 f930 	bl	8000bac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800094e:	f006 fd81 	bl	8007454 <HAL_UARTEx_DisableFifoMode>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000958:	f000 f928 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	24000220 	.word	0x24000220
 8000964:	40004800 	.word	0x40004800

08000968 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800096c:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800096e:	4a16      	ldr	r2, [pc, #88]	@ (80009c8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000970:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000972:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000974:	2209      	movs	r2, #9
 8000976:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800097a:	2202      	movs	r2, #2
 800097c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000980:	2200      	movs	r2, #0
 8000982:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000984:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000986:	2202      	movs	r2, #2
 8000988:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800098c:	2201      	movs	r2, #1
 800098e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000992:	2200      	movs	r2, #0
 8000994:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000998:	2200      	movs	r2, #0
 800099a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800099c:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800099e:	2201      	movs	r2, #1
 80009a0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009b0:	f001 fcb5 	bl	800231e <HAL_PCD_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80009ba:	f000 f8f7 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	240002b4 	.word	0x240002b4
 80009c8:	40080000 	.word	0x40080000

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08c      	sub	sp, #48	@ 0x30
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b6b      	ldr	r3, [pc, #428]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e8:	4a69      	ldr	r2, [pc, #420]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f2:	4b67      	ldr	r3, [pc, #412]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	61bb      	str	r3, [r7, #24]
 80009fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a00:	4b63      	ldr	r3, [pc, #396]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a06:	4a62      	ldr	r2, [pc, #392]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a10:	4b5f      	ldr	r3, [pc, #380]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b5c      	ldr	r3, [pc, #368]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a24:	4a5a      	ldr	r2, [pc, #360]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a2e:	4b58      	ldr	r3, [pc, #352]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3c:	4b54      	ldr	r3, [pc, #336]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a42:	4a53      	ldr	r2, [pc, #332]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4c:	4b50      	ldr	r3, [pc, #320]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5a:	4b4d      	ldr	r3, [pc, #308]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a60:	4a4b      	ldr	r2, [pc, #300]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000a62:	f043 0308 	orr.w	r3, r3, #8
 8000a66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a6a:	4b49      	ldr	r3, [pc, #292]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a78:	4b45      	ldr	r3, [pc, #276]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7e:	4a44      	ldr	r2, [pc, #272]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000a80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a88:	4b41      	ldr	r3, [pc, #260]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a96:	4b3e      	ldr	r3, [pc, #248]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9c:	4a3c      	ldr	r2, [pc, #240]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa6:	4b3a      	ldr	r3, [pc, #232]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aac:	f003 0310 	and.w	r3, r3, #16
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2120      	movs	r1, #32
 8000ab8:	4836      	ldr	r0, [pc, #216]	@ (8000b94 <MX_GPIO_Init+0x1c8>)
 8000aba:	f001 fc17 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ac4:	4834      	ldr	r0, [pc, #208]	@ (8000b98 <MX_GPIO_Init+0x1cc>)
 8000ac6:	f001 fc11 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ad0:	4832      	ldr	r0, [pc, #200]	@ (8000b9c <MX_GPIO_Init+0x1d0>)
 8000ad2:	f001 fc0b 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2102      	movs	r1, #2
 8000ada:	4831      	ldr	r0, [pc, #196]	@ (8000ba0 <MX_GPIO_Init+0x1d4>)
 8000adc:	f001 fc06 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	482b      	ldr	r0, [pc, #172]	@ (8000ba4 <MX_GPIO_Init+0x1d8>)
 8000af6:	f001 fa49 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000afa:	2320      	movs	r3, #32
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4820      	ldr	r0, [pc, #128]	@ (8000b94 <MX_GPIO_Init+0x1c8>)
 8000b12:	f001 fa3b 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b16:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	481a      	ldr	r0, [pc, #104]	@ (8000b98 <MX_GPIO_Init+0x1cc>)
 8000b30:	f001 fa2c 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4813      	ldr	r0, [pc, #76]	@ (8000b9c <MX_GPIO_Init+0x1d0>)
 8000b4e:	f001 fa1d 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b52:	2380      	movs	r3, #128	@ 0x80
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4810      	ldr	r0, [pc, #64]	@ (8000ba8 <MX_GPIO_Init+0x1dc>)
 8000b68:	f001 fa10 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	4807      	ldr	r0, [pc, #28]	@ (8000ba0 <MX_GPIO_Init+0x1d4>)
 8000b84:	f001 fa02 	bl	8001f8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b88:	bf00      	nop
 8000b8a:	3730      	adds	r7, #48	@ 0x30
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	58024400 	.word	0x58024400
 8000b94:	58020000 	.word	0x58020000
 8000b98:	58020400 	.word	0x58020400
 8000b9c:	58020c00 	.word	0x58020c00
 8000ba0:	58021000 	.word	0x58021000
 8000ba4:	58020800 	.word	0x58020800
 8000ba8:	58021800 	.word	0x58021800

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <Error_Handler+0x8>

08000bb8 <accelerate_RPM>:
#include "stm32h7xx_hal.h"
#include "string.h"

extern TIM_HandleTypeDef htim3;

void accelerate_RPM(int target_speed_RPM) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

	//Porneste generarea de semnal PWM
	int target_frequency = (target_speed_RPM / 60.0) * 200;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	ee07 3a90 	vmov	s15, r3
 8000bc6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bca:	ed9f 5b27 	vldr	d5, [pc, #156]	@ 8000c68 <accelerate_RPM+0xb0>
 8000bce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bd2:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 8000c70 <accelerate_RPM+0xb8>
 8000bd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bda:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000bde:	ee17 3a90 	vmov	r3, s15
 8000be2:	60fb      	str	r3, [r7, #12]
	int current_frequency  = 1000000 / (__HAL_TIM_GET_AUTORELOAD(&htim3)) +1;
 8000be4:	4b24      	ldr	r3, [pc, #144]	@ (8000c78 <accelerate_RPM+0xc0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bea:	4a24      	ldr	r2, [pc, #144]	@ (8000c7c <accelerate_RPM+0xc4>)
 8000bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]

	if(target_frequency > MAX_FREQUENCY){
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	dd03      	ble.n	8000c06 <accelerate_RPM+0x4e>
		target_frequency = MAX_FREQUENCY;
 8000bfe:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	e004      	b.n	8000c10 <accelerate_RPM+0x58>
	}
	else if(target_frequency < MIN_FREQUENCY){
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2b0f      	cmp	r3, #15
 8000c0a:	dc01      	bgt.n	8000c10 <accelerate_RPM+0x58>
		target_frequency = MIN_FREQUENCY;
 8000c0c:	2310      	movs	r3, #16
 8000c0e:	60fb      	str	r3, [r7, #12]
	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c10:	2100      	movs	r1, #0
 8000c12:	4819      	ldr	r0, [pc, #100]	@ (8000c78 <accelerate_RPM+0xc0>)
 8000c14:	f004 fbc8 	bl	80053a8 <HAL_TIM_PWM_Start>


	while (current_frequency < target_frequency) {
 8000c18:	e01b      	b.n	8000c52 <accelerate_RPM+0x9a>

		current_frequency += ACCELERATION_STEP;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	3305      	adds	r3, #5
 8000c1e:	60bb      	str	r3, [r7, #8]

		if (current_frequency > target_frequency) {
 8000c20:	68ba      	ldr	r2, [r7, #8]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dd01      	ble.n	8000c2c <accelerate_RPM+0x74>
			current_frequency = target_frequency;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	60bb      	str	r3, [r7, #8]
		}

		//Actualizeaza ARR cu noua valoare (1000000 este frecventa ceasului folosita pentru pwm -64mhz cu prescalar de 64)
		__HAL_TIM_SET_AUTORELOAD(&htim3, (1000000 / current_frequency) - 1);
 8000c2c:	4a13      	ldr	r2, [pc, #76]	@ (8000c7c <accelerate_RPM+0xc4>)
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c34:	1e5a      	subs	r2, r3, #1
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <accelerate_RPM+0xc0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000c7c <accelerate_RPM+0xc4>)
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c44:	3b01      	subs	r3, #1
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <accelerate_RPM+0xc0>)
 8000c4a:	60da      	str	r2, [r3, #12]
		HAL_Delay(10);
 8000c4c:	200a      	movs	r0, #10
 8000c4e:	f000 fc41 	bl	80014d4 <HAL_Delay>
	while (current_frequency < target_frequency) {
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	dbdf      	blt.n	8000c1a <accelerate_RPM+0x62>
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	f3af 8000 	nop.w
 8000c68:	00000000 	.word	0x00000000
 8000c6c:	404e0000 	.word	0x404e0000
 8000c70:	00000000 	.word	0x00000000
 8000c74:	40690000 	.word	0x40690000
 8000c78:	240001d4 	.word	0x240001d4
 8000c7c:	000f4240 	.word	0x000f4240

08000c80 <decelerate_to_RPM>:

void decelerate_to_RPM(int target_speed_RPM) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	int target_frequency = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
	int current_frequency  = 1000000 / (__HAL_TIM_GET_AUTORELOAD(&htim3)) +1;
 8000c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d40 <decelerate_to_RPM+0xc0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c92:	4a2c      	ldr	r2, [pc, #176]	@ (8000d44 <decelerate_to_RPM+0xc4>)
 8000c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c98:	3301      	adds	r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]

	if (target_speed_RPM == 0) {
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d102      	bne.n	8000ca8 <decelerate_to_RPM+0x28>
		target_frequency = MIN_FREQUENCY;
 8000ca2:	2310      	movs	r3, #16
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	e02e      	b.n	8000d06 <decelerate_to_RPM+0x86>
	} else {
		target_frequency = (target_speed_RPM / 60.0) * 200;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	ee07 3a90 	vmov	s15, r3
 8000cae:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000cb2:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 8000d30 <decelerate_to_RPM+0xb0>
 8000cb6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cba:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8000d38 <decelerate_to_RPM+0xb8>
 8000cbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cc2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cc6:	ee17 3a90 	vmov	r3, s15
 8000cca:	60fb      	str	r3, [r7, #12]
	}



	while (current_frequency > target_frequency) {
 8000ccc:	e01b      	b.n	8000d06 <decelerate_to_RPM+0x86>

		current_frequency -= DECELERATION_STEP;
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	3b05      	subs	r3, #5
 8000cd2:	60bb      	str	r3, [r7, #8]

		if (current_frequency < target_frequency) {
 8000cd4:	68ba      	ldr	r2, [r7, #8]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	da01      	bge.n	8000ce0 <decelerate_to_RPM+0x60>
			current_frequency = target_frequency;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	60bb      	str	r3, [r7, #8]
		}

		//Actualizeaza ARR cu noua valoare (1000000 este frecventa ceasului folosita pentru pwm -64mhz cu prescalar de 64)
		__HAL_TIM_SET_AUTORELOAD(&htim3, (1000000 / current_frequency) - 1);
 8000ce0:	4a18      	ldr	r2, [pc, #96]	@ (8000d44 <decelerate_to_RPM+0xc4>)
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ce8:	1e5a      	subs	r2, r3, #1
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <decelerate_to_RPM+0xc0>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cf0:	4a14      	ldr	r2, [pc, #80]	@ (8000d44 <decelerate_to_RPM+0xc4>)
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <decelerate_to_RPM+0xc0>)
 8000cfe:	60da      	str	r2, [r3, #12]
		HAL_Delay(10);
 8000d00:	200a      	movs	r0, #10
 8000d02:	f000 fbe7 	bl	80014d4 <HAL_Delay>
	while (current_frequency > target_frequency) {
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	dcdf      	bgt.n	8000cce <decelerate_to_RPM+0x4e>
	}
	if (target_speed_RPM == 0 && target_frequency == 16) {
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d106      	bne.n	8000d22 <decelerate_to_RPM+0xa2>
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b10      	cmp	r3, #16
 8000d18:	d103      	bne.n	8000d22 <decelerate_to_RPM+0xa2>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4808      	ldr	r0, [pc, #32]	@ (8000d40 <decelerate_to_RPM+0xc0>)
 8000d1e:	f004 fc51 	bl	80055c4 <HAL_TIM_PWM_Stop>
	}
}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	f3af 8000 	nop.w
 8000d30:	00000000 	.word	0x00000000
 8000d34:	404e0000 	.word	0x404e0000
 8000d38:	00000000 	.word	0x00000000
 8000d3c:	40690000 	.word	0x40690000
 8000d40:	240001d4 	.word	0x240001d4
 8000d44:	000f4240 	.word	0x000f4240

08000d48 <set_direction>:


void set_direction(const char* direction) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
    if (strcasecmp(direction, "LEFT") == 0) {
 8000d50:	490e      	ldr	r1, [pc, #56]	@ (8000d8c <set_direction+0x44>)
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f006 ff92 	bl	8007c7c <strcasecmp>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d105      	bne.n	8000d6a <set_direction+0x22>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2120      	movs	r1, #32
 8000d62:	480b      	ldr	r0, [pc, #44]	@ (8000d90 <set_direction+0x48>)
 8000d64:	f001 fac2 	bl	80022ec <HAL_GPIO_WritePin>
    } else if (strcasecmp(direction, "RIGHT") == 0) {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
    }
}
 8000d68:	e00b      	b.n	8000d82 <set_direction+0x3a>
    } else if (strcasecmp(direction, "RIGHT") == 0) {
 8000d6a:	490a      	ldr	r1, [pc, #40]	@ (8000d94 <set_direction+0x4c>)
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f006 ff85 	bl	8007c7c <strcasecmp>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d104      	bne.n	8000d82 <set_direction+0x3a>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	4804      	ldr	r0, [pc, #16]	@ (8000d90 <set_direction+0x48>)
 8000d7e:	f001 fab5 	bl	80022ec <HAL_GPIO_WritePin>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	08007d20 	.word	0x08007d20
 8000d90:	58020000 	.word	0x58020000
 8000d94:	08007d28 	.word	0x08007d28

08000d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <HAL_MspInit+0x30>)
 8000da0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000da4:	4a08      	ldr	r2, [pc, #32]	@ (8000dc8 <HAL_MspInit+0x30>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <HAL_MspInit+0x30>)
 8000db0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	58024400 	.word	0x58024400

08000dcc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	@ 0x38
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a59      	ldr	r2, [pc, #356]	@ (8000f50 <HAL_ETH_MspInit+0x184>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	f040 80ab 	bne.w	8000f46 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000df0:	4b58      	ldr	r3, [pc, #352]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000df2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000df6:	4a57      	ldr	r2, [pc, #348]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000df8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dfc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e00:	4b54      	ldr	r3, [pc, #336]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e0a:	623b      	str	r3, [r7, #32]
 8000e0c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e0e:	4b51      	ldr	r3, [pc, #324]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e14:	4a4f      	ldr	r2, [pc, #316]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e1a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e1e:	4b4d      	ldr	r3, [pc, #308]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e2c:	4b49      	ldr	r3, [pc, #292]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e32:	4a48      	ldr	r2, [pc, #288]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e38:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e3c:	4b45      	ldr	r3, [pc, #276]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	4b42      	ldr	r3, [pc, #264]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e50:	4a40      	ldr	r2, [pc, #256]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	4b3a      	ldr	r3, [pc, #232]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6e:	4a39      	ldr	r2, [pc, #228]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e78:	4b36      	ldr	r3, [pc, #216]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	4b33      	ldr	r3, [pc, #204]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8c:	4a31      	ldr	r2, [pc, #196]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e8e:	f043 0302 	orr.w	r3, r3, #2
 8000e92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e96:	4b2f      	ldr	r3, [pc, #188]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eaa:	4a2a      	ldr	r2, [pc, #168]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000eac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb4:	4b27      	ldr	r3, [pc, #156]	@ (8000f54 <HAL_ETH_MspInit+0x188>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ec2:	2332      	movs	r3, #50	@ 0x32
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed2:	230b      	movs	r3, #11
 8000ed4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	481e      	ldr	r0, [pc, #120]	@ (8000f58 <HAL_ETH_MspInit+0x18c>)
 8000ede:	f001 f855 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ee2:	2386      	movs	r3, #134	@ 0x86
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef2:	230b      	movs	r3, #11
 8000ef4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	4817      	ldr	r0, [pc, #92]	@ (8000f5c <HAL_ETH_MspInit+0x190>)
 8000efe:	f001 f845 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f14:	230b      	movs	r3, #11
 8000f16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4810      	ldr	r0, [pc, #64]	@ (8000f60 <HAL_ETH_MspInit+0x194>)
 8000f20:	f001 f834 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f24:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f36:	230b      	movs	r3, #11
 8000f38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4808      	ldr	r0, [pc, #32]	@ (8000f64 <HAL_ETH_MspInit+0x198>)
 8000f42:	f001 f823 	bl	8001f8c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000f46:	bf00      	nop
 8000f48:	3738      	adds	r7, #56	@ 0x38
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40028000 	.word	0x40028000
 8000f54:	58024400 	.word	0x58024400
 8000f58:	58020800 	.word	0x58020800
 8000f5c:	58020000 	.word	0x58020000
 8000f60:	58020400 	.word	0x58020400
 8000f64:	58021800 	.word	0x58021800

08000f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <HAL_TIM_Base_MspInit+0x3c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d10e      	bne.n	8000f98 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x40>)
 8000f7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f80:	4a09      	ldr	r2, [pc, #36]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x40>)
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x40>)
 8000f8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	40000400 	.word	0x40000400
 8000fa8:	58024400 	.word	0x58024400

08000fac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a12      	ldr	r2, [pc, #72]	@ (8001014 <HAL_TIM_MspPostInit+0x68>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d11e      	bne.n	800100c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <HAL_TIM_MspPostInit+0x6c>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd4:	4a10      	ldr	r2, [pc, #64]	@ (8001018 <HAL_TIM_MspPostInit+0x6c>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <HAL_TIM_MspPostInit+0x6c>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fec:	2340      	movs	r3, #64	@ 0x40
 8000fee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	4619      	mov	r1, r3
 8001006:	4805      	ldr	r0, [pc, #20]	@ (800101c <HAL_TIM_MspPostInit+0x70>)
 8001008:	f000 ffc0 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800100c:	bf00      	nop
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40000400 	.word	0x40000400
 8001018:	58024400 	.word	0x58024400
 800101c:	58020000 	.word	0x58020000

08001020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0ba      	sub	sp, #232	@ 0xe8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	22c0      	movs	r2, #192	@ 0xc0
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f006 fe12 	bl	8007c6a <memset>
  if(huart->Instance==USART3)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a27      	ldr	r2, [pc, #156]	@ (80010e8 <HAL_UART_MspInit+0xc8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d146      	bne.n	80010de <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001050:	f04f 0202 	mov.w	r2, #2
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	4618      	mov	r0, r3
 8001068:	f002 faba 	bl	80035e0 <HAL_RCCEx_PeriphCLKConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001072:	f7ff fd9b 	bl	8000bac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001076:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <HAL_UART_MspInit+0xcc>)
 8001078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800107c:	4a1b      	ldr	r2, [pc, #108]	@ (80010ec <HAL_UART_MspInit+0xcc>)
 800107e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001082:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001086:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <HAL_UART_MspInit+0xcc>)
 8001088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800108c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001094:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <HAL_UART_MspInit+0xcc>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109a:	4a14      	ldr	r2, [pc, #80]	@ (80010ec <HAL_UART_MspInit+0xcc>)
 800109c:	f043 0308 	orr.w	r3, r3, #8
 80010a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a4:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <HAL_UART_MspInit+0xcc>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010cc:	2307      	movs	r3, #7
 80010ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <HAL_UART_MspInit+0xd0>)
 80010da:	f000 ff57 	bl	8001f8c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80010de:	bf00      	nop
 80010e0:	37e8      	adds	r7, #232	@ 0xe8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40004800 	.word	0x40004800
 80010ec:	58024400 	.word	0x58024400
 80010f0:	58020c00 	.word	0x58020c00

080010f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0ba      	sub	sp, #232	@ 0xe8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	22c0      	movs	r2, #192	@ 0xc0
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f006 fda8 	bl	8007c6a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a30      	ldr	r2, [pc, #192]	@ (80011e0 <HAL_PCD_MspInit+0xec>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d159      	bne.n	80011d8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001124:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001130:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001134:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4618      	mov	r0, r3
 800113e:	f002 fa4f 	bl	80035e0 <HAL_RCCEx_PeriphCLKConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001148:	f7ff fd30 	bl	8000bac <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800114c:	f001 fa52 	bl	80025f4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <HAL_PCD_MspInit+0xf0>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001156:	4a23      	ldr	r2, [pc, #140]	@ (80011e4 <HAL_PCD_MspInit+0xf0>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001160:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <HAL_PCD_MspInit+0xf0>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800116e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001172:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001188:	230a      	movs	r3, #10
 800118a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001192:	4619      	mov	r1, r3
 8001194:	4814      	ldr	r0, [pc, #80]	@ (80011e8 <HAL_PCD_MspInit+0xf4>)
 8001196:	f000 fef9 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800119a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800119e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011b2:	4619      	mov	r1, r3
 80011b4:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <HAL_PCD_MspInit+0xf4>)
 80011b6:	f000 fee9 	bl	8001f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011ba:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <HAL_PCD_MspInit+0xf0>)
 80011bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011c0:	4a08      	ldr	r2, [pc, #32]	@ (80011e4 <HAL_PCD_MspInit+0xf0>)
 80011c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80011c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_PCD_MspInit+0xf0>)
 80011cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80011d8:	bf00      	nop
 80011da:	37e8      	adds	r7, #232	@ 0xe8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40080000 	.word	0x40080000
 80011e4:	58024400 	.word	0x58024400
 80011e8:	58020000 	.word	0x58020000

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <NMI_Handler+0x4>

080011f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <MemManage_Handler+0x4>

08001204 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <UsageFault_Handler+0x4>

08001214 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001242:	f000 f927 	bl	8001494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001250:	4b37      	ldr	r3, [pc, #220]	@ (8001330 <SystemInit+0xe4>)
 8001252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001256:	4a36      	ldr	r2, [pc, #216]	@ (8001330 <SystemInit+0xe4>)
 8001258:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800125c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001260:	4b34      	ldr	r3, [pc, #208]	@ (8001334 <SystemInit+0xe8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 030f 	and.w	r3, r3, #15
 8001268:	2b06      	cmp	r3, #6
 800126a:	d807      	bhi.n	800127c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800126c:	4b31      	ldr	r3, [pc, #196]	@ (8001334 <SystemInit+0xe8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f023 030f 	bic.w	r3, r3, #15
 8001274:	4a2f      	ldr	r2, [pc, #188]	@ (8001334 <SystemInit+0xe8>)
 8001276:	f043 0307 	orr.w	r3, r3, #7
 800127a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800127c:	4b2e      	ldr	r3, [pc, #184]	@ (8001338 <SystemInit+0xec>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a2d      	ldr	r2, [pc, #180]	@ (8001338 <SystemInit+0xec>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001288:	4b2b      	ldr	r3, [pc, #172]	@ (8001338 <SystemInit+0xec>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800128e:	4b2a      	ldr	r3, [pc, #168]	@ (8001338 <SystemInit+0xec>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4929      	ldr	r1, [pc, #164]	@ (8001338 <SystemInit+0xec>)
 8001294:	4b29      	ldr	r3, [pc, #164]	@ (800133c <SystemInit+0xf0>)
 8001296:	4013      	ands	r3, r2
 8001298:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800129a:	4b26      	ldr	r3, [pc, #152]	@ (8001334 <SystemInit+0xe8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d007      	beq.n	80012b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012a6:	4b23      	ldr	r3, [pc, #140]	@ (8001334 <SystemInit+0xe8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f023 030f 	bic.w	r3, r3, #15
 80012ae:	4a21      	ldr	r2, [pc, #132]	@ (8001334 <SystemInit+0xe8>)
 80012b0:	f043 0307 	orr.w	r3, r3, #7
 80012b4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012b6:	4b20      	ldr	r3, [pc, #128]	@ (8001338 <SystemInit+0xec>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <SystemInit+0xec>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001338 <SystemInit+0xec>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <SystemInit+0xec>)
 80012ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001340 <SystemInit+0xf4>)
 80012cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <SystemInit+0xec>)
 80012d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001344 <SystemInit+0xf8>)
 80012d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012d4:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <SystemInit+0xec>)
 80012d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001348 <SystemInit+0xfc>)
 80012d8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012da:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <SystemInit+0xec>)
 80012dc:	2200      	movs	r2, #0
 80012de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012e0:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <SystemInit+0xec>)
 80012e2:	4a19      	ldr	r2, [pc, #100]	@ (8001348 <SystemInit+0xfc>)
 80012e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012e6:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <SystemInit+0xec>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <SystemInit+0xec>)
 80012ee:	4a16      	ldr	r2, [pc, #88]	@ (8001348 <SystemInit+0xfc>)
 80012f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <SystemInit+0xec>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <SystemInit+0xec>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001338 <SystemInit+0xec>)
 80012fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001302:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <SystemInit+0xec>)
 8001306:	2200      	movs	r2, #0
 8001308:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <SystemInit+0x100>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <SystemInit+0x104>)
 8001310:	4013      	ands	r3, r2
 8001312:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001316:	d202      	bcs.n	800131e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001318:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <SystemInit+0x108>)
 800131a:	2201      	movs	r2, #1
 800131c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <SystemInit+0x10c>)
 8001320:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001324:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00
 8001334:	52002000 	.word	0x52002000
 8001338:	58024400 	.word	0x58024400
 800133c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001340:	02020200 	.word	0x02020200
 8001344:	01ff0000 	.word	0x01ff0000
 8001348:	01010280 	.word	0x01010280
 800134c:	5c001000 	.word	0x5c001000
 8001350:	ffff0000 	.word	0xffff0000
 8001354:	51008108 	.word	0x51008108
 8001358:	52004000 	.word	0x52004000

0800135c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001394 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001360:	f7ff ff74 	bl	800124c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001364:	480c      	ldr	r0, [pc, #48]	@ (8001398 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001366:	490d      	ldr	r1, [pc, #52]	@ (800139c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001368:	4a0d      	ldr	r2, [pc, #52]	@ (80013a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800137c:	4c0a      	ldr	r4, [pc, #40]	@ (80013a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138a:	f006 fc91 	bl	8007cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138e:	f7ff f91b 	bl	80005c8 <main>
  bx  lr
 8001392:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001394:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001398:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800139c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80013a0:	08007e7c 	.word	0x08007e7c
  ldr r2, =_sbss
 80013a4:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80013a8:	240007a4 	.word	0x240007a4

080013ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC3_IRQHandler>
	...

080013b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b6:	2003      	movs	r0, #3
 80013b8:	f000 f982 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013bc:	f001 ff3a 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <HAL_Init+0x68>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	0a1b      	lsrs	r3, r3, #8
 80013c8:	f003 030f 	and.w	r3, r3, #15
 80013cc:	4913      	ldr	r1, [pc, #76]	@ (800141c <HAL_Init+0x6c>)
 80013ce:	5ccb      	ldrb	r3, [r1, r3]
 80013d0:	f003 031f 	and.w	r3, r3, #31
 80013d4:	fa22 f303 	lsr.w	r3, r2, r3
 80013d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013da:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <HAL_Init+0x68>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	4a0e      	ldr	r2, [pc, #56]	@ (800141c <HAL_Init+0x6c>)
 80013e4:	5cd3      	ldrb	r3, [r2, r3]
 80013e6:	f003 031f 	and.w	r3, r3, #31
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
 80013f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001420 <HAL_Init+0x70>)
 80013f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001424 <HAL_Init+0x74>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013fa:	2000      	movs	r0, #0
 80013fc:	f000 f814 	bl	8001428 <HAL_InitTick>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e002      	b.n	8001410 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800140a:	f7ff fcc5 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	58024400 	.word	0x58024400
 800141c:	08007d30 	.word	0x08007d30
 8001420:	24000004 	.word	0x24000004
 8001424:	24000000 	.word	0x24000000

08001428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <HAL_InitTick+0x60>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e021      	b.n	8001480 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800143c:	4b13      	ldr	r3, [pc, #76]	@ (800148c <HAL_InitTick+0x64>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <HAL_InitTick+0x60>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800144a:	fbb3 f3f1 	udiv	r3, r3, r1
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f959 	bl	800170a <HAL_SYSTICK_Config>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e00e      	b.n	8001480 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d80a      	bhi.n	800147e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f000 f931 	bl	80016d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001474:	4a06      	ldr	r2, [pc, #24]	@ (8001490 <HAL_InitTick+0x68>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2400000c 	.word	0x2400000c
 800148c:	24000000 	.word	0x24000000
 8001490:	24000008 	.word	0x24000008

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_IncTick+0x20>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_IncTick+0x24>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <HAL_IncTick+0x24>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	2400000c 	.word	0x2400000c
 80014b8:	240007a0 	.word	0x240007a0

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b03      	ldr	r3, [pc, #12]	@ (80014d0 <HAL_GetTick+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	240007a0 	.word	0x240007a0

080014d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff ffee 	bl	80014bc <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	d005      	beq.n	80014fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <HAL_Delay+0x44>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fa:	bf00      	nop
 80014fc:	f7ff ffde 	bl	80014bc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	d8f7      	bhi.n	80014fc <HAL_Delay+0x28>
  {
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2400000c 	.word	0x2400000c

0800151c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <HAL_GetREVID+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	0c1b      	lsrs	r3, r3, #16
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	5c001000 	.word	0x5c001000

08001534 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001544:	4904      	ldr	r1, [pc, #16]	@ (8001558 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	58000400 	.word	0x58000400

0800155c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <__NVIC_SetPriorityGrouping+0x40>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001586:	4313      	orrs	r3, r2
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	@ (800159c <__NVIC_SetPriorityGrouping+0x40>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00
 80015a0:	05fa0000 	.word	0x05fa0000

080015a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db0a      	blt.n	80015ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	490c      	ldr	r1, [pc, #48]	@ (800160c <__NVIC_SetPriority+0x4c>)
 80015da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	440b      	add	r3, r1
 80015e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e8:	e00a      	b.n	8001600 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4908      	ldr	r1, [pc, #32]	@ (8001610 <__NVIC_SetPriority+0x50>)
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	3b04      	subs	r3, #4
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	440b      	add	r3, r1
 80015fe:	761a      	strb	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000e100 	.word	0xe000e100
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	@ 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f1c3 0307 	rsb	r3, r3, #7
 800162e:	2b04      	cmp	r3, #4
 8001630:	bf28      	it	cs
 8001632:	2304      	movcs	r3, #4
 8001634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3304      	adds	r3, #4
 800163a:	2b06      	cmp	r3, #6
 800163c:	d902      	bls.n	8001644 <NVIC_EncodePriority+0x30>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b03      	subs	r3, #3
 8001642:	e000      	b.n	8001646 <NVIC_EncodePriority+0x32>
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	401a      	ands	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43d9      	mvns	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	4313      	orrs	r3, r2
         );
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	@ 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800168c:	d301      	bcc.n	8001692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168e:	2301      	movs	r3, #1
 8001690:	e00f      	b.n	80016b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001692:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <SysTick_Config+0x40>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169a:	210f      	movs	r1, #15
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f7ff ff8e 	bl	80015c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a4:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <SysTick_Config+0x40>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016aa:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <SysTick_Config+0x40>)
 80016ac:	2207      	movs	r2, #7
 80016ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	e000e010 	.word	0xe000e010

080016c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff47 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016e4:	f7ff ff5e 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 80016e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff ff90 	bl	8001614 <NVIC_EncodePriority>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff5f 	bl	80015c0 <__NVIC_SetPriority>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ffb2 	bl	800167c <SysTick_Config>
 8001718:	4603      	mov	r3, r0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e0e3      	b.n	80018fe <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800173c:	2b00      	cmp	r3, #0
 800173e:	d106      	bne.n	800174e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2223      	movs	r2, #35	@ 0x23
 8001744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fb3f 	bl	8000dcc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	4b6e      	ldr	r3, [pc, #440]	@ (8001908 <HAL_ETH_Init+0x1e4>)
 8001750:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001754:	4a6c      	ldr	r2, [pc, #432]	@ (8001908 <HAL_ETH_Init+0x1e4>)
 8001756:	f043 0302 	orr.w	r3, r3, #2
 800175a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800175e:	4b6a      	ldr	r3, [pc, #424]	@ (8001908 <HAL_ETH_Init+0x1e4>)
 8001760:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7a1b      	ldrb	r3, [r3, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d103      	bne.n	800177c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff fedd 	bl	8001534 <HAL_SYSCFG_ETHInterfaceSelect>
 800177a:	e003      	b.n	8001784 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800177c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001780:	f7ff fed8 	bl	8001534 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001784:	4b61      	ldr	r3, [pc, #388]	@ (800190c <HAL_ETH_Init+0x1e8>)
 8001786:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800179e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017a0:	f7ff fe8c 	bl	80014bc <HAL_GetTick>
 80017a4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017a6:	e011      	b.n	80017cc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80017a8:	f7ff fe88 	bl	80014bc <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017b6:	d909      	bls.n	80017cc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2204      	movs	r2, #4
 80017bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	22e0      	movs	r2, #224	@ 0xe0
 80017c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e098      	b.n	80018fe <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1e4      	bne.n	80017a8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f89e 	bl	8001920 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80017e4:	f001 fea0 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4a49      	ldr	r2, [pc, #292]	@ (8001910 <HAL_ETH_Init+0x1ec>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	0c9a      	lsrs	r2, r3, #18
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3a01      	subs	r2, #1
 80017f8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fa81 	bl	8001d04 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800180a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800180e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800181a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800181e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d009      	beq.n	8001842 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	22e0      	movs	r2, #224	@ 0xe0
 800183a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e05d      	b.n	80018fe <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800184a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800184e:	4b31      	ldr	r3, [pc, #196]	@ (8001914 <HAL_ETH_Init+0x1f0>)
 8001850:	4013      	ands	r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6952      	ldr	r2, [r2, #20]
 8001856:	0051      	lsls	r1, r2, #1
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	430b      	orrs	r3, r1
 800185e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001862:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 fae9 	bl	8001e3e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 fb2f 	bl	8001ed0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	3305      	adds	r3, #5
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	021a      	lsls	r2, r3, #8
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	3304      	adds	r3, #4
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	3303      	adds	r3, #3
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	061a      	lsls	r2, r3, #24
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	3302      	adds	r3, #2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	041b      	lsls	r3, r3, #16
 80018a4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	3301      	adds	r3, #1
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018b0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018be:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018c0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <HAL_ETH_Init+0x1f4>)
 80018d2:	430b      	orrs	r3, r1
 80018d4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <HAL_ETH_Init+0x1f8>)
 80018e6:	430b      	orrs	r3, r1
 80018e8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2210      	movs	r2, #16
 80018f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	58024400 	.word	0x58024400
 800190c:	58000400 	.word	0x58000400
 8001910:	431bde83 	.word	0x431bde83
 8001914:	ffff8001 	.word	0xffff8001
 8001918:	0c020060 	.word	0x0c020060
 800191c:	0c20c000 	.word	0x0c20c000

08001920 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001930:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001938:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800193a:	f001 fdf5 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 800193e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4a1a      	ldr	r2, [pc, #104]	@ (80019ac <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d804      	bhi.n	8001952 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	e022      	b.n	8001998 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	4a16      	ldr	r2, [pc, #88]	@ (80019b0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d204      	bcs.n	8001964 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	e019      	b.n	8001998 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4a13      	ldr	r2, [pc, #76]	@ (80019b4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d915      	bls.n	8001998 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4a12      	ldr	r2, [pc, #72]	@ (80019b8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d804      	bhi.n	800197e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	e00c      	b.n	8001998 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	4a0e      	ldr	r2, [pc, #56]	@ (80019bc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d804      	bhi.n	8001990 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	e003      	b.n	8001998 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001996:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	02160ebf 	.word	0x02160ebf
 80019b0:	03938700 	.word	0x03938700
 80019b4:	05f5e0ff 	.word	0x05f5e0ff
 80019b8:	08f0d17f 	.word	0x08f0d17f
 80019bc:	0ee6b27f 	.word	0x0ee6b27f

080019c0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80019d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	791b      	ldrb	r3, [r3, #4]
 80019d8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80019da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	7b1b      	ldrb	r3, [r3, #12]
 80019e0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80019e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	7b5b      	ldrb	r3, [r3, #13]
 80019e8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80019ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	7b9b      	ldrb	r3, [r3, #14]
 80019f0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80019f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	7bdb      	ldrb	r3, [r3, #15]
 80019f8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	7c12      	ldrb	r2, [r2, #16]
 8001a00:	2a00      	cmp	r2, #0
 8001a02:	d102      	bne.n	8001a0a <ETH_SetMACConfig+0x4a>
 8001a04:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a08:	e000      	b.n	8001a0c <ETH_SetMACConfig+0x4c>
 8001a0a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a0c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	7c52      	ldrb	r2, [r2, #17]
 8001a12:	2a00      	cmp	r2, #0
 8001a14:	d102      	bne.n	8001a1c <ETH_SetMACConfig+0x5c>
 8001a16:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a1a:	e000      	b.n	8001a1e <ETH_SetMACConfig+0x5e>
 8001a1c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	7c9b      	ldrb	r3, [r3, #18]
 8001a24:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a26:	431a      	orrs	r2, r3
               macconf->Speed |
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a2c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001a32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	7f1b      	ldrb	r3, [r3, #28]
 8001a38:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001a3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	7f5b      	ldrb	r3, [r3, #29]
 8001a40:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a42:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	7f92      	ldrb	r2, [r2, #30]
 8001a48:	2a00      	cmp	r2, #0
 8001a4a:	d102      	bne.n	8001a52 <ETH_SetMACConfig+0x92>
 8001a4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a50:	e000      	b.n	8001a54 <ETH_SetMACConfig+0x94>
 8001a52:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a54:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	7fdb      	ldrb	r3, [r3, #31]
 8001a5a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a5c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a64:	2a00      	cmp	r2, #0
 8001a66:	d102      	bne.n	8001a6e <ETH_SetMACConfig+0xae>
 8001a68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a6c:	e000      	b.n	8001a70 <ETH_SetMACConfig+0xb0>
 8001a6e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a70:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001a7e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001a80:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001a86:	4313      	orrs	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b56      	ldr	r3, [pc, #344]	@ (8001bec <ETH_SetMACConfig+0x22c>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	68f9      	ldr	r1, [r7, #12]
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001aaa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001aac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ab4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001ab6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001abe:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001ac0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001ac8:	2a00      	cmp	r2, #0
 8001aca:	d102      	bne.n	8001ad2 <ETH_SetMACConfig+0x112>
 8001acc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ad0:	e000      	b.n	8001ad4 <ETH_SetMACConfig+0x114>
 8001ad2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001ad4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4b42      	ldr	r3, [pc, #264]	@ (8001bf0 <ETH_SetMACConfig+0x230>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	68f9      	ldr	r1, [r7, #12]
 8001aee:	430b      	orrs	r3, r1
 8001af0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001af8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001afe:	4313      	orrs	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf4 <ETH_SetMACConfig+0x234>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	68f9      	ldr	r1, [r7, #12]
 8001b12:	430b      	orrs	r3, r1
 8001b14:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b1c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b22:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001b2a:	2a00      	cmp	r2, #0
 8001b2c:	d101      	bne.n	8001b32 <ETH_SetMACConfig+0x172>
 8001b2e:	2280      	movs	r2, #128	@ 0x80
 8001b30:	e000      	b.n	8001b34 <ETH_SetMACConfig+0x174>
 8001b32:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001b34:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b3a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b46:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	68f9      	ldr	r1, [r7, #12]
 8001b52:	430b      	orrs	r3, r1
 8001b54:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001b5c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001b64:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b72:	f023 0103 	bic.w	r1, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001b8a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001ba6:	2a00      	cmp	r2, #0
 8001ba8:	d101      	bne.n	8001bae <ETH_SetMACConfig+0x1ee>
 8001baa:	2240      	movs	r2, #64	@ 0x40
 8001bac:	e000      	b.n	8001bb0 <ETH_SetMACConfig+0x1f0>
 8001bae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001bb0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001bb8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001bba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001bc2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001bd0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	00048083 	.word	0x00048083
 8001bf0:	c0f88000 	.word	0xc0f88000
 8001bf4:	fffffef0 	.word	0xfffffef0

08001bf8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b38      	ldr	r3, [pc, #224]	@ (8001cf0 <ETH_SetDMAConfig+0xf8>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	6811      	ldr	r1, [r2, #0]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c1e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	791b      	ldrb	r3, [r3, #4]
 8001c24:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c2a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	7b1b      	ldrb	r3, [r3, #12]
 8001c30:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c32:	4313      	orrs	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf4 <ETH_SetDMAConfig+0xfc>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	68f9      	ldr	r1, [r7, #12]
 8001c4a:	430b      	orrs	r3, r1
 8001c4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c50:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	7b5b      	ldrb	r3, [r3, #13]
 8001c56:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c68:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001c6c:	4b22      	ldr	r3, [pc, #136]	@ (8001cf8 <ETH_SetDMAConfig+0x100>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	68f9      	ldr	r1, [r7, #12]
 8001c76:	430b      	orrs	r3, r1
 8001c78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c7c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	7d1b      	ldrb	r3, [r3, #20]
 8001c88:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c8a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	7f5b      	ldrb	r3, [r3, #29]
 8001c90:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c9e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001ca2:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <ETH_SetDMAConfig+0x104>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	68f9      	ldr	r1, [r7, #12]
 8001cac:	430b      	orrs	r3, r1
 8001cae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cb2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	7f1b      	ldrb	r3, [r3, #28]
 8001cba:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ccc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <ETH_SetDMAConfig+0x108>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	68f9      	ldr	r1, [r7, #12]
 8001cda:	430b      	orrs	r3, r1
 8001cdc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ce0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	ffff87fd 	.word	0xffff87fd
 8001cf4:	ffff2ffe 	.word	0xffff2ffe
 8001cf8:	fffec000 	.word	0xfffec000
 8001cfc:	ffc0efef 	.word	0xffc0efef
 8001d00:	7fc0ffff 	.word	0x7fc0ffff

08001d04 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b0a4      	sub	sp, #144	@ 0x90
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d12:	2300      	movs	r3, #0
 8001d14:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d22:	2301      	movs	r3, #1
 8001d24:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d44:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001d5c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001d60:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001d86:	2300      	movs	r3, #0
 8001d88:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d96:	2301      	movs	r3, #1
 8001d98:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001d9c:	2320      	movs	r3, #32
 8001d9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001dae:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001db4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001db8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001dde:	2300      	movs	r3, #0
 8001de0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001de2:	2301      	movs	r3, #1
 8001de4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001de8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dec:	4619      	mov	r1, r3
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff fde6 	bl	80019c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001df4:	2301      	movs	r3, #1
 8001df6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e0e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e12:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e18:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e1c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001e24:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001e28:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e2a:	f107 0308 	add.w	r3, r7, #8
 8001e2e:	4619      	mov	r1, r3
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff fee1 	bl	8001bf8 <ETH_SetDMAConfig>
}
 8001e36:	bf00      	nop
 8001e38:	3790      	adds	r7, #144	@ 0x90
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b085      	sub	sp, #20
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	e01d      	b.n	8001e88 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68d9      	ldr	r1, [r3, #12]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2200      	movs	r2, #0
 8001e68:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e76:	68b9      	ldr	r1, [r7, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	3206      	adds	r2, #6
 8001e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3301      	adds	r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d9de      	bls.n	8001e4c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eb0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ec0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	e023      	b.n	8001f26 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6919      	ldr	r1, [r3, #16]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	440b      	add	r3, r1
 8001eee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2200      	movs	r2, #0
 8001f06:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2200      	movs	r2, #0
 8001f12:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	3212      	adds	r2, #18
 8001f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3301      	adds	r3, #1
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d9d8      	bls.n	8001ede <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f52:	461a      	mov	r2, r3
 8001f54:	2303      	movs	r3, #3
 8001f56:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f66:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f7a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	@ 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f9a:	4b89      	ldr	r3, [pc, #548]	@ (80021c0 <HAL_GPIO_Init+0x234>)
 8001f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f9e:	e194      	b.n	80022ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 8186 	beq.w	80022c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d005      	beq.n	8001fd0 <HAL_GPIO_Init+0x44>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d130      	bne.n	8002032 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	2203      	movs	r2, #3
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002006:	2201      	movs	r2, #1
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	091b      	lsrs	r3, r3, #4
 800201c:	f003 0201 	and.w	r2, r3, #1
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b03      	cmp	r3, #3
 800203c:	d017      	beq.n	800206e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d123      	bne.n	80020c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	08da      	lsrs	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3208      	adds	r2, #8
 8002082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	220f      	movs	r2, #15
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	08da      	lsrs	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3208      	adds	r2, #8
 80020bc:	69b9      	ldr	r1, [r7, #24]
 80020be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	2203      	movs	r2, #3
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0203 	and.w	r2, r3, #3
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 80e0 	beq.w	80022c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002104:	4b2f      	ldr	r3, [pc, #188]	@ (80021c4 <HAL_GPIO_Init+0x238>)
 8002106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800210a:	4a2e      	ldr	r2, [pc, #184]	@ (80021c4 <HAL_GPIO_Init+0x238>)
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002114:	4b2b      	ldr	r3, [pc, #172]	@ (80021c4 <HAL_GPIO_Init+0x238>)
 8002116:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002122:	4a29      	ldr	r2, [pc, #164]	@ (80021c8 <HAL_GPIO_Init+0x23c>)
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	3302      	adds	r3, #2
 800212a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	220f      	movs	r2, #15
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a20      	ldr	r2, [pc, #128]	@ (80021cc <HAL_GPIO_Init+0x240>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d052      	beq.n	80021f4 <HAL_GPIO_Init+0x268>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a1f      	ldr	r2, [pc, #124]	@ (80021d0 <HAL_GPIO_Init+0x244>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d031      	beq.n	80021ba <HAL_GPIO_Init+0x22e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a1e      	ldr	r2, [pc, #120]	@ (80021d4 <HAL_GPIO_Init+0x248>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d02b      	beq.n	80021b6 <HAL_GPIO_Init+0x22a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a1d      	ldr	r2, [pc, #116]	@ (80021d8 <HAL_GPIO_Init+0x24c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d025      	beq.n	80021b2 <HAL_GPIO_Init+0x226>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a1c      	ldr	r2, [pc, #112]	@ (80021dc <HAL_GPIO_Init+0x250>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01f      	beq.n	80021ae <HAL_GPIO_Init+0x222>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a1b      	ldr	r2, [pc, #108]	@ (80021e0 <HAL_GPIO_Init+0x254>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d019      	beq.n	80021aa <HAL_GPIO_Init+0x21e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a1a      	ldr	r2, [pc, #104]	@ (80021e4 <HAL_GPIO_Init+0x258>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_GPIO_Init+0x21a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a19      	ldr	r2, [pc, #100]	@ (80021e8 <HAL_GPIO_Init+0x25c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00d      	beq.n	80021a2 <HAL_GPIO_Init+0x216>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a18      	ldr	r2, [pc, #96]	@ (80021ec <HAL_GPIO_Init+0x260>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d007      	beq.n	800219e <HAL_GPIO_Init+0x212>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a17      	ldr	r2, [pc, #92]	@ (80021f0 <HAL_GPIO_Init+0x264>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <HAL_GPIO_Init+0x20e>
 8002196:	2309      	movs	r3, #9
 8002198:	e02d      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 800219a:	230a      	movs	r3, #10
 800219c:	e02b      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 800219e:	2308      	movs	r3, #8
 80021a0:	e029      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 80021a2:	2307      	movs	r3, #7
 80021a4:	e027      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 80021a6:	2306      	movs	r3, #6
 80021a8:	e025      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 80021aa:	2305      	movs	r3, #5
 80021ac:	e023      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 80021ae:	2304      	movs	r3, #4
 80021b0:	e021      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 80021b2:	2303      	movs	r3, #3
 80021b4:	e01f      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e01d      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e01b      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 80021be:	bf00      	nop
 80021c0:	58000080 	.word	0x58000080
 80021c4:	58024400 	.word	0x58024400
 80021c8:	58000400 	.word	0x58000400
 80021cc:	58020000 	.word	0x58020000
 80021d0:	58020400 	.word	0x58020400
 80021d4:	58020800 	.word	0x58020800
 80021d8:	58020c00 	.word	0x58020c00
 80021dc:	58021000 	.word	0x58021000
 80021e0:	58021400 	.word	0x58021400
 80021e4:	58021800 	.word	0x58021800
 80021e8:	58021c00 	.word	0x58021c00
 80021ec:	58022000 	.word	0x58022000
 80021f0:	58022400 	.word	0x58022400
 80021f4:	2300      	movs	r3, #0
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	f002 0203 	and.w	r2, r2, #3
 80021fc:	0092      	lsls	r2, r2, #2
 80021fe:	4093      	lsls	r3, r2
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002206:	4938      	ldr	r1, [pc, #224]	@ (80022e8 <HAL_GPIO_Init+0x35c>)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800223a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002268:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	3301      	adds	r3, #1
 80022c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa22 f303 	lsr.w	r3, r2, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f47f ae63 	bne.w	8001fa0 <HAL_GPIO_Init+0x14>
  }
}
 80022da:	bf00      	nop
 80022dc:	bf00      	nop
 80022de:	3724      	adds	r7, #36	@ 0x24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	58000400 	.word	0x58000400

080022ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
 80022f8:	4613      	mov	r3, r2
 80022fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022fc:	787b      	ldrb	r3, [r7, #1]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002308:	e003      	b.n	8002312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800230a:	887b      	ldrh	r3, [r7, #2]
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	619a      	str	r2, [r3, #24]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af02      	add	r7, sp, #8
 8002324:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0fe      	b.n	800252e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d106      	bne.n	800234a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7fe fed5 	bl	80010f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2203      	movs	r2, #3
 800234e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f005 f9f2 	bl	8007740 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7c1a      	ldrb	r2, [r3, #16]
 8002364:	f88d 2000 	strb.w	r2, [sp]
 8002368:	3304      	adds	r3, #4
 800236a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800236c:	f005 f976 	bl	800765c <USB_CoreInit>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2202      	movs	r2, #2
 800237a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e0d5      	b.n	800252e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f005 f9ea 	bl	8007762 <USB_SetCurrentMode>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0c6      	b.n	800252e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e04a      	b.n	800243c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	3315      	adds	r3, #21
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	3314      	adds	r3, #20
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	b298      	uxth	r0, r3
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	332e      	adds	r3, #46	@ 0x2e
 80023e2:	4602      	mov	r2, r0
 80023e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	3318      	adds	r3, #24
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	331c      	adds	r3, #28
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	3320      	adds	r3, #32
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3324      	adds	r3, #36	@ 0x24
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	3301      	adds	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	791b      	ldrb	r3, [r3, #4]
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	429a      	cmp	r2, r3
 8002444:	d3af      	bcc.n	80023a6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	e044      	b.n	80024d6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024ba:	7bfa      	ldrb	r2, [r7, #15]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	3301      	adds	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	791b      	ldrb	r3, [r3, #4]
 80024da:	7bfa      	ldrb	r2, [r7, #15]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d3b5      	bcc.n	800244c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	7c1a      	ldrb	r2, [r3, #16]
 80024e8:	f88d 2000 	strb.w	r2, [sp]
 80024ec:	3304      	adds	r3, #4
 80024ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024f0:	f005 f984 	bl	80077fc <USB_DevInit>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d005      	beq.n	8002506 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2202      	movs	r2, #2
 80024fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e013      	b.n	800252e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7b1b      	ldrb	r3, [r3, #12]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d102      	bne.n	8002522 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f80b 	bl	8002538 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f005 fb3f 	bl	8007baa <USB_DevDisconnect>

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002566:	4b05      	ldr	r3, [pc, #20]	@ (800257c <HAL_PCDEx_ActivateLPM+0x44>)
 8002568:	4313      	orrs	r3, r2
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	10000003 	.word	0x10000003

08002580 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002588:	4b19      	ldr	r3, [pc, #100]	@ (80025f0 <HAL_PWREx_ConfigSupply+0x70>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b04      	cmp	r3, #4
 8002592:	d00a      	beq.n	80025aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002594:	4b16      	ldr	r3, [pc, #88]	@ (80025f0 <HAL_PWREx_ConfigSupply+0x70>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d001      	beq.n	80025a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e01f      	b.n	80025e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	e01d      	b.n	80025e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025aa:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <HAL_PWREx_ConfigSupply+0x70>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f023 0207 	bic.w	r2, r3, #7
 80025b2:	490f      	ldr	r1, [pc, #60]	@ (80025f0 <HAL_PWREx_ConfigSupply+0x70>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025ba:	f7fe ff7f 	bl	80014bc <HAL_GetTick>
 80025be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025c0:	e009      	b.n	80025d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025c2:	f7fe ff7b 	bl	80014bc <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025d0:	d901      	bls.n	80025d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e007      	b.n	80025e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025d6:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_PWREx_ConfigSupply+0x70>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025e2:	d1ee      	bne.n	80025c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	58024800 	.word	0x58024800

080025f4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80025f8:	4b05      	ldr	r3, [pc, #20]	@ (8002610 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4a04      	ldr	r2, [pc, #16]	@ (8002610 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002602:	60d3      	str	r3, [r2, #12]
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	58024800 	.word	0x58024800

08002614 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08c      	sub	sp, #48	@ 0x30
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d102      	bne.n	8002628 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	f000 bc48 	b.w	8002eb8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 8088 	beq.w	8002746 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002636:	4b99      	ldr	r3, [pc, #612]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800263e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002640:	4b96      	ldr	r3, [pc, #600]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 8002642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002644:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002648:	2b10      	cmp	r3, #16
 800264a:	d007      	beq.n	800265c <HAL_RCC_OscConfig+0x48>
 800264c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800264e:	2b18      	cmp	r3, #24
 8002650:	d111      	bne.n	8002676 <HAL_RCC_OscConfig+0x62>
 8002652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d10c      	bne.n	8002676 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	4b8f      	ldr	r3, [pc, #572]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d06d      	beq.n	8002744 <HAL_RCC_OscConfig+0x130>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d169      	bne.n	8002744 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	f000 bc21 	b.w	8002eb8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x7a>
 8002680:	4b86      	ldr	r3, [pc, #536]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a85      	ldr	r2, [pc, #532]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 8002686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	e02e      	b.n	80026ec <HAL_RCC_OscConfig+0xd8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x9c>
 8002696:	4b81      	ldr	r3, [pc, #516]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a80      	ldr	r2, [pc, #512]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 800269c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b7e      	ldr	r3, [pc, #504]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a7d      	ldr	r2, [pc, #500]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 80026a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e01d      	b.n	80026ec <HAL_RCC_OscConfig+0xd8>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0xc0>
 80026ba:	4b78      	ldr	r3, [pc, #480]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a77      	ldr	r2, [pc, #476]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 80026c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b75      	ldr	r3, [pc, #468]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a74      	ldr	r2, [pc, #464]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0xd8>
 80026d4:	4b71      	ldr	r3, [pc, #452]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a70      	ldr	r2, [pc, #448]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 80026da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b6e      	ldr	r3, [pc, #440]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a6d      	ldr	r2, [pc, #436]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 80026e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fee2 	bl	80014bc <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026fc:	f7fe fede 	bl	80014bc <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	@ 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e3d4      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800270e:	4b63      	ldr	r3, [pc, #396]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0xe8>
 800271a:	e014      	b.n	8002746 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fece 	bl	80014bc <HAL_GetTick>
 8002720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7fe feca 	bl	80014bc <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	@ 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e3c0      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002736:	4b59      	ldr	r3, [pc, #356]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x110>
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 80ca 	beq.w	80028e8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002754:	4b51      	ldr	r3, [pc, #324]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800275c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800275e:	4b4f      	ldr	r3, [pc, #316]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 8002760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002762:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <HAL_RCC_OscConfig+0x166>
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	2b18      	cmp	r3, #24
 800276e:	d156      	bne.n	800281e <HAL_RCC_OscConfig+0x20a>
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d151      	bne.n	800281e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800277a:	4b48      	ldr	r3, [pc, #288]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <HAL_RCC_OscConfig+0x17e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e392      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002792:	4b42      	ldr	r3, [pc, #264]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 0219 	bic.w	r2, r3, #25
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	493f      	ldr	r1, [pc, #252]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe fe8a 	bl	80014bc <HAL_GetTick>
 80027a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ac:	f7fe fe86 	bl	80014bc <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e37c      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027be:	4b37      	ldr	r3, [pc, #220]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ca:	f7fe fea7 	bl	800151c <HAL_GetREVID>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d817      	bhi.n	8002808 <HAL_RCC_OscConfig+0x1f4>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b40      	cmp	r3, #64	@ 0x40
 80027de:	d108      	bne.n	80027f2 <HAL_RCC_OscConfig+0x1de>
 80027e0:	4b2e      	ldr	r3, [pc, #184]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80027e8:	4a2c      	ldr	r2, [pc, #176]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 80027ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f0:	e07a      	b.n	80028e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f2:	4b2a      	ldr	r3, [pc, #168]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	031b      	lsls	r3, r3, #12
 8002800:	4926      	ldr	r1, [pc, #152]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 8002802:	4313      	orrs	r3, r2
 8002804:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002806:	e06f      	b.n	80028e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	4b24      	ldr	r3, [pc, #144]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	061b      	lsls	r3, r3, #24
 8002816:	4921      	ldr	r1, [pc, #132]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800281c:	e064      	b.n	80028e8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d047      	beq.n	80028b6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002826:	4b1d      	ldr	r3, [pc, #116]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 0219 	bic.w	r2, r3, #25
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	491a      	ldr	r1, [pc, #104]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 8002834:	4313      	orrs	r3, r2
 8002836:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7fe fe40 	bl	80014bc <HAL_GetTick>
 800283c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002840:	f7fe fe3c 	bl	80014bc <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e332      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002852:	4b12      	ldr	r3, [pc, #72]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285e:	f7fe fe5d 	bl	800151c <HAL_GetREVID>
 8002862:	4603      	mov	r3, r0
 8002864:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002868:	4293      	cmp	r3, r2
 800286a:	d819      	bhi.n	80028a0 <HAL_RCC_OscConfig+0x28c>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b40      	cmp	r3, #64	@ 0x40
 8002872:	d108      	bne.n	8002886 <HAL_RCC_OscConfig+0x272>
 8002874:	4b09      	ldr	r3, [pc, #36]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800287c:	4a07      	ldr	r2, [pc, #28]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 800287e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002882:	6053      	str	r3, [r2, #4]
 8002884:	e030      	b.n	80028e8 <HAL_RCC_OscConfig+0x2d4>
 8002886:	4b05      	ldr	r3, [pc, #20]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	031b      	lsls	r3, r3, #12
 8002894:	4901      	ldr	r1, [pc, #4]	@ (800289c <HAL_RCC_OscConfig+0x288>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
 800289a:	e025      	b.n	80028e8 <HAL_RCC_OscConfig+0x2d4>
 800289c:	58024400 	.word	0x58024400
 80028a0:	4b9a      	ldr	r3, [pc, #616]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	061b      	lsls	r3, r3, #24
 80028ae:	4997      	ldr	r1, [pc, #604]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
 80028b4:	e018      	b.n	80028e8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b6:	4b95      	ldr	r3, [pc, #596]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a94      	ldr	r2, [pc, #592]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c2:	f7fe fdfb 	bl	80014bc <HAL_GetTick>
 80028c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ca:	f7fe fdf7 	bl	80014bc <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e2ed      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028dc:	4b8b      	ldr	r3, [pc, #556]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f0      	bne.n	80028ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80a9 	beq.w	8002a48 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f6:	4b85      	ldr	r3, [pc, #532]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002900:	4b82      	ldr	r3, [pc, #520]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002904:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	2b08      	cmp	r3, #8
 800290a:	d007      	beq.n	800291c <HAL_RCC_OscConfig+0x308>
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2b18      	cmp	r3, #24
 8002910:	d13a      	bne.n	8002988 <HAL_RCC_OscConfig+0x374>
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d135      	bne.n	8002988 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800291c:	4b7b      	ldr	r3, [pc, #492]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_OscConfig+0x320>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	2b80      	cmp	r3, #128	@ 0x80
 800292e:	d001      	beq.n	8002934 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e2c1      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002934:	f7fe fdf2 	bl	800151c <HAL_GetREVID>
 8002938:	4603      	mov	r3, r0
 800293a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800293e:	4293      	cmp	r3, r2
 8002940:	d817      	bhi.n	8002972 <HAL_RCC_OscConfig+0x35e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	2b20      	cmp	r3, #32
 8002948:	d108      	bne.n	800295c <HAL_RCC_OscConfig+0x348>
 800294a:	4b70      	ldr	r3, [pc, #448]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002952:	4a6e      	ldr	r2, [pc, #440]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002954:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002958:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800295a:	e075      	b.n	8002a48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800295c:	4b6b      	ldr	r3, [pc, #428]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	069b      	lsls	r3, r3, #26
 800296a:	4968      	ldr	r1, [pc, #416]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002970:	e06a      	b.n	8002a48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002972:	4b66      	ldr	r3, [pc, #408]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	061b      	lsls	r3, r3, #24
 8002980:	4962      	ldr	r1, [pc, #392]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002982:	4313      	orrs	r3, r2
 8002984:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002986:	e05f      	b.n	8002a48 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d042      	beq.n	8002a16 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002990:	4b5e      	ldr	r3, [pc, #376]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a5d      	ldr	r2, [pc, #372]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800299a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe fd8e 	bl	80014bc <HAL_GetTick>
 80029a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029a4:	f7fe fd8a 	bl	80014bc <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e280      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029b6:	4b55      	ldr	r3, [pc, #340]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029c2:	f7fe fdab 	bl	800151c <HAL_GetREVID>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d817      	bhi.n	8002a00 <HAL_RCC_OscConfig+0x3ec>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d108      	bne.n	80029ea <HAL_RCC_OscConfig+0x3d6>
 80029d8:	4b4c      	ldr	r3, [pc, #304]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80029e0:	4a4a      	ldr	r2, [pc, #296]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80029e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029e6:	6053      	str	r3, [r2, #4]
 80029e8:	e02e      	b.n	8002a48 <HAL_RCC_OscConfig+0x434>
 80029ea:	4b48      	ldr	r3, [pc, #288]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	069b      	lsls	r3, r3, #26
 80029f8:	4944      	ldr	r1, [pc, #272]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]
 80029fe:	e023      	b.n	8002a48 <HAL_RCC_OscConfig+0x434>
 8002a00:	4b42      	ldr	r3, [pc, #264]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	061b      	lsls	r3, r3, #24
 8002a0e:	493f      	ldr	r1, [pc, #252]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60cb      	str	r3, [r1, #12]
 8002a14:	e018      	b.n	8002a48 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a16:	4b3d      	ldr	r3, [pc, #244]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a3c      	ldr	r2, [pc, #240]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002a1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a22:	f7fe fd4b 	bl	80014bc <HAL_GetTick>
 8002a26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a2a:	f7fe fd47 	bl	80014bc <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e23d      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a3c:	4b33      	ldr	r3, [pc, #204]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f0      	bne.n	8002a2a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d036      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d019      	beq.n	8002a90 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a60:	4a2a      	ldr	r2, [pc, #168]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a68:	f7fe fd28 	bl	80014bc <HAL_GetTick>
 8002a6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a70:	f7fe fd24 	bl	80014bc <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e21a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a82:	4b22      	ldr	r3, [pc, #136]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x45c>
 8002a8e:	e018      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a90:	4b1e      	ldr	r3, [pc, #120]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a94:	4a1d      	ldr	r2, [pc, #116]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7fe fd0e 	bl	80014bc <HAL_GetTick>
 8002aa0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa4:	f7fe fd0a 	bl	80014bc <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e200      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ab6:	4b15      	ldr	r3, [pc, #84]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d039      	beq.n	8002b42 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01c      	beq.n	8002b10 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a0c      	ldr	r2, [pc, #48]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002adc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ae0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ae2:	f7fe fceb 	bl	80014bc <HAL_GetTick>
 8002ae6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aea:	f7fe fce7 	bl	80014bc <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e1dd      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002afc:	4b03      	ldr	r3, [pc, #12]	@ (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x4d6>
 8002b08:	e01b      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
 8002b0a:	bf00      	nop
 8002b0c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b10:	4b9b      	ldr	r3, [pc, #620]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a9a      	ldr	r2, [pc, #616]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002b16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b1c:	f7fe fcce 	bl	80014bc <HAL_GetTick>
 8002b20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b24:	f7fe fcca 	bl	80014bc <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e1c0      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b36:	4b92      	ldr	r3, [pc, #584]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8081 	beq.w	8002c52 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b50:	4b8c      	ldr	r3, [pc, #560]	@ (8002d84 <HAL_RCC_OscConfig+0x770>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a8b      	ldr	r2, [pc, #556]	@ (8002d84 <HAL_RCC_OscConfig+0x770>)
 8002b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b5c:	f7fe fcae 	bl	80014bc <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b64:	f7fe fcaa 	bl	80014bc <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	@ 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e1a0      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b76:	4b83      	ldr	r3, [pc, #524]	@ (8002d84 <HAL_RCC_OscConfig+0x770>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d106      	bne.n	8002b98 <HAL_RCC_OscConfig+0x584>
 8002b8a:	4b7d      	ldr	r3, [pc, #500]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8e:	4a7c      	ldr	r2, [pc, #496]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b96:	e02d      	b.n	8002bf4 <HAL_RCC_OscConfig+0x5e0>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10c      	bne.n	8002bba <HAL_RCC_OscConfig+0x5a6>
 8002ba0:	4b77      	ldr	r3, [pc, #476]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba4:	4a76      	ldr	r2, [pc, #472]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bac:	4b74      	ldr	r3, [pc, #464]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb0:	4a73      	ldr	r2, [pc, #460]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002bb2:	f023 0304 	bic.w	r3, r3, #4
 8002bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bb8:	e01c      	b.n	8002bf4 <HAL_RCC_OscConfig+0x5e0>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b05      	cmp	r3, #5
 8002bc0:	d10c      	bne.n	8002bdc <HAL_RCC_OscConfig+0x5c8>
 8002bc2:	4b6f      	ldr	r3, [pc, #444]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc6:	4a6e      	ldr	r2, [pc, #440]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002bc8:	f043 0304 	orr.w	r3, r3, #4
 8002bcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bce:	4b6c      	ldr	r3, [pc, #432]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd2:	4a6b      	ldr	r2, [pc, #428]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bda:	e00b      	b.n	8002bf4 <HAL_RCC_OscConfig+0x5e0>
 8002bdc:	4b68      	ldr	r3, [pc, #416]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be0:	4a67      	ldr	r2, [pc, #412]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002be2:	f023 0301 	bic.w	r3, r3, #1
 8002be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be8:	4b65      	ldr	r3, [pc, #404]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bec:	4a64      	ldr	r2, [pc, #400]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002bee:	f023 0304 	bic.w	r3, r3, #4
 8002bf2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d015      	beq.n	8002c28 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfc:	f7fe fc5e 	bl	80014bc <HAL_GetTick>
 8002c00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c02:	e00a      	b.n	8002c1a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c04:	f7fe fc5a 	bl	80014bc <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e14e      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c1a:	4b59      	ldr	r3, [pc, #356]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0ee      	beq.n	8002c04 <HAL_RCC_OscConfig+0x5f0>
 8002c26:	e014      	b.n	8002c52 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c28:	f7fe fc48 	bl	80014bc <HAL_GetTick>
 8002c2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c2e:	e00a      	b.n	8002c46 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c30:	f7fe fc44 	bl	80014bc <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e138      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c46:	4b4e      	ldr	r3, [pc, #312]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1ee      	bne.n	8002c30 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 812d 	beq.w	8002eb6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c5c:	4b48      	ldr	r3, [pc, #288]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c64:	2b18      	cmp	r3, #24
 8002c66:	f000 80bd 	beq.w	8002de4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	f040 809e 	bne.w	8002db0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c74:	4b42      	ldr	r3, [pc, #264]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a41      	ldr	r2, [pc, #260]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002c7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe fc1c 	bl	80014bc <HAL_GetTick>
 8002c84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe fc18 	bl	80014bc <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e10e      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c9a:	4b39      	ldr	r3, [pc, #228]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca6:	4b36      	ldr	r3, [pc, #216]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002ca8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002caa:	4b37      	ldr	r3, [pc, #220]	@ (8002d88 <HAL_RCC_OscConfig+0x774>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002cb6:	0112      	lsls	r2, r2, #4
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	4931      	ldr	r1, [pc, #196]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	628b      	str	r3, [r1, #40]	@ 0x28
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	025b      	lsls	r3, r3, #9
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	041b      	lsls	r3, r3, #16
 8002cde:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	061b      	lsls	r3, r3, #24
 8002cec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002cf0:	4923      	ldr	r1, [pc, #140]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002cf6:	4b22      	ldr	r3, [pc, #136]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfa:	4a21      	ldr	r2, [pc, #132]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d02:	4b1f      	ldr	r3, [pc, #124]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002d04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d06:	4b21      	ldr	r3, [pc, #132]	@ (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d0e:	00d2      	lsls	r2, r2, #3
 8002d10:	491b      	ldr	r1, [pc, #108]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d16:	4b1a      	ldr	r3, [pc, #104]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1a:	f023 020c 	bic.w	r2, r3, #12
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	4917      	ldr	r1, [pc, #92]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d28:	4b15      	ldr	r3, [pc, #84]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2c:	f023 0202 	bic.w	r2, r3, #2
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d34:	4912      	ldr	r1, [pc, #72]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d3a:	4b11      	ldr	r3, [pc, #68]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3e:	4a10      	ldr	r2, [pc, #64]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d46:	4b0e      	ldr	r3, [pc, #56]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4a:	4a0d      	ldr	r2, [pc, #52]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d52:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d56:	4a0a      	ldr	r2, [pc, #40]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d5e:	4b08      	ldr	r3, [pc, #32]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d62:	4a07      	ldr	r2, [pc, #28]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d6a:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a04      	ldr	r2, [pc, #16]	@ (8002d80 <HAL_RCC_OscConfig+0x76c>)
 8002d70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d76:	f7fe fba1 	bl	80014bc <HAL_GetTick>
 8002d7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d7c:	e011      	b.n	8002da2 <HAL_RCC_OscConfig+0x78e>
 8002d7e:	bf00      	nop
 8002d80:	58024400 	.word	0x58024400
 8002d84:	58024800 	.word	0x58024800
 8002d88:	fffffc0c 	.word	0xfffffc0c
 8002d8c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fe fb94 	bl	80014bc <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e08a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002da2:	4b47      	ldr	r3, [pc, #284]	@ (8002ec0 <HAL_RCC_OscConfig+0x8ac>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x77c>
 8002dae:	e082      	b.n	8002eb6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db0:	4b43      	ldr	r3, [pc, #268]	@ (8002ec0 <HAL_RCC_OscConfig+0x8ac>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a42      	ldr	r2, [pc, #264]	@ (8002ec0 <HAL_RCC_OscConfig+0x8ac>)
 8002db6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fb7e 	bl	80014bc <HAL_GetTick>
 8002dc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fe fb7a 	bl	80014bc <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e070      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dd6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ec0 <HAL_RCC_OscConfig+0x8ac>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x7b0>
 8002de2:	e068      	b.n	8002eb6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002de4:	4b36      	ldr	r3, [pc, #216]	@ (8002ec0 <HAL_RCC_OscConfig+0x8ac>)
 8002de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002dea:	4b35      	ldr	r3, [pc, #212]	@ (8002ec0 <HAL_RCC_OscConfig+0x8ac>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d031      	beq.n	8002e5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f003 0203 	and.w	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d12a      	bne.n	8002e5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d122      	bne.n	8002e5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e20:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d11a      	bne.n	8002e5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	0a5b      	lsrs	r3, r3, #9
 8002e2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e32:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d111      	bne.n	8002e5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	0c1b      	lsrs	r3, r3, #16
 8002e3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d108      	bne.n	8002e5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	0e1b      	lsrs	r3, r3, #24
 8002e4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e02b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e60:	4b17      	ldr	r3, [pc, #92]	@ (8002ec0 <HAL_RCC_OscConfig+0x8ac>)
 8002e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e64:	08db      	lsrs	r3, r3, #3
 8002e66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e6a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d01f      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e76:	4b12      	ldr	r3, [pc, #72]	@ (8002ec0 <HAL_RCC_OscConfig+0x8ac>)
 8002e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7a:	4a11      	ldr	r2, [pc, #68]	@ (8002ec0 <HAL_RCC_OscConfig+0x8ac>)
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e82:	f7fe fb1b 	bl	80014bc <HAL_GetTick>
 8002e86:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e88:	bf00      	nop
 8002e8a:	f7fe fb17 	bl	80014bc <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d0f9      	beq.n	8002e8a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <HAL_RCC_OscConfig+0x8ac>)
 8002e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec4 <HAL_RCC_OscConfig+0x8b0>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ea2:	00d2      	lsls	r2, r2, #3
 8002ea4:	4906      	ldr	r1, [pc, #24]	@ (8002ec0 <HAL_RCC_OscConfig+0x8ac>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002eaa:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <HAL_RCC_OscConfig+0x8ac>)
 8002eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eae:	4a04      	ldr	r2, [pc, #16]	@ (8002ec0 <HAL_RCC_OscConfig+0x8ac>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3730      	adds	r7, #48	@ 0x30
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	58024400 	.word	0x58024400
 8002ec4:	ffff0007 	.word	0xffff0007

08002ec8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e19c      	b.n	8003216 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002edc:	4b8a      	ldr	r3, [pc, #552]	@ (8003108 <HAL_RCC_ClockConfig+0x240>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d910      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b87      	ldr	r3, [pc, #540]	@ (8003108 <HAL_RCC_ClockConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 020f 	bic.w	r2, r3, #15
 8002ef2:	4985      	ldr	r1, [pc, #532]	@ (8003108 <HAL_RCC_ClockConfig+0x240>)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b83      	ldr	r3, [pc, #524]	@ (8003108 <HAL_RCC_ClockConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e184      	b.n	8003216 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d010      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	4b7b      	ldr	r3, [pc, #492]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d908      	bls.n	8002f3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f28:	4b78      	ldr	r3, [pc, #480]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	4975      	ldr	r1, [pc, #468]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d010      	beq.n	8002f68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	4b70      	ldr	r3, [pc, #448]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d908      	bls.n	8002f68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f56:	4b6d      	ldr	r3, [pc, #436]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	496a      	ldr	r1, [pc, #424]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d010      	beq.n	8002f96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	4b64      	ldr	r3, [pc, #400]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d908      	bls.n	8002f96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f84:	4b61      	ldr	r3, [pc, #388]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	495e      	ldr	r1, [pc, #376]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d010      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	4b59      	ldr	r3, [pc, #356]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d908      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fb2:	4b56      	ldr	r3, [pc, #344]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	4953      	ldr	r1, [pc, #332]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d010      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	4b4d      	ldr	r3, [pc, #308]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d908      	bls.n	8002ff2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe0:	4b4a      	ldr	r3, [pc, #296]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	f023 020f 	bic.w	r2, r3, #15
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4947      	ldr	r1, [pc, #284]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d055      	beq.n	80030aa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ffe:	4b43      	ldr	r3, [pc, #268]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	4940      	ldr	r1, [pc, #256]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 800300c:	4313      	orrs	r3, r2
 800300e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d107      	bne.n	8003028 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003018:	4b3c      	ldr	r3, [pc, #240]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d121      	bne.n	8003068 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0f6      	b.n	8003216 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b03      	cmp	r3, #3
 800302e:	d107      	bne.n	8003040 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003030:	4b36      	ldr	r3, [pc, #216]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d115      	bne.n	8003068 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0ea      	b.n	8003216 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d107      	bne.n	8003058 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003048:	4b30      	ldr	r3, [pc, #192]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d109      	bne.n	8003068 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0de      	b.n	8003216 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003058:	4b2c      	ldr	r3, [pc, #176]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0d6      	b.n	8003216 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003068:	4b28      	ldr	r3, [pc, #160]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f023 0207 	bic.w	r2, r3, #7
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4925      	ldr	r1, [pc, #148]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8003076:	4313      	orrs	r3, r2
 8003078:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800307a:	f7fe fa1f 	bl	80014bc <HAL_GetTick>
 800307e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003080:	e00a      	b.n	8003098 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003082:	f7fe fa1b 	bl	80014bc <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003090:	4293      	cmp	r3, r2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e0be      	b.n	8003216 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003098:	4b1c      	ldr	r3, [pc, #112]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d1eb      	bne.n	8003082 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d010      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	4b14      	ldr	r3, [pc, #80]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d208      	bcs.n	80030d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c6:	4b11      	ldr	r3, [pc, #68]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f023 020f 	bic.w	r2, r3, #15
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	490e      	ldr	r1, [pc, #56]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <HAL_RCC_ClockConfig+0x240>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d214      	bcs.n	8003110 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <HAL_RCC_ClockConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 020f 	bic.w	r2, r3, #15
 80030ee:	4906      	ldr	r1, [pc, #24]	@ (8003108 <HAL_RCC_ClockConfig+0x240>)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	4b04      	ldr	r3, [pc, #16]	@ (8003108 <HAL_RCC_ClockConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d005      	beq.n	8003110 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e086      	b.n	8003216 <HAL_RCC_ClockConfig+0x34e>
 8003108:	52002000 	.word	0x52002000
 800310c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d010      	beq.n	800313e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	4b3f      	ldr	r3, [pc, #252]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003128:	429a      	cmp	r2, r3
 800312a:	d208      	bcs.n	800313e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800312c:	4b3c      	ldr	r3, [pc, #240]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	4939      	ldr	r1, [pc, #228]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 800313a:	4313      	orrs	r3, r2
 800313c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d010      	beq.n	800316c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	4b34      	ldr	r3, [pc, #208]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003156:	429a      	cmp	r2, r3
 8003158:	d208      	bcs.n	800316c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800315a:	4b31      	ldr	r3, [pc, #196]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	492e      	ldr	r1, [pc, #184]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 8003168:	4313      	orrs	r3, r2
 800316a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	d010      	beq.n	800319a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699a      	ldr	r2, [r3, #24]
 800317c:	4b28      	ldr	r3, [pc, #160]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003184:	429a      	cmp	r2, r3
 8003186:	d208      	bcs.n	800319a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003188:	4b25      	ldr	r3, [pc, #148]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	4922      	ldr	r1, [pc, #136]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 8003196:	4313      	orrs	r3, r2
 8003198:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d010      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69da      	ldr	r2, [r3, #28]
 80031aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d208      	bcs.n	80031c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	4917      	ldr	r1, [pc, #92]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031c8:	f000 f834 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b14      	ldr	r3, [pc, #80]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	0a1b      	lsrs	r3, r3, #8
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	4912      	ldr	r1, [pc, #72]	@ (8003224 <HAL_RCC_ClockConfig+0x35c>)
 80031da:	5ccb      	ldrb	r3, [r1, r3]
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
 80031e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003224 <HAL_RCC_ClockConfig+0x35c>)
 80031f0:	5cd3      	ldrb	r3, [r2, r3]
 80031f2:	f003 031f 	and.w	r3, r3, #31
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
 80031fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003228 <HAL_RCC_ClockConfig+0x360>)
 80031fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003200:	4a0a      	ldr	r2, [pc, #40]	@ (800322c <HAL_RCC_ClockConfig+0x364>)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003206:	4b0a      	ldr	r3, [pc, #40]	@ (8003230 <HAL_RCC_ClockConfig+0x368>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe f90c 	bl	8001428 <HAL_InitTick>
 8003210:	4603      	mov	r3, r0
 8003212:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003214:	7bfb      	ldrb	r3, [r7, #15]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	58024400 	.word	0x58024400
 8003224:	08007d30 	.word	0x08007d30
 8003228:	24000004 	.word	0x24000004
 800322c:	24000000 	.word	0x24000000
 8003230:	24000008 	.word	0x24000008

08003234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003234:	b480      	push	{r7}
 8003236:	b089      	sub	sp, #36	@ 0x24
 8003238:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800323a:	4bb3      	ldr	r3, [pc, #716]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003242:	2b18      	cmp	r3, #24
 8003244:	f200 8155 	bhi.w	80034f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003248:	a201      	add	r2, pc, #4	@ (adr r2, 8003250 <HAL_RCC_GetSysClockFreq+0x1c>)
 800324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324e:	bf00      	nop
 8003250:	080032b5 	.word	0x080032b5
 8003254:	080034f3 	.word	0x080034f3
 8003258:	080034f3 	.word	0x080034f3
 800325c:	080034f3 	.word	0x080034f3
 8003260:	080034f3 	.word	0x080034f3
 8003264:	080034f3 	.word	0x080034f3
 8003268:	080034f3 	.word	0x080034f3
 800326c:	080034f3 	.word	0x080034f3
 8003270:	080032db 	.word	0x080032db
 8003274:	080034f3 	.word	0x080034f3
 8003278:	080034f3 	.word	0x080034f3
 800327c:	080034f3 	.word	0x080034f3
 8003280:	080034f3 	.word	0x080034f3
 8003284:	080034f3 	.word	0x080034f3
 8003288:	080034f3 	.word	0x080034f3
 800328c:	080034f3 	.word	0x080034f3
 8003290:	080032e1 	.word	0x080032e1
 8003294:	080034f3 	.word	0x080034f3
 8003298:	080034f3 	.word	0x080034f3
 800329c:	080034f3 	.word	0x080034f3
 80032a0:	080034f3 	.word	0x080034f3
 80032a4:	080034f3 	.word	0x080034f3
 80032a8:	080034f3 	.word	0x080034f3
 80032ac:	080034f3 	.word	0x080034f3
 80032b0:	080032e7 	.word	0x080032e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032b4:	4b94      	ldr	r3, [pc, #592]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d009      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032c0:	4b91      	ldr	r3, [pc, #580]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	08db      	lsrs	r3, r3, #3
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	4a90      	ldr	r2, [pc, #576]	@ (800350c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
 80032d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80032d2:	e111      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032d4:	4b8d      	ldr	r3, [pc, #564]	@ (800350c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032d6:	61bb      	str	r3, [r7, #24]
      break;
 80032d8:	e10e      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80032da:	4b8d      	ldr	r3, [pc, #564]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032dc:	61bb      	str	r3, [r7, #24]
      break;
 80032de:	e10b      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80032e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032e2:	61bb      	str	r3, [r7, #24]
      break;
 80032e4:	e108      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032e6:	4b88      	ldr	r3, [pc, #544]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80032f0:	4b85      	ldr	r3, [pc, #532]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032fc:	4b82      	ldr	r3, [pc, #520]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003306:	4b80      	ldr	r3, [pc, #512]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330a:	08db      	lsrs	r3, r3, #3
 800330c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80e1 	beq.w	80034ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b02      	cmp	r3, #2
 800332e:	f000 8083 	beq.w	8003438 <HAL_RCC_GetSysClockFreq+0x204>
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b02      	cmp	r3, #2
 8003336:	f200 80a1 	bhi.w	800347c <HAL_RCC_GetSysClockFreq+0x248>
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_RCC_GetSysClockFreq+0x114>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d056      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003346:	e099      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003348:	4b6f      	ldr	r3, [pc, #444]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	d02d      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003354:	4b6c      	ldr	r3, [pc, #432]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	08db      	lsrs	r3, r3, #3
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	4a6b      	ldr	r2, [pc, #428]	@ (800350c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
 8003364:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	ee07 3a90 	vmov	s15, r3
 800336c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800337e:	4b62      	ldr	r3, [pc, #392]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800338e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003392:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003518 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800339a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800339e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80033ae:	e087      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	ee07 3a90 	vmov	s15, r3
 80033b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800351c <HAL_RCC_GetSysClockFreq+0x2e8>
 80033be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033c2:	4b51      	ldr	r3, [pc, #324]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ca:	ee07 3a90 	vmov	s15, r3
 80033ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003518 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033f2:	e065      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	ee07 3a90 	vmov	s15, r3
 80033fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003520 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003406:	4b40      	ldr	r3, [pc, #256]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003416:	ed97 6a02 	vldr	s12, [r7, #8]
 800341a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003518 <HAL_RCC_GetSysClockFreq+0x2e4>
 800341e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800342a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800342e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003432:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003436:	e043      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003442:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003524 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344a:	4b2f      	ldr	r3, [pc, #188]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345a:	ed97 6a02 	vldr	s12, [r7, #8]
 800345e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003518 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800346e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003476:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800347a:	e021      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003486:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003520 <HAL_RCC_GetSysClockFreq+0x2ec>
 800348a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800348e:	4b1e      	ldr	r3, [pc, #120]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800349e:	ed97 6a02 	vldr	s12, [r7, #8]
 80034a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003518 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80034c0:	4b11      	ldr	r3, [pc, #68]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c4:	0a5b      	lsrs	r3, r3, #9
 80034c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034ca:	3301      	adds	r3, #1
 80034cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	ee07 3a90 	vmov	s15, r3
 80034d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80034dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e4:	ee17 3a90 	vmov	r3, s15
 80034e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80034ea:	e005      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61bb      	str	r3, [r7, #24]
      break;
 80034f0:	e002      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80034f2:	4b07      	ldr	r3, [pc, #28]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034f4:	61bb      	str	r3, [r7, #24]
      break;
 80034f6:	bf00      	nop
  }

  return sysclockfreq;
 80034f8:	69bb      	ldr	r3, [r7, #24]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3724      	adds	r7, #36	@ 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	58024400 	.word	0x58024400
 800350c:	03d09000 	.word	0x03d09000
 8003510:	003d0900 	.word	0x003d0900
 8003514:	007a1200 	.word	0x007a1200
 8003518:	46000000 	.word	0x46000000
 800351c:	4c742400 	.word	0x4c742400
 8003520:	4a742400 	.word	0x4a742400
 8003524:	4af42400 	.word	0x4af42400

08003528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800352e:	f7ff fe81 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 8003532:	4602      	mov	r2, r0
 8003534:	4b10      	ldr	r3, [pc, #64]	@ (8003578 <HAL_RCC_GetHCLKFreq+0x50>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	490f      	ldr	r1, [pc, #60]	@ (800357c <HAL_RCC_GetHCLKFreq+0x54>)
 8003540:	5ccb      	ldrb	r3, [r1, r3]
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	fa22 f303 	lsr.w	r3, r2, r3
 800354a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800354c:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <HAL_RCC_GetHCLKFreq+0x50>)
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	4a09      	ldr	r2, [pc, #36]	@ (800357c <HAL_RCC_GetHCLKFreq+0x54>)
 8003556:	5cd3      	ldrb	r3, [r2, r3]
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	fa22 f303 	lsr.w	r3, r2, r3
 8003562:	4a07      	ldr	r2, [pc, #28]	@ (8003580 <HAL_RCC_GetHCLKFreq+0x58>)
 8003564:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003566:	4a07      	ldr	r2, [pc, #28]	@ (8003584 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800356c:	4b04      	ldr	r3, [pc, #16]	@ (8003580 <HAL_RCC_GetHCLKFreq+0x58>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	58024400 	.word	0x58024400
 800357c:	08007d30 	.word	0x08007d30
 8003580:	24000004 	.word	0x24000004
 8003584:	24000000 	.word	0x24000000

08003588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800358c:	f7ff ffcc 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4904      	ldr	r1, [pc, #16]	@ (80035b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	58024400 	.word	0x58024400
 80035b0:	08007d30 	.word	0x08007d30

080035b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80035b8:	f7ff ffb6 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	0a1b      	lsrs	r3, r3, #8
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	4904      	ldr	r1, [pc, #16]	@ (80035dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	58024400 	.word	0x58024400
 80035dc:	08007d30 	.word	0x08007d30

080035e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e4:	b0ca      	sub	sp, #296	@ 0x128
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035ec:	2300      	movs	r3, #0
 80035ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035f2:	2300      	movs	r3, #0
 80035f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003604:	2500      	movs	r5, #0
 8003606:	ea54 0305 	orrs.w	r3, r4, r5
 800360a:	d049      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800360c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003610:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003612:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003616:	d02f      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003618:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800361c:	d828      	bhi.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800361e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003622:	d01a      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003624:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003628:	d822      	bhi.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800362e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003632:	d007      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003634:	e01c      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003636:	4bb8      	ldr	r3, [pc, #736]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363a:	4ab7      	ldr	r2, [pc, #732]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800363c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003640:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003642:	e01a      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003648:	3308      	adds	r3, #8
 800364a:	2102      	movs	r1, #2
 800364c:	4618      	mov	r0, r3
 800364e:	f001 fc8f 	bl	8004f70 <RCCEx_PLL2_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003658:	e00f      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800365a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365e:	3328      	adds	r3, #40	@ 0x28
 8003660:	2102      	movs	r1, #2
 8003662:	4618      	mov	r0, r3
 8003664:	f001 fd36 	bl	80050d4 <RCCEx_PLL3_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800366e:	e004      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003676:	e000      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800367a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10a      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003682:	4ba5      	ldr	r3, [pc, #660]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003686:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800368a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003690:	4aa1      	ldr	r2, [pc, #644]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003692:	430b      	orrs	r3, r1
 8003694:	6513      	str	r3, [r2, #80]	@ 0x50
 8003696:	e003      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003698:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800369c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80036ac:	f04f 0900 	mov.w	r9, #0
 80036b0:	ea58 0309 	orrs.w	r3, r8, r9
 80036b4:	d047      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80036b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d82a      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80036c0:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080036dd 	.word	0x080036dd
 80036cc:	080036eb 	.word	0x080036eb
 80036d0:	08003701 	.word	0x08003701
 80036d4:	0800371f 	.word	0x0800371f
 80036d8:	0800371f 	.word	0x0800371f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036dc:	4b8e      	ldr	r3, [pc, #568]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e0:	4a8d      	ldr	r2, [pc, #564]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036e8:	e01a      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ee:	3308      	adds	r3, #8
 80036f0:	2100      	movs	r1, #0
 80036f2:	4618      	mov	r0, r3
 80036f4:	f001 fc3c 	bl	8004f70 <RCCEx_PLL2_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036fe:	e00f      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003704:	3328      	adds	r3, #40	@ 0x28
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f001 fce3 	bl	80050d4 <RCCEx_PLL3_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003714:	e004      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800371c:	e000      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800371e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003728:	4b7b      	ldr	r3, [pc, #492]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800372a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800372c:	f023 0107 	bic.w	r1, r3, #7
 8003730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003736:	4a78      	ldr	r2, [pc, #480]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003738:	430b      	orrs	r3, r1
 800373a:	6513      	str	r3, [r2, #80]	@ 0x50
 800373c:	e003      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003742:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003752:	f04f 0b00 	mov.w	fp, #0
 8003756:	ea5a 030b 	orrs.w	r3, sl, fp
 800375a:	d04c      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800375c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003766:	d030      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800376c:	d829      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800376e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003770:	d02d      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003772:	2bc0      	cmp	r3, #192	@ 0xc0
 8003774:	d825      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003776:	2b80      	cmp	r3, #128	@ 0x80
 8003778:	d018      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800377a:	2b80      	cmp	r3, #128	@ 0x80
 800377c:	d821      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003782:	2b40      	cmp	r3, #64	@ 0x40
 8003784:	d007      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003786:	e01c      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003788:	4b63      	ldr	r3, [pc, #396]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800378a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378c:	4a62      	ldr	r2, [pc, #392]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800378e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003792:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003794:	e01c      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800379a:	3308      	adds	r3, #8
 800379c:	2100      	movs	r1, #0
 800379e:	4618      	mov	r0, r3
 80037a0:	f001 fbe6 	bl	8004f70 <RCCEx_PLL2_Config>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037aa:	e011      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b0:	3328      	adds	r3, #40	@ 0x28
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f001 fc8d 	bl	80050d4 <RCCEx_PLL3_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037c0:	e006      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037c8:	e002      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037ca:	bf00      	nop
 80037cc:	e000      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80037d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037dc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80037e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e6:	4a4c      	ldr	r2, [pc, #304]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037e8:	430b      	orrs	r3, r1
 80037ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80037ec:	e003      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003802:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003806:	2300      	movs	r3, #0
 8003808:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800380c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003810:	460b      	mov	r3, r1
 8003812:	4313      	orrs	r3, r2
 8003814:	d053      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800381e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003822:	d035      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003824:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003828:	d82e      	bhi.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800382a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800382e:	d031      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003830:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003834:	d828      	bhi.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003836:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800383a:	d01a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800383c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003840:	d822      	bhi.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003846:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800384a:	d007      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800384c:	e01c      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800384e:	4b32      	ldr	r3, [pc, #200]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003852:	4a31      	ldr	r2, [pc, #196]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003858:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800385a:	e01c      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800385c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003860:	3308      	adds	r3, #8
 8003862:	2100      	movs	r1, #0
 8003864:	4618      	mov	r0, r3
 8003866:	f001 fb83 	bl	8004f70 <RCCEx_PLL2_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003870:	e011      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003876:	3328      	adds	r3, #40	@ 0x28
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f001 fc2a 	bl	80050d4 <RCCEx_PLL3_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003886:	e006      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800388e:	e002      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003890:	bf00      	nop
 8003892:	e000      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003896:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10b      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800389e:	4b1e      	ldr	r3, [pc, #120]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80038a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80038ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038b0:	430b      	orrs	r3, r1
 80038b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80038b4:	e003      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80038ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80038ce:	2300      	movs	r3, #0
 80038d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80038d4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80038d8:	460b      	mov	r3, r1
 80038da:	4313      	orrs	r3, r2
 80038dc:	d056      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80038de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038ea:	d038      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80038ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038f0:	d831      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038f6:	d034      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80038f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038fc:	d82b      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003902:	d01d      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003904:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003908:	d825      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800390a:	2b00      	cmp	r3, #0
 800390c:	d006      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800390e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003912:	d00a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003914:	e01f      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003916:	bf00      	nop
 8003918:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391c:	4ba2      	ldr	r3, [pc, #648]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800391e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003920:	4aa1      	ldr	r2, [pc, #644]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003928:	e01c      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392e:	3308      	adds	r3, #8
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f001 fb1c 	bl	8004f70 <RCCEx_PLL2_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800393e:	e011      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003944:	3328      	adds	r3, #40	@ 0x28
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f001 fbc3 	bl	80050d4 <RCCEx_PLL3_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003954:	e006      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800395c:	e002      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800395e:	bf00      	nop
 8003960:	e000      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10b      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800396c:	4b8e      	ldr	r3, [pc, #568]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003970:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003978:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800397c:	4a8a      	ldr	r2, [pc, #552]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800397e:	430b      	orrs	r3, r1
 8003980:	6593      	str	r3, [r2, #88]	@ 0x58
 8003982:	e003      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003988:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003994:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003998:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800399c:	2300      	movs	r3, #0
 800399e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80039a2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80039a6:	460b      	mov	r3, r1
 80039a8:	4313      	orrs	r3, r2
 80039aa:	d03a      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80039ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b2:	2b30      	cmp	r3, #48	@ 0x30
 80039b4:	d01f      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80039b6:	2b30      	cmp	r3, #48	@ 0x30
 80039b8:	d819      	bhi.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d00c      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d815      	bhi.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d019      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80039c6:	2b10      	cmp	r3, #16
 80039c8:	d111      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ca:	4b77      	ldr	r3, [pc, #476]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ce:	4a76      	ldr	r2, [pc, #472]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039d6:	e011      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039dc:	3308      	adds	r3, #8
 80039de:	2102      	movs	r1, #2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 fac5 	bl	8004f70 <RCCEx_PLL2_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039ec:	e006      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039f4:	e002      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039f6:	bf00      	nop
 80039f8:	e000      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10a      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a04:	4b68      	ldr	r3, [pc, #416]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a08:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a12:	4a65      	ldr	r2, [pc, #404]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a14:	430b      	orrs	r3, r1
 8003a16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a18:	e003      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a2e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003a32:	2300      	movs	r3, #0
 8003a34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003a38:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	d051      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a4c:	d035      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a52:	d82e      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a58:	d031      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003a5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a5e:	d828      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a64:	d01a      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a6a:	d822      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a74:	d007      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a76:	e01c      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a78:	4b4b      	ldr	r3, [pc, #300]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	4a4a      	ldr	r2, [pc, #296]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a84:	e01c      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 fa6e 	bl	8004f70 <RCCEx_PLL2_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a9a:	e011      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa0:	3328      	adds	r3, #40	@ 0x28
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 fb15 	bl	80050d4 <RCCEx_PLL3_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ab0:	e006      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ab8:	e002      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003aba:	bf00      	nop
 8003abc:	e000      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003abe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10a      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ac8:	4b37      	ldr	r3, [pc, #220]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003acc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad6:	4a34      	ldr	r2, [pc, #208]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	6513      	str	r3, [r2, #80]	@ 0x50
 8003adc:	e003      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003af2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003af6:	2300      	movs	r3, #0
 8003af8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003afc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003b00:	460b      	mov	r3, r1
 8003b02:	4313      	orrs	r3, r2
 8003b04:	d056      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b10:	d033      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003b12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b16:	d82c      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b1c:	d02f      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003b1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b22:	d826      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b28:	d02b      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003b2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b2e:	d820      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b34:	d012      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b3a:	d81a      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d022      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b44:	d115      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4a:	3308      	adds	r3, #8
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f001 fa0e 	bl	8004f70 <RCCEx_PLL2_Config>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b5a:	e015      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b60:	3328      	adds	r3, #40	@ 0x28
 8003b62:	2101      	movs	r1, #1
 8003b64:	4618      	mov	r0, r3
 8003b66:	f001 fab5 	bl	80050d4 <RCCEx_PLL3_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b70:	e00a      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b78:	e006      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b7a:	bf00      	nop
 8003b7c:	e004      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b7e:	bf00      	nop
 8003b80:	e002      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b82:	bf00      	nop
 8003b84:	e000      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10d      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b90:	4b05      	ldr	r3, [pc, #20]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b94:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b9e:	4a02      	ldr	r2, [pc, #8]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ba0:	430b      	orrs	r3, r1
 8003ba2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ba4:	e006      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003ba6:	bf00      	nop
 8003ba8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	d055      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003be0:	d033      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003be6:	d82c      	bhi.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bec:	d02f      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf2:	d826      	bhi.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bf4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bf8:	d02b      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003bfa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bfe:	d820      	bhi.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c04:	d012      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c0a:	d81a      	bhi.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d022      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003c10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c14:	d115      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1a:	3308      	adds	r3, #8
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 f9a6 	bl	8004f70 <RCCEx_PLL2_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c2a:	e015      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c30:	3328      	adds	r3, #40	@ 0x28
 8003c32:	2101      	movs	r1, #1
 8003c34:	4618      	mov	r0, r3
 8003c36:	f001 fa4d 	bl	80050d4 <RCCEx_PLL3_Config>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c40:	e00a      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c48:	e006      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c4a:	bf00      	nop
 8003c4c:	e004      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c4e:	bf00      	nop
 8003c50:	e002      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c52:	bf00      	nop
 8003c54:	e000      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10b      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c60:	4ba3      	ldr	r3, [pc, #652]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c64:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c70:	4a9f      	ldr	r2, [pc, #636]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c72:	430b      	orrs	r3, r1
 8003c74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c76:	e003      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c88:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c90:	2300      	movs	r3, #0
 8003c92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003c96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	d037      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003caa:	d00e      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003cac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cb0:	d816      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d018      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003cb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cba:	d111      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cbc:	4b8c      	ldr	r3, [pc, #560]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc0:	4a8b      	ldr	r2, [pc, #556]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cc8:	e00f      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cce:	3308      	adds	r3, #8
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f001 f94c 	bl	8004f70 <RCCEx_PLL2_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cde:	e004      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ce6:	e000      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10a      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cf2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d00:	4a7b      	ldr	r2, [pc, #492]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d02:	430b      	orrs	r3, r1
 8003d04:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d06:	e003      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003d26:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	d039      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d81c      	bhi.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d40 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d7d 	.word	0x08003d7d
 8003d44:	08003d51 	.word	0x08003d51
 8003d48:	08003d5f 	.word	0x08003d5f
 8003d4c:	08003d7d 	.word	0x08003d7d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d50:	4b67      	ldr	r3, [pc, #412]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d54:	4a66      	ldr	r2, [pc, #408]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d5c:	e00f      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d62:	3308      	adds	r3, #8
 8003d64:	2102      	movs	r1, #2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 f902 	bl	8004f70 <RCCEx_PLL2_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d72:	e004      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d7a:	e000      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10a      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d86:	4b5a      	ldr	r3, [pc, #360]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d8a:	f023 0103 	bic.w	r1, r3, #3
 8003d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d94:	4a56      	ldr	r2, [pc, #344]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d96:	430b      	orrs	r3, r1
 8003d98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d9a:	e003      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003db0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003db4:	2300      	movs	r3, #0
 8003db6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003dba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f000 809f 	beq.w	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc6:	4b4b      	ldr	r3, [pc, #300]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a4a      	ldr	r2, [pc, #296]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dd2:	f7fd fb73 	bl	80014bc <HAL_GetTick>
 8003dd6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dda:	e00b      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ddc:	f7fd fb6e 	bl	80014bc <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b64      	cmp	r3, #100	@ 0x64
 8003dea:	d903      	bls.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003df2:	e005      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003df4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0ed      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d179      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e08:	4b39      	ldr	r3, [pc, #228]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e14:	4053      	eors	r3, r2
 8003e16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d015      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e1e:	4b34      	ldr	r3, [pc, #208]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e26:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e2a:	4b31      	ldr	r3, [pc, #196]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2e:	4a30      	ldr	r2, [pc, #192]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e34:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e36:	4b2e      	ldr	r3, [pc, #184]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e40:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e42:	4a2b      	ldr	r2, [pc, #172]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e48:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e56:	d118      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fd fb30 	bl	80014bc <HAL_GetTick>
 8003e5c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e60:	e00d      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f7fd fb2b 	bl	80014bc <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e6c:	1ad2      	subs	r2, r2, r3
 8003e6e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d903      	bls.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003e7c:	e005      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0eb      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d129      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ea2:	d10e      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003ea4:	4b12      	ldr	r3, [pc, #72]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003eb4:	091a      	lsrs	r2, r3, #4
 8003eb6:	4b10      	ldr	r3, [pc, #64]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	4a0d      	ldr	r2, [pc, #52]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	6113      	str	r3, [r2, #16]
 8003ec0:	e005      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ec8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ecc:	6113      	str	r3, [r2, #16]
 8003ece:	4b08      	ldr	r3, [pc, #32]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ed0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ede:	4a04      	ldr	r2, [pc, #16]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ee4:	e00e      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003eee:	e009      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003ef0:	58024400 	.word	0x58024400
 8003ef4:	58024800 	.word	0x58024800
 8003ef8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f002 0301 	and.w	r3, r2, #1
 8003f10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f14:	2300      	movs	r3, #0
 8003f16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f1a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f000 8089 	beq.w	8004038 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f2c:	2b28      	cmp	r3, #40	@ 0x28
 8003f2e:	d86b      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003f30:	a201      	add	r2, pc, #4	@ (adr r2, 8003f38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f36:	bf00      	nop
 8003f38:	08004011 	.word	0x08004011
 8003f3c:	08004009 	.word	0x08004009
 8003f40:	08004009 	.word	0x08004009
 8003f44:	08004009 	.word	0x08004009
 8003f48:	08004009 	.word	0x08004009
 8003f4c:	08004009 	.word	0x08004009
 8003f50:	08004009 	.word	0x08004009
 8003f54:	08004009 	.word	0x08004009
 8003f58:	08003fdd 	.word	0x08003fdd
 8003f5c:	08004009 	.word	0x08004009
 8003f60:	08004009 	.word	0x08004009
 8003f64:	08004009 	.word	0x08004009
 8003f68:	08004009 	.word	0x08004009
 8003f6c:	08004009 	.word	0x08004009
 8003f70:	08004009 	.word	0x08004009
 8003f74:	08004009 	.word	0x08004009
 8003f78:	08003ff3 	.word	0x08003ff3
 8003f7c:	08004009 	.word	0x08004009
 8003f80:	08004009 	.word	0x08004009
 8003f84:	08004009 	.word	0x08004009
 8003f88:	08004009 	.word	0x08004009
 8003f8c:	08004009 	.word	0x08004009
 8003f90:	08004009 	.word	0x08004009
 8003f94:	08004009 	.word	0x08004009
 8003f98:	08004011 	.word	0x08004011
 8003f9c:	08004009 	.word	0x08004009
 8003fa0:	08004009 	.word	0x08004009
 8003fa4:	08004009 	.word	0x08004009
 8003fa8:	08004009 	.word	0x08004009
 8003fac:	08004009 	.word	0x08004009
 8003fb0:	08004009 	.word	0x08004009
 8003fb4:	08004009 	.word	0x08004009
 8003fb8:	08004011 	.word	0x08004011
 8003fbc:	08004009 	.word	0x08004009
 8003fc0:	08004009 	.word	0x08004009
 8003fc4:	08004009 	.word	0x08004009
 8003fc8:	08004009 	.word	0x08004009
 8003fcc:	08004009 	.word	0x08004009
 8003fd0:	08004009 	.word	0x08004009
 8003fd4:	08004009 	.word	0x08004009
 8003fd8:	08004011 	.word	0x08004011
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 ffc3 	bl	8004f70 <RCCEx_PLL2_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ff0:	e00f      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff6:	3328      	adds	r3, #40	@ 0x28
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f001 f86a 	bl	80050d4 <RCCEx_PLL3_Config>
 8004000:	4603      	mov	r3, r0
 8004002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004006:	e004      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800400e:	e000      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10a      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800401a:	4bbf      	ldr	r3, [pc, #764]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800401c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004026:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004028:	4abb      	ldr	r2, [pc, #748]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800402a:	430b      	orrs	r3, r1
 800402c:	6553      	str	r3, [r2, #84]	@ 0x54
 800402e:	e003      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004034:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004040:	f002 0302 	and.w	r3, r2, #2
 8004044:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004048:	2300      	movs	r3, #0
 800404a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800404e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004052:	460b      	mov	r3, r1
 8004054:	4313      	orrs	r3, r2
 8004056:	d041      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800405e:	2b05      	cmp	r3, #5
 8004060:	d824      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004062:	a201      	add	r2, pc, #4	@ (adr r2, 8004068 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	080040b5 	.word	0x080040b5
 800406c:	08004081 	.word	0x08004081
 8004070:	08004097 	.word	0x08004097
 8004074:	080040b5 	.word	0x080040b5
 8004078:	080040b5 	.word	0x080040b5
 800407c:	080040b5 	.word	0x080040b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004084:	3308      	adds	r3, #8
 8004086:	2101      	movs	r1, #1
 8004088:	4618      	mov	r0, r3
 800408a:	f000 ff71 	bl	8004f70 <RCCEx_PLL2_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004094:	e00f      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409a:	3328      	adds	r3, #40	@ 0x28
 800409c:	2101      	movs	r1, #1
 800409e:	4618      	mov	r0, r3
 80040a0:	f001 f818 	bl	80050d4 <RCCEx_PLL3_Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040aa:	e004      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040b2:	e000      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80040b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10a      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040be:	4b96      	ldr	r3, [pc, #600]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c2:	f023 0107 	bic.w	r1, r3, #7
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040cc:	4a92      	ldr	r2, [pc, #584]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040ce:	430b      	orrs	r3, r1
 80040d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80040d2:	e003      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	f002 0304 	and.w	r3, r2, #4
 80040e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040ec:	2300      	movs	r3, #0
 80040ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4313      	orrs	r3, r2
 80040fa:	d044      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80040fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004100:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004104:	2b05      	cmp	r3, #5
 8004106:	d825      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004108:	a201      	add	r2, pc, #4	@ (adr r2, 8004110 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	0800415d 	.word	0x0800415d
 8004114:	08004129 	.word	0x08004129
 8004118:	0800413f 	.word	0x0800413f
 800411c:	0800415d 	.word	0x0800415d
 8004120:	0800415d 	.word	0x0800415d
 8004124:	0800415d 	.word	0x0800415d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412c:	3308      	adds	r3, #8
 800412e:	2101      	movs	r1, #1
 8004130:	4618      	mov	r0, r3
 8004132:	f000 ff1d 	bl	8004f70 <RCCEx_PLL2_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800413c:	e00f      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800413e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004142:	3328      	adds	r3, #40	@ 0x28
 8004144:	2101      	movs	r1, #1
 8004146:	4618      	mov	r0, r3
 8004148:	f000 ffc4 	bl	80050d4 <RCCEx_PLL3_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004152:	e004      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800415a:	e000      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800415c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800415e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10b      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004166:	4b6c      	ldr	r3, [pc, #432]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416a:	f023 0107 	bic.w	r1, r3, #7
 800416e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004176:	4a68      	ldr	r2, [pc, #416]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004178:	430b      	orrs	r3, r1
 800417a:	6593      	str	r3, [r2, #88]	@ 0x58
 800417c:	e003      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004182:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418e:	f002 0320 	and.w	r3, r2, #32
 8004192:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004196:	2300      	movs	r3, #0
 8004198:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800419c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041a0:	460b      	mov	r3, r1
 80041a2:	4313      	orrs	r3, r2
 80041a4:	d055      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041b2:	d033      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80041b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041b8:	d82c      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041be:	d02f      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80041c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c4:	d826      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041ca:	d02b      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80041cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041d0:	d820      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041d6:	d012      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80041d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041dc:	d81a      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d022      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80041e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041e6:	d115      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ec:	3308      	adds	r3, #8
 80041ee:	2100      	movs	r1, #0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 febd 	bl	8004f70 <RCCEx_PLL2_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041fc:	e015      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004202:	3328      	adds	r3, #40	@ 0x28
 8004204:	2102      	movs	r1, #2
 8004206:	4618      	mov	r0, r3
 8004208:	f000 ff64 	bl	80050d4 <RCCEx_PLL3_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004212:	e00a      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800421a:	e006      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800421c:	bf00      	nop
 800421e:	e004      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004220:	bf00      	nop
 8004222:	e002      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004224:	bf00      	nop
 8004226:	e000      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800422a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10b      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004232:	4b39      	ldr	r3, [pc, #228]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004236:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800423a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004242:	4a35      	ldr	r2, [pc, #212]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004244:	430b      	orrs	r3, r1
 8004246:	6553      	str	r3, [r2, #84]	@ 0x54
 8004248:	e003      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800424e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800425e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004262:	2300      	movs	r3, #0
 8004264:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004268:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800426c:	460b      	mov	r3, r1
 800426e:	4313      	orrs	r3, r2
 8004270:	d058      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004276:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800427a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800427e:	d033      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004280:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004284:	d82c      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800428a:	d02f      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800428c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004290:	d826      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004292:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004296:	d02b      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004298:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800429c:	d820      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800429e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042a2:	d012      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80042a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042a8:	d81a      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d022      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80042ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042b2:	d115      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b8:	3308      	adds	r3, #8
 80042ba:	2100      	movs	r1, #0
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fe57 	bl	8004f70 <RCCEx_PLL2_Config>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042c8:	e015      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ce:	3328      	adds	r3, #40	@ 0x28
 80042d0:	2102      	movs	r1, #2
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fefe 	bl	80050d4 <RCCEx_PLL3_Config>
 80042d8:	4603      	mov	r3, r0
 80042da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042de:	e00a      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042e6:	e006      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042e8:	bf00      	nop
 80042ea:	e004      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042ec:	bf00      	nop
 80042ee:	e002      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042f0:	bf00      	nop
 80042f2:	e000      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10e      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042fe:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004302:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800430e:	4a02      	ldr	r2, [pc, #8]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004310:	430b      	orrs	r3, r1
 8004312:	6593      	str	r3, [r2, #88]	@ 0x58
 8004314:	e006      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004316:	bf00      	nop
 8004318:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004320:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004330:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004334:	2300      	movs	r3, #0
 8004336:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800433a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800433e:	460b      	mov	r3, r1
 8004340:	4313      	orrs	r3, r2
 8004342:	d055      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004348:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800434c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004350:	d033      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004352:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004356:	d82c      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800435c:	d02f      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800435e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004362:	d826      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004364:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004368:	d02b      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800436a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800436e:	d820      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004370:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004374:	d012      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004376:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800437a:	d81a      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800437c:	2b00      	cmp	r3, #0
 800437e:	d022      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004380:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004384:	d115      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438a:	3308      	adds	r3, #8
 800438c:	2100      	movs	r1, #0
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fdee 	bl	8004f70 <RCCEx_PLL2_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800439a:	e015      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800439c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a0:	3328      	adds	r3, #40	@ 0x28
 80043a2:	2102      	movs	r1, #2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fe95 	bl	80050d4 <RCCEx_PLL3_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043b0:	e00a      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043b8:	e006      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043ba:	bf00      	nop
 80043bc:	e004      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043be:	bf00      	nop
 80043c0:	e002      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043c2:	bf00      	nop
 80043c4:	e000      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10b      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043d0:	4ba1      	ldr	r3, [pc, #644]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80043d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80043e0:	4a9d      	ldr	r2, [pc, #628]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043e2:	430b      	orrs	r3, r1
 80043e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80043e6:	e003      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f8:	f002 0308 	and.w	r3, r2, #8
 80043fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004400:	2300      	movs	r3, #0
 8004402:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004406:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800440a:	460b      	mov	r3, r1
 800440c:	4313      	orrs	r3, r2
 800440e:	d01e      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004414:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800441c:	d10c      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800441e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004422:	3328      	adds	r3, #40	@ 0x28
 8004424:	2102      	movs	r1, #2
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fe54 	bl	80050d4 <RCCEx_PLL3_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004438:	4b87      	ldr	r3, [pc, #540]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800443a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004448:	4a83      	ldr	r2, [pc, #524]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800444a:	430b      	orrs	r3, r1
 800444c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800444e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	f002 0310 	and.w	r3, r2, #16
 800445a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800445e:	2300      	movs	r3, #0
 8004460:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004464:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004468:	460b      	mov	r3, r1
 800446a:	4313      	orrs	r3, r2
 800446c:	d01e      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800446e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004472:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800447a:	d10c      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800447c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004480:	3328      	adds	r3, #40	@ 0x28
 8004482:	2102      	movs	r1, #2
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fe25 	bl	80050d4 <RCCEx_PLL3_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004496:	4b70      	ldr	r3, [pc, #448]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044a6:	4a6c      	ldr	r2, [pc, #432]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80044b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044bc:	2300      	movs	r3, #0
 80044be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80044c6:	460b      	mov	r3, r1
 80044c8:	4313      	orrs	r3, r2
 80044ca:	d03e      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80044cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044d8:	d022      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80044da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044de:	d81b      	bhi.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e8:	d00b      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80044ea:	e015      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f0:	3308      	adds	r3, #8
 80044f2:	2100      	movs	r1, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fd3b 	bl	8004f70 <RCCEx_PLL2_Config>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004500:	e00f      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004506:	3328      	adds	r3, #40	@ 0x28
 8004508:	2102      	movs	r1, #2
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fde2 	bl	80050d4 <RCCEx_PLL3_Config>
 8004510:	4603      	mov	r3, r0
 8004512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004516:	e004      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800451e:	e000      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10b      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800452a:	4b4b      	ldr	r3, [pc, #300]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800452c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004536:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800453a:	4a47      	ldr	r2, [pc, #284]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800453c:	430b      	orrs	r3, r1
 800453e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004540:	e003      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004546:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004556:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004558:	2300      	movs	r3, #0
 800455a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800455c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004560:	460b      	mov	r3, r1
 8004562:	4313      	orrs	r3, r2
 8004564:	d03b      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004572:	d01f      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004574:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004578:	d818      	bhi.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800457a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800457e:	d003      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004580:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004584:	d007      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004586:	e011      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004588:	4b33      	ldr	r3, [pc, #204]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	4a32      	ldr	r2, [pc, #200]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800458e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004592:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004594:	e00f      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459a:	3328      	adds	r3, #40	@ 0x28
 800459c:	2101      	movs	r1, #1
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fd98 	bl	80050d4 <RCCEx_PLL3_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80045aa:	e004      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045b2:	e000      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80045b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045be:	4b26      	ldr	r3, [pc, #152]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80045c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ce:	4a22      	ldr	r2, [pc, #136]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045d0:	430b      	orrs	r3, r1
 80045d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80045d4:	e003      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80045ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80045ec:	2300      	movs	r3, #0
 80045ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80045f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80045f4:	460b      	mov	r3, r1
 80045f6:	4313      	orrs	r3, r2
 80045f8:	d034      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004608:	d007      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800460a:	e011      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800460c:	4b12      	ldr	r3, [pc, #72]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800460e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004610:	4a11      	ldr	r2, [pc, #68]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004616:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004618:	e00e      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461e:	3308      	adds	r3, #8
 8004620:	2102      	movs	r1, #2
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fca4 	bl	8004f70 <RCCEx_PLL2_Config>
 8004628:	4603      	mov	r3, r0
 800462a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800462e:	e003      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004638:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10d      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004640:	4b05      	ldr	r3, [pc, #20]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004644:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800464e:	4a02      	ldr	r2, [pc, #8]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004650:	430b      	orrs	r3, r1
 8004652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004654:	e006      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004656:	bf00      	nop
 8004658:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004660:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004670:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004672:	2300      	movs	r3, #0
 8004674:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004676:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800467a:	460b      	mov	r3, r1
 800467c:	4313      	orrs	r3, r2
 800467e:	d00c      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004684:	3328      	adds	r3, #40	@ 0x28
 8004686:	2102      	movs	r1, #2
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fd23 	bl	80050d4 <RCCEx_PLL3_Config>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80046a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80046a8:	2300      	movs	r3, #0
 80046aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80046ac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80046b0:	460b      	mov	r3, r1
 80046b2:	4313      	orrs	r3, r2
 80046b4:	d038      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80046b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046c2:	d018      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80046c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046c8:	d811      	bhi.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80046ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046ce:	d014      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80046d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046d4:	d80b      	bhi.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d011      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80046da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046de:	d106      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e0:	4bc3      	ldr	r3, [pc, #780]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	4ac2      	ldr	r2, [pc, #776]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80046ec:	e008      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046f4:	e004      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046f6:	bf00      	nop
 80046f8:	e002      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046fa:	bf00      	nop
 80046fc:	e000      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10b      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004708:	4bb9      	ldr	r3, [pc, #740]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800470a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004714:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004718:	4ab5      	ldr	r2, [pc, #724]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800471a:	430b      	orrs	r3, r1
 800471c:	6553      	str	r3, [r2, #84]	@ 0x54
 800471e:	e003      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004724:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004734:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004736:	2300      	movs	r3, #0
 8004738:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800473a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800473e:	460b      	mov	r3, r1
 8004740:	4313      	orrs	r3, r2
 8004742:	d009      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004744:	4baa      	ldr	r3, [pc, #680]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004748:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800474c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004752:	4aa7      	ldr	r2, [pc, #668]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004754:	430b      	orrs	r3, r1
 8004756:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004764:	653b      	str	r3, [r7, #80]	@ 0x50
 8004766:	2300      	movs	r3, #0
 8004768:	657b      	str	r3, [r7, #84]	@ 0x54
 800476a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800476e:	460b      	mov	r3, r1
 8004770:	4313      	orrs	r3, r2
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004774:	4b9e      	ldr	r3, [pc, #632]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800477c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004780:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004784:	4a9a      	ldr	r2, [pc, #616]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004786:	430b      	orrs	r3, r1
 8004788:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004796:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004798:	2300      	movs	r3, #0
 800479a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800479c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80047a0:	460b      	mov	r3, r1
 80047a2:	4313      	orrs	r3, r2
 80047a4:	d009      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047a6:	4b92      	ldr	r3, [pc, #584]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047aa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80047ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047b4:	4a8e      	ldr	r2, [pc, #568]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047b6:	430b      	orrs	r3, r1
 80047b8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80047ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80047c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80047c8:	2300      	movs	r3, #0
 80047ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80047cc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80047d0:	460b      	mov	r3, r1
 80047d2:	4313      	orrs	r3, r2
 80047d4:	d00e      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047d6:	4b86      	ldr	r3, [pc, #536]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	4a85      	ldr	r2, [pc, #532]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80047e0:	6113      	str	r3, [r2, #16]
 80047e2:	4b83      	ldr	r3, [pc, #524]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047e4:	6919      	ldr	r1, [r3, #16]
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80047ee:	4a80      	ldr	r2, [pc, #512]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047f0:	430b      	orrs	r3, r1
 80047f2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80047f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004800:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004802:	2300      	movs	r3, #0
 8004804:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004806:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800480a:	460b      	mov	r3, r1
 800480c:	4313      	orrs	r3, r2
 800480e:	d009      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004810:	4b77      	ldr	r3, [pc, #476]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004814:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481e:	4a74      	ldr	r2, [pc, #464]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004820:	430b      	orrs	r3, r1
 8004822:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004830:	633b      	str	r3, [r7, #48]	@ 0x30
 8004832:	2300      	movs	r3, #0
 8004834:	637b      	str	r3, [r7, #52]	@ 0x34
 8004836:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800483a:	460b      	mov	r3, r1
 800483c:	4313      	orrs	r3, r2
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004840:	4b6b      	ldr	r3, [pc, #428]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004844:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004850:	4a67      	ldr	r2, [pc, #412]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004852:	430b      	orrs	r3, r1
 8004854:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	2100      	movs	r1, #0
 8004860:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004868:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800486c:	460b      	mov	r3, r1
 800486e:	4313      	orrs	r3, r2
 8004870:	d011      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004876:	3308      	adds	r3, #8
 8004878:	2100      	movs	r1, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fb78 	bl	8004f70 <RCCEx_PLL2_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	2100      	movs	r1, #0
 80048a0:	6239      	str	r1, [r7, #32]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80048ac:	460b      	mov	r3, r1
 80048ae:	4313      	orrs	r3, r2
 80048b0:	d011      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b6:	3308      	adds	r3, #8
 80048b8:	2101      	movs	r1, #1
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fb58 	bl	8004f70 <RCCEx_PLL2_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	2100      	movs	r1, #0
 80048e0:	61b9      	str	r1, [r7, #24]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048ec:	460b      	mov	r3, r1
 80048ee:	4313      	orrs	r3, r2
 80048f0:	d011      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f6:	3308      	adds	r3, #8
 80048f8:	2102      	movs	r1, #2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fb38 	bl	8004f70 <RCCEx_PLL2_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491e:	2100      	movs	r1, #0
 8004920:	6139      	str	r1, [r7, #16]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800492c:	460b      	mov	r3, r1
 800492e:	4313      	orrs	r3, r2
 8004930:	d011      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004936:	3328      	adds	r3, #40	@ 0x28
 8004938:	2100      	movs	r1, #0
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fbca 	bl	80050d4 <RCCEx_PLL3_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004952:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	2100      	movs	r1, #0
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800496c:	460b      	mov	r3, r1
 800496e:	4313      	orrs	r3, r2
 8004970:	d011      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004976:	3328      	adds	r3, #40	@ 0x28
 8004978:	2101      	movs	r1, #1
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fbaa 	bl	80050d4 <RCCEx_PLL3_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	2100      	movs	r1, #0
 80049a0:	6039      	str	r1, [r7, #0]
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	607b      	str	r3, [r7, #4]
 80049a8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80049ac:	460b      	mov	r3, r1
 80049ae:	4313      	orrs	r3, r2
 80049b0:	d011      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b6:	3328      	adds	r3, #40	@ 0x28
 80049b8:	2102      	movs	r1, #2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fb8a 	bl	80050d4 <RCCEx_PLL3_Config>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80049d6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e000      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80049ea:	46bd      	mov	sp, r7
 80049ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049f0:	58024400 	.word	0x58024400

080049f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80049f8:	f7fe fd96 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 80049fc:	4602      	mov	r2, r0
 80049fe:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	091b      	lsrs	r3, r3, #4
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	4904      	ldr	r1, [pc, #16]	@ (8004a1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a0a:	5ccb      	ldrb	r3, [r1, r3]
 8004a0c:	f003 031f 	and.w	r3, r3, #31
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	08007d30 	.word	0x08007d30

08004a20 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b089      	sub	sp, #36	@ 0x24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a28:	4ba1      	ldr	r3, [pc, #644]	@ (8004cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004a32:	4b9f      	ldr	r3, [pc, #636]	@ (8004cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a36:	0b1b      	lsrs	r3, r3, #12
 8004a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a3c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a3e:	4b9c      	ldr	r3, [pc, #624]	@ (8004cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	091b      	lsrs	r3, r3, #4
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004a4a:	4b99      	ldr	r3, [pc, #612]	@ (8004cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4e:	08db      	lsrs	r3, r3, #3
 8004a50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	fb02 f303 	mul.w	r3, r2, r3
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8111 	beq.w	8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	f000 8083 	beq.w	8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	f200 80a1 	bhi.w	8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d056      	beq.n	8004b38 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a8a:	e099      	b.n	8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a8c:	4b88      	ldr	r3, [pc, #544]	@ (8004cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d02d      	beq.n	8004af4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a98:	4b85      	ldr	r3, [pc, #532]	@ (8004cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	08db      	lsrs	r3, r3, #3
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	4a84      	ldr	r2, [pc, #528]	@ (8004cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	ee07 3a90 	vmov	s15, r3
 8004ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8004cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ad6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004af2:	e087      	b.n	8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b06:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b1a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b36:	e065      	b.n	8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b42:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4a:	4b59      	ldr	r3, [pc, #356]	@ (8004cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b5e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b7a:	e043      	b.n	8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b86:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b8e:	4b48      	ldr	r3, [pc, #288]	@ (8004cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ba2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bbe:	e021      	b.n	8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd2:	4b37      	ldr	r3, [pc, #220]	@ (8004cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004be6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c02:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004c04:	4b2a      	ldr	r3, [pc, #168]	@ (8004cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c08:	0a5b      	lsrs	r3, r3, #9
 8004c0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c2a:	ee17 2a90 	vmov	r2, s15
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004c32:	4b1f      	ldr	r3, [pc, #124]	@ (8004cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c36:	0c1b      	lsrs	r3, r3, #16
 8004c38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c3c:	ee07 3a90 	vmov	s15, r3
 8004c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c58:	ee17 2a90 	vmov	r2, s15
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004c60:	4b13      	ldr	r3, [pc, #76]	@ (8004cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c64:	0e1b      	lsrs	r3, r3, #24
 8004c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c86:	ee17 2a90 	vmov	r2, s15
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	609a      	str	r2, [r3, #8]
}
 8004ca2:	bf00      	nop
 8004ca4:	3724      	adds	r7, #36	@ 0x24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	58024400 	.word	0x58024400
 8004cb4:	03d09000 	.word	0x03d09000
 8004cb8:	46000000 	.word	0x46000000
 8004cbc:	4c742400 	.word	0x4c742400
 8004cc0:	4a742400 	.word	0x4a742400
 8004cc4:	4af42400 	.word	0x4af42400

08004cc8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b089      	sub	sp, #36	@ 0x24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cd0:	4ba1      	ldr	r3, [pc, #644]	@ (8004f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004cda:	4b9f      	ldr	r3, [pc, #636]	@ (8004f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cde:	0d1b      	lsrs	r3, r3, #20
 8004ce0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ce4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ce6:	4b9c      	ldr	r3, [pc, #624]	@ (8004f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cea:	0a1b      	lsrs	r3, r3, #8
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004cf2:	4b99      	ldr	r3, [pc, #612]	@ (8004f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf6:	08db      	lsrs	r3, r3, #3
 8004cf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	fb02 f303 	mul.w	r3, r2, r3
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8111 	beq.w	8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	f000 8083 	beq.w	8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	f200 80a1 	bhi.w	8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d056      	beq.n	8004de0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d32:	e099      	b.n	8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d34:	4b88      	ldr	r3, [pc, #544]	@ (8004f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0320 	and.w	r3, r3, #32
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d02d      	beq.n	8004d9c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d40:	4b85      	ldr	r3, [pc, #532]	@ (8004f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	08db      	lsrs	r3, r3, #3
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	4a84      	ldr	r2, [pc, #528]	@ (8004f5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d50:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	ee07 3a90 	vmov	s15, r3
 8004d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d6a:	4b7b      	ldr	r3, [pc, #492]	@ (8004f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d7e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d9a:	e087      	b.n	8004eac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004f64 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dae:	4b6a      	ldr	r3, [pc, #424]	@ (8004f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dc2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dde:	e065      	b.n	8004eac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004df2:	4b59      	ldr	r3, [pc, #356]	@ (8004f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e06:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e22:	e043      	b.n	8004eac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e36:	4b48      	ldr	r3, [pc, #288]	@ (8004f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e4a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e66:	e021      	b.n	8004eac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e72:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e7a:	4b37      	ldr	r3, [pc, #220]	@ (8004f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e8e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eaa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004eac:	4b2a      	ldr	r3, [pc, #168]	@ (8004f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb0:	0a5b      	lsrs	r3, r3, #9
 8004eb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ebe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ec2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ec6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ed2:	ee17 2a90 	vmov	r2, s15
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004eda:	4b1f      	ldr	r3, [pc, #124]	@ (8004f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ede:	0c1b      	lsrs	r3, r3, #16
 8004ee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ee4:	ee07 3a90 	vmov	s15, r3
 8004ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ef0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ef4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f00:	ee17 2a90 	vmov	r2, s15
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004f08:	4b13      	ldr	r3, [pc, #76]	@ (8004f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0c:	0e1b      	lsrs	r3, r3, #24
 8004f0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f22:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f2e:	ee17 2a90 	vmov	r2, s15
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f36:	e008      	b.n	8004f4a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	609a      	str	r2, [r3, #8]
}
 8004f4a:	bf00      	nop
 8004f4c:	3724      	adds	r7, #36	@ 0x24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	58024400 	.word	0x58024400
 8004f5c:	03d09000 	.word	0x03d09000
 8004f60:	46000000 	.word	0x46000000
 8004f64:	4c742400 	.word	0x4c742400
 8004f68:	4a742400 	.word	0x4a742400
 8004f6c:	4af42400 	.word	0x4af42400

08004f70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f7e:	4b53      	ldr	r3, [pc, #332]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8004f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d101      	bne.n	8004f8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e099      	b.n	80050c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f8e:	4b4f      	ldr	r3, [pc, #316]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a4e      	ldr	r2, [pc, #312]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8004f94:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f9a:	f7fc fa8f 	bl	80014bc <HAL_GetTick>
 8004f9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fa0:	e008      	b.n	8004fb4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fa2:	f7fc fa8b 	bl	80014bc <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e086      	b.n	80050c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fb4:	4b45      	ldr	r3, [pc, #276]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1f0      	bne.n	8004fa2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004fc0:	4b42      	ldr	r3, [pc, #264]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	031b      	lsls	r3, r3, #12
 8004fce:	493f      	ldr	r1, [pc, #252]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	025b      	lsls	r3, r3, #9
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	041b      	lsls	r3, r3, #16
 8004ff2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	061b      	lsls	r3, r3, #24
 8005000:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005004:	4931      	ldr	r1, [pc, #196]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8005006:	4313      	orrs	r3, r2
 8005008:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800500a:	4b30      	ldr	r3, [pc, #192]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 800500c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	492d      	ldr	r1, [pc, #180]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8005018:	4313      	orrs	r3, r2
 800501a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800501c:	4b2b      	ldr	r3, [pc, #172]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 800501e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005020:	f023 0220 	bic.w	r2, r3, #32
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	4928      	ldr	r1, [pc, #160]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 800502a:	4313      	orrs	r3, r2
 800502c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800502e:	4b27      	ldr	r3, [pc, #156]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8005030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005032:	4a26      	ldr	r2, [pc, #152]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8005034:	f023 0310 	bic.w	r3, r3, #16
 8005038:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800503a:	4b24      	ldr	r3, [pc, #144]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 800503c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800503e:	4b24      	ldr	r3, [pc, #144]	@ (80050d0 <RCCEx_PLL2_Config+0x160>)
 8005040:	4013      	ands	r3, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	69d2      	ldr	r2, [r2, #28]
 8005046:	00d2      	lsls	r2, r2, #3
 8005048:	4920      	ldr	r1, [pc, #128]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 800504a:	4313      	orrs	r3, r2
 800504c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800504e:	4b1f      	ldr	r3, [pc, #124]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8005050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005052:	4a1e      	ldr	r2, [pc, #120]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8005054:	f043 0310 	orr.w	r3, r3, #16
 8005058:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d106      	bne.n	800506e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005060:	4b1a      	ldr	r3, [pc, #104]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8005062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005064:	4a19      	ldr	r2, [pc, #100]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8005066:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800506a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800506c:	e00f      	b.n	800508e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d106      	bne.n	8005082 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005074:	4b15      	ldr	r3, [pc, #84]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8005076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005078:	4a14      	ldr	r2, [pc, #80]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 800507a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800507e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005080:	e005      	b.n	800508e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005082:	4b12      	ldr	r3, [pc, #72]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8005084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005086:	4a11      	ldr	r2, [pc, #68]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8005088:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800508c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800508e:	4b0f      	ldr	r3, [pc, #60]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a0e      	ldr	r2, [pc, #56]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 8005094:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800509a:	f7fc fa0f 	bl	80014bc <HAL_GetTick>
 800509e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050a0:	e008      	b.n	80050b4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050a2:	f7fc fa0b 	bl	80014bc <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e006      	b.n	80050c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050b4:	4b05      	ldr	r3, [pc, #20]	@ (80050cc <RCCEx_PLL2_Config+0x15c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	58024400 	.word	0x58024400
 80050d0:	ffff0007 	.word	0xffff0007

080050d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050e2:	4b53      	ldr	r3, [pc, #332]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 80050e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	d101      	bne.n	80050f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e099      	b.n	8005226 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80050f2:	4b4f      	ldr	r3, [pc, #316]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a4e      	ldr	r2, [pc, #312]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 80050f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050fe:	f7fc f9dd 	bl	80014bc <HAL_GetTick>
 8005102:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005104:	e008      	b.n	8005118 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005106:	f7fc f9d9 	bl	80014bc <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e086      	b.n	8005226 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005118:	4b45      	ldr	r3, [pc, #276]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1f0      	bne.n	8005106 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005124:	4b42      	ldr	r3, [pc, #264]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 8005126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005128:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	051b      	lsls	r3, r3, #20
 8005132:	493f      	ldr	r1, [pc, #252]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 8005134:	4313      	orrs	r3, r2
 8005136:	628b      	str	r3, [r1, #40]	@ 0x28
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	3b01      	subs	r3, #1
 800513e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	3b01      	subs	r3, #1
 8005148:	025b      	lsls	r3, r3, #9
 800514a:	b29b      	uxth	r3, r3
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	3b01      	subs	r3, #1
 8005154:	041b      	lsls	r3, r3, #16
 8005156:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	3b01      	subs	r3, #1
 8005162:	061b      	lsls	r3, r3, #24
 8005164:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005168:	4931      	ldr	r1, [pc, #196]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 800516a:	4313      	orrs	r3, r2
 800516c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800516e:	4b30      	ldr	r3, [pc, #192]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 8005170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005172:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	492d      	ldr	r1, [pc, #180]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 800517c:	4313      	orrs	r3, r2
 800517e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005180:	4b2b      	ldr	r3, [pc, #172]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 8005182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005184:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	4928      	ldr	r1, [pc, #160]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 800518e:	4313      	orrs	r3, r2
 8005190:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005192:	4b27      	ldr	r3, [pc, #156]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 8005194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005196:	4a26      	ldr	r2, [pc, #152]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 8005198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800519c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800519e:	4b24      	ldr	r3, [pc, #144]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 80051a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051a2:	4b24      	ldr	r3, [pc, #144]	@ (8005234 <RCCEx_PLL3_Config+0x160>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	69d2      	ldr	r2, [r2, #28]
 80051aa:	00d2      	lsls	r2, r2, #3
 80051ac:	4920      	ldr	r1, [pc, #128]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 80051b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 80051b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d106      	bne.n	80051d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80051c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 80051c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c8:	4a19      	ldr	r2, [pc, #100]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 80051ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80051ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051d0:	e00f      	b.n	80051f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d106      	bne.n	80051e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80051d8:	4b15      	ldr	r3, [pc, #84]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 80051da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051dc:	4a14      	ldr	r2, [pc, #80]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 80051de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051e4:	e005      	b.n	80051f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80051e6:	4b12      	ldr	r3, [pc, #72]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 80051e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ea:	4a11      	ldr	r2, [pc, #68]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 80051ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80051f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 80051f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051fe:	f7fc f95d 	bl	80014bc <HAL_GetTick>
 8005202:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005204:	e008      	b.n	8005218 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005206:	f7fc f959 	bl	80014bc <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e006      	b.n	8005226 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005218:	4b05      	ldr	r3, [pc, #20]	@ (8005230 <RCCEx_PLL3_Config+0x15c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0f0      	beq.n	8005206 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005224:	7bfb      	ldrb	r3, [r7, #15]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	58024400 	.word	0x58024400
 8005234:	ffff0007 	.word	0xffff0007

08005238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e049      	b.n	80052de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fb fe82 	bl	8000f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3304      	adds	r3, #4
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f000 fc46 	bl	8005b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b082      	sub	sp, #8
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e049      	b.n	800538c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f841 	bl	8005394 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2202      	movs	r2, #2
 8005316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3304      	adds	r3, #4
 8005322:	4619      	mov	r1, r3
 8005324:	4610      	mov	r0, r2
 8005326:	f000 fbef 	bl	8005b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d109      	bne.n	80053cc <HAL_TIM_PWM_Start+0x24>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	bf14      	ite	ne
 80053c4:	2301      	movne	r3, #1
 80053c6:	2300      	moveq	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	e03c      	b.n	8005446 <HAL_TIM_PWM_Start+0x9e>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d109      	bne.n	80053e6 <HAL_TIM_PWM_Start+0x3e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b01      	cmp	r3, #1
 80053dc:	bf14      	ite	ne
 80053de:	2301      	movne	r3, #1
 80053e0:	2300      	moveq	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	e02f      	b.n	8005446 <HAL_TIM_PWM_Start+0x9e>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d109      	bne.n	8005400 <HAL_TIM_PWM_Start+0x58>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	bf14      	ite	ne
 80053f8:	2301      	movne	r3, #1
 80053fa:	2300      	moveq	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	e022      	b.n	8005446 <HAL_TIM_PWM_Start+0x9e>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b0c      	cmp	r3, #12
 8005404:	d109      	bne.n	800541a <HAL_TIM_PWM_Start+0x72>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b01      	cmp	r3, #1
 8005410:	bf14      	ite	ne
 8005412:	2301      	movne	r3, #1
 8005414:	2300      	moveq	r3, #0
 8005416:	b2db      	uxtb	r3, r3
 8005418:	e015      	b.n	8005446 <HAL_TIM_PWM_Start+0x9e>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b10      	cmp	r3, #16
 800541e:	d109      	bne.n	8005434 <HAL_TIM_PWM_Start+0x8c>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b01      	cmp	r3, #1
 800542a:	bf14      	ite	ne
 800542c:	2301      	movne	r3, #1
 800542e:	2300      	moveq	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	e008      	b.n	8005446 <HAL_TIM_PWM_Start+0x9e>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b01      	cmp	r3, #1
 800543e:	bf14      	ite	ne
 8005440:	2301      	movne	r3, #1
 8005442:	2300      	moveq	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e0a1      	b.n	8005592 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d104      	bne.n	800545e <HAL_TIM_PWM_Start+0xb6>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800545c:	e023      	b.n	80054a6 <HAL_TIM_PWM_Start+0xfe>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b04      	cmp	r3, #4
 8005462:	d104      	bne.n	800546e <HAL_TIM_PWM_Start+0xc6>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800546c:	e01b      	b.n	80054a6 <HAL_TIM_PWM_Start+0xfe>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b08      	cmp	r3, #8
 8005472:	d104      	bne.n	800547e <HAL_TIM_PWM_Start+0xd6>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800547c:	e013      	b.n	80054a6 <HAL_TIM_PWM_Start+0xfe>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b0c      	cmp	r3, #12
 8005482:	d104      	bne.n	800548e <HAL_TIM_PWM_Start+0xe6>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800548c:	e00b      	b.n	80054a6 <HAL_TIM_PWM_Start+0xfe>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b10      	cmp	r3, #16
 8005492:	d104      	bne.n	800549e <HAL_TIM_PWM_Start+0xf6>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800549c:	e003      	b.n	80054a6 <HAL_TIM_PWM_Start+0xfe>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2202      	movs	r2, #2
 80054a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2201      	movs	r2, #1
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 ff44 	bl	800633c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a38      	ldr	r2, [pc, #224]	@ (800559c <HAL_TIM_PWM_Start+0x1f4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d013      	beq.n	80054e6 <HAL_TIM_PWM_Start+0x13e>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a37      	ldr	r2, [pc, #220]	@ (80055a0 <HAL_TIM_PWM_Start+0x1f8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d00e      	beq.n	80054e6 <HAL_TIM_PWM_Start+0x13e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a35      	ldr	r2, [pc, #212]	@ (80055a4 <HAL_TIM_PWM_Start+0x1fc>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d009      	beq.n	80054e6 <HAL_TIM_PWM_Start+0x13e>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a34      	ldr	r2, [pc, #208]	@ (80055a8 <HAL_TIM_PWM_Start+0x200>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d004      	beq.n	80054e6 <HAL_TIM_PWM_Start+0x13e>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a32      	ldr	r2, [pc, #200]	@ (80055ac <HAL_TIM_PWM_Start+0x204>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d101      	bne.n	80054ea <HAL_TIM_PWM_Start+0x142>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <HAL_TIM_PWM_Start+0x144>
 80054ea:	2300      	movs	r3, #0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d007      	beq.n	8005500 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a25      	ldr	r2, [pc, #148]	@ (800559c <HAL_TIM_PWM_Start+0x1f4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d022      	beq.n	8005550 <HAL_TIM_PWM_Start+0x1a8>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005512:	d01d      	beq.n	8005550 <HAL_TIM_PWM_Start+0x1a8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a25      	ldr	r2, [pc, #148]	@ (80055b0 <HAL_TIM_PWM_Start+0x208>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d018      	beq.n	8005550 <HAL_TIM_PWM_Start+0x1a8>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a24      	ldr	r2, [pc, #144]	@ (80055b4 <HAL_TIM_PWM_Start+0x20c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d013      	beq.n	8005550 <HAL_TIM_PWM_Start+0x1a8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a22      	ldr	r2, [pc, #136]	@ (80055b8 <HAL_TIM_PWM_Start+0x210>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00e      	beq.n	8005550 <HAL_TIM_PWM_Start+0x1a8>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1a      	ldr	r2, [pc, #104]	@ (80055a0 <HAL_TIM_PWM_Start+0x1f8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d009      	beq.n	8005550 <HAL_TIM_PWM_Start+0x1a8>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a1e      	ldr	r2, [pc, #120]	@ (80055bc <HAL_TIM_PWM_Start+0x214>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d004      	beq.n	8005550 <HAL_TIM_PWM_Start+0x1a8>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a16      	ldr	r2, [pc, #88]	@ (80055a4 <HAL_TIM_PWM_Start+0x1fc>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d115      	bne.n	800557c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	4b1a      	ldr	r3, [pc, #104]	@ (80055c0 <HAL_TIM_PWM_Start+0x218>)
 8005558:	4013      	ands	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b06      	cmp	r3, #6
 8005560:	d015      	beq.n	800558e <HAL_TIM_PWM_Start+0x1e6>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005568:	d011      	beq.n	800558e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0201 	orr.w	r2, r2, #1
 8005578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557a:	e008      	b.n	800558e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0201 	orr.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	e000      	b.n	8005590 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	40010000 	.word	0x40010000
 80055a0:	40010400 	.word	0x40010400
 80055a4:	40014000 	.word	0x40014000
 80055a8:	40014400 	.word	0x40014400
 80055ac:	40014800 	.word	0x40014800
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800
 80055b8:	40000c00 	.word	0x40000c00
 80055bc:	40001800 	.word	0x40001800
 80055c0:	00010007 	.word	0x00010007

080055c4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2200      	movs	r2, #0
 80055d4:	6839      	ldr	r1, [r7, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 feb0 	bl	800633c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a3e      	ldr	r2, [pc, #248]	@ (80056dc <HAL_TIM_PWM_Stop+0x118>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d013      	beq.n	800560e <HAL_TIM_PWM_Stop+0x4a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a3d      	ldr	r2, [pc, #244]	@ (80056e0 <HAL_TIM_PWM_Stop+0x11c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00e      	beq.n	800560e <HAL_TIM_PWM_Stop+0x4a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a3b      	ldr	r2, [pc, #236]	@ (80056e4 <HAL_TIM_PWM_Stop+0x120>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d009      	beq.n	800560e <HAL_TIM_PWM_Stop+0x4a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a3a      	ldr	r2, [pc, #232]	@ (80056e8 <HAL_TIM_PWM_Stop+0x124>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d004      	beq.n	800560e <HAL_TIM_PWM_Stop+0x4a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a38      	ldr	r2, [pc, #224]	@ (80056ec <HAL_TIM_PWM_Stop+0x128>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d101      	bne.n	8005612 <HAL_TIM_PWM_Stop+0x4e>
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <HAL_TIM_PWM_Stop+0x50>
 8005612:	2300      	movs	r3, #0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d017      	beq.n	8005648 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6a1a      	ldr	r2, [r3, #32]
 800561e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005622:	4013      	ands	r3, r2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10f      	bne.n	8005648 <HAL_TIM_PWM_Stop+0x84>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6a1a      	ldr	r2, [r3, #32]
 800562e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005632:	4013      	ands	r3, r2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d107      	bne.n	8005648 <HAL_TIM_PWM_Stop+0x84>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005646:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6a1a      	ldr	r2, [r3, #32]
 800564e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005652:	4013      	ands	r3, r2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10f      	bne.n	8005678 <HAL_TIM_PWM_Stop+0xb4>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6a1a      	ldr	r2, [r3, #32]
 800565e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005662:	4013      	ands	r3, r2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d107      	bne.n	8005678 <HAL_TIM_PWM_Stop+0xb4>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0201 	bic.w	r2, r2, #1
 8005676:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d104      	bne.n	8005688 <HAL_TIM_PWM_Stop+0xc4>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005686:	e023      	b.n	80056d0 <HAL_TIM_PWM_Stop+0x10c>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b04      	cmp	r3, #4
 800568c:	d104      	bne.n	8005698 <HAL_TIM_PWM_Stop+0xd4>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005696:	e01b      	b.n	80056d0 <HAL_TIM_PWM_Stop+0x10c>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b08      	cmp	r3, #8
 800569c:	d104      	bne.n	80056a8 <HAL_TIM_PWM_Stop+0xe4>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056a6:	e013      	b.n	80056d0 <HAL_TIM_PWM_Stop+0x10c>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2b0c      	cmp	r3, #12
 80056ac:	d104      	bne.n	80056b8 <HAL_TIM_PWM_Stop+0xf4>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056b6:	e00b      	b.n	80056d0 <HAL_TIM_PWM_Stop+0x10c>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2b10      	cmp	r3, #16
 80056bc:	d104      	bne.n	80056c8 <HAL_TIM_PWM_Stop+0x104>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056c6:	e003      	b.n	80056d0 <HAL_TIM_PWM_Stop+0x10c>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40010000 	.word	0x40010000
 80056e0:	40010400 	.word	0x40010400
 80056e4:	40014000 	.word	0x40014000
 80056e8:	40014400 	.word	0x40014400
 80056ec:	40014800 	.word	0x40014800

080056f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800570a:	2302      	movs	r3, #2
 800570c:	e0ff      	b.n	800590e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b14      	cmp	r3, #20
 800571a:	f200 80f0 	bhi.w	80058fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800571e:	a201      	add	r2, pc, #4	@ (adr r2, 8005724 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005724:	08005779 	.word	0x08005779
 8005728:	080058ff 	.word	0x080058ff
 800572c:	080058ff 	.word	0x080058ff
 8005730:	080058ff 	.word	0x080058ff
 8005734:	080057b9 	.word	0x080057b9
 8005738:	080058ff 	.word	0x080058ff
 800573c:	080058ff 	.word	0x080058ff
 8005740:	080058ff 	.word	0x080058ff
 8005744:	080057fb 	.word	0x080057fb
 8005748:	080058ff 	.word	0x080058ff
 800574c:	080058ff 	.word	0x080058ff
 8005750:	080058ff 	.word	0x080058ff
 8005754:	0800583b 	.word	0x0800583b
 8005758:	080058ff 	.word	0x080058ff
 800575c:	080058ff 	.word	0x080058ff
 8005760:	080058ff 	.word	0x080058ff
 8005764:	0800587d 	.word	0x0800587d
 8005768:	080058ff 	.word	0x080058ff
 800576c:	080058ff 	.word	0x080058ff
 8005770:	080058ff 	.word	0x080058ff
 8005774:	080058bd 	.word	0x080058bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fa68 	bl	8005c54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699a      	ldr	r2, [r3, #24]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0208 	orr.w	r2, r2, #8
 8005792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0204 	bic.w	r2, r2, #4
 80057a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6999      	ldr	r1, [r3, #24]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	619a      	str	r2, [r3, #24]
      break;
 80057b6:	e0a5      	b.n	8005904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fad8 	bl	8005d74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6999      	ldr	r1, [r3, #24]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	021a      	lsls	r2, r3, #8
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	619a      	str	r2, [r3, #24]
      break;
 80057f8:	e084      	b.n	8005904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	4618      	mov	r0, r3
 8005802:	f000 fb41 	bl	8005e88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	69da      	ldr	r2, [r3, #28]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f042 0208 	orr.w	r2, r2, #8
 8005814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69da      	ldr	r2, [r3, #28]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0204 	bic.w	r2, r2, #4
 8005824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69d9      	ldr	r1, [r3, #28]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	61da      	str	r2, [r3, #28]
      break;
 8005838:	e064      	b.n	8005904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68b9      	ldr	r1, [r7, #8]
 8005840:	4618      	mov	r0, r3
 8005842:	f000 fba9 	bl	8005f98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69da      	ldr	r2, [r3, #28]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69d9      	ldr	r1, [r3, #28]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	021a      	lsls	r2, r3, #8
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	61da      	str	r2, [r3, #28]
      break;
 800587a:	e043      	b.n	8005904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fbf2 	bl	800606c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0208 	orr.w	r2, r2, #8
 8005896:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0204 	bic.w	r2, r2, #4
 80058a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	691a      	ldr	r2, [r3, #16]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80058ba:	e023      	b.n	8005904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fc36 	bl	8006134 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	021a      	lsls	r2, r3, #8
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80058fc:	e002      	b.n	8005904 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	75fb      	strb	r3, [r7, #23]
      break;
 8005902:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800590c:	7dfb      	ldrb	r3, [r7, #23]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop

08005918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_TIM_ConfigClockSource+0x1c>
 8005930:	2302      	movs	r3, #2
 8005932:	e0dc      	b.n	8005aee <HAL_TIM_ConfigClockSource+0x1d6>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	4b6a      	ldr	r3, [pc, #424]	@ (8005af8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005950:	4013      	ands	r3, r2
 8005952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800595a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a64      	ldr	r2, [pc, #400]	@ (8005afc <HAL_TIM_ConfigClockSource+0x1e4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	f000 80a9 	beq.w	8005ac2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005970:	4a62      	ldr	r2, [pc, #392]	@ (8005afc <HAL_TIM_ConfigClockSource+0x1e4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	f200 80ae 	bhi.w	8005ad4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005978:	4a61      	ldr	r2, [pc, #388]	@ (8005b00 <HAL_TIM_ConfigClockSource+0x1e8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	f000 80a1 	beq.w	8005ac2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005980:	4a5f      	ldr	r2, [pc, #380]	@ (8005b00 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	f200 80a6 	bhi.w	8005ad4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005988:	4a5e      	ldr	r2, [pc, #376]	@ (8005b04 <HAL_TIM_ConfigClockSource+0x1ec>)
 800598a:	4293      	cmp	r3, r2
 800598c:	f000 8099 	beq.w	8005ac2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005990:	4a5c      	ldr	r2, [pc, #368]	@ (8005b04 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005992:	4293      	cmp	r3, r2
 8005994:	f200 809e 	bhi.w	8005ad4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005998:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800599c:	f000 8091 	beq.w	8005ac2 <HAL_TIM_ConfigClockSource+0x1aa>
 80059a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80059a4:	f200 8096 	bhi.w	8005ad4 <HAL_TIM_ConfigClockSource+0x1bc>
 80059a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ac:	f000 8089 	beq.w	8005ac2 <HAL_TIM_ConfigClockSource+0x1aa>
 80059b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059b4:	f200 808e 	bhi.w	8005ad4 <HAL_TIM_ConfigClockSource+0x1bc>
 80059b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059bc:	d03e      	beq.n	8005a3c <HAL_TIM_ConfigClockSource+0x124>
 80059be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059c2:	f200 8087 	bhi.w	8005ad4 <HAL_TIM_ConfigClockSource+0x1bc>
 80059c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ca:	f000 8086 	beq.w	8005ada <HAL_TIM_ConfigClockSource+0x1c2>
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059d2:	d87f      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x1bc>
 80059d4:	2b70      	cmp	r3, #112	@ 0x70
 80059d6:	d01a      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0xf6>
 80059d8:	2b70      	cmp	r3, #112	@ 0x70
 80059da:	d87b      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x1bc>
 80059dc:	2b60      	cmp	r3, #96	@ 0x60
 80059de:	d050      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x16a>
 80059e0:	2b60      	cmp	r3, #96	@ 0x60
 80059e2:	d877      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x1bc>
 80059e4:	2b50      	cmp	r3, #80	@ 0x50
 80059e6:	d03c      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x14a>
 80059e8:	2b50      	cmp	r3, #80	@ 0x50
 80059ea:	d873      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x1bc>
 80059ec:	2b40      	cmp	r3, #64	@ 0x40
 80059ee:	d058      	beq.n	8005aa2 <HAL_TIM_ConfigClockSource+0x18a>
 80059f0:	2b40      	cmp	r3, #64	@ 0x40
 80059f2:	d86f      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x1bc>
 80059f4:	2b30      	cmp	r3, #48	@ 0x30
 80059f6:	d064      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x1aa>
 80059f8:	2b30      	cmp	r3, #48	@ 0x30
 80059fa:	d86b      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x1bc>
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	d060      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d867      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d05c      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	d05a      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005a0c:	e062      	b.n	8005ad4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a1e:	f000 fc6d 	bl	80062fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	609a      	str	r2, [r3, #8]
      break;
 8005a3a:	e04f      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a4c:	f000 fc56 	bl	80062fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a5e:	609a      	str	r2, [r3, #8]
      break;
 8005a60:	e03c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f000 fbc6 	bl	8006200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2150      	movs	r1, #80	@ 0x50
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fc20 	bl	80062c0 <TIM_ITRx_SetConfig>
      break;
 8005a80:	e02c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f000 fbe5 	bl	800625e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2160      	movs	r1, #96	@ 0x60
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fc10 	bl	80062c0 <TIM_ITRx_SetConfig>
      break;
 8005aa0:	e01c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f000 fba6 	bl	8006200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2140      	movs	r1, #64	@ 0x40
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fc00 	bl	80062c0 <TIM_ITRx_SetConfig>
      break;
 8005ac0:	e00c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4619      	mov	r1, r3
 8005acc:	4610      	mov	r0, r2
 8005ace:	f000 fbf7 	bl	80062c0 <TIM_ITRx_SetConfig>
      break;
 8005ad2:	e003      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad8:	e000      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	ffceff88 	.word	0xffceff88
 8005afc:	00100040 	.word	0x00100040
 8005b00:	00100030 	.word	0x00100030
 8005b04:	00100020 	.word	0x00100020

08005b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a46      	ldr	r2, [pc, #280]	@ (8005c34 <TIM_Base_SetConfig+0x12c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d013      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b26:	d00f      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a43      	ldr	r2, [pc, #268]	@ (8005c38 <TIM_Base_SetConfig+0x130>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00b      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a42      	ldr	r2, [pc, #264]	@ (8005c3c <TIM_Base_SetConfig+0x134>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d007      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a41      	ldr	r2, [pc, #260]	@ (8005c40 <TIM_Base_SetConfig+0x138>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a40      	ldr	r2, [pc, #256]	@ (8005c44 <TIM_Base_SetConfig+0x13c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d108      	bne.n	8005b5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a35      	ldr	r2, [pc, #212]	@ (8005c34 <TIM_Base_SetConfig+0x12c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d01f      	beq.n	8005ba2 <TIM_Base_SetConfig+0x9a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b68:	d01b      	beq.n	8005ba2 <TIM_Base_SetConfig+0x9a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a32      	ldr	r2, [pc, #200]	@ (8005c38 <TIM_Base_SetConfig+0x130>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d017      	beq.n	8005ba2 <TIM_Base_SetConfig+0x9a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a31      	ldr	r2, [pc, #196]	@ (8005c3c <TIM_Base_SetConfig+0x134>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d013      	beq.n	8005ba2 <TIM_Base_SetConfig+0x9a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a30      	ldr	r2, [pc, #192]	@ (8005c40 <TIM_Base_SetConfig+0x138>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d00f      	beq.n	8005ba2 <TIM_Base_SetConfig+0x9a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a2f      	ldr	r2, [pc, #188]	@ (8005c44 <TIM_Base_SetConfig+0x13c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00b      	beq.n	8005ba2 <TIM_Base_SetConfig+0x9a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a2e      	ldr	r2, [pc, #184]	@ (8005c48 <TIM_Base_SetConfig+0x140>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d007      	beq.n	8005ba2 <TIM_Base_SetConfig+0x9a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a2d      	ldr	r2, [pc, #180]	@ (8005c4c <TIM_Base_SetConfig+0x144>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d003      	beq.n	8005ba2 <TIM_Base_SetConfig+0x9a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a2c      	ldr	r2, [pc, #176]	@ (8005c50 <TIM_Base_SetConfig+0x148>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d108      	bne.n	8005bb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a16      	ldr	r2, [pc, #88]	@ (8005c34 <TIM_Base_SetConfig+0x12c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00f      	beq.n	8005c00 <TIM_Base_SetConfig+0xf8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a18      	ldr	r2, [pc, #96]	@ (8005c44 <TIM_Base_SetConfig+0x13c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00b      	beq.n	8005c00 <TIM_Base_SetConfig+0xf8>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a17      	ldr	r2, [pc, #92]	@ (8005c48 <TIM_Base_SetConfig+0x140>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d007      	beq.n	8005c00 <TIM_Base_SetConfig+0xf8>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a16      	ldr	r2, [pc, #88]	@ (8005c4c <TIM_Base_SetConfig+0x144>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_Base_SetConfig+0xf8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a15      	ldr	r2, [pc, #84]	@ (8005c50 <TIM_Base_SetConfig+0x148>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d103      	bne.n	8005c08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d105      	bne.n	8005c26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f023 0201 	bic.w	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	611a      	str	r2, [r3, #16]
  }
}
 8005c26:	bf00      	nop
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	40010000 	.word	0x40010000
 8005c38:	40000400 	.word	0x40000400
 8005c3c:	40000800 	.word	0x40000800
 8005c40:	40000c00 	.word	0x40000c00
 8005c44:	40010400 	.word	0x40010400
 8005c48:	40014000 	.word	0x40014000
 8005c4c:	40014400 	.word	0x40014400
 8005c50:	40014800 	.word	0x40014800

08005c54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	f023 0201 	bic.w	r2, r3, #1
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4b37      	ldr	r3, [pc, #220]	@ (8005d5c <TIM_OC1_SetConfig+0x108>)
 8005c80:	4013      	ands	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0303 	bic.w	r3, r3, #3
 8005c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f023 0302 	bic.w	r3, r3, #2
 8005c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a2d      	ldr	r2, [pc, #180]	@ (8005d60 <TIM_OC1_SetConfig+0x10c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00f      	beq.n	8005cd0 <TIM_OC1_SetConfig+0x7c>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a2c      	ldr	r2, [pc, #176]	@ (8005d64 <TIM_OC1_SetConfig+0x110>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d00b      	beq.n	8005cd0 <TIM_OC1_SetConfig+0x7c>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a2b      	ldr	r2, [pc, #172]	@ (8005d68 <TIM_OC1_SetConfig+0x114>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d007      	beq.n	8005cd0 <TIM_OC1_SetConfig+0x7c>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a2a      	ldr	r2, [pc, #168]	@ (8005d6c <TIM_OC1_SetConfig+0x118>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d003      	beq.n	8005cd0 <TIM_OC1_SetConfig+0x7c>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a29      	ldr	r2, [pc, #164]	@ (8005d70 <TIM_OC1_SetConfig+0x11c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d10c      	bne.n	8005cea <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f023 0308 	bic.w	r3, r3, #8
 8005cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f023 0304 	bic.w	r3, r3, #4
 8005ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a1c      	ldr	r2, [pc, #112]	@ (8005d60 <TIM_OC1_SetConfig+0x10c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00f      	beq.n	8005d12 <TIM_OC1_SetConfig+0xbe>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8005d64 <TIM_OC1_SetConfig+0x110>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00b      	beq.n	8005d12 <TIM_OC1_SetConfig+0xbe>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8005d68 <TIM_OC1_SetConfig+0x114>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d007      	beq.n	8005d12 <TIM_OC1_SetConfig+0xbe>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a19      	ldr	r2, [pc, #100]	@ (8005d6c <TIM_OC1_SetConfig+0x118>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d003      	beq.n	8005d12 <TIM_OC1_SetConfig+0xbe>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a18      	ldr	r2, [pc, #96]	@ (8005d70 <TIM_OC1_SetConfig+0x11c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d111      	bne.n	8005d36 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	621a      	str	r2, [r3, #32]
}
 8005d50:	bf00      	nop
 8005d52:	371c      	adds	r7, #28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	fffeff8f 	.word	0xfffeff8f
 8005d60:	40010000 	.word	0x40010000
 8005d64:	40010400 	.word	0x40010400
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	40014400 	.word	0x40014400
 8005d70:	40014800 	.word	0x40014800

08005d74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	f023 0210 	bic.w	r2, r3, #16
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	4b34      	ldr	r3, [pc, #208]	@ (8005e70 <TIM_OC2_SetConfig+0xfc>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	021b      	lsls	r3, r3, #8
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f023 0320 	bic.w	r3, r3, #32
 8005dbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a29      	ldr	r2, [pc, #164]	@ (8005e74 <TIM_OC2_SetConfig+0x100>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <TIM_OC2_SetConfig+0x68>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a28      	ldr	r2, [pc, #160]	@ (8005e78 <TIM_OC2_SetConfig+0x104>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d10d      	bne.n	8005df8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005df6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8005e74 <TIM_OC2_SetConfig+0x100>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00f      	beq.n	8005e20 <TIM_OC2_SetConfig+0xac>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a1d      	ldr	r2, [pc, #116]	@ (8005e78 <TIM_OC2_SetConfig+0x104>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d00b      	beq.n	8005e20 <TIM_OC2_SetConfig+0xac>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005e7c <TIM_OC2_SetConfig+0x108>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d007      	beq.n	8005e20 <TIM_OC2_SetConfig+0xac>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a1b      	ldr	r2, [pc, #108]	@ (8005e80 <TIM_OC2_SetConfig+0x10c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d003      	beq.n	8005e20 <TIM_OC2_SetConfig+0xac>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8005e84 <TIM_OC2_SetConfig+0x110>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d113      	bne.n	8005e48 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	feff8fff 	.word	0xfeff8fff
 8005e74:	40010000 	.word	0x40010000
 8005e78:	40010400 	.word	0x40010400
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800

08005e88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4b33      	ldr	r3, [pc, #204]	@ (8005f80 <TIM_OC3_SetConfig+0xf8>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0303 	bic.w	r3, r3, #3
 8005ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	021b      	lsls	r3, r3, #8
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a28      	ldr	r2, [pc, #160]	@ (8005f84 <TIM_OC3_SetConfig+0xfc>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d003      	beq.n	8005eee <TIM_OC3_SetConfig+0x66>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a27      	ldr	r2, [pc, #156]	@ (8005f88 <TIM_OC3_SetConfig+0x100>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d10d      	bne.n	8005f0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	021b      	lsls	r3, r3, #8
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8005f84 <TIM_OC3_SetConfig+0xfc>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00f      	beq.n	8005f32 <TIM_OC3_SetConfig+0xaa>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a1c      	ldr	r2, [pc, #112]	@ (8005f88 <TIM_OC3_SetConfig+0x100>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00b      	beq.n	8005f32 <TIM_OC3_SetConfig+0xaa>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8005f8c <TIM_OC3_SetConfig+0x104>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d007      	beq.n	8005f32 <TIM_OC3_SetConfig+0xaa>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a1a      	ldr	r2, [pc, #104]	@ (8005f90 <TIM_OC3_SetConfig+0x108>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d003      	beq.n	8005f32 <TIM_OC3_SetConfig+0xaa>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a19      	ldr	r2, [pc, #100]	@ (8005f94 <TIM_OC3_SetConfig+0x10c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d113      	bne.n	8005f5a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	621a      	str	r2, [r3, #32]
}
 8005f74:	bf00      	nop
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	fffeff8f 	.word	0xfffeff8f
 8005f84:	40010000 	.word	0x40010000
 8005f88:	40010400 	.word	0x40010400
 8005f8c:	40014000 	.word	0x40014000
 8005f90:	40014400 	.word	0x40014400
 8005f94:	40014800 	.word	0x40014800

08005f98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4b24      	ldr	r3, [pc, #144]	@ (8006054 <TIM_OC4_SetConfig+0xbc>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	021b      	lsls	r3, r3, #8
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	031b      	lsls	r3, r3, #12
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a19      	ldr	r2, [pc, #100]	@ (8006058 <TIM_OC4_SetConfig+0xc0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00f      	beq.n	8006018 <TIM_OC4_SetConfig+0x80>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a18      	ldr	r2, [pc, #96]	@ (800605c <TIM_OC4_SetConfig+0xc4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00b      	beq.n	8006018 <TIM_OC4_SetConfig+0x80>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a17      	ldr	r2, [pc, #92]	@ (8006060 <TIM_OC4_SetConfig+0xc8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d007      	beq.n	8006018 <TIM_OC4_SetConfig+0x80>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a16      	ldr	r2, [pc, #88]	@ (8006064 <TIM_OC4_SetConfig+0xcc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d003      	beq.n	8006018 <TIM_OC4_SetConfig+0x80>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a15      	ldr	r2, [pc, #84]	@ (8006068 <TIM_OC4_SetConfig+0xd0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d109      	bne.n	800602c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800601e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	019b      	lsls	r3, r3, #6
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	4313      	orrs	r3, r2
 800602a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	621a      	str	r2, [r3, #32]
}
 8006046:	bf00      	nop
 8006048:	371c      	adds	r7, #28
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	feff8fff 	.word	0xfeff8fff
 8006058:	40010000 	.word	0x40010000
 800605c:	40010400 	.word	0x40010400
 8006060:	40014000 	.word	0x40014000
 8006064:	40014400 	.word	0x40014400
 8006068:	40014800 	.word	0x40014800

0800606c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4b21      	ldr	r3, [pc, #132]	@ (800611c <TIM_OC5_SetConfig+0xb0>)
 8006098:	4013      	ands	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80060ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	041b      	lsls	r3, r3, #16
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a18      	ldr	r2, [pc, #96]	@ (8006120 <TIM_OC5_SetConfig+0xb4>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d00f      	beq.n	80060e2 <TIM_OC5_SetConfig+0x76>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a17      	ldr	r2, [pc, #92]	@ (8006124 <TIM_OC5_SetConfig+0xb8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00b      	beq.n	80060e2 <TIM_OC5_SetConfig+0x76>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a16      	ldr	r2, [pc, #88]	@ (8006128 <TIM_OC5_SetConfig+0xbc>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d007      	beq.n	80060e2 <TIM_OC5_SetConfig+0x76>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a15      	ldr	r2, [pc, #84]	@ (800612c <TIM_OC5_SetConfig+0xc0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d003      	beq.n	80060e2 <TIM_OC5_SetConfig+0x76>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a14      	ldr	r2, [pc, #80]	@ (8006130 <TIM_OC5_SetConfig+0xc4>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d109      	bne.n	80060f6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	021b      	lsls	r3, r3, #8
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	621a      	str	r2, [r3, #32]
}
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	fffeff8f 	.word	0xfffeff8f
 8006120:	40010000 	.word	0x40010000
 8006124:	40010400 	.word	0x40010400
 8006128:	40014000 	.word	0x40014000
 800612c:	40014400 	.word	0x40014400
 8006130:	40014800 	.word	0x40014800

08006134 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4b22      	ldr	r3, [pc, #136]	@ (80061e8 <TIM_OC6_SetConfig+0xb4>)
 8006160:	4013      	ands	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	021b      	lsls	r3, r3, #8
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	4313      	orrs	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006176:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	051b      	lsls	r3, r3, #20
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a19      	ldr	r2, [pc, #100]	@ (80061ec <TIM_OC6_SetConfig+0xb8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00f      	beq.n	80061ac <TIM_OC6_SetConfig+0x78>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a18      	ldr	r2, [pc, #96]	@ (80061f0 <TIM_OC6_SetConfig+0xbc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d00b      	beq.n	80061ac <TIM_OC6_SetConfig+0x78>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a17      	ldr	r2, [pc, #92]	@ (80061f4 <TIM_OC6_SetConfig+0xc0>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d007      	beq.n	80061ac <TIM_OC6_SetConfig+0x78>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a16      	ldr	r2, [pc, #88]	@ (80061f8 <TIM_OC6_SetConfig+0xc4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d003      	beq.n	80061ac <TIM_OC6_SetConfig+0x78>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a15      	ldr	r2, [pc, #84]	@ (80061fc <TIM_OC6_SetConfig+0xc8>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d109      	bne.n	80061c0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	029b      	lsls	r3, r3, #10
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	621a      	str	r2, [r3, #32]
}
 80061da:	bf00      	nop
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	feff8fff 	.word	0xfeff8fff
 80061ec:	40010000 	.word	0x40010000
 80061f0:	40010400 	.word	0x40010400
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40014400 	.word	0x40014400
 80061fc:	40014800 	.word	0x40014800

08006200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	f023 0201 	bic.w	r2, r3, #1
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800622a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	011b      	lsls	r3, r3, #4
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	4313      	orrs	r3, r2
 8006234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f023 030a 	bic.w	r3, r3, #10
 800623c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4313      	orrs	r3, r2
 8006244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	621a      	str	r2, [r3, #32]
}
 8006252:	bf00      	nop
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800625e:	b480      	push	{r7}
 8006260:	b087      	sub	sp, #28
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	f023 0210 	bic.w	r2, r3, #16
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006288:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	031b      	lsls	r3, r3, #12
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4313      	orrs	r3, r2
 8006292:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800629a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	011b      	lsls	r3, r3, #4
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	621a      	str	r2, [r3, #32]
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
	...

080062c0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4b09      	ldr	r3, [pc, #36]	@ (80062f8 <TIM_ITRx_SetConfig+0x38>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4313      	orrs	r3, r2
 80062de:	f043 0307 	orr.w	r3, r3, #7
 80062e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	609a      	str	r2, [r3, #8]
}
 80062ea:	bf00      	nop
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	ffcfff8f 	.word	0xffcfff8f

080062fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006316:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	021a      	lsls	r2, r3, #8
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	431a      	orrs	r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4313      	orrs	r3, r2
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	609a      	str	r2, [r3, #8]
}
 8006330:	bf00      	nop
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f003 031f 	and.w	r3, r3, #31
 800634e:	2201      	movs	r2, #1
 8006350:	fa02 f303 	lsl.w	r3, r2, r3
 8006354:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6a1a      	ldr	r2, [r3, #32]
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	43db      	mvns	r3, r3
 800635e:	401a      	ands	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a1a      	ldr	r2, [r3, #32]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f003 031f 	and.w	r3, r3, #31
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	fa01 f303 	lsl.w	r3, r1, r3
 8006374:	431a      	orrs	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	621a      	str	r2, [r3, #32]
}
 800637a:	bf00      	nop
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
	...

08006388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800639c:	2302      	movs	r3, #2
 800639e:	e06d      	b.n	800647c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a30      	ldr	r2, [pc, #192]	@ (8006488 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d004      	beq.n	80063d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a2f      	ldr	r2, [pc, #188]	@ (800648c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d108      	bne.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80063da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a20      	ldr	r2, [pc, #128]	@ (8006488 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d022      	beq.n	8006450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006412:	d01d      	beq.n	8006450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a1d      	ldr	r2, [pc, #116]	@ (8006490 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d018      	beq.n	8006450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1c      	ldr	r2, [pc, #112]	@ (8006494 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d013      	beq.n	8006450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1a      	ldr	r2, [pc, #104]	@ (8006498 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00e      	beq.n	8006450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a15      	ldr	r2, [pc, #84]	@ (800648c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d009      	beq.n	8006450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a16      	ldr	r2, [pc, #88]	@ (800649c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d004      	beq.n	8006450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a15      	ldr	r2, [pc, #84]	@ (80064a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d10c      	bne.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006456:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	4313      	orrs	r3, r2
 8006460:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	40010000 	.word	0x40010000
 800648c:	40010400 	.word	0x40010400
 8006490:	40000400 	.word	0x40000400
 8006494:	40000800 	.word	0x40000800
 8006498:	40000c00 	.word	0x40000c00
 800649c:	40001800 	.word	0x40001800
 80064a0:	40014000 	.word	0x40014000

080064a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e042      	b.n	800653c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d106      	bne.n	80064ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7fa fda9 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2224      	movs	r2, #36	@ 0x24
 80064d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0201 	bic.w	r2, r2, #1
 80064e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d002      	beq.n	80064f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fd90 	bl	8007014 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f825 	bl	8006544 <UART_SetConfig>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d101      	bne.n	8006504 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e01b      	b.n	800653c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006512:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006522:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fe0f 	bl	8007158 <UART_CheckIdleState>
 800653a:	4603      	mov	r3, r0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006548:	b092      	sub	sp, #72	@ 0x48
 800654a:	af00      	add	r7, sp, #0
 800654c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	431a      	orrs	r2, r3
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	431a      	orrs	r2, r3
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	4313      	orrs	r3, r2
 800656a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	4bbe      	ldr	r3, [pc, #760]	@ (800686c <UART_SetConfig+0x328>)
 8006574:	4013      	ands	r3, r2
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	6812      	ldr	r2, [r2, #0]
 800657a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800657c:	430b      	orrs	r3, r1
 800657e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4ab3      	ldr	r2, [pc, #716]	@ (8006870 <UART_SetConfig+0x32c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d004      	beq.n	80065b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065ac:	4313      	orrs	r3, r2
 80065ae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	4baf      	ldr	r3, [pc, #700]	@ (8006874 <UART_SetConfig+0x330>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	6812      	ldr	r2, [r2, #0]
 80065be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065c0:	430b      	orrs	r3, r1
 80065c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ca:	f023 010f 	bic.w	r1, r3, #15
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4aa6      	ldr	r2, [pc, #664]	@ (8006878 <UART_SetConfig+0x334>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d177      	bne.n	80066d4 <UART_SetConfig+0x190>
 80065e4:	4ba5      	ldr	r3, [pc, #660]	@ (800687c <UART_SetConfig+0x338>)
 80065e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065ec:	2b28      	cmp	r3, #40	@ 0x28
 80065ee:	d86d      	bhi.n	80066cc <UART_SetConfig+0x188>
 80065f0:	a201      	add	r2, pc, #4	@ (adr r2, 80065f8 <UART_SetConfig+0xb4>)
 80065f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f6:	bf00      	nop
 80065f8:	0800669d 	.word	0x0800669d
 80065fc:	080066cd 	.word	0x080066cd
 8006600:	080066cd 	.word	0x080066cd
 8006604:	080066cd 	.word	0x080066cd
 8006608:	080066cd 	.word	0x080066cd
 800660c:	080066cd 	.word	0x080066cd
 8006610:	080066cd 	.word	0x080066cd
 8006614:	080066cd 	.word	0x080066cd
 8006618:	080066a5 	.word	0x080066a5
 800661c:	080066cd 	.word	0x080066cd
 8006620:	080066cd 	.word	0x080066cd
 8006624:	080066cd 	.word	0x080066cd
 8006628:	080066cd 	.word	0x080066cd
 800662c:	080066cd 	.word	0x080066cd
 8006630:	080066cd 	.word	0x080066cd
 8006634:	080066cd 	.word	0x080066cd
 8006638:	080066ad 	.word	0x080066ad
 800663c:	080066cd 	.word	0x080066cd
 8006640:	080066cd 	.word	0x080066cd
 8006644:	080066cd 	.word	0x080066cd
 8006648:	080066cd 	.word	0x080066cd
 800664c:	080066cd 	.word	0x080066cd
 8006650:	080066cd 	.word	0x080066cd
 8006654:	080066cd 	.word	0x080066cd
 8006658:	080066b5 	.word	0x080066b5
 800665c:	080066cd 	.word	0x080066cd
 8006660:	080066cd 	.word	0x080066cd
 8006664:	080066cd 	.word	0x080066cd
 8006668:	080066cd 	.word	0x080066cd
 800666c:	080066cd 	.word	0x080066cd
 8006670:	080066cd 	.word	0x080066cd
 8006674:	080066cd 	.word	0x080066cd
 8006678:	080066bd 	.word	0x080066bd
 800667c:	080066cd 	.word	0x080066cd
 8006680:	080066cd 	.word	0x080066cd
 8006684:	080066cd 	.word	0x080066cd
 8006688:	080066cd 	.word	0x080066cd
 800668c:	080066cd 	.word	0x080066cd
 8006690:	080066cd 	.word	0x080066cd
 8006694:	080066cd 	.word	0x080066cd
 8006698:	080066c5 	.word	0x080066c5
 800669c:	2301      	movs	r3, #1
 800669e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066a2:	e222      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066a4:	2304      	movs	r3, #4
 80066a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066aa:	e21e      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066ac:	2308      	movs	r3, #8
 80066ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066b2:	e21a      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066b4:	2310      	movs	r3, #16
 80066b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ba:	e216      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066bc:	2320      	movs	r3, #32
 80066be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c2:	e212      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066c4:	2340      	movs	r3, #64	@ 0x40
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ca:	e20e      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066cc:	2380      	movs	r3, #128	@ 0x80
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d2:	e20a      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a69      	ldr	r2, [pc, #420]	@ (8006880 <UART_SetConfig+0x33c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d130      	bne.n	8006740 <UART_SetConfig+0x1fc>
 80066de:	4b67      	ldr	r3, [pc, #412]	@ (800687c <UART_SetConfig+0x338>)
 80066e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	2b05      	cmp	r3, #5
 80066e8:	d826      	bhi.n	8006738 <UART_SetConfig+0x1f4>
 80066ea:	a201      	add	r2, pc, #4	@ (adr r2, 80066f0 <UART_SetConfig+0x1ac>)
 80066ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f0:	08006709 	.word	0x08006709
 80066f4:	08006711 	.word	0x08006711
 80066f8:	08006719 	.word	0x08006719
 80066fc:	08006721 	.word	0x08006721
 8006700:	08006729 	.word	0x08006729
 8006704:	08006731 	.word	0x08006731
 8006708:	2300      	movs	r3, #0
 800670a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800670e:	e1ec      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006710:	2304      	movs	r3, #4
 8006712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006716:	e1e8      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006718:	2308      	movs	r3, #8
 800671a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800671e:	e1e4      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006720:	2310      	movs	r3, #16
 8006722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006726:	e1e0      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006728:	2320      	movs	r3, #32
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800672e:	e1dc      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006730:	2340      	movs	r3, #64	@ 0x40
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006736:	e1d8      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006738:	2380      	movs	r3, #128	@ 0x80
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673e:	e1d4      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a4f      	ldr	r2, [pc, #316]	@ (8006884 <UART_SetConfig+0x340>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d130      	bne.n	80067ac <UART_SetConfig+0x268>
 800674a:	4b4c      	ldr	r3, [pc, #304]	@ (800687c <UART_SetConfig+0x338>)
 800674c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	2b05      	cmp	r3, #5
 8006754:	d826      	bhi.n	80067a4 <UART_SetConfig+0x260>
 8006756:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <UART_SetConfig+0x218>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	08006775 	.word	0x08006775
 8006760:	0800677d 	.word	0x0800677d
 8006764:	08006785 	.word	0x08006785
 8006768:	0800678d 	.word	0x0800678d
 800676c:	08006795 	.word	0x08006795
 8006770:	0800679d 	.word	0x0800679d
 8006774:	2300      	movs	r3, #0
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677a:	e1b6      	b.n	8006aea <UART_SetConfig+0x5a6>
 800677c:	2304      	movs	r3, #4
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006782:	e1b2      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006784:	2308      	movs	r3, #8
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800678a:	e1ae      	b.n	8006aea <UART_SetConfig+0x5a6>
 800678c:	2310      	movs	r3, #16
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006792:	e1aa      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006794:	2320      	movs	r3, #32
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679a:	e1a6      	b.n	8006aea <UART_SetConfig+0x5a6>
 800679c:	2340      	movs	r3, #64	@ 0x40
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a2:	e1a2      	b.n	8006aea <UART_SetConfig+0x5a6>
 80067a4:	2380      	movs	r3, #128	@ 0x80
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067aa:	e19e      	b.n	8006aea <UART_SetConfig+0x5a6>
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a35      	ldr	r2, [pc, #212]	@ (8006888 <UART_SetConfig+0x344>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d130      	bne.n	8006818 <UART_SetConfig+0x2d4>
 80067b6:	4b31      	ldr	r3, [pc, #196]	@ (800687c <UART_SetConfig+0x338>)
 80067b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	2b05      	cmp	r3, #5
 80067c0:	d826      	bhi.n	8006810 <UART_SetConfig+0x2cc>
 80067c2:	a201      	add	r2, pc, #4	@ (adr r2, 80067c8 <UART_SetConfig+0x284>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067e1 	.word	0x080067e1
 80067cc:	080067e9 	.word	0x080067e9
 80067d0:	080067f1 	.word	0x080067f1
 80067d4:	080067f9 	.word	0x080067f9
 80067d8:	08006801 	.word	0x08006801
 80067dc:	08006809 	.word	0x08006809
 80067e0:	2300      	movs	r3, #0
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067e6:	e180      	b.n	8006aea <UART_SetConfig+0x5a6>
 80067e8:	2304      	movs	r3, #4
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ee:	e17c      	b.n	8006aea <UART_SetConfig+0x5a6>
 80067f0:	2308      	movs	r3, #8
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067f6:	e178      	b.n	8006aea <UART_SetConfig+0x5a6>
 80067f8:	2310      	movs	r3, #16
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067fe:	e174      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006800:	2320      	movs	r3, #32
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006806:	e170      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006808:	2340      	movs	r3, #64	@ 0x40
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680e:	e16c      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006810:	2380      	movs	r3, #128	@ 0x80
 8006812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006816:	e168      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a1b      	ldr	r2, [pc, #108]	@ (800688c <UART_SetConfig+0x348>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d142      	bne.n	80068a8 <UART_SetConfig+0x364>
 8006822:	4b16      	ldr	r3, [pc, #88]	@ (800687c <UART_SetConfig+0x338>)
 8006824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	2b05      	cmp	r3, #5
 800682c:	d838      	bhi.n	80068a0 <UART_SetConfig+0x35c>
 800682e:	a201      	add	r2, pc, #4	@ (adr r2, 8006834 <UART_SetConfig+0x2f0>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	0800684d 	.word	0x0800684d
 8006838:	08006855 	.word	0x08006855
 800683c:	0800685d 	.word	0x0800685d
 8006840:	08006865 	.word	0x08006865
 8006844:	08006891 	.word	0x08006891
 8006848:	08006899 	.word	0x08006899
 800684c:	2300      	movs	r3, #0
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006852:	e14a      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006854:	2304      	movs	r3, #4
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800685a:	e146      	b.n	8006aea <UART_SetConfig+0x5a6>
 800685c:	2308      	movs	r3, #8
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006862:	e142      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006864:	2310      	movs	r3, #16
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686a:	e13e      	b.n	8006aea <UART_SetConfig+0x5a6>
 800686c:	cfff69f3 	.word	0xcfff69f3
 8006870:	58000c00 	.word	0x58000c00
 8006874:	11fff4ff 	.word	0x11fff4ff
 8006878:	40011000 	.word	0x40011000
 800687c:	58024400 	.word	0x58024400
 8006880:	40004400 	.word	0x40004400
 8006884:	40004800 	.word	0x40004800
 8006888:	40004c00 	.word	0x40004c00
 800688c:	40005000 	.word	0x40005000
 8006890:	2320      	movs	r3, #32
 8006892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006896:	e128      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006898:	2340      	movs	r3, #64	@ 0x40
 800689a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800689e:	e124      	b.n	8006aea <UART_SetConfig+0x5a6>
 80068a0:	2380      	movs	r3, #128	@ 0x80
 80068a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068a6:	e120      	b.n	8006aea <UART_SetConfig+0x5a6>
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4acb      	ldr	r2, [pc, #812]	@ (8006bdc <UART_SetConfig+0x698>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d176      	bne.n	80069a0 <UART_SetConfig+0x45c>
 80068b2:	4bcb      	ldr	r3, [pc, #812]	@ (8006be0 <UART_SetConfig+0x69c>)
 80068b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068ba:	2b28      	cmp	r3, #40	@ 0x28
 80068bc:	d86c      	bhi.n	8006998 <UART_SetConfig+0x454>
 80068be:	a201      	add	r2, pc, #4	@ (adr r2, 80068c4 <UART_SetConfig+0x380>)
 80068c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c4:	08006969 	.word	0x08006969
 80068c8:	08006999 	.word	0x08006999
 80068cc:	08006999 	.word	0x08006999
 80068d0:	08006999 	.word	0x08006999
 80068d4:	08006999 	.word	0x08006999
 80068d8:	08006999 	.word	0x08006999
 80068dc:	08006999 	.word	0x08006999
 80068e0:	08006999 	.word	0x08006999
 80068e4:	08006971 	.word	0x08006971
 80068e8:	08006999 	.word	0x08006999
 80068ec:	08006999 	.word	0x08006999
 80068f0:	08006999 	.word	0x08006999
 80068f4:	08006999 	.word	0x08006999
 80068f8:	08006999 	.word	0x08006999
 80068fc:	08006999 	.word	0x08006999
 8006900:	08006999 	.word	0x08006999
 8006904:	08006979 	.word	0x08006979
 8006908:	08006999 	.word	0x08006999
 800690c:	08006999 	.word	0x08006999
 8006910:	08006999 	.word	0x08006999
 8006914:	08006999 	.word	0x08006999
 8006918:	08006999 	.word	0x08006999
 800691c:	08006999 	.word	0x08006999
 8006920:	08006999 	.word	0x08006999
 8006924:	08006981 	.word	0x08006981
 8006928:	08006999 	.word	0x08006999
 800692c:	08006999 	.word	0x08006999
 8006930:	08006999 	.word	0x08006999
 8006934:	08006999 	.word	0x08006999
 8006938:	08006999 	.word	0x08006999
 800693c:	08006999 	.word	0x08006999
 8006940:	08006999 	.word	0x08006999
 8006944:	08006989 	.word	0x08006989
 8006948:	08006999 	.word	0x08006999
 800694c:	08006999 	.word	0x08006999
 8006950:	08006999 	.word	0x08006999
 8006954:	08006999 	.word	0x08006999
 8006958:	08006999 	.word	0x08006999
 800695c:	08006999 	.word	0x08006999
 8006960:	08006999 	.word	0x08006999
 8006964:	08006991 	.word	0x08006991
 8006968:	2301      	movs	r3, #1
 800696a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800696e:	e0bc      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006970:	2304      	movs	r3, #4
 8006972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006976:	e0b8      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006978:	2308      	movs	r3, #8
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800697e:	e0b4      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006980:	2310      	movs	r3, #16
 8006982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006986:	e0b0      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006988:	2320      	movs	r3, #32
 800698a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800698e:	e0ac      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006990:	2340      	movs	r3, #64	@ 0x40
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006996:	e0a8      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006998:	2380      	movs	r3, #128	@ 0x80
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699e:	e0a4      	b.n	8006aea <UART_SetConfig+0x5a6>
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a8f      	ldr	r2, [pc, #572]	@ (8006be4 <UART_SetConfig+0x6a0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d130      	bne.n	8006a0c <UART_SetConfig+0x4c8>
 80069aa:	4b8d      	ldr	r3, [pc, #564]	@ (8006be0 <UART_SetConfig+0x69c>)
 80069ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	2b05      	cmp	r3, #5
 80069b4:	d826      	bhi.n	8006a04 <UART_SetConfig+0x4c0>
 80069b6:	a201      	add	r2, pc, #4	@ (adr r2, 80069bc <UART_SetConfig+0x478>)
 80069b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069bc:	080069d5 	.word	0x080069d5
 80069c0:	080069dd 	.word	0x080069dd
 80069c4:	080069e5 	.word	0x080069e5
 80069c8:	080069ed 	.word	0x080069ed
 80069cc:	080069f5 	.word	0x080069f5
 80069d0:	080069fd 	.word	0x080069fd
 80069d4:	2300      	movs	r3, #0
 80069d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069da:	e086      	b.n	8006aea <UART_SetConfig+0x5a6>
 80069dc:	2304      	movs	r3, #4
 80069de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069e2:	e082      	b.n	8006aea <UART_SetConfig+0x5a6>
 80069e4:	2308      	movs	r3, #8
 80069e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ea:	e07e      	b.n	8006aea <UART_SetConfig+0x5a6>
 80069ec:	2310      	movs	r3, #16
 80069ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069f2:	e07a      	b.n	8006aea <UART_SetConfig+0x5a6>
 80069f4:	2320      	movs	r3, #32
 80069f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069fa:	e076      	b.n	8006aea <UART_SetConfig+0x5a6>
 80069fc:	2340      	movs	r3, #64	@ 0x40
 80069fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a02:	e072      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a04:	2380      	movs	r3, #128	@ 0x80
 8006a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0a:	e06e      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a75      	ldr	r2, [pc, #468]	@ (8006be8 <UART_SetConfig+0x6a4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d130      	bne.n	8006a78 <UART_SetConfig+0x534>
 8006a16:	4b72      	ldr	r3, [pc, #456]	@ (8006be0 <UART_SetConfig+0x69c>)
 8006a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	2b05      	cmp	r3, #5
 8006a20:	d826      	bhi.n	8006a70 <UART_SetConfig+0x52c>
 8006a22:	a201      	add	r2, pc, #4	@ (adr r2, 8006a28 <UART_SetConfig+0x4e4>)
 8006a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a28:	08006a41 	.word	0x08006a41
 8006a2c:	08006a49 	.word	0x08006a49
 8006a30:	08006a51 	.word	0x08006a51
 8006a34:	08006a59 	.word	0x08006a59
 8006a38:	08006a61 	.word	0x08006a61
 8006a3c:	08006a69 	.word	0x08006a69
 8006a40:	2300      	movs	r3, #0
 8006a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a46:	e050      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a48:	2304      	movs	r3, #4
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a4e:	e04c      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a50:	2308      	movs	r3, #8
 8006a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a56:	e048      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a58:	2310      	movs	r3, #16
 8006a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a5e:	e044      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a60:	2320      	movs	r3, #32
 8006a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a66:	e040      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a68:	2340      	movs	r3, #64	@ 0x40
 8006a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6e:	e03c      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a70:	2380      	movs	r3, #128	@ 0x80
 8006a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a76:	e038      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a5b      	ldr	r2, [pc, #364]	@ (8006bec <UART_SetConfig+0x6a8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d130      	bne.n	8006ae4 <UART_SetConfig+0x5a0>
 8006a82:	4b57      	ldr	r3, [pc, #348]	@ (8006be0 <UART_SetConfig+0x69c>)
 8006a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	2b05      	cmp	r3, #5
 8006a8c:	d826      	bhi.n	8006adc <UART_SetConfig+0x598>
 8006a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a94 <UART_SetConfig+0x550>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006aad 	.word	0x08006aad
 8006a98:	08006ab5 	.word	0x08006ab5
 8006a9c:	08006abd 	.word	0x08006abd
 8006aa0:	08006ac5 	.word	0x08006ac5
 8006aa4:	08006acd 	.word	0x08006acd
 8006aa8:	08006ad5 	.word	0x08006ad5
 8006aac:	2302      	movs	r3, #2
 8006aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ab2:	e01a      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006ab4:	2304      	movs	r3, #4
 8006ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aba:	e016      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006abc:	2308      	movs	r3, #8
 8006abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ac2:	e012      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aca:	e00e      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006acc:	2320      	movs	r3, #32
 8006ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ad2:	e00a      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006ad4:	2340      	movs	r3, #64	@ 0x40
 8006ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ada:	e006      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006adc:	2380      	movs	r3, #128	@ 0x80
 8006ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ae2:	e002      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006ae4:	2380      	movs	r3, #128	@ 0x80
 8006ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a3f      	ldr	r2, [pc, #252]	@ (8006bec <UART_SetConfig+0x6a8>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	f040 80f8 	bne.w	8006ce6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006af6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	dc46      	bgt.n	8006b8c <UART_SetConfig+0x648>
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	f2c0 8082 	blt.w	8006c08 <UART_SetConfig+0x6c4>
 8006b04:	3b02      	subs	r3, #2
 8006b06:	2b1e      	cmp	r3, #30
 8006b08:	d87e      	bhi.n	8006c08 <UART_SetConfig+0x6c4>
 8006b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b10 <UART_SetConfig+0x5cc>)
 8006b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b10:	08006b93 	.word	0x08006b93
 8006b14:	08006c09 	.word	0x08006c09
 8006b18:	08006b9b 	.word	0x08006b9b
 8006b1c:	08006c09 	.word	0x08006c09
 8006b20:	08006c09 	.word	0x08006c09
 8006b24:	08006c09 	.word	0x08006c09
 8006b28:	08006bab 	.word	0x08006bab
 8006b2c:	08006c09 	.word	0x08006c09
 8006b30:	08006c09 	.word	0x08006c09
 8006b34:	08006c09 	.word	0x08006c09
 8006b38:	08006c09 	.word	0x08006c09
 8006b3c:	08006c09 	.word	0x08006c09
 8006b40:	08006c09 	.word	0x08006c09
 8006b44:	08006c09 	.word	0x08006c09
 8006b48:	08006bbb 	.word	0x08006bbb
 8006b4c:	08006c09 	.word	0x08006c09
 8006b50:	08006c09 	.word	0x08006c09
 8006b54:	08006c09 	.word	0x08006c09
 8006b58:	08006c09 	.word	0x08006c09
 8006b5c:	08006c09 	.word	0x08006c09
 8006b60:	08006c09 	.word	0x08006c09
 8006b64:	08006c09 	.word	0x08006c09
 8006b68:	08006c09 	.word	0x08006c09
 8006b6c:	08006c09 	.word	0x08006c09
 8006b70:	08006c09 	.word	0x08006c09
 8006b74:	08006c09 	.word	0x08006c09
 8006b78:	08006c09 	.word	0x08006c09
 8006b7c:	08006c09 	.word	0x08006c09
 8006b80:	08006c09 	.word	0x08006c09
 8006b84:	08006c09 	.word	0x08006c09
 8006b88:	08006bfb 	.word	0x08006bfb
 8006b8c:	2b40      	cmp	r3, #64	@ 0x40
 8006b8e:	d037      	beq.n	8006c00 <UART_SetConfig+0x6bc>
 8006b90:	e03a      	b.n	8006c08 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006b92:	f7fd ff2f 	bl	80049f4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006b96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b98:	e03c      	b.n	8006c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fd ff3e 	bl	8004a20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ba8:	e034      	b.n	8006c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006baa:	f107 0318 	add.w	r3, r7, #24
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fe f88a 	bl	8004cc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bb8:	e02c      	b.n	8006c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bba:	4b09      	ldr	r3, [pc, #36]	@ (8006be0 <UART_SetConfig+0x69c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d016      	beq.n	8006bf4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bc6:	4b06      	ldr	r3, [pc, #24]	@ (8006be0 <UART_SetConfig+0x69c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	08db      	lsrs	r3, r3, #3
 8006bcc:	f003 0303 	and.w	r3, r3, #3
 8006bd0:	4a07      	ldr	r2, [pc, #28]	@ (8006bf0 <UART_SetConfig+0x6ac>)
 8006bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bd8:	e01c      	b.n	8006c14 <UART_SetConfig+0x6d0>
 8006bda:	bf00      	nop
 8006bdc:	40011400 	.word	0x40011400
 8006be0:	58024400 	.word	0x58024400
 8006be4:	40007800 	.word	0x40007800
 8006be8:	40007c00 	.word	0x40007c00
 8006bec:	58000c00 	.word	0x58000c00
 8006bf0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006bf4:	4b9d      	ldr	r3, [pc, #628]	@ (8006e6c <UART_SetConfig+0x928>)
 8006bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bf8:	e00c      	b.n	8006c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006bfa:	4b9d      	ldr	r3, [pc, #628]	@ (8006e70 <UART_SetConfig+0x92c>)
 8006bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bfe:	e009      	b.n	8006c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c06:	e005      	b.n	8006c14 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006c12:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 81de 	beq.w	8006fd8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c20:	4a94      	ldr	r2, [pc, #592]	@ (8006e74 <UART_SetConfig+0x930>)
 8006c22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c26:	461a      	mov	r2, r3
 8006c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c2e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	4613      	mov	r3, r2
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	4413      	add	r3, r2
 8006c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d305      	bcc.n	8006c4c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d903      	bls.n	8006c54 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006c52:	e1c1      	b.n	8006fd8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c56:	2200      	movs	r2, #0
 8006c58:	60bb      	str	r3, [r7, #8]
 8006c5a:	60fa      	str	r2, [r7, #12]
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c60:	4a84      	ldr	r2, [pc, #528]	@ (8006e74 <UART_SetConfig+0x930>)
 8006c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	2200      	movs	r2, #0
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	607a      	str	r2, [r7, #4]
 8006c6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c76:	f7f9 fb2f 	bl	80002d8 <__aeabi_uldivmod>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4610      	mov	r0, r2
 8006c80:	4619      	mov	r1, r3
 8006c82:	f04f 0200 	mov.w	r2, #0
 8006c86:	f04f 0300 	mov.w	r3, #0
 8006c8a:	020b      	lsls	r3, r1, #8
 8006c8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c90:	0202      	lsls	r2, r0, #8
 8006c92:	6979      	ldr	r1, [r7, #20]
 8006c94:	6849      	ldr	r1, [r1, #4]
 8006c96:	0849      	lsrs	r1, r1, #1
 8006c98:	2000      	movs	r0, #0
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	4605      	mov	r5, r0
 8006c9e:	eb12 0804 	adds.w	r8, r2, r4
 8006ca2:	eb43 0905 	adc.w	r9, r3, r5
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	469a      	mov	sl, r3
 8006cae:	4693      	mov	fp, r2
 8006cb0:	4652      	mov	r2, sl
 8006cb2:	465b      	mov	r3, fp
 8006cb4:	4640      	mov	r0, r8
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	f7f9 fb0e 	bl	80002d8 <__aeabi_uldivmod>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cca:	d308      	bcc.n	8006cde <UART_SetConfig+0x79a>
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cd2:	d204      	bcs.n	8006cde <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006cda:	60da      	str	r2, [r3, #12]
 8006cdc:	e17c      	b.n	8006fd8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006ce4:	e178      	b.n	8006fd8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cee:	f040 80c5 	bne.w	8006e7c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006cf2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006cf6:	2b20      	cmp	r3, #32
 8006cf8:	dc48      	bgt.n	8006d8c <UART_SetConfig+0x848>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	db7b      	blt.n	8006df6 <UART_SetConfig+0x8b2>
 8006cfe:	2b20      	cmp	r3, #32
 8006d00:	d879      	bhi.n	8006df6 <UART_SetConfig+0x8b2>
 8006d02:	a201      	add	r2, pc, #4	@ (adr r2, 8006d08 <UART_SetConfig+0x7c4>)
 8006d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d08:	08006d93 	.word	0x08006d93
 8006d0c:	08006d9b 	.word	0x08006d9b
 8006d10:	08006df7 	.word	0x08006df7
 8006d14:	08006df7 	.word	0x08006df7
 8006d18:	08006da3 	.word	0x08006da3
 8006d1c:	08006df7 	.word	0x08006df7
 8006d20:	08006df7 	.word	0x08006df7
 8006d24:	08006df7 	.word	0x08006df7
 8006d28:	08006db3 	.word	0x08006db3
 8006d2c:	08006df7 	.word	0x08006df7
 8006d30:	08006df7 	.word	0x08006df7
 8006d34:	08006df7 	.word	0x08006df7
 8006d38:	08006df7 	.word	0x08006df7
 8006d3c:	08006df7 	.word	0x08006df7
 8006d40:	08006df7 	.word	0x08006df7
 8006d44:	08006df7 	.word	0x08006df7
 8006d48:	08006dc3 	.word	0x08006dc3
 8006d4c:	08006df7 	.word	0x08006df7
 8006d50:	08006df7 	.word	0x08006df7
 8006d54:	08006df7 	.word	0x08006df7
 8006d58:	08006df7 	.word	0x08006df7
 8006d5c:	08006df7 	.word	0x08006df7
 8006d60:	08006df7 	.word	0x08006df7
 8006d64:	08006df7 	.word	0x08006df7
 8006d68:	08006df7 	.word	0x08006df7
 8006d6c:	08006df7 	.word	0x08006df7
 8006d70:	08006df7 	.word	0x08006df7
 8006d74:	08006df7 	.word	0x08006df7
 8006d78:	08006df7 	.word	0x08006df7
 8006d7c:	08006df7 	.word	0x08006df7
 8006d80:	08006df7 	.word	0x08006df7
 8006d84:	08006df7 	.word	0x08006df7
 8006d88:	08006de9 	.word	0x08006de9
 8006d8c:	2b40      	cmp	r3, #64	@ 0x40
 8006d8e:	d02e      	beq.n	8006dee <UART_SetConfig+0x8aa>
 8006d90:	e031      	b.n	8006df6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d92:	f7fc fbf9 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8006d96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d98:	e033      	b.n	8006e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d9a:	f7fc fc0b 	bl	80035b4 <HAL_RCC_GetPCLK2Freq>
 8006d9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006da0:	e02f      	b.n	8006e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fd fe3a 	bl	8004a20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006db0:	e027      	b.n	8006e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006db2:	f107 0318 	add.w	r3, r7, #24
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fd ff86 	bl	8004cc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dc0:	e01f      	b.n	8006e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dc2:	4b2d      	ldr	r3, [pc, #180]	@ (8006e78 <UART_SetConfig+0x934>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0320 	and.w	r3, r3, #32
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d009      	beq.n	8006de2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006dce:	4b2a      	ldr	r3, [pc, #168]	@ (8006e78 <UART_SetConfig+0x934>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	08db      	lsrs	r3, r3, #3
 8006dd4:	f003 0303 	and.w	r3, r3, #3
 8006dd8:	4a24      	ldr	r2, [pc, #144]	@ (8006e6c <UART_SetConfig+0x928>)
 8006dda:	fa22 f303 	lsr.w	r3, r2, r3
 8006dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006de0:	e00f      	b.n	8006e02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006de2:	4b22      	ldr	r3, [pc, #136]	@ (8006e6c <UART_SetConfig+0x928>)
 8006de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de6:	e00c      	b.n	8006e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006de8:	4b21      	ldr	r3, [pc, #132]	@ (8006e70 <UART_SetConfig+0x92c>)
 8006dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dec:	e009      	b.n	8006e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006df4:	e005      	b.n	8006e02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006e00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 80e7 	beq.w	8006fd8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0e:	4a19      	ldr	r2, [pc, #100]	@ (8006e74 <UART_SetConfig+0x930>)
 8006e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e14:	461a      	mov	r2, r3
 8006e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e1c:	005a      	lsls	r2, r3, #1
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	085b      	lsrs	r3, r3, #1
 8006e24:	441a      	add	r2, r3
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e32:	2b0f      	cmp	r3, #15
 8006e34:	d916      	bls.n	8006e64 <UART_SetConfig+0x920>
 8006e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e3c:	d212      	bcs.n	8006e64 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f023 030f 	bic.w	r3, r3, #15
 8006e46:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	f003 0307 	and.w	r3, r3, #7
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e56:	4313      	orrs	r3, r2
 8006e58:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006e60:	60da      	str	r2, [r3, #12]
 8006e62:	e0b9      	b.n	8006fd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006e6a:	e0b5      	b.n	8006fd8 <UART_SetConfig+0xa94>
 8006e6c:	03d09000 	.word	0x03d09000
 8006e70:	003d0900 	.word	0x003d0900
 8006e74:	08007d40 	.word	0x08007d40
 8006e78:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006e80:	2b20      	cmp	r3, #32
 8006e82:	dc49      	bgt.n	8006f18 <UART_SetConfig+0x9d4>
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	db7c      	blt.n	8006f82 <UART_SetConfig+0xa3e>
 8006e88:	2b20      	cmp	r3, #32
 8006e8a:	d87a      	bhi.n	8006f82 <UART_SetConfig+0xa3e>
 8006e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e94 <UART_SetConfig+0x950>)
 8006e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e92:	bf00      	nop
 8006e94:	08006f1f 	.word	0x08006f1f
 8006e98:	08006f27 	.word	0x08006f27
 8006e9c:	08006f83 	.word	0x08006f83
 8006ea0:	08006f83 	.word	0x08006f83
 8006ea4:	08006f2f 	.word	0x08006f2f
 8006ea8:	08006f83 	.word	0x08006f83
 8006eac:	08006f83 	.word	0x08006f83
 8006eb0:	08006f83 	.word	0x08006f83
 8006eb4:	08006f3f 	.word	0x08006f3f
 8006eb8:	08006f83 	.word	0x08006f83
 8006ebc:	08006f83 	.word	0x08006f83
 8006ec0:	08006f83 	.word	0x08006f83
 8006ec4:	08006f83 	.word	0x08006f83
 8006ec8:	08006f83 	.word	0x08006f83
 8006ecc:	08006f83 	.word	0x08006f83
 8006ed0:	08006f83 	.word	0x08006f83
 8006ed4:	08006f4f 	.word	0x08006f4f
 8006ed8:	08006f83 	.word	0x08006f83
 8006edc:	08006f83 	.word	0x08006f83
 8006ee0:	08006f83 	.word	0x08006f83
 8006ee4:	08006f83 	.word	0x08006f83
 8006ee8:	08006f83 	.word	0x08006f83
 8006eec:	08006f83 	.word	0x08006f83
 8006ef0:	08006f83 	.word	0x08006f83
 8006ef4:	08006f83 	.word	0x08006f83
 8006ef8:	08006f83 	.word	0x08006f83
 8006efc:	08006f83 	.word	0x08006f83
 8006f00:	08006f83 	.word	0x08006f83
 8006f04:	08006f83 	.word	0x08006f83
 8006f08:	08006f83 	.word	0x08006f83
 8006f0c:	08006f83 	.word	0x08006f83
 8006f10:	08006f83 	.word	0x08006f83
 8006f14:	08006f75 	.word	0x08006f75
 8006f18:	2b40      	cmp	r3, #64	@ 0x40
 8006f1a:	d02e      	beq.n	8006f7a <UART_SetConfig+0xa36>
 8006f1c:	e031      	b.n	8006f82 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f1e:	f7fc fb33 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8006f22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006f24:	e033      	b.n	8006f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f26:	f7fc fb45 	bl	80035b4 <HAL_RCC_GetPCLK2Freq>
 8006f2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006f2c:	e02f      	b.n	8006f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fd fd74 	bl	8004a20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f3c:	e027      	b.n	8006f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f3e:	f107 0318 	add.w	r3, r7, #24
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fd fec0 	bl	8004cc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f4c:	e01f      	b.n	8006f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8007004 <UART_SetConfig+0xac0>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d009      	beq.n	8006f6e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8007004 <UART_SetConfig+0xac0>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	08db      	lsrs	r3, r3, #3
 8006f60:	f003 0303 	and.w	r3, r3, #3
 8006f64:	4a28      	ldr	r2, [pc, #160]	@ (8007008 <UART_SetConfig+0xac4>)
 8006f66:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f6c:	e00f      	b.n	8006f8e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006f6e:	4b26      	ldr	r3, [pc, #152]	@ (8007008 <UART_SetConfig+0xac4>)
 8006f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f72:	e00c      	b.n	8006f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f74:	4b25      	ldr	r3, [pc, #148]	@ (800700c <UART_SetConfig+0xac8>)
 8006f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f78:	e009      	b.n	8006f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f80:	e005      	b.n	8006f8e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006f8c:	bf00      	nop
    }

    if (pclk != 0U)
 8006f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d021      	beq.n	8006fd8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f98:	4a1d      	ldr	r2, [pc, #116]	@ (8007010 <UART_SetConfig+0xacc>)
 8006f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	085b      	lsrs	r3, r3, #1
 8006fac:	441a      	add	r2, r3
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fba:	2b0f      	cmp	r3, #15
 8006fbc:	d909      	bls.n	8006fd2 <UART_SetConfig+0xa8e>
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fc4:	d205      	bcs.n	8006fd2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60da      	str	r2, [r3, #12]
 8006fd0:	e002      	b.n	8006fd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2200      	movs	r2, #0
 8006fec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006ff4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3748      	adds	r7, #72	@ 0x48
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007002:	bf00      	nop
 8007004:	58024400 	.word	0x58024400
 8007008:	03d09000 	.word	0x03d09000
 800700c:	003d0900 	.word	0x003d0900
 8007010:	08007d40 	.word	0x08007d40

08007014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007020:	f003 0308 	and.w	r3, r3, #8
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007064:	f003 0302 	and.w	r3, r3, #2
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00a      	beq.n	8007082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007086:	f003 0304 	and.w	r3, r3, #4
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a8:	f003 0310 	and.w	r3, r3, #16
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00a      	beq.n	80070c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d01a      	beq.n	800712a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800710e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007112:	d10a      	bne.n	800712a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00a      	beq.n	800714c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	605a      	str	r2, [r3, #4]
  }
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b098      	sub	sp, #96	@ 0x60
 800715c:	af02      	add	r7, sp, #8
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007168:	f7fa f9a8 	bl	80014bc <HAL_GetTick>
 800716c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0308 	and.w	r3, r3, #8
 8007178:	2b08      	cmp	r3, #8
 800717a:	d12f      	bne.n	80071dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800717c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007184:	2200      	movs	r2, #0
 8007186:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f88e 	bl	80072ac <UART_WaitOnFlagUntilTimeout>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d022      	beq.n	80071dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800719e:	e853 3f00 	ldrex	r3, [r3]
 80071a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80071b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071bc:	e841 2300 	strex	r3, r2, [r1]
 80071c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e6      	bne.n	8007196 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2220      	movs	r2, #32
 80071cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e063      	b.n	80072a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0304 	and.w	r3, r3, #4
 80071e6:	2b04      	cmp	r3, #4
 80071e8:	d149      	bne.n	800727e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071f2:	2200      	movs	r2, #0
 80071f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f857 	bl	80072ac <UART_WaitOnFlagUntilTimeout>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d03c      	beq.n	800727e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	e853 3f00 	ldrex	r3, [r3]
 8007210:	623b      	str	r3, [r7, #32]
   return(result);
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007218:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007222:	633b      	str	r3, [r7, #48]	@ 0x30
 8007224:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007226:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007228:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800722a:	e841 2300 	strex	r3, r2, [r1]
 800722e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1e6      	bne.n	8007204 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3308      	adds	r3, #8
 800723c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	e853 3f00 	ldrex	r3, [r3]
 8007244:	60fb      	str	r3, [r7, #12]
   return(result);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f023 0301 	bic.w	r3, r3, #1
 800724c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3308      	adds	r3, #8
 8007254:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007256:	61fa      	str	r2, [r7, #28]
 8007258:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	69b9      	ldr	r1, [r7, #24]
 800725c:	69fa      	ldr	r2, [r7, #28]
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	617b      	str	r3, [r7, #20]
   return(result);
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e5      	bne.n	8007236 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2220      	movs	r2, #32
 800726e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e012      	b.n	80072a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2220      	movs	r2, #32
 8007282:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2220      	movs	r2, #32
 800728a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3758      	adds	r7, #88	@ 0x58
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	4613      	mov	r3, r2
 80072ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072bc:	e04f      	b.n	800735e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c4:	d04b      	beq.n	800735e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c6:	f7fa f8f9 	bl	80014bc <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d302      	bcc.n	80072dc <UART_WaitOnFlagUntilTimeout+0x30>
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e04e      	b.n	800737e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d037      	beq.n	800735e <UART_WaitOnFlagUntilTimeout+0xb2>
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	2b80      	cmp	r3, #128	@ 0x80
 80072f2:	d034      	beq.n	800735e <UART_WaitOnFlagUntilTimeout+0xb2>
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2b40      	cmp	r3, #64	@ 0x40
 80072f8:	d031      	beq.n	800735e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	f003 0308 	and.w	r3, r3, #8
 8007304:	2b08      	cmp	r3, #8
 8007306:	d110      	bne.n	800732a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2208      	movs	r2, #8
 800730e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 f839 	bl	8007388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2208      	movs	r2, #8
 800731a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e029      	b.n	800737e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007334:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007338:	d111      	bne.n	800735e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007342:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 f81f 	bl	8007388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2220      	movs	r2, #32
 800734e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e00f      	b.n	800737e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69da      	ldr	r2, [r3, #28]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4013      	ands	r3, r2
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	429a      	cmp	r2, r3
 800736c:	bf0c      	ite	eq
 800736e:	2301      	moveq	r3, #1
 8007370:	2300      	movne	r3, #0
 8007372:	b2db      	uxtb	r3, r3
 8007374:	461a      	mov	r2, r3
 8007376:	79fb      	ldrb	r3, [r7, #7]
 8007378:	429a      	cmp	r2, r3
 800737a:	d0a0      	beq.n	80072be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007388:	b480      	push	{r7}
 800738a:	b095      	sub	sp, #84	@ 0x54
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800739e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80073b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e6      	bne.n	8007390 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3308      	adds	r3, #8
 80073c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80073d2:	69fa      	ldr	r2, [r7, #28]
 80073d4:	4b1e      	ldr	r3, [pc, #120]	@ (8007450 <UART_EndRxTransfer+0xc8>)
 80073d6:	4013      	ands	r3, r2
 80073d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3308      	adds	r3, #8
 80073e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e5      	bne.n	80073c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d118      	bne.n	8007430 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	e853 3f00 	ldrex	r3, [r3]
 800740a:	60bb      	str	r3, [r7, #8]
   return(result);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f023 0310 	bic.w	r3, r3, #16
 8007412:	647b      	str	r3, [r7, #68]	@ 0x44
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800741c:	61bb      	str	r3, [r7, #24]
 800741e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007420:	6979      	ldr	r1, [r7, #20]
 8007422:	69ba      	ldr	r2, [r7, #24]
 8007424:	e841 2300 	strex	r3, r2, [r1]
 8007428:	613b      	str	r3, [r7, #16]
   return(result);
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1e6      	bne.n	80073fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2220      	movs	r2, #32
 8007434:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007444:	bf00      	nop
 8007446:	3754      	adds	r7, #84	@ 0x54
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	effffffe 	.word	0xeffffffe

08007454 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007462:	2b01      	cmp	r3, #1
 8007464:	d101      	bne.n	800746a <HAL_UARTEx_DisableFifoMode+0x16>
 8007466:	2302      	movs	r3, #2
 8007468:	e027      	b.n	80074ba <HAL_UARTEx_DisableFifoMode+0x66>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2224      	movs	r2, #36	@ 0x24
 8007476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0201 	bic.w	r2, r2, #1
 8007490:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007498:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d101      	bne.n	80074de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074da:	2302      	movs	r3, #2
 80074dc:	e02d      	b.n	800753a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2224      	movs	r2, #36	@ 0x24
 80074ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 0201 	bic.w	r2, r2, #1
 8007504:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f850 	bl	80075c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2220      	movs	r2, #32
 800752c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007552:	2b01      	cmp	r3, #1
 8007554:	d101      	bne.n	800755a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007556:	2302      	movs	r3, #2
 8007558:	e02d      	b.n	80075b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2224      	movs	r2, #36	@ 0x24
 8007566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 0201 	bic.w	r2, r2, #1
 8007580:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f812 	bl	80075c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
	...

080075c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d108      	bne.n	80075e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075e0:	e031      	b.n	8007646 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075e2:	2310      	movs	r3, #16
 80075e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075e6:	2310      	movs	r3, #16
 80075e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	0e5b      	lsrs	r3, r3, #25
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	0f5b      	lsrs	r3, r3, #29
 8007602:	b2db      	uxtb	r3, r3
 8007604:	f003 0307 	and.w	r3, r3, #7
 8007608:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800760a:	7bbb      	ldrb	r3, [r7, #14]
 800760c:	7b3a      	ldrb	r2, [r7, #12]
 800760e:	4911      	ldr	r1, [pc, #68]	@ (8007654 <UARTEx_SetNbDataToProcess+0x94>)
 8007610:	5c8a      	ldrb	r2, [r1, r2]
 8007612:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007616:	7b3a      	ldrb	r2, [r7, #12]
 8007618:	490f      	ldr	r1, [pc, #60]	@ (8007658 <UARTEx_SetNbDataToProcess+0x98>)
 800761a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800761c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007620:	b29a      	uxth	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	7b7a      	ldrb	r2, [r7, #13]
 800762c:	4909      	ldr	r1, [pc, #36]	@ (8007654 <UARTEx_SetNbDataToProcess+0x94>)
 800762e:	5c8a      	ldrb	r2, [r1, r2]
 8007630:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007634:	7b7a      	ldrb	r2, [r7, #13]
 8007636:	4908      	ldr	r1, [pc, #32]	@ (8007658 <UARTEx_SetNbDataToProcess+0x98>)
 8007638:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800763a:	fb93 f3f2 	sdiv	r3, r3, r2
 800763e:	b29a      	uxth	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007646:	bf00      	nop
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	08007d58 	.word	0x08007d58
 8007658:	08007d60 	.word	0x08007d60

0800765c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800765c:	b084      	sub	sp, #16
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	f107 001c 	add.w	r0, r7, #28
 800766a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800766e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007672:	2b01      	cmp	r3, #1
 8007674:	d121      	bne.n	80076ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	4b2c      	ldr	r3, [pc, #176]	@ (8007738 <USB_CoreInit+0xdc>)
 8007688:	4013      	ands	r3, r2
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800769a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d105      	bne.n	80076ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 faaa 	bl	8007c08 <USB_CoreReset>
 80076b4:	4603      	mov	r3, r0
 80076b6:	73fb      	strb	r3, [r7, #15]
 80076b8:	e01b      	b.n	80076f2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fa9e 	bl	8007c08 <USB_CoreReset>
 80076cc:	4603      	mov	r3, r0
 80076ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d106      	bne.n	80076e6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80076e4:	e005      	b.n	80076f2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076f2:	7fbb      	ldrb	r3, [r7, #30]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d116      	bne.n	8007726 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007706:	4b0d      	ldr	r3, [pc, #52]	@ (800773c <USB_CoreInit+0xe0>)
 8007708:	4313      	orrs	r3, r2
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f043 0206 	orr.w	r2, r3, #6
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f043 0220 	orr.w	r2, r3, #32
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007726:	7bfb      	ldrb	r3, [r7, #15]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007732:	b004      	add	sp, #16
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	ffbdffbf 	.word	0xffbdffbf
 800773c:	03ee0000 	.word	0x03ee0000

08007740 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f023 0201 	bic.w	r2, r3, #1
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	460b      	mov	r3, r1
 800776c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800777e:	78fb      	ldrb	r3, [r7, #3]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d115      	bne.n	80077b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007790:	200a      	movs	r0, #10
 8007792:	f7f9 fe9f 	bl	80014d4 <HAL_Delay>
      ms += 10U;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	330a      	adds	r3, #10
 800779a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fa25 	bl	8007bec <USB_GetMode>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d01e      	beq.n	80077e6 <USB_SetCurrentMode+0x84>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80077ac:	d9f0      	bls.n	8007790 <USB_SetCurrentMode+0x2e>
 80077ae:	e01a      	b.n	80077e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d115      	bne.n	80077e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80077c2:	200a      	movs	r0, #10
 80077c4:	f7f9 fe86 	bl	80014d4 <HAL_Delay>
      ms += 10U;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	330a      	adds	r3, #10
 80077cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fa0c 	bl	8007bec <USB_GetMode>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d005      	beq.n	80077e6 <USB_SetCurrentMode+0x84>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80077de:	d9f0      	bls.n	80077c2 <USB_SetCurrentMode+0x60>
 80077e0:	e001      	b.n	80077e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e005      	b.n	80077f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2bc8      	cmp	r3, #200	@ 0xc8
 80077ea:	d101      	bne.n	80077f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e000      	b.n	80077f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077fc:	b084      	sub	sp, #16
 80077fe:	b580      	push	{r7, lr}
 8007800:	b086      	sub	sp, #24
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800780a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007816:	2300      	movs	r3, #0
 8007818:	613b      	str	r3, [r7, #16]
 800781a:	e009      	b.n	8007830 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	3340      	adds	r3, #64	@ 0x40
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	2200      	movs	r2, #0
 8007828:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	3301      	adds	r3, #1
 800782e:	613b      	str	r3, [r7, #16]
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	2b0e      	cmp	r3, #14
 8007834:	d9f2      	bls.n	800781c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007836:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800783a:	2b00      	cmp	r3, #0
 800783c:	d11c      	bne.n	8007878 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800784c:	f043 0302 	orr.w	r3, r3, #2
 8007850:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007856:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	601a      	str	r2, [r3, #0]
 8007876:	e005      	b.n	8007884 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800788a:	461a      	mov	r2, r3
 800788c:	2300      	movs	r3, #0
 800788e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007890:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007894:	2b01      	cmp	r3, #1
 8007896:	d10d      	bne.n	80078b4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800789c:	2b00      	cmp	r3, #0
 800789e:	d104      	bne.n	80078aa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078a0:	2100      	movs	r1, #0
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f968 	bl	8007b78 <USB_SetDevSpeed>
 80078a8:	e008      	b.n	80078bc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078aa:	2101      	movs	r1, #1
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f963 	bl	8007b78 <USB_SetDevSpeed>
 80078b2:	e003      	b.n	80078bc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078b4:	2103      	movs	r1, #3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f95e 	bl	8007b78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078bc:	2110      	movs	r1, #16
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f8fa 	bl	8007ab8 <USB_FlushTxFifo>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f924 	bl	8007b1c <USB_FlushRxFifo>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e4:	461a      	mov	r2, r3
 80078e6:	2300      	movs	r3, #0
 80078e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078f0:	461a      	mov	r2, r3
 80078f2:	2300      	movs	r3, #0
 80078f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078fc:	461a      	mov	r2, r3
 80078fe:	2300      	movs	r3, #0
 8007900:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007902:	2300      	movs	r3, #0
 8007904:	613b      	str	r3, [r7, #16]
 8007906:	e043      	b.n	8007990 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800791a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800791e:	d118      	bne.n	8007952 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10a      	bne.n	800793c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007932:	461a      	mov	r2, r3
 8007934:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007938:	6013      	str	r3, [r2, #0]
 800793a:	e013      	b.n	8007964 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4413      	add	r3, r2
 8007944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007948:	461a      	mov	r2, r3
 800794a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	e008      	b.n	8007964 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800795e:	461a      	mov	r2, r3
 8007960:	2300      	movs	r3, #0
 8007962:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007970:	461a      	mov	r2, r3
 8007972:	2300      	movs	r3, #0
 8007974:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007982:	461a      	mov	r2, r3
 8007984:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007988:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	3301      	adds	r3, #1
 800798e:	613b      	str	r3, [r7, #16]
 8007990:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007994:	461a      	mov	r2, r3
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	4293      	cmp	r3, r2
 800799a:	d3b5      	bcc.n	8007908 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800799c:	2300      	movs	r3, #0
 800799e:	613b      	str	r3, [r7, #16]
 80079a0:	e043      	b.n	8007a2a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079b8:	d118      	bne.n	80079ec <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10a      	bne.n	80079d6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079cc:	461a      	mov	r2, r3
 80079ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	e013      	b.n	80079fe <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e2:	461a      	mov	r2, r3
 80079e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	e008      	b.n	80079fe <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f8:	461a      	mov	r2, r3
 80079fa:	2300      	movs	r3, #0
 80079fc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	3301      	adds	r3, #1
 8007a28:	613b      	str	r3, [r7, #16]
 8007a2a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a2e:	461a      	mov	r2, r3
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d3b5      	bcc.n	80079a2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a48:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007a56:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d105      	bne.n	8007a6c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	f043 0210 	orr.w	r2, r3, #16
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	699a      	ldr	r2, [r3, #24]
 8007a70:	4b0f      	ldr	r3, [pc, #60]	@ (8007ab0 <USB_DevInit+0x2b4>)
 8007a72:	4313      	orrs	r3, r2
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a78:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	f043 0208 	orr.w	r2, r3, #8
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d105      	bne.n	8007aa0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	699a      	ldr	r2, [r3, #24]
 8007a98:	4b06      	ldr	r3, [pc, #24]	@ (8007ab4 <USB_DevInit+0x2b8>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007aac:	b004      	add	sp, #16
 8007aae:	4770      	bx	lr
 8007ab0:	803c3800 	.word	0x803c3800
 8007ab4:	40000004 	.word	0x40000004

08007ab8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ad2:	d901      	bls.n	8007ad8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e01b      	b.n	8007b10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	daf2      	bge.n	8007ac6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	019b      	lsls	r3, r3, #6
 8007ae8:	f043 0220 	orr.w	r2, r3, #32
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	3301      	adds	r3, #1
 8007af4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007afc:	d901      	bls.n	8007b02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e006      	b.n	8007b10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	2b20      	cmp	r3, #32
 8007b0c:	d0f0      	beq.n	8007af0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b34:	d901      	bls.n	8007b3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e018      	b.n	8007b6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	daf2      	bge.n	8007b28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2210      	movs	r2, #16
 8007b4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b58:	d901      	bls.n	8007b5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e006      	b.n	8007b6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f003 0310 	and.w	r3, r3, #16
 8007b66:	2b10      	cmp	r3, #16
 8007b68:	d0f0      	beq.n	8007b4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	460b      	mov	r3, r1
 8007b82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	78fb      	ldrb	r3, [r7, #3]
 8007b92:	68f9      	ldr	r1, [r7, #12]
 8007b94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b085      	sub	sp, #20
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007bc4:	f023 0303 	bic.w	r3, r3, #3
 8007bc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bd8:	f043 0302 	orr.w	r3, r3, #2
 8007bdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	f003 0301 	and.w	r3, r3, #1
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	3301      	adds	r3, #1
 8007c18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c20:	d901      	bls.n	8007c26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e01b      	b.n	8007c5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	daf2      	bge.n	8007c14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f043 0201 	orr.w	r2, r3, #1
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3301      	adds	r3, #1
 8007c42:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c4a:	d901      	bls.n	8007c50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e006      	b.n	8007c5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d0f0      	beq.n	8007c3e <USB_CoreReset+0x36>

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <memset>:
 8007c6a:	4402      	add	r2, r0
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d100      	bne.n	8007c74 <memset+0xa>
 8007c72:	4770      	bx	lr
 8007c74:	f803 1b01 	strb.w	r1, [r3], #1
 8007c78:	e7f9      	b.n	8007c6e <memset+0x4>
	...

08007c7c <strcasecmp>:
 8007c7c:	b530      	push	{r4, r5, lr}
 8007c7e:	4d0b      	ldr	r5, [pc, #44]	@ (8007cac <strcasecmp+0x30>)
 8007c80:	4604      	mov	r4, r0
 8007c82:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c86:	5cea      	ldrb	r2, [r5, r3]
 8007c88:	f002 0203 	and.w	r2, r2, #3
 8007c8c:	2a01      	cmp	r2, #1
 8007c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c92:	5ca8      	ldrb	r0, [r5, r2]
 8007c94:	f000 0003 	and.w	r0, r0, #3
 8007c98:	bf08      	it	eq
 8007c9a:	3320      	addeq	r3, #32
 8007c9c:	2801      	cmp	r0, #1
 8007c9e:	bf08      	it	eq
 8007ca0:	3220      	addeq	r2, #32
 8007ca2:	1a98      	subs	r0, r3, r2
 8007ca4:	d101      	bne.n	8007caa <strcasecmp+0x2e>
 8007ca6:	2a00      	cmp	r2, #0
 8007ca8:	d1eb      	bne.n	8007c82 <strcasecmp+0x6>
 8007caa:	bd30      	pop	{r4, r5, pc}
 8007cac:	08007d69 	.word	0x08007d69

08007cb0 <__libc_init_array>:
 8007cb0:	b570      	push	{r4, r5, r6, lr}
 8007cb2:	4d0d      	ldr	r5, [pc, #52]	@ (8007ce8 <__libc_init_array+0x38>)
 8007cb4:	4c0d      	ldr	r4, [pc, #52]	@ (8007cec <__libc_init_array+0x3c>)
 8007cb6:	1b64      	subs	r4, r4, r5
 8007cb8:	10a4      	asrs	r4, r4, #2
 8007cba:	2600      	movs	r6, #0
 8007cbc:	42a6      	cmp	r6, r4
 8007cbe:	d109      	bne.n	8007cd4 <__libc_init_array+0x24>
 8007cc0:	4d0b      	ldr	r5, [pc, #44]	@ (8007cf0 <__libc_init_array+0x40>)
 8007cc2:	4c0c      	ldr	r4, [pc, #48]	@ (8007cf4 <__libc_init_array+0x44>)
 8007cc4:	f000 f818 	bl	8007cf8 <_init>
 8007cc8:	1b64      	subs	r4, r4, r5
 8007cca:	10a4      	asrs	r4, r4, #2
 8007ccc:	2600      	movs	r6, #0
 8007cce:	42a6      	cmp	r6, r4
 8007cd0:	d105      	bne.n	8007cde <__libc_init_array+0x2e>
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}
 8007cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd8:	4798      	blx	r3
 8007cda:	3601      	adds	r6, #1
 8007cdc:	e7ee      	b.n	8007cbc <__libc_init_array+0xc>
 8007cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ce2:	4798      	blx	r3
 8007ce4:	3601      	adds	r6, #1
 8007ce6:	e7f2      	b.n	8007cce <__libc_init_array+0x1e>
 8007ce8:	08007e74 	.word	0x08007e74
 8007cec:	08007e74 	.word	0x08007e74
 8007cf0:	08007e74 	.word	0x08007e74
 8007cf4:	08007e78 	.word	0x08007e78

08007cf8 <_init>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	bf00      	nop
 8007cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfe:	bc08      	pop	{r3}
 8007d00:	469e      	mov	lr, r3
 8007d02:	4770      	bx	lr

08007d04 <_fini>:
 8007d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d06:	bf00      	nop
 8007d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0a:	bc08      	pop	{r3}
 8007d0c:	469e      	mov	lr, r3
 8007d0e:	4770      	bx	lr
